# Generated from grammars-v4/plsql/PlSqlParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02f8")
        buf.write("\u2151\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2")
        buf.write("\t\u01e2\4\u01e3\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5")
        buf.write("\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9")
        buf.write("\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec")
        buf.write("\4\u01ed\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0")
        buf.write("\t\u01f0\4\u01f1\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3")
        buf.write("\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7")
        buf.write("\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa")
        buf.write("\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe")
        buf.write("\t\u01fe\4\u01ff\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201")
        buf.write("\4\u0202\t\u0202\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205")
        buf.write("\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208")
        buf.write("\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c")
        buf.write("\t\u020c\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f")
        buf.write("\4\u0210\t\u0210\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213")
        buf.write("\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216")
        buf.write("\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a")
        buf.write("\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d")
        buf.write("\4\u021e\t\u021e\4\u021f\t\u021f\3\2\3\2\5\2\u0441\n\2")
        buf.write("\3\2\5\2\u0444\n\2\7\2\u0446\n\2\f\2\16\2\u0449\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("\u0473\n\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u047f\n\5\3\5\7\5\u0482\n\5\f\5\16\5\u0485\13\5\3\5\3")
        buf.write("\5\5\5\u0489\n\5\3\5\3\5\3\6\3\6\3\6\5\6\u0490\n\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u0496\n\6\3\6\6\6\u0499\n\6\r\6\16\6")
        buf.write("\u049a\3\6\3\6\5\6\u049f\n\6\3\6\3\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u04a7\n\6\f\6\16\6\u04aa\13\6\3\6\5\6\u04ad\n\6\3\6")
        buf.write("\3\6\5\6\u04b1\n\6\3\6\5\6\u04b4\n\6\3\6\3\6\5\6\u04b8")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u04bd\n\6\3\6\3\6\3\7\3\7\5\7\u04c3")
        buf.write("\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u04cc\n\b\3\b\5\b")
        buf.write("\u04cf\n\b\3\b\3\b\3\t\3\t\5\t\u04d5\n\t\3\n\3\n\3\n\3")
        buf.write("\n\3\n\7\n\u04dc\n\n\f\n\16\n\u04df\13\n\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\f\3\f\3\f\5\f\u04eb\n\f\3\f\3\f")
        buf.write("\3\f\5\f\u04f0\n\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u04fa\n\r\3\r\5\r\u04fd\n\r\3\r\7\r\u0500\n\r\f\r\16")
        buf.write("\r\u0503\13\r\3\r\3\r\5\r\u0507\n\r\3\r\3\r\3\16\3\16")
        buf.write("\3\16\5\16\u050e\n\16\3\16\3\16\3\16\3\16\5\16\u0514\n")
        buf.write("\16\3\16\3\16\5\16\u0518\n\16\3\16\3\16\7\16\u051c\n\16")
        buf.write("\f\16\16\16\u051f\13\16\3\16\3\16\5\16\u0523\n\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\5\17\u052a\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\5\17\u0531\n\17\3\17\3\17\3\17\7\17\u0536\n\17")
        buf.write("\f\17\16\17\u0539\13\17\3\17\3\17\5\17\u053d\n\17\3\17")
        buf.write("\3\17\5\17\u0541\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u054d\n\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\7\21\u0555\n\21\f\21\16\21\u0558\13\21\3\21")
        buf.write("\3\21\5\21\u055c\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\7\22\u0566\n\22\f\22\16\22\u0569\13\22\3\22\3")
        buf.write("\22\5\22\u056d\n\22\3\22\3\22\3\22\5\22\u0572\n\22\3\22")
        buf.write("\5\22\u0575\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\5\23\u0582\n\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\5\25\u058e\n\25\3\25\7")
        buf.write("\25\u0591\n\25\f\25\16\25\u0594\13\25\3\25\3\25\5\25\u0598")
        buf.write("\n\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u05a2")
        buf.write("\n\26\f\26\16\26\u05a5\13\26\3\26\3\26\5\26\u05a9\n\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u05b1\n\26\f\26\16")
        buf.write("\26\u05b4\13\26\3\26\5\26\u05b7\n\26\3\26\3\26\5\26\u05bb")
        buf.write("\n\26\3\26\5\26\u05be\n\26\3\26\3\26\5\26\u05c2\n\26\3")
        buf.write("\26\3\26\3\26\5\26\u05c7\n\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u05d1\n\27\f\27\16\27\u05d4\13\27")
        buf.write("\3\27\3\27\5\27\u05d8\n\27\3\27\3\27\5\27\u05dc\n\27\3")
        buf.write("\27\5\27\u05df\n\27\3\27\3\27\3\27\5\27\u05e4\n\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\5\30\u05eb\n\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u05f3\n\30\f\30\16\30\u05f6\13\30\3")
        buf.write("\30\3\30\5\30\u05fa\n\30\3\30\5\30\u05fd\n\30\3\30\3\30")
        buf.write("\5\30\u0601\n\30\3\30\5\30\u0604\n\30\3\30\3\30\3\30\5")
        buf.write("\30\u0609\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u061b\n")
        buf.write("\32\3\32\7\32\u061e\n\32\f\32\16\32\u0621\13\32\3\32\3")
        buf.write("\32\5\32\u0625\n\32\5\32\u0627\n\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\5\33\u062e\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u0635")
        buf.write("\n\33\3\33\5\33\u0638\n\33\3\33\5\33\u063b\n\33\3\33\5")
        buf.write("\33\u063e\n\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\7\34")
        buf.write("\u0647\n\34\f\34\16\34\u064a\13\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\5\36\u0655\n\36\3\36\3\36\5")
        buf.write("\36\u0659\n\36\3\36\5\36\u065c\n\36\3\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \5 \u0665\n \3!\3!\3!\3!\7!\u066b\n!\f!\16!\u066e")
        buf.write("\13!\3!\3!\3!\3!\3!\5!\u0675\n!\3!\5!\u0678\n!\3\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u067f\n\"\3#\3#\5#\u0683\n#\3$\3$\3$")
        buf.write("\5$\u0688\n$\3$\6$\u068b\n$\r$\16$\u068c\3$\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u06b6")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u06d2\n&\3\'\3\'\3\'\7")
        buf.write("\'\u06d7\n\'\f\'\16\'\u06da\13\'\3\'\3\'\5\'\u06de\n\'")
        buf.write("\3\'\3\'\3(\3(\3(\5(\u06e5\n(\3)\3)\3)\3)\3)\3*\3*\6*")
        buf.write("\u06ee\n*\r*\16*\u06ef\3+\3+\3+\3,\3,\3,\5,\u06f8\n,\3")
        buf.write(",\3,\5,\u06fc\n,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0708")
        buf.write("\n-\3-\5-\u070b\n-\3-\3-\3.\3.\5.\u0711\n.\3.\5.\u0714")
        buf.write("\n.\3.\7.\u0717\n.\f.\16.\u071a\13.\3.\3.\5.\u071e\n.")
        buf.write("\3/\3/\5/\u0722\n/\3/\3/\3/\3/\3/\3/\7/\u072a\n/\f/\16")
        buf.write("/\u072d\13/\3/\3/\3\60\3\60\3\60\7\60\u0734\n\60\f\60")
        buf.write("\16\60\u0737\13\60\3\61\3\61\3\61\5\61\u073c\n\61\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0745\n\62\f\62\16")
        buf.write("\62\u0748\13\62\3\62\3\62\5\62\u074c\n\62\3\63\3\63\5")
        buf.write("\63\u0750\n\63\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0758")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0760\n\65\3")
        buf.write("\65\3\65\3\65\5\65\u0765\n\65\3\65\5\65\u0768\n\65\5\65")
        buf.write("\u076a\n\65\3\66\5\66\u076d\n\66\3\66\3\66\3\66\3\66\3")
        buf.write("\67\3\67\3\67\5\67\u0776\n\67\3\67\3\67\3\67\5\67\u077b")
        buf.write("\n\67\3\67\3\67\38\38\38\58\u0782\n8\38\58\u0785\n8\3")
        buf.write("9\59\u0788\n9\39\39\59\u078c\n9\39\59\u078f\n9\39\39\3")
        buf.write("9\39\79\u0795\n9\f9\169\u0798\139\39\39\59\u079c\n9\3")
        buf.write("9\79\u079f\n9\f9\169\u07a2\139\3:\3:\3:\3:\5:\u07a8\n")
        buf.write(":\3;\3;\3;\3<\3<\3<\3<\3<\5<\u07b2\n<\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3>\3>\3>\3>\6>\u07c0\n>\r>\16>\u07c1\3>\3>\3?")
        buf.write("\3?\5?\u07c8\n?\3@\3@\3@\3@\3A\3A\3A\3A\5A\u07d2\nA\3")
        buf.write("B\3B\3B\3B\3B\3B\7B\u07da\nB\fB\16B\u07dd\13B\3B\3B\3")
        buf.write("B\3B\5B\u07e3\nB\3B\5B\u07e6\nB\3B\3B\3B\5B\u07eb\nB\3")
        buf.write("C\3C\3C\3C\3C\3C\7C\u07f3\nC\fC\16C\u07f6\13C\3C\3C\5")
        buf.write("C\u07fa\nC\3C\3C\3C\3C\3C\5C\u0801\nC\3C\5C\u0804\nC\3")
        buf.write("C\3C\3C\5C\u0809\nC\3D\5D\u080c\nD\3D\5D\u080f\nD\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u081e\nD\fD\16D")
        buf.write("\u0821\13D\3D\3D\5D\u0825\nD\3D\3D\3D\3D\3D\3D\3D\5D\u082e")
        buf.write("\nD\3D\5D\u0831\nD\3D\3D\3D\5D\u0836\nD\3E\5E\u0839\n")
        buf.write("E\3E\3E\3F\3F\3F\5F\u0840\nF\3F\5F\u0843\nF\3G\3G\3G\3")
        buf.write("G\3H\5H\u084a\nH\3H\6H\u084d\nH\rH\16H\u084e\3H\3H\5H")
        buf.write("\u0853\nH\3I\3I\3I\5I\u0858\nI\3J\3J\3J\5J\u085d\nJ\3")
        buf.write("K\3K\3K\3K\3K\3K\7K\u0865\nK\fK\16K\u0868\13K\3K\3K\3")
        buf.write("K\5K\u086d\nK\3L\3L\3L\3L\3L\3L\7L\u0875\nL\fL\16L\u0878")
        buf.write("\13L\3L\3L\5L\u087c\nL\3L\3L\3L\3L\3L\5L\u0883\nL\3L\3")
        buf.write("L\3L\3L\5L\u0889\nL\3L\3L\5L\u088d\nL\3M\5M\u0890\nM\3")
        buf.write("M\5M\u0893\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7")
        buf.write("M\u08a2\nM\fM\16M\u08a5\13M\3M\3M\5M\u08a9\nM\3M\3M\3")
        buf.write("M\3M\3M\3M\5M\u08b1\nM\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\7")
        buf.write("O\u08bd\nO\fO\16O\u08c0\13O\3O\3O\3P\3P\5P\u08c6\nP\3")
        buf.write("Q\3Q\3Q\3R\3R\3R\3R\3R\3S\3S\3S\3S\6S\u08d4\nS\rS\16S")
        buf.write("\u08d5\3S\3S\3T\3T\3T\3T\3T\7T\u08df\nT\fT\16T\u08e2\13")
        buf.write("T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\5U\u08f6\nU\3V\3V\3V\3V\3W\3W\5W\u08fe\nW\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\5W\u0907\nW\3W\3W\5W\u090b\nW\3W\3W\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\6")
        buf.write("Y\u0923\nY\rY\16Y\u0924\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z")
        buf.write("\3Z\3Z\3Z\3Z\3Z\3Z\6Z\u0937\nZ\rZ\16Z\u0938\3Z\3Z\3Z\5")
        buf.write("Z\u093e\nZ\3Z\6Z\u0941\nZ\rZ\16Z\u0942\3Z\3Z\3Z\5Z\u0948")
        buf.write("\nZ\3[\3[\3[\5[\u094d\n[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\5")
        buf.write("]\u0957\n]\3^\3^\3^\3^\3_\3_\3_\5_\u0960\n_\3_\3_\3_\3")
        buf.write("`\3`\3`\3a\5a\u0969\na\3a\6a\u096c\na\ra\16a\u096d\3a")
        buf.write("\3a\3a\5a\u0973\na\3a\6a\u0976\na\ra\16a\u0977\7a\u097a")
        buf.write("\na\fa\16a\u097d\13a\5a\u097f\na\3b\3b\3b\3b\5b\u0985")
        buf.write("\nb\3c\3c\3c\3d\3d\3d\3e\3e\3e\3f\3f\3f\5f\u0993\nf\3")
        buf.write("f\6f\u0996\nf\rf\16f\u0997\5f\u099a\nf\3f\5f\u099d\nf")
        buf.write("\3g\3g\3g\3g\3g\3g\5g\u09a5\ng\3g\3g\3g\3g\3g\3g\3g\3")
        buf.write("g\3g\3g\3g\5g\u09b2\ng\5g\u09b4\ng\3g\3g\5g\u09b8\ng\3")
        buf.write("g\3g\3g\3g\3g\3g\5g\u09c0\ng\5g\u09c2\ng\5g\u09c4\ng\5")
        buf.write("g\u09c6\ng\3h\3h\5h\u09ca\nh\3h\6h\u09cd\nh\rh\16h\u09ce")
        buf.write("\3h\3h\3i\3i\3i\3i\3i\3i\5i\u09d9\ni\3j\3j\3j\3j\3j\3")
        buf.write("k\3k\3k\3k\5k\u09e4\nk\5k\u09e6\nk\3l\3l\3l\3l\3l\3m\3")
        buf.write("m\5m\u09ef\nm\3m\3m\3m\3m\5m\u09f5\nm\5m\u09f7\nm\6m\u09f9")
        buf.write("\nm\rm\16m\u09fa\3m\3m\5m\u09ff\nm\3m\3m\5m\u0a03\nm\3")
        buf.write("m\3m\6m\u0a07\nm\rm\16m\u0a08\3m\3m\3m\5m\u0a0e\nm\3m")
        buf.write("\3m\3m\5m\u0a13\nm\3m\3m\3m\5m\u0a18\nm\3m\5m\u0a1b\n")
        buf.write("m\3m\3m\3n\3n\3n\3n\3o\3o\3o\5o\u0a26\no\3o\5o\u0a29\n")
        buf.write("o\3o\5o\u0a2c\no\3o\5o\u0a2f\no\3o\3o\3o\5o\u0a34\no\3")
        buf.write("o\3o\3o\5o\u0a39\no\3p\3p\5p\u0a3d\np\3q\3q\5q\u0a41\n")
        buf.write("q\3q\3q\7q\u0a45\nq\fq\16q\u0a48\13q\3q\5q\u0a4b\nq\6")
        buf.write("q\u0a4d\nq\rq\16q\u0a4e\3q\3q\3r\3r\3r\3r\3r\3r\3r\3r")
        buf.write("\5r\u0a5b\nr\3r\6r\u0a5e\nr\rr\16r\u0a5f\3r\5r\u0a63\n")
        buf.write("r\3r\3r\5r\u0a67\nr\3r\3r\5r\u0a6b\nr\3r\3r\3r\5r\u0a70")
        buf.write("\nr\6r\u0a72\nr\rr\16r\u0a73\3r\3r\7r\u0a78\nr\fr\16r")
        buf.write("\u0a7b\13r\3s\3s\5s\u0a7f\ns\3s\5s\u0a82\ns\3s\3s\3s\3")
        buf.write("s\3s\3s\5s\u0a8a\ns\3s\5s\u0a8d\ns\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\5t\u0a96\nt\3t\3t\5t\u0a9a\nt\5t\u0a9c\nt\3u\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0aaf\nu\3")
        buf.write("u\3u\3u\3u\5u\u0ab5\nu\3u\6u\u0ab8\nu\ru\16u\u0ab9\3u")
        buf.write("\3u\3u\5u\u0abf\nu\5u\u0ac1\nu\3v\3v\5v\u0ac5\nv\3v\3")
        buf.write("v\3v\5v\u0aca\nv\3v\6v\u0acd\nv\rv\16v\u0ace\3v\3v\3v")
        buf.write("\3v\3v\3v\5v\u0ad7\nv\3v\6v\u0ada\nv\rv\16v\u0adb\3v\3")
        buf.write("v\3v\3v\3v\3v\3v\3v\5v\u0ae6\nv\3v\5v\u0ae9\nv\3w\5w\u0aec")
        buf.write("\nw\3w\3w\3w\3w\3w\3w\6w\u0af4\nw\rw\16w\u0af5\3x\3x\5")
        buf.write("x\u0afa\nx\3x\3x\3x\5x\u0aff\nx\3x\3x\3y\3y\3y\5y\u0b06")
        buf.write("\ny\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\7y\u0b17")
        buf.write("\ny\fy\16y\u0b1a\13y\3z\3z\3z\3{\3{\3|\3|\3|\3|\3|\3|")
        buf.write("\3|\5|\u0b28\n|\5|\u0b2a\n|\3}\3}\3}\3}\3}\3~\3~\3~\3")
        buf.write("\177\3\177\3\177\3\177\5\177\u0b38\n\177\3\177\5\177\u0b3b")
        buf.write("\n\177\3\177\5\177\u0b3e\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0b48")
        buf.write("\n\u0081\3\u0081\5\u0081\u0b4b\n\u0081\3\u0081\5\u0081")
        buf.write("\u0b4e\n\u0081\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write("\5\u0083\u0b55\n\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\5\u0084\u0b5b\n\u0084\3\u0084\3\u0084\3\u0085\5\u0085")
        buf.write("\u0b60\n\u0085\3\u0085\3\u0085\5\u0085\u0b64\n\u0085\3")
        buf.write("\u0085\5\u0085\u0b67\n\u0085\3\u0085\5\u0085\u0b6a\n\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0b70\n\u0086")
        buf.write("\3\u0086\6\u0086\u0b73\n\u0086\r\u0086\16\u0086\u0b74")
        buf.write("\3\u0086\5\u0086\u0b78\n\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0b7c\n\u0086\3\u0086\3\u0086\5\u0086\u0b80\n\u0086\3")
        buf.write("\u0086\5\u0086\u0b83\n\u0086\3\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0b8a\n\u0087\3\u0087\5\u0087\u0b8d")
        buf.write("\n\u0087\5\u0087\u0b8f\n\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\5\u0088\u0b94\n\u0088\3\u0089\3\u0089\3\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\5\u008a\u0b9c\n\u008a\5\u008a\u0b9e\n")
        buf.write("\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\6\u008b\u0bab")
        buf.write("\n\u008b\r\u008b\16\u008b\u0bac\5\u008b\u0baf\n\u008b")
        buf.write("\3\u008b\5\u008b\u0bb2\n\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u0bb6\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0bc0\n\u008b\7\u008b")
        buf.write("\u0bc2\n\u008b\f\u008b\16\u008b\u0bc5\13\u008b\3\u008b")
        buf.write("\3\u008b\5\u008b\u0bc9\n\u008b\3\u008b\6\u008b\u0bcc\n")
        buf.write("\u008b\r\u008b\16\u008b\u0bcd\3\u008b\3\u008b\5\u008b")
        buf.write("\u0bd2\n\u008b\5\u008b\u0bd4\n\u008b\3\u008b\5\u008b\u0bd7")
        buf.write("\n\u008b\7\u008b\u0bd9\n\u008b\f\u008b\16\u008b\u0bdc")
        buf.write("\13\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\3\u008d\5\u008d\u0be5\n\u008d\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\5\u008e\u0bed\n\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0bf5")
        buf.write("\n\u008e\3\u008e\5\u008e\u0bf8\n\u008e\3\u008e\5\u008e")
        buf.write("\u0bfb\n\u008e\3\u008e\5\u008e\u0bfe\n\u008e\3\u008e\5")
        buf.write("\u008e\u0c01\n\u008e\5\u008e\u0c03\n\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\6\u008e\u0c0a\n\u008e\r\u008e")
        buf.write("\16\u008e\u0c0b\7\u008e\u0c0e\n\u008e\f\u008e\16\u008e")
        buf.write("\u0c11\13\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0c16")
        buf.write("\n\u008e\3\u008e\5\u008e\u0c19\n\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u0c1d\n\u008e\3\u008e\3\u008e\3\u008e\5\u008e")
        buf.write("\u0c22\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\5\u008f\u0c31\n\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\5\u008f\u0c37\n\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u0c3c\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f")
        buf.write("\u0c41\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0c46\n")
        buf.write("\u008f\3\u008f\3\u008f\3\u008f\6\u008f\u0c4b\n\u008f\r")
        buf.write("\u008f\16\u008f\u0c4c\5\u008f\u0c4f\n\u008f\3\u0090\3")
        buf.write("\u0090\3\u0090\5\u0090\u0c54\n\u0090\3\u0090\3\u0090\3")
        buf.write("\u0090\3\u0090\3\u0090\5\u0090\u0c5b\n\u0090\3\u0090\3")
        buf.write("\u0090\5\u0090\u0c5f\n\u0090\3\u0090\3\u0090\3\u0091\3")
        buf.write("\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c69\n")
        buf.write("\u0091\3\u0091\3\u0091\5\u0091\u0c6d\n\u0091\3\u0091\5")
        buf.write("\u0091\u0c70\n\u0091\3\u0091\5\u0091\u0c73\n\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0c79\n\u0091\3\u0091")
        buf.write("\5\u0091\u0c7c\n\u0091\3\u0091\5\u0091\u0c7f\n\u0091\3")
        buf.write("\u0091\5\u0091\u0c82\n\u0091\3\u0091\5\u0091\u0c85\n\u0091")
        buf.write("\3\u0091\5\u0091\u0c88\n\u0091\3\u0091\5\u0091\u0c8b\n")
        buf.write("\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u0c92\n\u0091\3\u0091\5\u0091\u0c95\n\u0091\3\u0091\5")
        buf.write("\u0091\u0c98\n\u0091\3\u0091\6\u0091\u0c9b\n\u0091\r\u0091")
        buf.write("\16\u0091\u0c9c\5\u0091\u0c9f\n\u0091\3\u0091\5\u0091")
        buf.write("\u0ca2\n\u0091\3\u0091\5\u0091\u0ca5\n\u0091\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\5\u0092\u0cab\n\u0092\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092\u0cb3\n")
        buf.write("\u0092\r\u0092\16\u0092\u0cb4\3\u0092\3\u0092\3\u0093")
        buf.write("\3\u0093\5\u0093\u0cbb\n\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u0cbf\n\u0093\3\u0093\5\u0093\u0cc2\n\u0093\3\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cc9\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\5\u0094\u0cce\n\u0094\3\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cd5\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cdb\n\u0094\5")
        buf.write("\u0094\u0cdd\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5")
        buf.write("\u0094\u0ce3\n\u0094\3\u0095\3\u0095\5\u0095\u0ce7\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0cee")
        buf.write("\n\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0cf3\n\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u0cf8\n\u0096\3\u0096")
        buf.write("\3\u0096\5\u0096\u0cfc\n\u0096\3\u0096\6\u0096\u0cff\n")
        buf.write("\u0096\r\u0096\16\u0096\u0d00\3\u0096\3\u0096\5\u0096")
        buf.write("\u0d05\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0d0b\n\u0096\3\u0096\5\u0096\u0d0e\n\u0096\3\u0096\5")
        buf.write("\u0096\u0d11\n\u0096\3\u0096\5\u0096\u0d14\n\u0096\3\u0096")
        buf.write("\5\u0096\u0d17\n\u0096\3\u0096\5\u0096\u0d1a\n\u0096\3")
        buf.write("\u0096\5\u0096\u0d1d\n\u0096\3\u0096\3\u0096\3\u0096\3")
        buf.write("\u0096\3\u0096\5\u0096\u0d24\n\u0096\3\u0096\5\u0096\u0d27")
        buf.write("\n\u0096\3\u0096\5\u0096\u0d2a\n\u0096\3\u0096\6\u0096")
        buf.write("\u0d2d\n\u0096\r\u0096\16\u0096\u0d2e\5\u0096\u0d31\n")
        buf.write("\u0096\3\u0096\5\u0096\u0d34\n\u0096\3\u0096\5\u0096\u0d37")
        buf.write("\n\u0096\3\u0097\3\u0097\5\u0097\u0d3b\n\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\6\u0097\u0d41\n\u0097\r\u0097")
        buf.write("\16\u0097\u0d42\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d4e\n\u0098")
        buf.write("\3\u0099\3\u0099\5\u0099\u0d52\n\u0099\3\u0099\3\u0099")
        buf.write("\5\u0099\u0d56\n\u0099\3\u0099\5\u0099\u0d59\n\u0099\3")
        buf.write("\u0099\6\u0099\u0d5c\n\u0099\r\u0099\16\u0099\u0d5d\3")
        buf.write("\u0099\5\u0099\u0d61\n\u0099\3\u0099\3\u0099\3\u0099\5")
        buf.write("\u0099\u0d66\n\u0099\3\u009a\5\u009a\u0d69\n\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u0d74\n\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u0d7a\n\u009b\3\u009b\5\u009b\u0d7d\n")
        buf.write("\u009b\3\u009b\5\u009b\u0d80\n\u009b\3\u009b\5\u009b\u0d83")
        buf.write("\n\u009b\3\u009b\5\u009b\u0d86\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0d8d\n\u009b\3\u009b")
        buf.write("\5\u009b\u0d90\n\u009b\3\u009b\5\u009b\u0d93\n\u009b\3")
        buf.write("\u009b\6\u009b\u0d96\n\u009b\r\u009b\16\u009b\u0d97\5")
        buf.write("\u009b\u0d9a\n\u009b\3\u009b\5\u009b\u0d9d\n\u009b\3\u009b")
        buf.write("\5\u009b\u0da0\n\u009b\3\u009c\5\u009c\u0da3\n\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0daa\n")
        buf.write("\u009c\6\u009c\u0dac\n\u009c\r\u009c\16\u009c\u0dad\3")
        buf.write("\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\5\u009e\u0dbe\n\u009e\3\u009e\6\u009e\u0dc1\n\u009e\r")
        buf.write("\u009e\16\u009e\u0dc2\3\u009e\5\u009e\u0dc6\n\u009e\5")
        buf.write("\u009e\u0dc8\n\u009e\3\u009e\3\u009e\5\u009e\u0dcc\n\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\5\u009e\u0dd5\n\u009e\3\u009e\3\u009e\5\u009e\u0dd9\n")
        buf.write("\u009e\3\u009e\3\u009e\5\u009e\u0ddd\n\u009e\3\u009e\3")
        buf.write("\u009e\5\u009e\u0de1\n\u009e\3\u009e\6\u009e\u0de4\n\u009e")
        buf.write("\r\u009e\16\u009e\u0de5\3\u009e\3\u009e\3\u009e\5\u009e")
        buf.write("\u0deb\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e")
        buf.write("\u0df1\n\u009e\3\u009e\5\u009e\u0df4\n\u009e\3\u009e\5")
        buf.write("\u009e\u0df7\n\u009e\6\u009e\u0df9\n\u009e\r\u009e\16")
        buf.write("\u009e\u0dfa\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\5")
        buf.write("\u009f\u0e02\n\u009f\3\u009f\3\u009f\5\u009f\u0e06\n\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\5\u009f\u0e0b\n\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\5\u009f\u0e10\n\u009f\3\u009f\5\u009f")
        buf.write("\u0e13\n\u009f\3\u009f\5\u009f\u0e16\n\u009f\3\u009f\5")
        buf.write("\u009f\u0e19\n\u009f\5\u009f\u0e1b\n\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u0e1f\n\u009f\3\u009f\5\u009f\u0e22\n\u009f\3")
        buf.write("\u00a0\3\u00a0\5\u00a0\u0e26\n\u00a0\3\u00a1\3\u00a1\3")
        buf.write("\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0e2e\n\u00a1\5")
        buf.write("\u00a1\u0e30\n\u00a1\5\u00a1\u0e32\n\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0e35\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\6\u00a2\u0e3e\n\u00a2\r\u00a2\16\u00a2")
        buf.write("\u0e3f\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0e54")
        buf.write("\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\6\u00a3")
        buf.write("\u0e5b\n\u00a3\r\u00a3\16\u00a3\u0e5c\3\u00a3\3\u00a3")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\6\u00a5\u0e69\n\u00a5\r\u00a5\16\u00a5\u0e6a")
        buf.write("\3\u00a6\5\u00a6\u0e6e\n\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0e72\n\u00a6\3\u00a7\5\u00a7\u0e75\n\u00a7\3\u00a7\3")
        buf.write("\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0e80\n\u00a8\3\u00a9\3\u00a9\3\u00aa")
        buf.write("\3\u00aa\5\u00aa\u0e86\n\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\5\u00aa\u0e8c\n\u00aa\7\u00aa\u0e8e\n\u00aa\f")
        buf.write("\u00aa\16\u00aa\u0e91\13\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0e95\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\5\u00aa\u0e9c\n\u00aa\7\u00aa\u0e9e\n\u00aa\f\u00aa\16")
        buf.write("\u00aa\u0ea1\13\u00aa\5\u00aa\u0ea3\n\u00aa\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ea9\n\u00ab\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\5\u00ab\u0eae\n\u00ab\6\u00ab\u0eb0\n\u00ab")
        buf.write("\r\u00ab\16\u00ab\u0eb1\3\u00ab\3\u00ab\5\u00ab\u0eb6")
        buf.write("\n\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0ebb\n\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac")
        buf.write("\u0ec3\n\u00ac\6\u00ac\u0ec5\n\u00ac\r\u00ac\16\u00ac")
        buf.write("\u0ec6\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\6\u00ad")
        buf.write("\u0ed5\n\u00ad\r\u00ad\16\u00ad\u0ed6\3\u00ad\5\u00ad")
        buf.write("\u0eda\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae")
        buf.write("\u0ee0\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0ee5\n")
        buf.write("\u00af\3\u00af\5\u00af\u0ee8\n\u00af\3\u00b0\5\u00b0\u0eeb")
        buf.write("\n\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\5\u00b1\u0ef1")
        buf.write("\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4")
        buf.write("\3\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u0f0d\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\5\u00b6\u0f16\n\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u0f1b\n\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u0f20\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u0f26\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u0f2d\n\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u0f32\n\u00b6\5\u00b6\u0f34\n\u00b6\3\u00b7\3")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\5\u00b8\u0f45\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u0f4d\n\u00b8\6\u00b8\u0f4f\n")
        buf.write("\u00b8\r\u00b8\16\u00b8\u0f50\5\u00b8\u0f53\n\u00b8\3")
        buf.write("\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9")
        buf.write("\u0f62\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\6\u00ba\u0f75")
        buf.write("\n\u00ba\r\u00ba\16\u00ba\u0f76\3\u00ba\5\u00ba\u0f7a")
        buf.write("\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0f80")
        buf.write("\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0f86")
        buf.write("\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\6\u00bd\u0f8e\n\u00bd\r\u00bd\16\u00bd\u0f8f\5\u00bd")
        buf.write("\u0f92\n\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0f97\n")
        buf.write("\u00be\3\u00be\3\u00be\5\u00be\u0f9b\n\u00be\3\u00be\3")
        buf.write("\u00be\5\u00be\u0f9f\n\u00be\6\u00be\u0fa1\n\u00be\r\u00be")
        buf.write("\16\u00be\u0fa2\3\u00be\5\u00be\u0fa6\n\u00be\3\u00bf")
        buf.write("\3\u00bf\5\u00bf\u0faa\n\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\5\u00bf\u0faf\n\u00bf\3\u00bf\6\u00bf\u0fb2\n\u00bf\r")
        buf.write("\u00bf\16\u00bf\u0fb3\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\5\u00bf\u0fbc\n\u00bf\3\u00bf\5\u00bf")
        buf.write("\u0fbf\n\u00bf\3\u00bf\5\u00bf\u0fc2\n\u00bf\3\u00bf\5")
        buf.write("\u00bf\u0fc5\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0fc9\n\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\5\u00c0\u0fd2\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u0fda\n\u00c2\3\u00c2\5\u00c2")
        buf.write("\u0fdd\n\u00c2\3\u00c2\5\u00c2\u0fe0\n\u00c2\3\u00c2\5")
        buf.write("\u00c2\u0fe3\n\u00c2\3\u00c2\3\u00c2\6\u00c2\u0fe7\n\u00c2")
        buf.write("\r\u00c2\16\u00c2\u0fe8\5\u00c2\u0feb\n\u00c2\3\u00c2")
        buf.write("\5\u00c2\u0fee\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\5\u00c3\u0ff4\n\u00c3\3\u00c3\5\u00c3\u0ff7\n\u00c3\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\5\u00c4\u0ffc\n\u00c4\3\u00c5\3")
        buf.write("\u00c5\3\u00c5\5\u00c5\u1001\n\u00c5\3\u00c6\3\u00c6\5")
        buf.write("\u00c6\u1005\n\u00c6\3\u00c6\3\u00c6\5\u00c6\u1009\n\u00c6")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u100f\n\u00c7")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\6\u00cd\u1028\n\u00cd\r\u00cd\16\u00cd")
        buf.write("\u1029\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\5\u00ce\u1032\n\u00ce\3\u00ce\6\u00ce\u1035\n\u00ce\r")
        buf.write("\u00ce\16\u00ce\u1036\3\u00ce\3\u00ce\5\u00ce\u103b\n")
        buf.write("\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u1040\n\u00ce\f")
        buf.write("\u00ce\16\u00ce\u1043\13\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\5\u00ce\u104a\n\u00ce\3\u00ce\6\u00ce")
        buf.write("\u104d\n\u00ce\r\u00ce\16\u00ce\u104e\3\u00ce\3\u00ce")
        buf.write("\5\u00ce\u1053\n\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce")
        buf.write("\u1058\n\u00ce\f\u00ce\16\u00ce\u105b\13\u00ce\3\u00ce")
        buf.write("\3\u00ce\5\u00ce\u105f\n\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\5\u00ce\u1066\n\u00ce\3\u00ce\3\u00ce")
        buf.write("\5\u00ce\u106a\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf")
        buf.write("\u106f\n\u00cf\3\u00cf\6\u00cf\u1072\n\u00cf\r\u00cf\16")
        buf.write("\u00cf\u1073\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1079\n\u00cf")
        buf.write("\3\u00d0\3\u00d0\5\u00d0\u107d\n\u00d0\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u1081\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write("\u1086\n\u00d0\3\u00d0\7\u00d0\u1089\n\u00d0\f\u00d0\16")
        buf.write("\u00d0\u108c\13\u00d0\3\u00d0\5\u00d0\u108f\n\u00d0\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\5\u00d1\u1094\n\u00d1\3\u00d1\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u109b\n\u00d1\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\5\u00d2\u10a0\n\u00d2\3\u00d2\3")
        buf.write("\u00d2\5\u00d2\u10a4\n\u00d2\3\u00d2\6\u00d2\u10a7\n\u00d2")
        buf.write("\r\u00d2\16\u00d2\u10a8\3\u00d2\3\u00d2\5\u00d2\u10ad")
        buf.write("\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u10b9\n\u00d4")
        buf.write("\3\u00d4\3\u00d4\5\u00d4\u10bd\n\u00d4\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u10c2\n\u00d5\3\u00d5\3\u00d5\5\u00d5")
        buf.write("\u10c6\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u10cd\n\u00d5\3\u00d6\3\u00d6\3\u00d7\3\u00d7")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u10d7\n\u00d8")
        buf.write("\3\u00d8\5\u00d8\u10da\n\u00d8\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\5\u00d9\u10df\n\u00d9\3\u00d9\6\u00d9\u10e2\n\u00d9\r")
        buf.write("\u00d9\16\u00d9\u10e3\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\3\u00d9\6\u00d9\u10ee\n\u00d9")
        buf.write("\r\u00d9\16\u00d9\u10ef\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\6\u00d9\u10fd\n\u00d9\r\u00d9\16\u00d9\u10fe\5\u00d9")
        buf.write("\u1101\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db")
        buf.write("\u111c\n\u00db\3\u00db\5\u00db\u111f\n\u00db\3\u00db\3")
        buf.write("\u00db\3\u00db\6\u00db\u1124\n\u00db\r\u00db\16\u00db")
        buf.write("\u1125\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\5\u00dc\u113c\n\u00dc\3\u00dc\5\u00dc\u113f\n\u00dc\6")
        buf.write("\u00dc\u1141\n\u00dc\r\u00dc\16\u00dc\u1142\3\u00dd\3")
        buf.write("\u00dd\3\u00de\3\u00de\3\u00de\5\u00de\u114a\n\u00de\5")
        buf.write("\u00de\u114c\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3")
        buf.write("\u00df\3\u00df\5\u00df\u1154\n\u00df\3\u00e0\3\u00e0\5")
        buf.write("\u00e0\u1158\n\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u115d")
        buf.write("\n\u00e0\3\u00e0\5\u00e0\u1160\n\u00e0\3\u00e0\5\u00e0")
        buf.write("\u1163\n\u00e0\3\u00e0\5\u00e0\u1166\n\u00e0\3\u00e1\3")
        buf.write("\u00e1\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u116d\n\u00e2\3")
        buf.write("\u00e2\3\u00e2\3\u00e2\5\u00e2\u1172\n\u00e2\3\u00e2\3")
        buf.write("\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u117a\n")
        buf.write("\u00e3\3\u00e3\5\u00e3\u117d\n\u00e3\3\u00e4\3\u00e4\3")
        buf.write("\u00e4\5\u00e4\u1182\n\u00e4\3\u00e4\5\u00e4\u1185\n\u00e4")
        buf.write("\3\u00e4\3\u00e4\5\u00e4\u1189\n\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\5\u00e4\u118e\n\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\5\u00e4\u1193\n\u00e4\3\u00e4\5\u00e4\u1196\n\u00e4\3")
        buf.write("\u00e4\5\u00e4\u1199\n\u00e4\3\u00e4\5\u00e4\u119c\n\u00e4")
        buf.write("\5\u00e4\u119e\n\u00e4\3\u00e4\7\u00e4\u11a1\n\u00e4\f")
        buf.write("\u00e4\16\u00e4\u11a4\13\u00e4\3\u00e4\5\u00e4\u11a7\n")
        buf.write("\u00e4\3\u00e5\3\u00e5\5\u00e5\u11ab\n\u00e5\3\u00e5\3")
        buf.write("\u00e5\5\u00e5\u11af\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3")
        buf.write("\u00e5\3\u00e5\5\u00e5\u11b6\n\u00e5\3\u00e5\7\u00e5\u11b9")
        buf.write("\n\u00e5\f\u00e5\16\u00e5\u11bc\13\u00e5\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u11c5")
        buf.write("\n\u00e7\3\u00e7\5\u00e7\u11c8\n\u00e7\3\u00e7\5\u00e7")
        buf.write("\u11cb\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\6\u00e7\u11d7")
        buf.write("\n\u00e7\r\u00e7\16\u00e7\u11d8\3\u00e7\3\u00e7\5\u00e7")
        buf.write("\u11dd\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u11e1\n\u00e7\3")
        buf.write("\u00e7\5\u00e7\u11e4\n\u00e7\3\u00e8\3\u00e8\3\u00e9\5")
        buf.write("\u00e9\u11e9\n\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u11ee")
        buf.write("\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9")
        buf.write("\u11f5\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9")
        buf.write("\u11fb\n\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\5\u00eb\u1203\n\u00eb\3\u00ec\3\u00ec\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\7\u00ee\u120d")
        buf.write("\n\u00ee\f\u00ee\16\u00ee\u1210\13\u00ee\3\u00ee\5\u00ee")
        buf.write("\u1213\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u121d\n\u00ee\3\u00ee")
        buf.write("\6\u00ee\u1220\n\u00ee\r\u00ee\16\u00ee\u1221\3\u00ee")
        buf.write("\3\u00ee\5\u00ee\u1226\n\u00ee\3\u00ee\3\u00ee\5\u00ee")
        buf.write("\u122a\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\6\u00ee\u1233\n\u00ee\r\u00ee\16\u00ee")
        buf.write("\u1234\5\u00ee\u1237\n\u00ee\3\u00ef\3\u00ef\3\u00f0\3")
        buf.write("\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\5\u00f2\u1245\n\u00f2\3\u00f2\6\u00f2")
        buf.write("\u1248\n\u00f2\r\u00f2\16\u00f2\u1249\3\u00f2\3\u00f2")
        buf.write("\5\u00f2\u124e\n\u00f2\3\u00f2\5\u00f2\u1251\n\u00f2\3")
        buf.write("\u00f2\5\u00f2\u1254\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5")
        buf.write("\u00f2\u1259\n\u00f2\5\u00f2\u125b\n\u00f2\3\u00f3\3\u00f3")
        buf.write("\5\u00f3\u125f\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1263\n")
        buf.write("\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1269\n")
        buf.write("\u00f3\6\u00f3\u126b\n\u00f3\r\u00f3\16\u00f3\u126c\3")
        buf.write("\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1274\n")
        buf.write("\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1287\n\u00f8")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\5\u00fa\u1292\n\u00fa\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\5\u00fb\u1297\n\u00fb\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\5\u00fc\u129d\n\u00fc\3\u00fd\3\u00fd\5\u00fd")
        buf.write("\u12a1\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\6\u00fd")
        buf.write("\u12a7\n\u00fd\r\u00fd\16\u00fd\u12a8\5\u00fd\u12ab\n")
        buf.write("\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100")
        buf.write("\5\u0100\u12ba\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0102\3\u0102\3\u0102\5\u0102\u12c3\n\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\5\u0102\u12c8\n\u0102\3\u0102\3\u0102")
        buf.write("\5\u0102\u12cc\n\u0102\3\u0102\5\u0102\u12cf\n\u0102\3")
        buf.write("\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u12dd")
        buf.write("\n\u0104\3\u0104\3\u0104\3\u0105\3\u0105\7\u0105\u12e3")
        buf.write("\n\u0105\f\u0105\16\u0105\u12e6\13\u0105\3\u0105\5\u0105")
        buf.write("\u12e9\n\u0105\3\u0105\5\u0105\u12ec\n\u0105\3\u0106\3")
        buf.write("\u0106\3\u0106\3\u0107\6\u0107\u12f2\n\u0107\r\u0107\16")
        buf.write("\u0107\u12f3\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3")
        buf.write("\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1300\n")
        buf.write("\u0108\3\u0109\3\u0109\5\u0109\u1304\n\u0109\3\u0109\3")
        buf.write("\u0109\3\u0109\5\u0109\u1309\n\u0109\3\u0109\5\u0109\u130c")
        buf.write("\n\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1319")
        buf.write("\n\u010a\3\u010a\3\u010a\5\u010a\u131d\n\u010a\3\u010a")
        buf.write("\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1325")
        buf.write("\n\u010b\3\u010b\6\u010b\u1328\n\u010b\r\u010b\16\u010b")
        buf.write("\u1329\3\u010b\3\u010b\5\u010b\u132e\n\u010b\3\u010b\3")
        buf.write("\u010b\5\u010b\u1332\n\u010b\3\u010b\3\u010b\5\u010b\u1336")
        buf.write("\n\u010b\3\u010b\3\u010b\3\u010c\3\u010c\5\u010c\u133c")
        buf.write("\n\u010c\3\u010c\5\u010c\u133f\n\u010c\3\u010c\5\u010c")
        buf.write("\u1342\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e")
        buf.write("\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write("\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write("\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e")
        buf.write("\u135d\n\u010e\3\u010e\3\u010e\6\u010e\u1361\n\u010e\r")
        buf.write("\u010e\16\u010e\u1362\3\u010e\3\u010e\5\u010e\u1367\n")
        buf.write("\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\5\u010f")
        buf.write("\u136e\n\u010f\3\u010f\6\u010f\u1371\n\u010f\r\u010f\16")
        buf.write("\u010f\u1372\3\u010f\3\u010f\3\u0110\3\u0110\5\u0110\u1379")
        buf.write("\n\u0110\3\u0110\3\u0110\5\u0110\u137d\n\u0110\3\u0110")
        buf.write("\5\u0110\u1380\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u1386\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112")
        buf.write("\3\u0112\3\u0112\3\u0112\5\u0112\u138f\n\u0112\3\u0112")
        buf.write("\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1397")
        buf.write("\n\u0113\3\u0113\3\u0113\5\u0113\u139b\n\u0113\3\u0114")
        buf.write("\3\u0114\5\u0114\u139f\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u13a7\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u13b0\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\6\u0116")
        buf.write("\u13b6\n\u0116\r\u0116\16\u0116\u13b7\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\5\u0118\u13d4\n\u0118\3\u0119")
        buf.write("\6\u0119\u13d7\n\u0119\r\u0119\16\u0119\u13d8\3\u011a")
        buf.write("\3\u011a\5\u011a\u13dd\n\u011a\3\u011a\3\u011a\3\u011a")
        buf.write("\3\u011b\3\u011b\5\u011b\u13e4\n\u011b\3\u011b\3\u011b")
        buf.write("\5\u011b\u13e8\n\u011b\3\u011c\3\u011c\5\u011c\u13ec\n")
        buf.write("\u011c\3\u011c\3\u011c\5\u011c\u13f0\n\u011c\3\u011d\3")
        buf.write("\u011d\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\7\u011e\u13fa\n\u011e\f\u011e\16\u011e\u13fd\13\u011e")
        buf.write("\3\u011e\5\u011e\u1400\n\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0121\5\u0121\u140e\n\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\5\u0121\u1414\n\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\5\u0121\u141b\n\u0121\3\u0122")
        buf.write("\3\u0122\3\u0122\5\u0122\u1420\n\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\5\u0122\u142b\n\u0122\3\u0122\5\u0122\u142e\n\u0122\3")
        buf.write("\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1434\n\u0122\5")
        buf.write("\u0122\u1436\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3")
        buf.write("\u0123\3\u0123\3\u0123\5\u0123\u143f\n\u0123\3\u0124\3")
        buf.write("\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\5\u0124\u1449\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124")
        buf.write("\u144e\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write("\3\u0126\3\u0126\3\u0127\3\u0127\3\u0128\3\u0128\3\u0129")
        buf.write("\3\u0129\5\u0129\u145d\n\u0129\3\u012a\3\u012a\5\u012a")
        buf.write("\u1461\n\u012a\3\u012b\5\u012b\u1464\n\u012b\3\u012b\3")
        buf.write("\u012b\5\u012b\u1468\n\u012b\3\u012c\3\u012c\3\u012c\3")
        buf.write("\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\6\u012d\u1474\n\u012d\r\u012d\16\u012d\u1475\5\u012d")
        buf.write("\u1478\n\u012d\3\u012d\3\u012d\5\u012d\u147c\n\u012d\3")
        buf.write("\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u1482\n\u012e\f")
        buf.write("\u012e\16\u012e\u1485\13\u012e\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012f\5\u012f\u148b\n\u012f\3\u012f\6\u012f\u148e\n")
        buf.write("\u012f\r\u012f\16\u012f\u148f\5\u012f\u1492\n\u012f\3")
        buf.write("\u012f\3\u012f\3\u0130\5\u0130\u1497\n\u0130\3\u0130\6")
        buf.write("\u0130\u149a\n\u0130\r\u0130\16\u0130\u149b\3\u0130\3")
        buf.write("\u0130\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u14a4\n")
        buf.write("\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132")
        buf.write("\u14ab\n\u0132\3\u0132\3\u0132\5\u0132\u14af\n\u0132\3")
        buf.write("\u0132\5\u0132\u14b2\n\u0132\3\u0133\3\u0133\3\u0133\3")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u14be\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u14c4\n\u0135\3\u0136\3\u0136\3\u0136\3\u0137")
        buf.write("\3\u0137\3\u0137\3\u0137\5\u0137\u14cd\n\u0137\3\u0137")
        buf.write("\5\u0137\u14d0\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write("\5\u0138\u14d6\n\u0138\3\u0138\6\u0138\u14d9\n\u0138\r")
        buf.write("\u0138\16\u0138\u14da\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write("\5\u0138\u14e1\n\u0138\3\u0138\6\u0138\u14e4\n\u0138\r")
        buf.write("\u0138\16\u0138\u14e5\5\u0138\u14e8\n\u0138\3\u0139\3")
        buf.write("\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u14ef\n\u0139\3")
        buf.write("\u0139\5\u0139\u14f2\n\u0139\3\u013a\3\u013a\3\u013a\3")
        buf.write("\u013a\3\u013a\5\u013a\u14f9\n\u013a\3\u013b\3\u013b\3")
        buf.write("\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b")
        buf.write("\5\u013b\u1504\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b")
        buf.write("\5\u013b\u150a\n\u013b\3\u013b\3\u013b\5\u013b\u150e\n")
        buf.write("\u013b\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1514\n")
        buf.write("\u013c\3\u013c\6\u013c\u1517\n\u013c\r\u013c\16\u013c")
        buf.write("\u1518\5\u013c\u151b\n\u013c\3\u013c\3\u013c\3\u013d\3")
        buf.write("\u013d\5\u013d\u1521\n\u013d\3\u013d\3\u013d\3\u013d\3")
        buf.write("\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d")
        buf.write("\u152c\n\u013d\5\u013d\u152e\n\u013d\5\u013d\u1530\n\u013d")
        buf.write("\3\u013d\5\u013d\u1533\n\u013d\3\u013e\3\u013e\5\u013e")
        buf.write("\u1537\n\u013e\3\u013e\5\u013e\u153a\n\u013e\3\u013f\3")
        buf.write("\u013f\5\u013f\u153e\n\u013f\3\u013f\3\u013f\5\u013f\u1542")
        buf.write("\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1547\n\u013f")
        buf.write("\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\3\u0141\3\u0141\5\u0141\u1552\n\u0141\3\u0141\3\u0141")
        buf.write("\5\u0141\u1556\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\3\u0141\3\u0141\5\u0141\u155e\n\u0141\3\u0142\5\u0142")
        buf.write("\u1561\n\u0142\3\u0142\3\u0142\3\u0142\7\u0142\u1566\n")
        buf.write("\u0142\f\u0142\16\u0142\u1569\13\u0142\3\u0143\3\u0143")
        buf.write("\5\u0143\u156d\n\u0143\3\u0143\6\u0143\u1570\n\u0143\r")
        buf.write("\u0143\16\u0143\u1571\3\u0144\3\u0144\5\u0144\u1576\n")
        buf.write("\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u157c\n")
        buf.write("\u0144\3\u0144\3\u0144\5\u0144\u1580\n\u0144\3\u0144\5")
        buf.write("\u0144\u1583\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3")
        buf.write("\u0145\3\u0145\5\u0145\u158b\n\u0145\3\u0145\5\u0145\u158e")
        buf.write("\n\u0145\3\u0145\3\u0145\5\u0145\u1592\n\u0145\3\u0145")
        buf.write("\3\u0145\5\u0145\u1596\n\u0145\3\u0145\3\u0145\3\u0145")
        buf.write("\5\u0145\u159b\n\u0145\3\u0145\5\u0145\u159e\n\u0145\3")
        buf.write("\u0145\3\u0145\5\u0145\u15a2\n\u0145\3\u0145\3\u0145\5")
        buf.write("\u0145\u15a6\n\u0145\7\u0145\u15a8\n\u0145\f\u0145\16")
        buf.write("\u0145\u15ab\13\u0145\3\u0145\3\u0145\3\u0145\3\u0146")
        buf.write("\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146")
        buf.write("\3\u0146\3\u0147\3\u0147\7\u0147\u15bb\n\u0147\f\u0147")
        buf.write("\16\u0147\u15be\13\u0147\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\5\u0148\u15c5\n\u0148\3\u0149\3\u0149\5\u0149")
        buf.write("\u15c9\n\u0149\3\u0149\3\u0149\5\u0149\u15cd\n\u0149\3")
        buf.write("\u0149\3\u0149\3\u014a\3\u014a\5\u014a\u15d3\n\u014a\3")
        buf.write("\u014a\3\u014a\5\u014a\u15d7\n\u014a\3\u014a\6\u014a\u15da")
        buf.write("\n\u014a\r\u014a\16\u014a\u15db\5\u014a\u15de\n\u014a")
        buf.write("\3\u014a\5\u014a\u15e1\n\u014a\3\u014a\3\u014a\5\u014a")
        buf.write("\u15e5\n\u014a\3\u014a\5\u014a\u15e8\n\u014a\3\u014a\5")
        buf.write("\u014a\u15eb\n\u014a\3\u014a\5\u014a\u15ee\n\u014a\3\u014b")
        buf.write("\3\u014b\5\u014b\u15f2\n\u014b\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\5\u014d\u15fe\n\u014d\3\u014d\5\u014d\u1601\n\u014d\3")
        buf.write("\u014e\5\u014e\u1604\n\u014e\3\u014e\6\u014e\u1607\n\u014e")
        buf.write("\r\u014e\16\u014e\u1608\3\u014f\3\u014f\7\u014f\u160d")
        buf.write("\n\u014f\f\u014f\16\u014f\u1610\13\u014f\3\u014f\3\u014f")
        buf.write("\5\u014f\u1614\n\u014f\3\u0150\3\u0150\7\u0150\u1618\n")
        buf.write("\u0150\f\u0150\16\u0150\u161b\13\u0150\3\u0150\5\u0150")
        buf.write("\u161e\n\u0150\3\u0151\3\u0151\3\u0151\5\u0151\u1623\n")
        buf.write("\u0151\3\u0151\3\u0151\3\u0151\7\u0151\u1628\n\u0151\f")
        buf.write("\u0151\16\u0151\u162b\13\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\5\u0151\u1630\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\3\u0151\5\u0151\u1637\n\u0151\3\u0152\5\u0152\u163a\n")
        buf.write("\u0152\3\u0152\5\u0152\u163d\n\u0152\3\u0152\3\u0152\5")
        buf.write("\u0152\u1641\n\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1646")
        buf.write("\n\u0152\3\u0152\3\u0152\7\u0152\u164a\n\u0152\f\u0152")
        buf.write("\16\u0152\u164d\13\u0152\3\u0153\3\u0153\3\u0153\3\u0154")
        buf.write("\3\u0154\3\u0154\3\u0155\3\u0155\5\u0155\u1657\n\u0155")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u165e")
        buf.write("\n\u0156\3\u0156\3\u0156\5\u0156\u1662\n\u0156\3\u0157")
        buf.write("\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write("\5\u0157\u166c\n\u0157\3\u0158\3\u0158\5\u0158\u1670\n")
        buf.write("\u0158\3\u0158\3\u0158\5\u0158\u1674\n\u0158\3\u0158\6")
        buf.write("\u0158\u1677\n\u0158\r\u0158\16\u0158\u1678\3\u0158\3")
        buf.write("\u0158\3\u0158\3\u0158\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\5\u0159\u1684\n\u0159\3\u015a\3\u015a\3\u015a")
        buf.write("\5\u015a\u1689\n\u015a\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\5\u015b\u168f\n\u015b\3\u015b\6\u015b\u1692\n\u015b\r")
        buf.write("\u015b\16\u015b\u1693\3\u015b\5\u015b\u1697\n\u015b\3")
        buf.write("\u015b\6\u015b\u169a\n\u015b\r\u015b\16\u015b\u169b\5")
        buf.write("\u015b\u169e\n\u015b\3\u015b\3\u015b\3\u015c\3\u015c\5")
        buf.write("\u015c\u16a4\n\u015c\3\u015d\3\u015d\3\u015d\5\u015d\u16a9")
        buf.write("\n\u015d\3\u015d\5\u015d\u16ac\n\u015d\3\u015e\3\u015e")
        buf.write("\3\u015e\5\u015e\u16b1\n\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\5\u015e\u16b6\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015f\3\u015f\3\u015f\5\u015f\u16bf\n\u015f\3\u015f")
        buf.write("\6\u015f\u16c2\n\u015f\r\u015f\16\u015f\u16c3\3\u015f")
        buf.write("\3\u015f\3\u0160\3\u0160\5\u0160\u16ca\n\u0160\3\u0160")
        buf.write("\3\u0160\3\u0160\3\u0160\5\u0160\u16d0\n\u0160\3\u0160")
        buf.write("\6\u0160\u16d3\n\u0160\r\u0160\16\u0160\u16d4\3\u0160")
        buf.write("\3\u0160\5\u0160\u16d9\n\u0160\5\u0160\u16db\n\u0160\3")
        buf.write("\u0161\3\u0161\3\u0161\5\u0161\u16e0\n\u0161\3\u0161\3")
        buf.write("\u0161\5\u0161\u16e4\n\u0161\3\u0161\3\u0161\3\u0161\3")
        buf.write("\u0161\5\u0161\u16ea\n\u0161\3\u0161\3\u0161\5\u0161\u16ee")
        buf.write("\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163")
        buf.write("\3\u0163\5\u0163\u16f7\n\u0163\3\u0163\6\u0163\u16fa\n")
        buf.write("\u0163\r\u0163\16\u0163\u16fb\3\u0163\5\u0163\u16ff\n")
        buf.write("\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1705\n")
        buf.write("\u0163\3\u0163\6\u0163\u1708\n\u0163\r\u0163\16\u0163")
        buf.write("\u1709\5\u0163\u170c\n\u0163\5\u0163\u170e\n\u0163\3\u0164")
        buf.write("\3\u0164\3\u0164\5\u0164\u1713\n\u0164\3\u0165\3\u0165")
        buf.write("\3\u0165\5\u0165\u1718\n\u0165\3\u0165\6\u0165\u171b\n")
        buf.write("\u0165\r\u0165\16\u0165\u171c\3\u0165\3\u0165\3\u0166")
        buf.write("\3\u0166\3\u0166\3\u0166\5\u0166\u1725\n\u0166\3\u0166")
        buf.write("\6\u0166\u1728\n\u0166\r\u0166\16\u0166\u1729\3\u0166")
        buf.write("\3\u0166\3\u0167\3\u0167\3\u0167\5\u0167\u1731\n\u0167")
        buf.write("\3\u0167\3\u0167\5\u0167\u1735\n\u0167\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0169\3\u0169\7\u0169\u173c\n\u0169\f\u0169")
        buf.write("\16\u0169\u173f\13\u0169\3\u0169\5\u0169\u1742\n\u0169")
        buf.write("\3\u0169\7\u0169\u1745\n\u0169\f\u0169\16\u0169\u1748")
        buf.write("\13\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a")
        buf.write("\3\u016a\3\u016a\5\u016a\u1752\n\u016a\5\u016a\u1754\n")
        buf.write("\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c")
        buf.write("\u1762\n\u016c\f\u016c\16\u016c\u1765\13\u016c\3\u016d")
        buf.write("\3\u016d\5\u016d\u1769\n\u016d\3\u016d\3\u016d\7\u016d")
        buf.write("\u176d\n\u016d\f\u016d\16\u016d\u1770\13\u016d\3\u016d")
        buf.write("\3\u016d\3\u016e\5\u016e\u1775\n\u016e\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f")
        buf.write("\3\u016f\3\u0170\3\u0170\5\u0170\u1783\n\u0170\3\u0170")
        buf.write("\6\u0170\u1786\n\u0170\r\u0170\16\u0170\u1787\3\u0170")
        buf.write("\3\u0170\3\u0171\3\u0171\5\u0171\u178e\n\u0171\3\u0171")
        buf.write("\5\u0171\u1791\n\u0171\3\u0172\5\u0172\u1794\n\u0172\3")
        buf.write("\u0172\3\u0172\5\u0172\u1798\n\u0172\3\u0172\7\u0172\u179b")
        buf.write("\n\u0172\f\u0172\16\u0172\u179e\13\u0172\3\u0172\3\u0172")
        buf.write("\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u17a6\n\u0173")
        buf.write("\5\u0173\u17a8\n\u0173\3\u0173\3\u0173\5\u0173\u17ac\n")
        buf.write("\u0173\3\u0173\5\u0173\u17af\n\u0173\3\u0174\3\u0174\3")
        buf.write("\u0174\5\u0174\u17b4\n\u0174\5\u0174\u17b6\n\u0174\3\u0174")
        buf.write("\3\u0174\5\u0174\u17ba\n\u0174\3\u0174\3\u0174\3\u0174")
        buf.write("\3\u0175\3\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176")
        buf.write("\5\u0176\u17c6\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177")
        buf.write("\3\u0177\3\u0178\3\u0178\5\u0178\u17cf\n\u0178\3\u0178")
        buf.write("\3\u0178\5\u0178\u17d3\n\u0178\3\u0178\6\u0178\u17d6\n")
        buf.write("\u0178\r\u0178\16\u0178\u17d7\3\u0179\3\u0179\5\u0179")
        buf.write("\u17dc\n\u0179\3\u0179\3\u0179\5\u0179\u17e0\n\u0179\3")
        buf.write("\u017a\3\u017a\3\u017a\5\u017a\u17e5\n\u017a\3\u017a\5")
        buf.write("\u017a\u17e8\n\u017a\3\u017b\3\u017b\3\u017b\3\u017c\3")
        buf.write("\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u17f2\n\u017c\3")
        buf.write("\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u17f8\n\u017d\3")
        buf.write("\u017d\5\u017d\u17fb\n\u017d\3\u017d\5\u017d\u17fe\n\u017d")
        buf.write("\3\u017e\3\u017e\5\u017e\u1802\n\u017e\3\u017e\6\u017e")
        buf.write("\u1805\n\u017e\r\u017e\16\u017e\u1806\3\u017e\3\u017e")
        buf.write("\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1810")
        buf.write("\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f")
        buf.write("\3\u017f\3\u017f\5\u017f\u181a\n\u017f\3\u0180\3\u0180")
        buf.write("\5\u0180\u181e\n\u0180\3\u0180\3\u0180\5\u0180\u1822\n")
        buf.write("\u0180\3\u0180\5\u0180\u1825\n\u0180\3\u0180\5\u0180\u1828")
        buf.write("\n\u0180\3\u0181\3\u0181\3\u0181\5\u0181\u182d\n\u0181")
        buf.write("\3\u0182\3\u0182\3\u0182\5\u0182\u1832\n\u0182\3\u0182")
        buf.write("\5\u0182\u1835\n\u0182\3\u0182\5\u0182\u1838\n\u0182\3")
        buf.write("\u0183\3\u0183\6\u0183\u183c\n\u0183\r\u0183\16\u0183")
        buf.write("\u183d\3\u0183\5\u0183\u1841\n\u0183\3\u0183\3\u0183\3")
        buf.write("\u0184\3\u0184\5\u0184\u1847\n\u0184\3\u0184\5\u0184\u184a")
        buf.write("\n\u0184\3\u0185\5\u0185\u184d\n\u0185\3\u0185\6\u0185")
        buf.write("\u1850\n\u0185\r\u0185\16\u0185\u1851\3\u0185\5\u0185")
        buf.write("\u1855\n\u0185\3\u0186\3\u0186\3\u0186\3\u0186\6\u0186")
        buf.write("\u185b\n\u0186\r\u0186\16\u0186\u185c\3\u0187\3\u0187")
        buf.write("\6\u0187\u1861\n\u0187\r\u0187\16\u0187\u1862\3\u0188")
        buf.write("\3\u0188\3\u0188\5\u0188\u1868\n\u0188\3\u0189\3\u0189")
        buf.write("\3\u0189\5\u0189\u186d\n\u0189\3\u0189\3\u0189\3\u018a")
        buf.write("\3\u018a\3\u018a\3\u018a\5\u018a\u1875\n\u018a\3\u018a")
        buf.write("\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a")
        buf.write("\5\u018a\u187f\n\u018a\3\u018a\3\u018a\5\u018a\u1883\n")
        buf.write("\u018a\5\u018a\u1885\n\u018a\3\u018a\5\u018a\u1888\n\u018a")
        buf.write("\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\7\u018b\u1892\n\u018b\f\u018b\16\u018b\u1895")
        buf.write("\13\u018b\3\u018b\5\u018b\u1898\n\u018b\3\u018b\5\u018b")
        buf.write("\u189b\n\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018d")
        buf.write("\3\u018d\3\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e")
        buf.write("\3\u018e\5\u018e\u18aa\n\u018e\3\u018e\3\u018e\3\u018e")
        buf.write("\5\u018e\u18af\n\u018e\3\u018e\3\u018e\5\u018e\u18b3\n")
        buf.write("\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f")
        buf.write("\u18ba\n\u018f\3\u018f\5\u018f\u18bd\n\u018f\3\u0190\3")
        buf.write("\u0190\3\u0190\3\u0190\3\u0190\7\u0190\u18c4\n\u0190\f")
        buf.write("\u0190\16\u0190\u18c7\13\u0190\3\u0190\3\u0190\3\u0190")
        buf.write("\3\u0190\5\u0190\u18cd\n\u0190\3\u0191\3\u0191\3\u0191")
        buf.write("\5\u0191\u18d2\n\u0191\3\u0192\3\u0192\5\u0192\u18d6\n")
        buf.write("\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write("\5\u0193\u18de\n\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write("\5\u0193\u18e4\n\u0193\3\u0194\3\u0194\3\u0194\3\u0194")
        buf.write("\3\u0194\3\u0194\5\u0194\u18ec\n\u0194\3\u0194\5\u0194")
        buf.write("\u18ef\n\u0194\3\u0195\3\u0195\3\u0195\3\u0195\3\u0196")
        buf.write("\3\u0196\3\u0196\5\u0196\u18f8\n\u0196\3\u0196\5\u0196")
        buf.write("\u18fb\n\u0196\3\u0196\5\u0196\u18fe\n\u0196\3\u0197\3")
        buf.write("\u0197\3\u0197\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198")
        buf.write("\u1907\n\u0198\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199")
        buf.write("\u190d\n\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199")
        buf.write("\u1913\n\u0199\5\u0199\u1915\n\u0199\3\u019a\3\u019a\3")
        buf.write("\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\5\u019a\u1922\n\u019a\5\u019a\u1924\n")
        buf.write("\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\5\u019b\u192d\n\u019b\5\u019b\u192f\n\u019b\3")
        buf.write("\u019c\3\u019c\5\u019c\u1933\n\u019c\3\u019c\3\u019c\3")
        buf.write("\u019c\3\u019c\5\u019c\u1939\n\u019c\3\u019c\3\u019c\5")
        buf.write("\u019c\u193d\n\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3")
        buf.write("\u019d\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\7\u019f")
        buf.write("\u1949\n\u019f\f\u019f\16\u019f\u194c\13\u019f\3\u01a0")
        buf.write("\3\u01a0\5\u01a0\u1950\n\u01a0\3\u01a1\3\u01a1\3\u01a1")
        buf.write("\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2")
        buf.write("\u195b\n\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1966\n\u01a2")
        buf.write("\3\u01a2\3\u01a2\5\u01a2\u196a\n\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\7\u01a2\u196f\n\u01a2\f\u01a2\16\u01a2\u1972")
        buf.write("\13\u01a2\3\u01a2\3\u01a2\5\u01a2\u1976\n\u01a2\7\u01a2")
        buf.write("\u1978\n\u01a2\f\u01a2\16\u01a2\u197b\13\u01a2\3\u01a2")
        buf.write("\3\u01a2\5\u01a2\u197f\n\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u1987\n\u01a2\f\u01a2")
        buf.write("\16\u01a2\u198a\13\u01a2\3\u01a3\3\u01a3\3\u01a3\5\u01a3")
        buf.write("\u198f\n\u01a3\3\u01a3\5\u01a3\u1992\n\u01a3\3\u01a4\3")
        buf.write("\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\7\u01a4")
        buf.write("\u199b\n\u01a4\f\u01a4\16\u01a4\u199e\13\u01a4\3\u01a5")
        buf.write("\3\u01a5\5\u01a5\u19a2\n\u01a5\3\u01a5\3\u01a5\3\u01a5")
        buf.write("\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u19ac")
        buf.write("\n\u01a5\5\u01a5\u19ae\n\u01a5\5\u01a5\u19b0\n\u01a5\3")
        buf.write("\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6")
        buf.write("\3\u01a6\5\u01a6\u19ba\n\u01a6\3\u01a6\3\u01a6\5\u01a6")
        buf.write("\u19be\n\u01a6\5\u01a6\u19c0\n\u01a6\3\u01a7\3\u01a7\3")
        buf.write("\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\7\u01a7")
        buf.write("\u19ca\n\u01a7\f\u01a7\16\u01a7\u19cd\13\u01a7\3\u01a7")
        buf.write("\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u19d4\n\u01a7")
        buf.write("\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u19e1\n\u01a9")
        buf.write("\3\u01a9\5\u01a9\u19e4\n\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\7\u01a9\u19f0\n\u01a9\f\u01a9\16\u01a9\u19f3\13\u01a9")
        buf.write("\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u19fa")
        buf.write("\n\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write("\5\u01aa\u1a02\n\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa")
        buf.write("\3\u01aa\5\u01aa\u1a09\n\u01aa\3\u01aa\3\u01aa\5\u01aa")
        buf.write("\u1a0d\n\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab")
        buf.write("\5\u01ab\u1a14\n\u01ab\3\u01ac\3\u01ac\5\u01ac\u1a18\n")
        buf.write("\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1a1d\n\u01ac\7")
        buf.write("\u01ac\u1a1f\n\u01ac\f\u01ac\16\u01ac\u1a22\13\u01ac\3")
        buf.write("\u01ac\3\u01ac\3\u01ac\7\u01ac\u1a27\n\u01ac\f\u01ac\16")
        buf.write("\u01ac\u1a2a\13\u01ac\3\u01ac\5\u01ac\u1a2d\n\u01ac\3")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1a34\n")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1a39\n\u01ad\3")
        buf.write("\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad")
        buf.write("\5\u01ad\u1a42\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae")
        buf.write("\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1a4b\n\u01ae\3\u01ae")
        buf.write("\5\u01ae\u1a4e\n\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af")
        buf.write("\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af")
        buf.write("\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af")
        buf.write("\5\u01af\u1a62\n\u01af\3\u01b0\3\u01b0\5\u01b0\u1a66\n")
        buf.write("\u01b0\3\u01b1\5\u01b1\u1a69\n\u01b1\3\u01b1\3\u01b1\3")
        buf.write("\u01b1\6\u01b1\u1a6e\n\u01b1\r\u01b1\16\u01b1\u1a6f\3")
        buf.write("\u01b1\5\u01b1\u1a73\n\u01b1\3\u01b1\3\u01b1\5\u01b1\u1a77")
        buf.write("\n\u01b1\3\u01b1\5\u01b1\u1a7a\n\u01b1\3\u01b2\3\u01b2")
        buf.write("\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u1a81\n\u01b2\3\u01b3")
        buf.write("\5\u01b3\u1a84\n\u01b3\3\u01b3\3\u01b3\6\u01b3\u1a88\n")
        buf.write("\u01b3\r\u01b3\16\u01b3\u1a89\3\u01b3\5\u01b3\u1a8d\n")
        buf.write("\u01b3\3\u01b3\3\u01b3\5\u01b3\u1a91\n\u01b3\3\u01b3\5")
        buf.write("\u01b3\u1a94\n\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3")
        buf.write("\u01b4\5\u01b4\u1a9b\n\u01b4\3\u01b5\3\u01b5\3\u01b5\5")
        buf.write("\u01b5\u1aa0\n\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3")
        buf.write("\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\7\u01b6")
        buf.write("\u1aac\n\u01b6\f\u01b6\16\u01b6\u1aaf\13\u01b6\3\u01b6")
        buf.write("\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1ab5\n\u01b6\3\u01b7")
        buf.write("\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7")
        buf.write("\3\u01b7\5\u01b7\u1ac0\n\u01b7\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1ac9\n\u01b8")
        buf.write("\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\5\u01b8\u1ad2\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1ad6\n")
        buf.write("\u01b8\3\u01b8\3\u01b8\5\u01b8\u1ada\n\u01b8\3\u01b8\3")
        buf.write("\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\5\u01b8\u1af4\n\u01b8\3\u01b8\5\u01b8")
        buf.write("\u1af7\n\u01b8\3\u01b8\5\u01b8\u1afa\n\u01b8\3\u01b8\3")
        buf.write("\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8")
        buf.write("\5\u01b8\u1b04\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b08\n")
        buf.write("\u01b8\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b0d\n\u01b9\3")
        buf.write("\u01ba\3\u01ba\3\u01ba\5\u01ba\u1b12\n\u01ba\3\u01bb\3")
        buf.write("\u01bb\3\u01bb\5\u01bb\u1b17\n\u01bb\3\u01bb\3\u01bb\3")
        buf.write("\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1b20\n")
        buf.write("\u01bb\3\u01bb\5\u01bb\u1b23\n\u01bb\5\u01bb\u1b25\n\u01bb")
        buf.write("\3\u01bb\3\u01bb\5\u01bb\u1b29\n\u01bb\3\u01bb\3\u01bb")
        buf.write("\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1b30\n\u01bb\3\u01bb")
        buf.write("\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1b37\n\u01bb")
        buf.write("\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb")
        buf.write("\u1b3f\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb")
        buf.write("\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb")
        buf.write("\3\u01bb\5\u01bb\u1b4e\n\u01bb\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\5\u01bc\u1b53\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1b58\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1b5e\n\u01bc\3\u01bc\5\u01bc\u1b61\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\5\u01bc\u1b65\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1b6f\n")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1b7b\n\u01bc")
        buf.write("\5\u01bc\u1b7d\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\5\u01bc\u1b84\n\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1b88\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\6\u01bc\u1b8f\n\u01bc\r\u01bc\16\u01bc\u1b90\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1b9a\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\5\u01bc\u1ba8\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\5\u01bc\u1bb0\n\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1bb3\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\5\u01bc\u1bbc\n\u01bc\3\u01bc\3\u01bc")
        buf.write("\7\u01bc\u1bc0\n\u01bc\f\u01bc\16\u01bc\u1bc3\13\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\5\u01bc\u1bcc\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\5\u01bc\u1bd4\n\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1bd7\n\u01bc\3\u01bc\5\u01bc\u1bda\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1be3\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1be8\n")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1bed\n\u01bc\3")
        buf.write("\u01bc\6\u01bc\u1bf0\n\u01bc\r\u01bc\16\u01bc\u1bf1\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1bf7\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\5\u01bc\u1bfc\n\u01bc\3\u01bc\5\u01bc\u1bff")
        buf.write("\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c04\n\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c09\n\u01bc\7\u01bc")
        buf.write("\u1c0b\n\u01bc\f\u01bc\16\u01bc\u1c0e\13\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\5\u01bc\u1c13\n\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\5\u01bc\u1c19\n\u01bc\3\u01bc\3\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c22")
        buf.write("\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c27\n\u01bc")
        buf.write("\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc")
        buf.write("\u1c2f\n\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c33\n\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c38\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c3e\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c45\n\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c4a\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c51\n\u01bc\3")
        buf.write("\u01bc\3\u01bc\5\u01bc\u1c55\n\u01bc\3\u01bc\3\u01bc\3")
        buf.write("\u01bc\5\u01bc\u1c5a\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c62\n\u01bc\3\u01bc\5")
        buf.write("\u01bc\u1c65\n\u01bc\3\u01bc\5\u01bc\u1c68\n\u01bc\3\u01bc")
        buf.write("\5\u01bc\u1c6b\n\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c6f\n")
        buf.write("\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c74\n\u01bc\3")
        buf.write("\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c79\n\u01bc\3\u01bc\3")
        buf.write("\u01bc\5\u01bc\u1c7d\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3")
        buf.write("\u01bc\3\u01bc\5\u01bc\u1c84\n\u01bc\3\u01bc\3\u01bc\3")
        buf.write("\u01bc\5\u01bc\u1c89\n\u01bc\5\u01bc\u1c8b\n\u01bc\3\u01bd")
        buf.write("\3\u01bd\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01c0\3\u01c0")
        buf.write("\3\u01c0\5\u01c0\u1c96\n\u01c0\3\u01c0\3\u01c0\5\u01c0")
        buf.write("\u1c9a\n\u01c0\5\u01c0\u1c9c\n\u01c0\3\u01c0\3\u01c0\3")
        buf.write("\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1")
        buf.write("\5\u01c1\u1ca7\n\u01c1\3\u01c2\3\u01c2\3\u01c3\3\u01c3")
        buf.write("\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1cb2")
        buf.write("\n\u01c3\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1cb7\n\u01c4")
        buf.write("\3\u01c4\6\u01c4\u1cba\n\u01c4\r\u01c4\16\u01c4\u1cbb")
        buf.write("\5\u01c4\u1cbe\n\u01c4\3\u01c5\3\u01c5\5\u01c5\u1cc2\n")
        buf.write("\u01c5\3\u01c5\5\u01c5\u1cc5\n\u01c5\3\u01c5\3\u01c5\5")
        buf.write("\u01c5\u1cc9\n\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3")
        buf.write("\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7")
        buf.write("\5\u01c7\u1cd6\n\u01c7\3\u01c8\3\u01c8\3\u01c8\5\u01c8")
        buf.write("\u1cdb\n\u01c8\3\u01c8\3\u01c8\5\u01c8\u1cdf\n\u01c8\3")
        buf.write("\u01c8\6\u01c8\u1ce2\n\u01c8\r\u01c8\16\u01c8\u1ce3\3")
        buf.write("\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1cea\n\u01c8\3")
        buf.write("\u01c8\3\u01c8\5\u01c8\u1cee\n\u01c8\3\u01c9\3\u01c9\3")
        buf.write("\u01c9\5\u01c9\u1cf3\n\u01c9\3\u01c9\3\u01c9\5\u01c9\u1cf7")
        buf.write("\n\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1cfc\n\u01c9")
        buf.write("\3\u01ca\3\u01ca\3\u01ca\5\u01ca\u1d01\n\u01ca\3\u01ca")
        buf.write("\5\u01ca\u1d04\n\u01ca\3\u01ca\5\u01ca\u1d07\n\u01ca\3")
        buf.write("\u01ca\6\u01ca\u1d0a\n\u01ca\r\u01ca\16\u01ca\u1d0b\3")
        buf.write("\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb")
        buf.write("\5\u01cb\u1d15\n\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb")
        buf.write("\7\u01cb\u1d1b\n\u01cb\f\u01cb\16\u01cb\u1d1e\13\u01cb")
        buf.write("\3\u01cb\5\u01cb\u1d21\n\u01cb\3\u01cb\3\u01cb\3\u01cc")
        buf.write("\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1d2b")
        buf.write("\n\u01cc\3\u01cc\5\u01cc\u1d2e\n\u01cc\5\u01cc\u1d30\n")
        buf.write("\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01ce")
        buf.write("\3\u01ce\3\u01ce\5\u01ce\u1d3a\n\u01ce\5\u01ce\u1d3c\n")
        buf.write("\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1d42\n")
        buf.write("\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1d48\n")
        buf.write("\u01d0\5\u01d0\u1d4a\n\u01d0\3\u01d1\3\u01d1\3\u01d1\3")
        buf.write("\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write("\3\u01d3\3\u01d3\5\u01d3\u1d58\n\u01d3\5\u01d3\u1d5a\n")
        buf.write("\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4")
        buf.write("\3\u01d4\3\u01d4\5\u01d4\u1d64\n\u01d4\3\u01d5\3\u01d5")
        buf.write("\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1d6d")
        buf.write("\n\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6")
        buf.write("\3\u01d6\5\u01d6\u1d76\n\u01d6\3\u01d7\3\u01d7\5\u01d7")
        buf.write("\u1d7a\n\u01d7\3\u01d7\3\u01d7\5\u01d7\u1d7e\n\u01d7\3")
        buf.write("\u01d7\3\u01d7\3\u01d8\5\u01d8\u1d83\n\u01d8\3\u01d8\3")
        buf.write("\u01d8\5\u01d8\u1d87\n\u01d8\3\u01d8\5\u01d8\u1d8a\n\u01d8")
        buf.write("\3\u01d9\3\u01d9\5\u01d9\u1d8e\n\u01d9\3\u01da\3\u01da")
        buf.write("\3\u01da\3\u01da\3\u01da\5\u01da\u1d95\n\u01da\3\u01db")
        buf.write("\3\u01db\5\u01db\u1d99\n\u01db\3\u01db\3\u01db\5\u01db")
        buf.write("\u1d9d\n\u01db\3\u01db\6\u01db\u1da0\n\u01db\r\u01db\16")
        buf.write("\u01db\u1da1\3\u01dc\3\u01dc\5\u01dc\u1da6\n\u01dc\3\u01dd")
        buf.write("\3\u01dd\3\u01de\3\u01de\3\u01df\3\u01df\3\u01e0\3\u01e0")
        buf.write("\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e3\3\u01e3\3\u01e3")
        buf.write("\7\u01e3\u1db7\n\u01e3\f\u01e3\16\u01e3\u1dba\13\u01e3")
        buf.write("\3\u01e3\3\u01e3\5\u01e3\u1dbe\n\u01e3\3\u01e4\3\u01e4")
        buf.write("\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u1dc5\n\u01e5\3\u01e6")
        buf.write("\3\u01e6\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e9\3\u01e9")
        buf.write("\3\u01e9\5\u01e9\u1dd0\n\u01e9\3\u01ea\3\u01ea\3\u01ea")
        buf.write("\7\u01ea\u1dd5\n\u01ea\f\u01ea\16\u01ea\u1dd8\13\u01ea")
        buf.write("\3\u01eb\3\u01eb\3\u01ec\3\u01ec\5\u01ec\u1dde\n\u01ec")
        buf.write("\3\u01ed\3\u01ed\5\u01ed\u1de2\n\u01ed\3\u01ee\3\u01ee")
        buf.write("\3\u01ee\7\u01ee\u1de7\n\u01ee\f\u01ee\16\u01ee\u1dea")
        buf.write("\13\u01ee\3\u01ee\3\u01ee\5\u01ee\u1dee\n\u01ee\3\u01ef")
        buf.write("\3\u01ef\3\u01f0\3\u01f0\3\u01f0\7\u01f0\u1df5\n\u01f0")
        buf.write("\f\u01f0\16\u01f0\u1df8\13\u01f0\3\u01f1\3\u01f1\3\u01f1")
        buf.write("\7\u01f1\u1dfd\n\u01f1\f\u01f1\16\u01f1\u1e00\13\u01f1")
        buf.write("\3\u01f2\3\u01f2\3\u01f2\7\u01f2\u1e05\n\u01f2\f\u01f2")
        buf.write("\16\u01f2\u1e08\13\u01f2\3\u01f3\3\u01f3\3\u01f3\5\u01f3")
        buf.write("\u1e0d\n\u01f3\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u1e12\n")
        buf.write("\u01f4\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1e17\n\u01f5\3")
        buf.write("\u01f6\3\u01f6\5\u01f6\u1e1b\n\u01f6\3\u01f6\3\u01f6\3")
        buf.write("\u01f6\5\u01f6\u1e20\n\u01f6\3\u01f6\5\u01f6\u1e23\n\u01f6")
        buf.write("\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u1e28\n\u01f7\3\u01f8")
        buf.write("\3\u01f8\5\u01f8\u1e2c\n\u01f8\3\u01f9\3\u01f9\5\u01f9")
        buf.write("\u1e30\n\u01f9\3\u01fa\3\u01fa\3\u01fa\5\u01fa\u1e35\n")
        buf.write("\u01fa\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc\7\u01fc")
        buf.write("\u1e3c\n\u01fc\f\u01fc\16\u01fc\u1e3f\13\u01fc\3\u01fd")
        buf.write("\3\u01fd\3\u01fd\5\u01fd\u1e44\n\u01fd\3\u01fd\3\u01fd")
        buf.write("\3\u01fd\5\u01fd\u1e49\n\u01fd\3\u01fe\3\u01fe\3\u01fe")
        buf.write("\7\u01fe\u1e4e\n\u01fe\f\u01fe\16\u01fe\u1e51\13\u01fe")
        buf.write("\3\u01ff\3\u01ff\3\u0200\3\u0200\3\u0201\3\u0201\3\u0202")
        buf.write("\3\u0202\3\u0203\3\u0203\3\u0203\5\u0203\u1e5e\n\u0203")
        buf.write("\3\u0203\6\u0203\u1e61\n\u0203\r\u0203\16\u0203\u1e62")
        buf.write("\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203")
        buf.write("\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203")
        buf.write("\5\u0203\u1e73\n\u0203\3\u0204\5\u0204\u1e76\n\u0204\3")
        buf.write("\u0204\6\u0204\u1e79\n\u0204\r\u0204\16\u0204\u1e7a\3")
        buf.write("\u0205\3\u0205\3\u0205\3\u0205\3\u0206\3\u0206\3\u0206")
        buf.write("\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u1e88\n\u0206")
        buf.write("\3\u0207\3\u0207\5\u0207\u1e8c\n\u0207\3\u0207\7\u0207")
        buf.write("\u1e8f\n\u0207\f\u0207\16\u0207\u1e92\13\u0207\3\u0207")
        buf.write("\3\u0207\5\u0207\u1e96\n\u0207\3\u0208\3\u0208\5\u0208")
        buf.write("\u1e9a\n\u0208\3\u0208\3\u0208\5\u0208\u1e9e\n\u0208\7")
        buf.write("\u0208\u1ea0\n\u0208\f\u0208\16\u0208\u1ea3\13\u0208\3")
        buf.write("\u0208\3\u0208\5\u0208\u1ea7\n\u0208\3\u0209\3\u0209\3")
        buf.write("\u0209\3\u0209\3\u0209\5\u0209\u1eae\n\u0209\3\u0209\3")
        buf.write("\u0209\3\u0209\5\u0209\u1eb3\n\u0209\5\u0209\u1eb5\n\u0209")
        buf.write("\5\u0209\u1eb7\n\u0209\3\u0209\3\u0209\3\u0209\3\u0209")
        buf.write("\3\u0209\3\u0209\3\u0209\5\u0209\u1ec0\n\u0209\3\u0209")
        buf.write("\3\u0209\5\u0209\u1ec4\n\u0209\6\u0209\u1ec6\n\u0209\r")
        buf.write("\u0209\16\u0209\u1ec7\5\u0209\u1eca\n\u0209\3\u0209\3")
        buf.write("\u0209\5\u0209\u1ece\n\u0209\3\u020a\3\u020a\3\u020a\3")
        buf.write("\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1ed7\n\u020b\3")
        buf.write("\u020b\3\u020b\3\u020c\3\u020c\5\u020c\u1edd\n\u020c\3")
        buf.write("\u020c\3\u020c\5\u020c\u1ee1\n\u020c\5\u020c\u1ee3\n\u020c")
        buf.write("\3\u020d\3\u020d\5\u020d\u1ee7\n\u020d\3\u020d\3\u020d")
        buf.write("\5\u020d\u1eeb\n\u020d\3\u020d\3\u020d\3\u020d\3\u020d")
        buf.write("\3\u020d\5\u020d\u1ef2\n\u020d\3\u020d\3\u020d\3\u020d")
        buf.write("\3\u020d\3\u020d\3\u020d\5\u020d\u1efa\n\u020d\3\u020d")
        buf.write("\3\u020d\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1f02")
        buf.write("\n\u020d\5\u020d\u1f04\n\u020d\3\u020e\3\u020e\3\u020e")
        buf.write("\3\u020e\5\u020e\u1f0a\n\u020e\3\u020e\5\u020e\u1f0d\n")
        buf.write("\u020e\3\u020e\3\u020e\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\5\u020f\u1f25\n\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\5\u020f\u1f2c\n\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f")
        buf.write("\3\u020f\3\u020f\5\u020f\u1f4d\n\u020f\3\u0210\3\u0210")
        buf.write("\3\u0210\5\u0210\u1f52\n\u0210\3\u0210\5\u0210\u1f55\n")
        buf.write("\u0210\3\u0210\3\u0210\3\u0210\5\u0210\u1f5a\n\u0210\5")
        buf.write("\u0210\u1f5c\n\u0210\3\u0210\3\u0210\7\u0210\u1f60\n\u0210")
        buf.write("\f\u0210\16\u0210\u1f63\13\u0210\3\u0211\3\u0211\3\u0211")
        buf.write("\7\u0211\u1f68\n\u0211\f\u0211\16\u0211\u1f6b\13\u0211")
        buf.write("\3\u0212\3\u0212\5\u0212\u1f6f\n\u0212\3\u0212\3\u0212")
        buf.write("\3\u0212\7\u0212\u1f74\n\u0212\f\u0212\16\u0212\u1f77")
        buf.write("\13\u0212\3\u0212\3\u0212\5\u0212\u1f7b\n\u0212\3\u0212")
        buf.write("\5\u0212\u1f7e\n\u0212\3\u0213\3\u0213\5\u0213\u1f82\n")
        buf.write("\u0213\3\u0213\3\u0213\3\u0213\7\u0213\u1f87\n\u0213\f")
        buf.write("\u0213\16\u0213\u1f8a\13\u0213\3\u0214\3\u0214\5\u0214")
        buf.write("\u1f8e\n\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write("\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write("\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write("\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214")
        buf.write("\3\u0214\3\u0214\5\u0214\u1fac\n\u0214\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\5\u0215\u1fb3\n\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u1fc2")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\5\u0215\u1fd2\n\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u1fe5\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u1ff6\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u1ffd")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u2005\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u2012\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\5\u0215\u201b\n\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215")
        buf.write("\u2024\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u202d\n\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215")
        buf.write("\u2037\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\5\u0215\u203f\n\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2049")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u2053\n\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\5\u0215\u205f\n\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u206f\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u2081\n\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u208e\n\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u209d\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\5\u0215\u20a8\n\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215")
        buf.write("\u20b2\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u20bd\n\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\5\u0215\u20c7\n\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u20d8")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u20de")
        buf.write("\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215")
        buf.write("\5\u0215\u20f4\n\u0215\3\u0216\3\u0216\3\u0216\5\u0216")
        buf.write("\u20f9\n\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216")
        buf.write("\u20ff\n\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216")
        buf.write("\u2105\n\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216")
        buf.write("\u210b\n\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u2110\n")
        buf.write("\u0216\5\u0216\u2112\n\u0216\3\u0216\5\u0216\u2115\n\u0216")
        buf.write("\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216")
        buf.write("\3\u0216\5\u0216\u211f\n\u0216\3\u0216\5\u0216\u2122\n")
        buf.write("\u0216\5\u0216\u2124\n\u0216\5\u0216\u2126\n\u0216\3\u0216")
        buf.write("\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216")
        buf.write("\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u2134\n\u0216")
        buf.write("\3\u0217\3\u0217\3\u0218\3\u0218\3\u0218\3\u0219\3\u0219")
        buf.write("\3\u021a\3\u021a\5\u021a\u213f\n\u021a\3\u021a\3\u021a")
        buf.write("\3\u021b\3\u021b\5\u021b\u2145\n\u021b\3\u021c\3\u021c")
        buf.write("\3\u021c\3\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021f")
        buf.write("\3\u021f\3\u021f\2\5\u0342\u0346\u0350\u0220\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170")
        buf.write("\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182")
        buf.write("\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194")
        buf.write("\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6")
        buf.write("\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8")
        buf.write("\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca")
        buf.write("\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc")
        buf.write("\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee")
        buf.write("\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200")
        buf.write("\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212")
        buf.write("\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224")
        buf.write("\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236")
        buf.write("\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248")
        buf.write("\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a")
        buf.write("\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c")
        buf.write("\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e")
        buf.write("\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290")
        buf.write("\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2")
        buf.write("\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4")
        buf.write("\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6")
        buf.write("\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8")
        buf.write("\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea")
        buf.write("\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc")
        buf.write("\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e")
        buf.write("\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320")
        buf.write("\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332")
        buf.write("\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344")
        buf.write("\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356")
        buf.write("\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368")
        buf.write("\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a")
        buf.write("\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c")
        buf.write("\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e")
        buf.write("\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0")
        buf.write("\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2")
        buf.write("\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4")
        buf.write("\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6")
        buf.write("\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8")
        buf.write("\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a")
        buf.write("\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c")
        buf.write("\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e")
        buf.write("\u0430\u0432\u0434\u0436\u0438\u043a\u043c\2\u0099\4\2")
        buf.write("\30\30\u0114\u0114\4\2\13\13\u01b1\u01b1\5\2\u00ec\u00ec")
        buf.write("\u012c\u012c\u01cd\u01cd\4\2TT\u0193\u0193\5\288\u019d")
        buf.write("\u019d\u0229\u0229\4\2\u009d\u009d\u00ae\u00ae\4\2\t\t")
        buf.write(",,\5\2\u0095\u0095\u010a\u010a\u0273\u0273\5\2\u0164\u0164")
        buf.write("\u0189\u0189\u01a1\u01a1\4\2\u00da\u00da\u027b\u027b\4")
        buf.write("\288\u0229\u0229\4\2\5\5\u00a4\u00a4\5\2\5\5\u00a4\u00a4")
        buf.write("\u0155\u0155\5\2{{\u0192\u0192\u022a\u022a\4\2\u013f\u013f")
        buf.write("\u0193\u0193\4\2\u0149\u0149\u0232\u0232\5\2\u00d0\u00d0")
        buf.write("\u010c\u010c\u019c\u019c\4\2\u00c9\u00c9\u00e5\u00e5\4")
        buf.write("\2\u008f\u008f\u024c\u024c\4\2\u0132\u0132\u026e\u026e")
        buf.write("\4\2\5\5\u01e2\u01e2\4\2\6\6\u0094\u0094\4\2\r\rxx\4\2")
        buf.write("\u00f3\u00f4\u0188\u0188\4\2\u0092\u0092\u00f7\u00f7\4")
        buf.write("\2\u0177\u0177\u01e1\u01e1\4\2\u017c\u017c\u027b\u027b")
        buf.write("\4\2\60\60\u0222\u0222\4\2\u0184\u0184\u018b\u018b\5\2")
        buf.write("\u00cf\u00cf\u0133\u0133\u016d\u016d\4\2##\u013e\u013e")
        buf.write("\4\2\u0185\u0185\u018d\u018d\4\2\u02d6\u02d6\u02f7\u02f7")
        buf.write("\4\2\u00eb\u00eb\u016c\u016c\4\2AA\u0167\u0167\4\2\u00bf")
        buf.write("\u00bf\u00f9\u00f9\4\2\33\33\u023e\u023e\3\2\u0290\u0291")
        buf.write("\5\2``\u00cd\u00cd\u00da\u00da\4\2[[\u0096\u0096\4\2\u012f")
        buf.write("\u012f\u0141\u0141\4\2\u00b3\u00b3\u0264\u0264\4\2\u0095")
        buf.write("\u0095\u01bf\u01bf\4\2\u008f\u008f\u00da\u00da\4\2\u0178")
        buf.write("\u0178\u01f9\u01f9\4\2))\u0209\u0209\4\2\u012e\u012e\u0249")
        buf.write("\u0249\4\2\26\26\u01ca\u01ca\4\2\u00f0\u00f0\u013a\u013a")
        buf.write("\4\2\u026d\u026d\u02d4\u02d4\5\2\u008f\u008f\u011b\u011b")
        buf.write("\u01d5\u01d5\5\2\u008f\u008f\u011b\u011b\u0172\u0172\4")
        buf.write("\2\u014c\u014c\u0170\u0170\4\2\17\17\u009e\u009e\4\2\u00a4")
        buf.write("\u00a4\u011b\u011b\4\2\u0130\u0130\u027d\u027d\4\2\u00df")
        buf.write("\u00df\u01aa\u01aa\4\2\u008e\u008e\u011a\u011a\5\2\u00f0")
        buf.write("\u00f0\u013a\u013a\u0148\u0148\4\2\u00e4\u00e4\u012f\u012f")
        buf.write("\4\2yy\u0093\u0093\6\2\u0103\u0103\u0109\u0109\u0169\u0169")
        buf.write("\u0199\u0199\4\2\u008f\u008f\u02e3\u02e3\3\3\u02ec\u02ec")
        buf.write("\3\2\u02ec\u02ec\3\2\u01ee\u01ef\4\2\u018c\u018c\u0293")
        buf.write("\u0293\3\2gh\4\2\u017d\u017d\u0288\u0288\4\2**\u00f7\u00f7")
        buf.write("\4\2;;\u0097\u0097\5\2\r\r\u00a0\u00a0\u026c\u026c\4\2")
        buf.write("vv\u015c\u015c\5\2\u00e1\u00e1\u0121\u0121\u01f4\u01f4")
        buf.write("\4\2\u0205\u0205\u0252\u0252\5\2\u0205\u0205\u0224\u0224")
        buf.write("\u0252\u0252\4\2\u00be\u00be\u00f8\u00f8\4\2ww\u01f8\u01f8")
        buf.write("\4\2\u00f6\u00f6\u011b\u011b\4\2\r\r\u0272\u0272\4\2%")
        buf.write("%\u020f\u020f\4\2\31\31\u0098\u0098\4\2\u00d1\u00d1\u011e")
        buf.write("\u011e\4\2\r\r\u00d1\u00d1\4\2\u024a\u024a\u024f\u024f")
        buf.write("\4\2\u0149\u0149\u0237\u0237\3\2\u0126\u0129\3\2\u02e9")
        buf.write("\u02ea\4\2\u02dd\u02dd\u02e1\u02e1\3\2\u02de\u02df\4\2")
        buf.write("\u008c\u008c\u00fa\u00fa\6\2\r\r\24\24\u00c3\u00c3\u0225")
        buf.write("\u0225\5\2::\u0120\u0120\u025b\u025b\4\2\r\r\u00a0\u00a0")
        buf.write("\4\2FF\u0296\u0296\4\2\u00a0\u00a0\u026c\u026c\3\2\u01ab")
        buf.write("\u01ae\4\2CC^^\4\2\u00d2\u00d2\u011f\u011f\4\2KK\u015f")
        buf.write("\u015f\4\2\u0297\u0297\u029a\u029a\4\2\u00b5\u00b5\u016b")
        buf.write("\u016b\4\2\u00b9\u00b9\u015a\u015a\4\2ll\u00a2\u00a2\4")
        buf.write("\2\u00ee\u00ee\u0219\u0219\7\2\u02b6\u02b8\u02ba\u02bf")
        buf.write("\u02c1\u02c2\u02c4\u02c4\u02c8\u02cb\3\2\u02af\u02b5\3")
        buf.write("\2\u02a9\u02ae\4\2\u01cd\u01cd\u01fc\u01fc\4\2\u00d7\u00d7")
        buf.write("\u01bc\u01bc\4\2\u0179\u0179\u0203\u0203\3\2\u00b6\u00b7")
        buf.write("\4\2\u0196\u0196\u022b\u022b\5\2\u00cb\u00cb\u023b\u023b")
        buf.write("\u0289\u0289\4\2[[\u01f7\u01f7\5\2[[\u0172\u0172\u01f7")
        buf.write("\u01f7\4\2\u01a2\u01a2\u0238\u0238\4\2\u01e6\u01e6\u0227")
        buf.write("\u0227\4\2\u00f6\u00f6\u01e7\u01e7\3\2\u01af\u01b0\4\2")
        buf.write("\u0081\u0081\u02a5\u02a5\4\2\u0156\u0156\u0208\u0208\4")
        buf.write("\2@@JJ\5\2\20\20tt\u00a4\u00a4\4\2\20\20\u00a4\u00a4\4")
        buf.write("\2tt\u00a4\u00a4\4\2\20\20tt\5\2\20\20\u00a4\u00a4\u00c1")
        buf.write("\u00c1\4\2\24\24\u00c8\u00c8\4\2PP\u01c7\u01c7\6\2\20")
        buf.write("\20ZZ\u00a4\u00a4\u020c\u020c\6\2\20\20\u00a4\u00a4\u020c")
        buf.write("\u020c\u0273\u0273\5\2\u0095\u0095\u00a4\u00a4\u010a\u010a")
        buf.write("\b\2\20\20\u0095\u0095\u00a4\u00a4\u010a\u010a\u020c\u020c")
        buf.write("\u0273\u0273\4\2\u00a4\u00a4\u0273\u0273\5\2\20\20\u00a4")
        buf.write("\u00a4\u00e7\u00e7\5\2\20\20\u00a4\u00a4\u020c\u020c\5")
        buf.write("\2\20\20tt\u01e8\u01e8\5\2\20\20\u00a4\u00a4\u0279\u0279")
        buf.write("\f\2\20\20\'\'ZZ\u0095\u0095\u00a4\u00a4\u010a\u010a\u0132")
        buf.write("\u0132\u01cf\u01cf\u020c\u020c\u0273\u0273\7\2\20\20t")
        buf.write("t\u00a4\u00a4\u013c\u013c\u026d\u026d\6\2\20\20\u00a4")
        buf.write("\u00a4\u00c1\u00c1\u0268\u0268\5\2\u00a4\u00a4\u014a\u014a")
        buf.write("\u0268\u0268\4\2\22\22\36\36\4\2\u009a\u009a\u025c\u025c")
        buf.write("\b\2\u0081\u0081\u00f1\u00f1\u0150\u0150\u0156\u0156\u0208")
        buf.write("\u0208\u02a5\u02a5\3\2\u02d4\u02d5\4\2\u02cf\u02cf\u02d6")
        buf.write("\u02d6\u00a3\2\5\5\t\f\22\22\27\27\32\32\34\36!!##%&*")
        buf.write("*,,//\62\668:>>@@BDFFIKNNQTVVXXZ\\^afilsvwy~\u0081\u0081")
        buf.write("\u0083\u0085\u0087\u0089\u008b\u008c\u0090\u0090\u0092")
        buf.write("\u0093\u0095\u0095\u0099\u0099\u009b\u009b\u009d\u009d")
        buf.write("\u009f\u009f\u00a2\u00a3\u00a5\u00a6\u00aa\u00aa\u00ad")
        buf.write("\u00af\u00b5\u00b9\u00bb\u00be\u00c1\u00c1\u00c3\u00c4")
        buf.write("\u00c6\u00c6\u00c8\u00c8\u00ca\u00cb\u00d0\u00d2\u00d5")
        buf.write("\u00d5\u00d7\u00da\u00e1\u00e2\u00e9\u00e9\u00ec\u00ec")
        buf.write("\u00ee\u00ee\u00f1\u00f1\u00f4\u00f4\u00f6\u00fc\u00ff")
        buf.write("\u0101\u0107\u0109\u010c\u010e\u0110\u0111\u0113\u0113")
        buf.write("\u0115\u0117\u0119\u0119\u011b\u0121\u0123\u0123\u0125")
        buf.write("\u0128\u012a\u012b\u012f\u012f\u0131\u0131\u0134\u0134")
        buf.write("\u0136\u0139\u013b\u013b\u013f\u013f\u0142\u0142\u0145")
        buf.write("\u0145\u0147\u0147\u0149\u014a\u014d\u014d\u0150\u0153")
        buf.write("\u0155\u0156\u0159\u0162\u0164\u0166\u0169\u016b\u0172")
        buf.write("\u0173\u0179\u0179\u017f\u0183\u0185\u0185\u0188\u0189")
        buf.write("\u018c\u018c\u018e\u018f\u0192\u0192\u0194\u0194\u0196")
        buf.write("\u0197\u0199\u0199\u019b\u019e\u01a0\u01a3\u01a5\u01a5")
        buf.write("\u01b1\u01b1\u01b4\u01b5\u01b8\u01ba\u01bc\u01be\u01c1")
        buf.write("\u01c1\u01c7\u01c7\u01cc\u01cf\u01d1\u01d1\u01d3\u01d3")
        buf.write("\u01d8\u01d8\u01da\u01db\u01dd\u01dd\u01e0\u01e0\u01e3")
        buf.write("\u01e4\u01e7\u01e7\u01e9\u01eb\u01ee\u01f1\u01f4\u01f4")
        buf.write("\u01f7\u01f8\u01fa\u01fd\u01ff\u0201\u0203\u0205\u0208")
        buf.write("\u0208\u020a\u020b\u020d\u020d\u020f\u0212\u0214\u0217")
        buf.write("\u0219\u0219\u021b\u021f\u0221\u0221\u0223\u0225\u0229")
        buf.write("\u022d\u022f\u0233\u0235\u023b\u023d\u023d\u0241\u0241")
        buf.write("\u024c\u024c\u0251\u0259\u025b\u025d\u025f\u025f\u0261")
        buf.write("\u0261\u0263\u0263\u0266\u0268\u026d\u026d\u0270\u0270")
        buf.write("\u0272\u0272\u0275\u0279\u027b\u027b\u027d\u0280\u0282")
        buf.write("\u0285\u0288\u028b\u028e\u028f\u0292\u029f\u02a1\u02b8")
        buf.write("\u02ba\u02bf\u02c1\u02c2\u02c4\u02c5\u02c7\u02cb\u02f7")
        buf.write("\u02f7\5\2NN\u02b9\u02b9\u02c5\u02c7\7\2ss\u02b6\u02b6")
        buf.write("\u02c0\u02c0\u02c3\u02c3\u02c8\u02c8\2\u2647\2\u0447\3")
        buf.write("\2\2\2\4\u0472\3\2\2\2\6\u0474\3\2\2\2\b\u0479\3\2\2\2")
        buf.write("\n\u048c\3\2\2\2\f\u04c0\3\2\2\2\16\u04c4\3\2\2\2\20\u04d2")
        buf.write("\3\2\2\2\22\u04d6\3\2\2\2\24\u04e2\3\2\2\2\26\u04e7\3")
        buf.write("\2\2\2\30\u04f4\3\2\2\2\32\u050a\3\2\2\2\34\u0526\3\2")
        buf.write("\2\2\36\u054c\3\2\2\2 \u054e\3\2\2\2\"\u055f\3\2\2\2$")
        buf.write("\u0581\3\2\2\2&\u0583\3\2\2\2(\u0588\3\2\2\2*\u059b\3")
        buf.write("\2\2\2,\u05ca\3\2\2\2.\u05e7\3\2\2\2\60\u060c\3\2\2\2")
        buf.write("\62\u0611\3\2\2\2\64\u062a\3\2\2\2\66\u0642\3\2\2\28\u064b")
        buf.write("\3\2\2\2:\u0654\3\2\2\2<\u065d\3\2\2\2>\u0661\3\2\2\2")
        buf.write("@\u0666\3\2\2\2B\u067e\3\2\2\2D\u0680\3\2\2\2F\u0684\3")
        buf.write("\2\2\2H\u06b5\3\2\2\2J\u06d1\3\2\2\2L\u06d3\3\2\2\2N\u06e1")
        buf.write("\3\2\2\2P\u06e6\3\2\2\2R\u06eb\3\2\2\2T\u06f1\3\2\2\2")
        buf.write("V\u06f4\3\2\2\2X\u06ff\3\2\2\2Z\u070e\3\2\2\2\\\u071f")
        buf.write("\3\2\2\2^\u0730\3\2\2\2`\u0738\3\2\2\2b\u073d\3\2\2\2")
        buf.write("d\u074d\3\2\2\2f\u0751\3\2\2\2h\u0769\3\2\2\2j\u076c\3")
        buf.write("\2\2\2l\u0772\3\2\2\2n\u077e\3\2\2\2p\u0787\3\2\2\2r\u07a3")
        buf.write("\3\2\2\2t\u07a9\3\2\2\2v\u07ac\3\2\2\2x\u07b3\3\2\2\2")
        buf.write("z\u07bb\3\2\2\2|\u07c7\3\2\2\2~\u07c9\3\2\2\2\u0080\u07cd")
        buf.write("\3\2\2\2\u0082\u07d3\3\2\2\2\u0084\u07ec\3\2\2\2\u0086")
        buf.write("\u080b\3\2\2\2\u0088\u0838\3\2\2\2\u008a\u0842\3\2\2\2")
        buf.write("\u008c\u0844\3\2\2\2\u008e\u0849\3\2\2\2\u0090\u0857\3")
        buf.write("\2\2\2\u0092\u0859\3\2\2\2\u0094\u085e\3\2\2\2\u0096\u086e")
        buf.write("\3\2\2\2\u0098\u088f\3\2\2\2\u009a\u08b2\3\2\2\2\u009c")
        buf.write("\u08b6\3\2\2\2\u009e\u08c5\3\2\2\2\u00a0\u08c7\3\2\2\2")
        buf.write("\u00a2\u08ca\3\2\2\2\u00a4\u08cf\3\2\2\2\u00a6\u08d9\3")
        buf.write("\2\2\2\u00a8\u08f5\3\2\2\2\u00aa\u08f7\3\2\2\2\u00ac\u08fb")
        buf.write("\3\2\2\2\u00ae\u090e\3\2\2\2\u00b0\u0916\3\2\2\2\u00b2")
        buf.write("\u0947\3\2\2\2\u00b4\u0949\3\2\2\2\u00b6\u094e\3\2\2\2")
        buf.write("\u00b8\u0952\3\2\2\2\u00ba\u0958\3\2\2\2\u00bc\u095c\3")
        buf.write("\2\2\2\u00be\u0964\3\2\2\2\u00c0\u097e\3\2\2\2\u00c2\u0980")
        buf.write("\3\2\2\2\u00c4\u0986\3\2\2\2\u00c6\u0989\3\2\2\2\u00c8")
        buf.write("\u098c\3\2\2\2\u00ca\u098f\3\2\2\2\u00cc\u09c5\3\2\2\2")
        buf.write("\u00ce\u09c7\3\2\2\2\u00d0\u09d2\3\2\2\2\u00d2\u09da\3")
        buf.write("\2\2\2\u00d4\u09e5\3\2\2\2\u00d6\u09e7\3\2\2\2\u00d8\u09ec")
        buf.write("\3\2\2\2\u00da\u0a1e\3\2\2\2\u00dc\u0a22\3\2\2\2\u00de")
        buf.write("\u0a3c\3\2\2\2\u00e0\u0a3e\3\2\2\2\u00e2\u0a52\3\2\2\2")
        buf.write("\u00e4\u0a7e\3\2\2\2\u00e6\u0a9b\3\2\2\2\u00e8\u0ac0\3")
        buf.write("\2\2\2\u00ea\u0ac4\3\2\2\2\u00ec\u0af3\3\2\2\2\u00ee\u0af7")
        buf.write("\3\2\2\2\u00f0\u0b02\3\2\2\2\u00f2\u0b1b\3\2\2\2\u00f4")
        buf.write("\u0b1e\3\2\2\2\u00f6\u0b20\3\2\2\2\u00f8\u0b2b\3\2\2\2")
        buf.write("\u00fa\u0b30\3\2\2\2\u00fc\u0b33\3\2\2\2\u00fe\u0b3f\3")
        buf.write("\2\2\2\u0100\u0b43\3\2\2\2\u0102\u0b4f\3\2\2\2\u0104\u0b52")
        buf.write("\3\2\2\2\u0106\u0b58\3\2\2\2\u0108\u0b5f\3\2\2\2\u010a")
        buf.write("\u0b6b\3\2\2\2\u010c\u0b84\3\2\2\2\u010e\u0b90\3\2\2\2")
        buf.write("\u0110\u0b95\3\2\2\2\u0112\u0b9d\3\2\2\2\u0114\u0b9f\3")
        buf.write("\2\2\2\u0116\u0bdd\3\2\2\2\u0118\u0be1\3\2\2\2\u011a\u0be6")
        buf.write("\3\2\2\2\u011c\u0c4e\3\2\2\2\u011e\u0c50\3\2\2\2\u0120")
        buf.write("\u0c62\3\2\2\2\u0122\u0ca6\3\2\2\2\u0124\u0cb8\3\2\2\2")
        buf.write("\u0126\u0ce2\3\2\2\2\u0128\u0ce6\3\2\2\2\u012a\u0cf4\3")
        buf.write("\2\2\2\u012c\u0d38\3\2\2\2\u012e\u0d46\3\2\2\2\u0130\u0d65")
        buf.write("\3\2\2\2\u0132\u0d68\3\2\2\2\u0134\u0d73\3\2\2\2\u0136")
        buf.write("\u0dab\3\2\2\2\u0138\u0daf\3\2\2\2\u013a\u0db1\3\2\2\2")
        buf.write("\u013c\u0dfe\3\2\2\2\u013e\u0e23\3\2\2\2\u0140\u0e34\3")
        buf.write("\2\2\2\u0142\u0e3d\3\2\2\2\u0144\u0e41\3\2\2\2\u0146\u0e60")
        buf.write("\3\2\2\2\u0148\u0e68\3\2\2\2\u014a\u0e6d\3\2\2\2\u014c")
        buf.write("\u0e74\3\2\2\2\u014e\u0e7f\3\2\2\2\u0150\u0e81\3\2\2\2")
        buf.write("\u0152\u0ea2\3\2\2\2\u0154\u0ea4\3\2\2\2\u0156\u0eb7\3")
        buf.write("\2\2\2\u0158\u0ecb\3\2\2\2\u015a\u0edb\3\2\2\2\u015c\u0ee1")
        buf.write("\3\2\2\2\u015e\u0eea\3\2\2\2\u0160\u0eee\3\2\2\2\u0162")
        buf.write("\u0ef7\3\2\2\2\u0164\u0efc\3\2\2\2\u0166\u0f05\3\2\2\2")
        buf.write("\u0168\u0f07\3\2\2\2\u016a\u0f33\3\2\2\2\u016c\u0f35\3")
        buf.write("\2\2\2\u016e\u0f3c\3\2\2\2\u0170\u0f61\3\2\2\2\u0172\u0f74")
        buf.write("\3\2\2\2\u0174\u0f7f\3\2\2\2\u0176\u0f81\3\2\2\2\u0178")
        buf.write("\u0f91\3\2\2\2\u017a\u0f93\3\2\2\2\u017c\u0fa7\3\2\2\2")
        buf.write("\u017e\u0fca\3\2\2\2\u0180\u0fd3\3\2\2\2\u0182\u0fd7\3")
        buf.write("\2\2\2\u0184\u0ff3\3\2\2\2\u0186\u0ffb\3\2\2\2\u0188\u1000")
        buf.write("\3\2\2\2\u018a\u1004\3\2\2\2\u018c\u100e\3\2\2\2\u018e")
        buf.write("\u1010\3\2\2\2\u0190\u1018\3\2\2\2\u0192\u101a\3\2\2\2")
        buf.write("\u0194\u1020\3\2\2\2\u0196\u1022\3\2\2\2\u0198\u1027\3")
        buf.write("\2\2\2\u019a\u1069\3\2\2\2\u019c\u106b\3\2\2\2\u019e\u107a")
        buf.write("\3\2\2\2\u01a0\u1090\3\2\2\2\u01a2\u109c\3\2\2\2\u01a4")
        buf.write("\u10ae\3\2\2\2\u01a6\u10b5\3\2\2\2\u01a8\u10be\3\2\2\2")
        buf.write("\u01aa\u10ce\3\2\2\2\u01ac\u10d0\3\2\2\2\u01ae\u10d9\3")
        buf.write("\2\2\2\u01b0\u10db\3\2\2\2\u01b2\u1102\3\2\2\2\u01b4\u1123")
        buf.write("\3\2\2\2\u01b6\u1140\3\2\2\2\u01b8\u1144\3\2\2\2\u01ba")
        buf.write("\u114b\3\2\2\2\u01bc\u114d\3\2\2\2\u01be\u1157\3\2\2\2")
        buf.write("\u01c0\u1167\3\2\2\2\u01c2\u116c\3\2\2\2\u01c4\u117c\3")
        buf.write("\2\2\2\u01c6\u117e\3\2\2\2\u01c8\u11a8\3\2\2\2\u01ca\u11bd")
        buf.write("\3\2\2\2\u01cc\u11c0\3\2\2\2\u01ce\u11e5\3\2\2\2\u01d0")
        buf.write("\u11fa\3\2\2\2\u01d2\u11fc\3\2\2\2\u01d4\u11fe\3\2\2\2")
        buf.write("\u01d6\u1204\3\2\2\2\u01d8\u1206\3\2\2\2\u01da\u1236\3")
        buf.write("\2\2\2\u01dc\u1238\3\2\2\2\u01de\u123a\3\2\2\2\u01e0\u123c")
        buf.write("\3\2\2\2\u01e2\u125a\3\2\2\2\u01e4\u125c\3\2\2\2\u01e6")
        buf.write("\u126e\3\2\2\2\u01e8\u1275\3\2\2\2\u01ea\u1279\3\2\2\2")
        buf.write("\u01ec\u127d\3\2\2\2\u01ee\u1281\3\2\2\2\u01f0\u1288\3")
        buf.write("\2\2\2\u01f2\u128c\3\2\2\2\u01f4\u1293\3\2\2\2\u01f6\u1298")
        buf.write("\3\2\2\2\u01f8\u12a0\3\2\2\2\u01fa\u12af\3\2\2\2\u01fc")
        buf.write("\u12b2\3\2\2\2\u01fe\u12b6\3\2\2\2\u0200\u12bb\3\2\2\2")
        buf.write("\u0202\u12bf\3\2\2\2\u0204\u12d0\3\2\2\2\u0206\u12d6\3")
        buf.write("\2\2\2\u0208\u12e0\3\2\2\2\u020a\u12ed\3\2\2\2\u020c\u12f1")
        buf.write("\3\2\2\2\u020e\u12ff\3\2\2\2\u0210\u1301\3\2\2\2\u0212")
        buf.write("\u130f\3\2\2\2\u0214\u1320\3\2\2\2\u0216\u1339\3\2\2\2")
        buf.write("\u0218\u1343\3\2\2\2\u021a\u1347\3\2\2\2\u021c\u136a\3")
        buf.write("\2\2\2\u021e\u1376\3\2\2\2\u0220\u1381\3\2\2\2\u0222\u1387")
        buf.write("\3\2\2\2\u0224\u1392\3\2\2\2\u0226\u139e\3\2\2\2\u0228")
        buf.write("\u13a6\3\2\2\2\u022a\u13b5\3\2\2\2\u022c\u13b9\3\2\2\2")
        buf.write("\u022e\u13d3\3\2\2\2\u0230\u13d6\3\2\2\2\u0232\u13dc\3")
        buf.write("\2\2\2\u0234\u13e1\3\2\2\2\u0236\u13e9\3\2\2\2\u0238\u13f1")
        buf.write("\3\2\2\2\u023a\u13f4\3\2\2\2\u023c\u1404\3\2\2\2\u023e")
        buf.write("\u1409\3\2\2\2\u0240\u140d\3\2\2\2\u0242\u1435\3\2\2\2")
        buf.write("\u0244\u1437\3\2\2\2\u0246\u144d\3\2\2\2\u0248\u144f\3")
        buf.write("\2\2\2\u024a\u1454\3\2\2\2\u024c\u1456\3\2\2\2\u024e\u1458")
        buf.write("\3\2\2\2\u0250\u145a\3\2\2\2\u0252\u145e\3\2\2\2\u0254")
        buf.write("\u1463\3\2\2\2\u0256\u1469\3\2\2\2\u0258\u146f\3\2\2\2")
        buf.write("\u025a\u147d\3\2\2\2\u025c\u1491\3\2\2\2\u025e\u1496\3")
        buf.write("\2\2\2\u0260\u14a3\3\2\2\2\u0262\u14a5\3\2\2\2\u0264\u14b3")
        buf.write("\3\2\2\2\u0266\u14bd\3\2\2\2\u0268\u14c3\3\2\2\2\u026a")
        buf.write("\u14c5\3\2\2\2\u026c\u14c8\3\2\2\2\u026e\u14d1\3\2\2\2")
        buf.write("\u0270\u14e9\3\2\2\2\u0272\u14f8\3\2\2\2\u0274\u14fa\3")
        buf.write("\2\2\2\u0276\u150f\3\2\2\2\u0278\u151e\3\2\2\2\u027a\u1534")
        buf.write("\3\2\2\2\u027c\u153b\3\2\2\2\u027e\u1548\3\2\2\2\u0280")
        buf.write("\u154b\3\2\2\2\u0282\u1560\3\2\2\2\u0284\u156a\3\2\2\2")
        buf.write("\u0286\u1573\3\2\2\2\u0288\u1584\3\2\2\2\u028a\u15af\3")
        buf.write("\2\2\2\u028c\u15b8\3\2\2\2\u028e\u15c4\3\2\2\2\u0290\u15cc")
        buf.write("\3\2\2\2\u0292\u15d0\3\2\2\2\u0294\u15ef\3\2\2\2\u0296")
        buf.write("\u15f3\3\2\2\2\u0298\u1600\3\2\2\2\u029a\u1606\3\2\2\2")
        buf.write("\u029c\u160a\3\2\2\2\u029e\u1615\3\2\2\2\u02a0\u1636\3")
        buf.write("\2\2\2\u02a2\u1639\3\2\2\2\u02a4\u164e\3\2\2\2\u02a6\u1651")
        buf.write("\3\2\2\2\u02a8\u1654\3\2\2\2\u02aa\u1658\3\2\2\2\u02ac")
        buf.write("\u166b\3\2\2\2\u02ae\u166d\3\2\2\2\u02b0\u167e\3\2\2\2")
        buf.write("\u02b2\u1685\3\2\2\2\u02b4\u168a\3\2\2\2\u02b6\u16a1\3")
        buf.write("\2\2\2\u02b8\u16ab\3\2\2\2\u02ba\u16ad\3\2\2\2\u02bc\u16bb")
        buf.write("\3\2\2\2\u02be\u16c9\3\2\2\2\u02c0\u16ed\3\2\2\2\u02c2")
        buf.write("\u16ef\3\2\2\2\u02c4\u170d\3\2\2\2\u02c6\u1712\3\2\2\2")
        buf.write("\u02c8\u1714\3\2\2\2\u02ca\u1720\3\2\2\2\u02cc\u1734\3")
        buf.write("\2\2\2\u02ce\u1736\3\2\2\2\u02d0\u1739\3\2\2\2\u02d2\u1753")
        buf.write("\3\2\2\2\u02d4\u1755\3\2\2\2\u02d6\u1759\3\2\2\2\u02d8")
        buf.write("\u1768\3\2\2\2\u02da\u1774\3\2\2\2\u02dc\u177c\3\2\2\2")
        buf.write("\u02de\u1780\3\2\2\2\u02e0\u178d\3\2\2\2\u02e2\u1793\3")
        buf.write("\2\2\2\u02e4\u17a1\3\2\2\2\u02e6\u17b5\3\2\2\2\u02e8\u17be")
        buf.write("\3\2\2\2\u02ea\u17c0\3\2\2\2\u02ec\u17c7\3\2\2\2\u02ee")
        buf.write("\u17cc\3\2\2\2\u02f0\u17d9\3\2\2\2\u02f2\u17e1\3\2\2\2")
        buf.write("\u02f4\u17e9\3\2\2\2\u02f6\u17f1\3\2\2\2\u02f8\u17f3\3")
        buf.write("\2\2\2\u02fa\u17ff\3\2\2\2\u02fc\u1819\3\2\2\2\u02fe\u181b")
        buf.write("\3\2\2\2\u0300\u1829\3\2\2\2\u0302\u182e\3\2\2\2\u0304")
        buf.write("\u1840\3\2\2\2\u0306\u1844\3\2\2\2\u0308\u184c\3\2\2\2")
        buf.write("\u030a\u1856\3\2\2\2\u030c\u185e\3\2\2\2\u030e\u1864\3")
        buf.write("\2\2\2\u0310\u1869\3\2\2\2\u0312\u1870\3\2\2\2\u0314\u1889")
        buf.write("\3\2\2\2\u0316\u189c\3\2\2\2\u0318\u18a0\3\2\2\2\u031a")
        buf.write("\u18a3\3\2\2\2\u031c\u18b9\3\2\2\2\u031e\u18be\3\2\2\2")
        buf.write("\u0320\u18d1\3\2\2\2\u0322\u18d3\3\2\2\2\u0324\u18e3\3")
        buf.write("\2\2\2\u0326\u18eb\3\2\2\2\u0328\u18f0\3\2\2\2\u032a\u18f4")
        buf.write("\3\2\2\2\u032c\u18ff\3\2\2\2\u032e\u1902\3\2\2\2\u0330")
        buf.write("\u1914\3\2\2\2\u0332\u1916\3\2\2\2\u0334\u1925\3\2\2\2")
        buf.write("\u0336\u1930\3\2\2\2\u0338\u193e\3\2\2\2\u033a\u1943\3")
        buf.write("\2\2\2\u033c\u1945\3\2\2\2\u033e\u194f\3\2\2\2\u0340\u1951")
        buf.write("\3\2\2\2\u0342\u197e\3\2\2\2\u0344\u198b\3\2\2\2\u0346")
        buf.write("\u1993\3\2\2\2\u0348\u199f\3\2\2\2\u034a\u19bf\3\2\2\2")
        buf.write("\u034c\u19d3\3\2\2\2\u034e\u19d5\3\2\2\2\u0350\u19d9\3")
        buf.write("\2\2\2\u0352\u1a0c\3\2\2\2\u0354\u1a0e\3\2\2\2\u0356\u1a2c")
        buf.write("\3\2\2\2\u0358\u1a2e\3\2\2\2\u035a\u1a43\3\2\2\2\u035c")
        buf.write("\u1a61\3\2\2\2\u035e\u1a65\3\2\2\2\u0360\u1a68\3\2\2\2")
        buf.write("\u0362\u1a7b\3\2\2\2\u0364\u1a83\3\2\2\2\u0366\u1a95\3")
        buf.write("\2\2\2\u0368\u1a9c\3\2\2\2\u036a\u1ab4\3\2\2\2\u036c\u1ab6")
        buf.write("\3\2\2\2\u036e\u1b07\3\2\2\2\u0370\u1b0c\3\2\2\2\u0372")
        buf.write("\u1b0e\3\2\2\2\u0374\u1b4d\3\2\2\2\u0376\u1c8a\3\2\2\2")
        buf.write("\u0378\u1c8c\3\2\2\2\u037a\u1c8e\3\2\2\2\u037c\u1c90\3")
        buf.write("\2\2\2\u037e\u1c92\3\2\2\2\u0380\u1c9f\3\2\2\2\u0382\u1ca8")
        buf.write("\3\2\2\2\u0384\u1cb1\3\2\2\2\u0386\u1cb3\3\2\2\2\u0388")
        buf.write("\u1cc4\3\2\2\2\u038a\u1cca\3\2\2\2\u038c\u1cd5\3\2\2\2")
        buf.write("\u038e\u1cd7\3\2\2\2\u0390\u1cef\3\2\2\2\u0392\u1cfd\3")
        buf.write("\2\2\2\u0394\u1d0f\3\2\2\2\u0396\u1d24\3\2\2\2\u0398\u1d31")
        buf.write("\3\2\2\2\u039a\u1d34\3\2\2\2\u039c\u1d3d\3\2\2\2\u039e")
        buf.write("\u1d43\3\2\2\2\u03a0\u1d4b\3\2\2\2\u03a2\u1d4e\3\2\2\2")
        buf.write("\u03a4\u1d59\3\2\2\2\u03a6\u1d63\3\2\2\2\u03a8\u1d65\3")
        buf.write("\2\2\2\u03aa\u1d6e\3\2\2\2\u03ac\u1d77\3\2\2\2\u03ae\u1d89")
        buf.write("\3\2\2\2\u03b0\u1d8d\3\2\2\2\u03b2\u1d8f\3\2\2\2\u03b4")
        buf.write("\u1d98\3\2\2\2\u03b6\u1da5\3\2\2\2\u03b8\u1da7\3\2\2\2")
        buf.write("\u03ba\u1da9\3\2\2\2\u03bc\u1dab\3\2\2\2\u03be\u1dad\3")
        buf.write("\2\2\2\u03c0\u1daf\3\2\2\2\u03c2\u1db1\3\2\2\2\u03c4\u1db3")
        buf.write("\3\2\2\2\u03c6\u1dbf\3\2\2\2\u03c8\u1dc1\3\2\2\2\u03ca")
        buf.write("\u1dc6\3\2\2\2\u03cc\u1dc8\3\2\2\2\u03ce\u1dca\3\2\2\2")
        buf.write("\u03d0\u1dcc\3\2\2\2\u03d2\u1dd1\3\2\2\2\u03d4\u1dd9\3")
        buf.write("\2\2\2\u03d6\u1ddb\3\2\2\2\u03d8\u1de1\3\2\2\2\u03da\u1de3")
        buf.write("\3\2\2\2\u03dc\u1def\3\2\2\2\u03de\u1df1\3\2\2\2\u03e0")
        buf.write("\u1df9\3\2\2\2\u03e2\u1e01\3\2\2\2\u03e4\u1e09\3\2\2\2")
        buf.write("\u03e6\u1e0e\3\2\2\2\u03e8\u1e13\3\2\2\2\u03ea\u1e22\3")
        buf.write("\2\2\2\u03ec\u1e24\3\2\2\2\u03ee\u1e2b\3\2\2\2\u03f0\u1e2f")
        buf.write("\3\2\2\2\u03f2\u1e31\3\2\2\2\u03f4\u1e36\3\2\2\2\u03f6")
        buf.write("\u1e38\3\2\2\2\u03f8\u1e40\3\2\2\2\u03fa\u1e4a\3\2\2\2")
        buf.write("\u03fc\u1e52\3\2\2\2\u03fe\u1e54\3\2\2\2\u0400\u1e56\3")
        buf.write("\2\2\2\u0402\u1e58\3\2\2\2\u0404\u1e72\3\2\2\2\u0406\u1e78")
        buf.write("\3\2\2\2\u0408\u1e7c\3\2\2\2\u040a\u1e80\3\2\2\2\u040c")
        buf.write("\u1e89\3\2\2\2\u040e\u1e97\3\2\2\2\u0410\u1ea8\3\2\2\2")
        buf.write("\u0412\u1ecf\3\2\2\2\u0414\u1ed6\3\2\2\2\u0416\u1ee2\3")
        buf.write("\2\2\2\u0418\u1f03\3\2\2\2\u041a\u1f05\3\2\2\2\u041c\u1f4c")
        buf.write("\3\2\2\2\u041e\u1f51\3\2\2\2\u0420\u1f64\3\2\2\2\u0422")
        buf.write("\u1f6e\3\2\2\2\u0424\u1f81\3\2\2\2\u0426\u1fab\3\2\2\2")
        buf.write("\u0428\u20f3\3\2\2\2\u042a\u2133\3\2\2\2\u042c\u2135\3")
        buf.write("\2\2\2\u042e\u2137\3\2\2\2\u0430\u213a\3\2\2\2\u0432\u213e")
        buf.write("\3\2\2\2\u0434\u2144\3\2\2\2\u0436\u2146\3\2\2\2\u0438")
        buf.write("\u214a\3\2\2\2\u043a\u214c\3\2\2\2\u043c\u214e\3\2\2\2")
        buf.write("\u043e\u0441\5\4\3\2\u043f\u0441\5\u03a6\u01d4\2\u0440")
        buf.write("\u043e\3\2\2\2\u0440\u043f\3\2\2\2\u0441\u0443\3\2\2\2")
        buf.write("\u0442\u0444\7\u02ec\2\2\u0443\u0442\3\2\2\2\u0443\u0444")
        buf.write("\3\2\2\2\u0444\u0446\3\2\2\2\u0445\u0440\3\2\2\2\u0446")
        buf.write("\u0449\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448\3\2\2\2")
        buf.write("\u0448\u044a\3\2\2\2\u0449\u0447\3\2\2\2\u044a\u044b\7")
        buf.write("\2\2\3\u044b\3\3\2\2\2\u044c\u0473\5\u0272\u013a\2\u044d")
        buf.write("\u0473\5\b\5\2\u044e\u0473\5\30\r\2\u044f\u0473\5(\25")
        buf.write("\2\u0450\u0473\5\u00a4S\2\u0451\u0473\5\62\32\2\u0452")
        buf.write("\u0473\5X-\2\u0453\u0473\5\u016e\u00b8\2\u0454\u0473\5")
        buf.write("\u00aeX\2\u0455\u0473\5\u00b2Z\2\u0456\u0473\5\n\6\2\u0457")
        buf.write("\u0473\5.\30\2\u0458\u0473\5\32\16\2\u0459\u0473\5\34")
        buf.write("\17\2\u045a\u0473\5\u00acW\2\u045b\u0473\5\u011e\u0090")
        buf.write("\2\u045c\u0473\5\u00eex\2\u045d\u0473\5\u00dco\2\u045e")
        buf.write("\u0473\5\u011a\u008e\2\u045f\u0473\5\u0114\u008b\2\u0460")
        buf.write("\u0473\5\u00b0Y\2\u0461\u0473\5\u00a6T\2\u0462\u0473\5")
        buf.write("\64\33\2\u0463\u0473\5l\67\2\u0464\u0473\5\u016a\u00b6")
        buf.write("\2\u0465\u0473\5\6\4\2\u0466\u0473\5\26\f\2\u0467\u0473")
        buf.write("\5&\24\2\u0468\u0473\5\u00a2R\2\u0469\u0473\5\60\31\2")
        buf.write("\u046a\u0473\5V,\2\u046b\u0473\5\u0266\u0134\2\u046c\u0473")
        buf.write("\5\u0162\u00b2\2\u046d\u0473\5\u00d6l\2\u046e\u0473\5")
        buf.write("\u0164\u00b3\2\u046f\u0473\5\u016c\u00b7\2\u0470\u0473")
        buf.write("\5\u01f8\u00fd\2\u0471\u0473\5\u00d8m\2\u0472\u044c\3")
        buf.write("\2\2\2\u0472\u044d\3\2\2\2\u0472\u044e\3\2\2\2\u0472\u044f")
        buf.write("\3\2\2\2\u0472\u0450\3\2\2\2\u0472\u0451\3\2\2\2\u0472")
        buf.write("\u0452\3\2\2\2\u0472\u0453\3\2\2\2\u0472\u0454\3\2\2\2")
        buf.write("\u0472\u0455\3\2\2\2\u0472\u0456\3\2\2\2\u0472\u0457\3")
        buf.write("\2\2\2\u0472\u0458\3\2\2\2\u0472\u0459\3\2\2\2\u0472\u045a")
        buf.write("\3\2\2\2\u0472\u045b\3\2\2\2\u0472\u045c\3\2\2\2\u0472")
        buf.write("\u045d\3\2\2\2\u0472\u045e\3\2\2\2\u0472\u045f\3\2\2\2")
        buf.write("\u0472\u0460\3\2\2\2\u0472\u0461\3\2\2\2\u0472\u0462\3")
        buf.write("\2\2\2\u0472\u0463\3\2\2\2\u0472\u0464\3\2\2\2\u0472\u0465")
        buf.write("\3\2\2\2\u0472\u0466\3\2\2\2\u0472\u0467\3\2\2\2\u0472")
        buf.write("\u0468\3\2\2\2\u0472\u0469\3\2\2\2\u0472\u046a\3\2\2\2")
        buf.write("\u0472\u046b\3\2\2\2\u0472\u046c\3\2\2\2\u0472\u046d\3")
        buf.write("\2\2\2\u0472\u046e\3\2\2\2\u0472\u046f\3\2\2\2\u0472\u0470")
        buf.write("\3\2\2\2\u0472\u0471\3\2\2\2\u0473\5\3\2\2\2\u0474\u0475")
        buf.write("\7\u00a4\2\2\u0475\u0476\7\u00e2\2\2\u0476\u0477\5\u03e4")
        buf.write("\u01f3\2\u0477\u0478\7\u02ec\2\2\u0478\7\3\2\2\2\u0479")
        buf.write("\u047a\7\20\2\2\u047a\u047b\7\u00e2\2\2\u047b\u047c\5")
        buf.write("\u03e4\u01f3\2\u047c\u047e\7_\2\2\u047d\u047f\7\u0087")
        buf.write("\2\2\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0483")
        buf.write("\3\2\2\2\u0480\u0482\5\u01fc\u00ff\2\u0481\u0480\3\2\2")
        buf.write("\2\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484")
        buf.write("\3\2\2\2\u0484\u0488\3\2\2\2\u0485\u0483\3\2\2\2\u0486")
        buf.write("\u0487\7\u01f0\2\2\u0487\u0489\7\u0217\2\2\u0488\u0486")
        buf.write("\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a\3\2\2\2\u048a")
        buf.write("\u048b\7\u02ec\2\2\u048b\t\3\2\2\2\u048c\u048f\7t\2\2")
        buf.write("\u048d\u048e\7\u0195\2\2\u048e\u0490\7\u01e4\2\2\u048f")
        buf.write("\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491\3\2\2\2")
        buf.write("\u0491\u0492\7\u00e2\2\2\u0492\u049e\5\u03e4\u01f3\2\u0493")
        buf.write("\u0498\7\u02da\2\2\u0494\u0496\7\u02e0\2\2\u0495\u0494")
        buf.write("\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497")
        buf.write("\u0499\5\u0208\u0105\2\u0498\u0495\3\2\2\2\u0499\u049a")
        buf.write("\3\2\2\2\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b")
        buf.write("\u049c\3\2\2\2\u049c\u049d\7\u02db\2\2\u049d\u049f\3\2")
        buf.write("\2\2\u049e\u0493\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u04a1\7\u01ef\2\2\u04a1\u04a8\5\u0416\u020c")
        buf.write("\2\u04a2\u04a7\5\u01fa\u00fe\2\u04a3\u04a7\5\f\7\2\u04a4")
        buf.write("\u04a7\5\20\t\2\u04a5\u04a7\7\u0099\2\2\u04a6\u04a2\3")
        buf.write("\2\2\2\u04a6\u04a3\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a5")
        buf.write("\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8")
        buf.write("\u04a9\3\2\2\2\u04a9\u04bc\3\2\2\2\u04aa\u04a8\3\2\2\2")
        buf.write("\u04ab\u04ad\7\u01b1\2\2\u04ac\u04ab\3\2\2\2\u04ac\u04ad")
        buf.write("\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b7\t\2\2\2\u04af")
        buf.write("\u04b1\7\u008a\2\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2")
        buf.write("\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b4\5\u020c\u0107\2\u04b3")
        buf.write("\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\3\2\2\2")
        buf.write("\u04b5\u04b8\5\u0258\u012d\2\u04b6\u04b8\5\u01fe\u0100")
        buf.write("\2\u04b7\u04b0\3\2\2\2\u04b7\u04b6\3\2\2\2\u04b8\u04bd")
        buf.write("\3\2\2\2\u04b9\u04ba\t\3\2\2\u04ba\u04bb\7\u027a\2\2\u04bb")
        buf.write("\u04bd\5\u03c8\u01e5\2\u04bc\u04ac\3\2\2\2\u04bc\u04b9")
        buf.write("\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04bf\7\u02ec\2\2\u04bf")
        buf.write("\13\3\2\2\2\u04c0\u04c2\7\u019e\2\2\u04c1\u04c3\5\16\b")
        buf.write("\2\u04c2\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\r\3\2")
        buf.write("\2\2\u04c4\u04c5\7\u02da\2\2\u04c5\u04c6\7\u01a2\2\2\u04c6")
        buf.write("\u04c7\5\u033e\u01a0\2\u04c7\u04cb\7?\2\2\u04c8\u04cc")
        buf.write("\7\24\2\2\u04c9\u04ca\t\4\2\2\u04ca\u04cc\5\u0408\u0205")
        buf.write("\2\u04cb\u04c8\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04ce")
        buf.write("\3\2\2\2\u04cd\u04cf\5\24\13\2\u04ce\u04cd\3\2\2\2\u04ce")
        buf.write("\u04cf\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1\7\u02db")
        buf.write("\2\2\u04d1\17\3\2\2\2\u04d2\u04d4\7\u01ea\2\2\u04d3\u04d5")
        buf.write("\5\22\n\2\u04d4\u04d3\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5")
        buf.write("\21\3\2\2\2\u04d6\u04d7\7\u01e0\2\2\u04d7\u04d8\7\u02da")
        buf.write("\2\2\u04d8\u04dd\5\u03f8\u01fd\2\u04d9\u04da\7\u02e0\2")
        buf.write("\2\u04da\u04dc\5\u03f8\u01fd\2\u04db\u04d9\3\2\2\2\u04dc")
        buf.write("\u04df\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de\3\2\2\2")
        buf.write("\u04de\u04e0\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e1\7")
        buf.write("\u02db\2\2\u04e1\23\3\2\2\2\u04e2\u04e3\t\5\2\2\u04e3")
        buf.write("\u04e4\5\u033e\u01a0\2\u04e4\u04e5\7?\2\2\u04e5\u04e6")
        buf.write("\5\u0408\u0205\2\u04e6\25\3\2\2\2\u04e7\u04e8\7\u00a4")
        buf.write("\2\2\u04e8\u04ea\7\u019d\2\2\u04e9\u04eb\78\2\2\u04ea")
        buf.write("\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ef\3\2\2\2")
        buf.write("\u04ec\u04ed\5\u03fe\u0200\2\u04ed\u04ee\7\u02d3\2\2\u04ee")
        buf.write("\u04f0\3\2\2\2\u04ef\u04ec\3\2\2\2\u04ef\u04f0\3\2\2\2")
        buf.write("\u04f0\u04f1\3\2\2\2\u04f1\u04f2\5\u03c6\u01e4\2\u04f2")
        buf.write("\u04f3\7\u02ec\2\2\u04f3\27\3\2\2\2\u04f4\u04f5\7\20\2")
        buf.write("\2\u04f5\u04f6\7\u019d\2\2\u04f6\u04f7\5\u03c6\u01e4\2")
        buf.write("\u04f7\u04f9\7_\2\2\u04f8\u04fa\7\u0087\2\2\u04f9\u04f8")
        buf.write("\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb")
        buf.write("\u04fd\t\6\2\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2")
        buf.write("\u04fd\u0501\3\2\2\2\u04fe\u0500\5\u01fc\u00ff\2\u04ff")
        buf.write("\u04fe\3\2\2\2\u0500\u0503\3\2\2\2\u0501\u04ff\3\2\2\2")
        buf.write("\u0501\u0502\3\2\2\2\u0502\u0506\3\2\2\2\u0503\u0501\3")
        buf.write("\2\2\2\u0504\u0505\7\u01f0\2\2\u0505\u0507\7\u0217\2\2")
        buf.write("\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508\3")
        buf.write("\2\2\2\u0508\u0509\7\u02ec\2\2\u0509\31\3\2\2\2\u050a")
        buf.write("\u050d\7t\2\2\u050b\u050c\7\u0195\2\2\u050c\u050e\7\u01e4")
        buf.write("\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f")
        buf.write("\3\2\2\2\u050f\u0513\7\u019d\2\2\u0510\u0511\5\u03fe\u0200")
        buf.write("\2\u0511\u0512\7\u02d3\2\2\u0512\u0514\3\2\2\2\u0513\u0510")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write("\u0517\5\u03c6\u01e4\2\u0516\u0518\5\u01fa\u00fe\2\u0517")
        buf.write("\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051d\t\2\2\2\u051a\u051c\5\36\20\2\u051b\u051a")
        buf.write("\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3\2\2\2\u051d")
        buf.write("\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u051d\3\2\2\2")
        buf.write("\u0520\u0522\7\u00b2\2\2\u0521\u0523\5\u03c6\u01e4\2\u0522")
        buf.write("\u0521\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2")
        buf.write("\u0524\u0525\7\u02ec\2\2\u0525\33\3\2\2\2\u0526\u0529")
        buf.write("\7t\2\2\u0527\u0528\7\u0195\2\2\u0528\u052a\7\u01e4\2")
        buf.write("\2\u0529\u0527\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052b")
        buf.write("\3\2\2\2\u052b\u052c\7\u019d\2\2\u052c\u0530\78\2\2\u052d")
        buf.write("\u052e\5\u03fe\u0200\2\u052e\u052f\7\u02d3\2\2\u052f\u0531")
        buf.write("\3\2\2\2\u0530\u052d\3\2\2\2\u0530\u0531\3\2\2\2\u0531")
        buf.write("\u0532\3\2\2\2\u0532\u0533\5\u03c6\u01e4\2\u0533\u0537")
        buf.write("\t\2\2\2\u0534\u0536\5$\23\2\u0535\u0534\3\2\2\2\u0536")
        buf.write("\u0539\3\2\2\2\u0537\u0535\3\2\2\2\u0537\u0538\3\2\2\2")
        buf.write("\u0538\u053c\3\2\2\2\u0539\u0537\3\2\2\2\u053a\u053b\7")
        buf.write("-\2\2\u053b\u053d\5\u022a\u0116\2\u053c\u053a\3\2\2\2")
        buf.write("\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540\7")
        buf.write("\u00b2\2\2\u053f\u0541\5\u03c6\u01e4\2\u0540\u053f\3\2")
        buf.write("\2\2\u0540\u0541\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0543")
        buf.write("\7\u02ec\2\2\u0543\35\3\2\2\2\u0544\u054d\5\u021a\u010e")
        buf.write("\2\u0545\u054d\5\u0210\u0109\2\u0546\u054d\5\u0212\u010a")
        buf.write("\2\u0547\u054d\5\u0214\u010b\2\u0548\u054d\5\u0218\u010d")
        buf.write("\2\u0549\u054d\5\u0222\u0112\2\u054a\u054d\5 \21\2\u054b")
        buf.write("\u054d\5\"\22\2\u054c\u0544\3\2\2\2\u054c\u0545\3\2\2")
        buf.write("\2\u054c\u0546\3\2\2\2\u054c\u0547\3\2\2\2\u054c\u0548")
        buf.write("\3\2\2\2\u054c\u0549\3\2\2\2\u054c\u054a\3\2\2\2\u054c")
        buf.write("\u054b\3\2\2\2\u054d\37\3\2\2\2\u054e\u054f\7\u01c4\2")
        buf.write("\2\u054f\u055b\5\u0432\u021a\2\u0550\u0551\7\u02da\2\2")
        buf.write("\u0551\u0556\5\u0208\u0105\2\u0552\u0553\7\u02e0\2\2\u0553")
        buf.write("\u0555\5\u0208\u0105\2\u0554\u0552\3\2\2\2\u0555\u0558")
        buf.write("\3\2\2\2\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557")
        buf.write("\u0559\3\2\2\2\u0558\u0556\3\2\2\2\u0559\u055a\7\u02db")
        buf.write("\2\2\u055a\u055c\3\2\2\2\u055b\u0550\3\2\2\2\u055b\u055c")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\7\u02ec\2\2\u055e")
        buf.write("!\3\2\2\2\u055f\u0560\7\u00e2\2\2\u0560\u056c\5\u0432")
        buf.write("\u021a\2\u0561\u0562\7\u02da\2\2\u0562\u0567\5\u0208\u0105")
        buf.write("\2\u0563\u0564\7\u02e0\2\2\u0564\u0566\5\u0208\u0105\2")
        buf.write("\u0565\u0563\3\2\2\2\u0566\u0569\3\2\2\2\u0567\u0565\3")
        buf.write("\2\2\2\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u0567")
        buf.write("\3\2\2\2\u056a\u056b\7\u02db\2\2\u056b\u056d\3\2\2\2\u056c")
        buf.write("\u0561\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2")
        buf.write("\u056e\u056f\7\u01ef\2\2\u056f\u0571\5\u0416\u020c\2\u0570")
        buf.write("\u0572\7\u0099\2\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2")
        buf.write("\2\2\u0572\u0574\3\2\2\2\u0573\u0575\7\u01ea\2\2\u0574")
        buf.write("\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0577\7\u02ec\2\2\u0577#\3\2\2\2\u0578\u0582\5")
        buf.write("\u0210\u0109\2\u0579\u0582\5\u0212\u010a\2\u057a\u0582")
        buf.write("\5\u0214\u010b\2\u057b\u0582\5\u0218\u010d\2\u057c\u0582")
        buf.write("\5\u0222\u0112\2\u057d\u0582\5,\27\2\u057e\u0582\5*\26")
        buf.write("\2\u057f\u0582\5 \21\2\u0580\u0582\5\"\22\2\u0581\u0578")
        buf.write("\3\2\2\2\u0581\u0579\3\2\2\2\u0581\u057a\3\2\2\2\u0581")
        buf.write("\u057b\3\2\2\2\u0581\u057c\3\2\2\2\u0581\u057d\3\2\2\2")
        buf.write("\u0581\u057e\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0580\3")
        buf.write("\2\2\2\u0582%\3\2\2\2\u0583\u0584\7\u00a4\2\2\u0584\u0585")
        buf.write("\7\u01c4\2\2\u0585\u0586\5\u03e6\u01f4\2\u0586\u0587\7")
        buf.write("\u02ec\2\2\u0587\'\3\2\2\2\u0588\u0589\7\20\2\2\u0589")
        buf.write("\u058a\7\u01c4\2\2\u058a\u058b\5\u03e6\u01f4\2\u058b\u058d")
        buf.write("\7_\2\2\u058c\u058e\7\u0087\2\2\u058d\u058c\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u0592\3\2\2\2\u058f\u0591\5\u01fc")
        buf.write("\u00ff\2\u0590\u058f\3\2\2\2\u0591\u0594\3\2\2\2\u0592")
        buf.write("\u0590\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0597\3\2\2\2")
        buf.write("\u0594\u0592\3\2\2\2\u0595\u0596\7\u01f0\2\2\u0596\u0598")
        buf.write("\7\u0217\2\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2\2\2\u0598")
        buf.write("\u0599\3\2\2\2\u0599\u059a\7\u02ec\2\2\u059a)\3\2\2\2")
        buf.write("\u059b\u059c\7\u00e2\2\2\u059c\u05a8\5\u0432\u021a\2\u059d")
        buf.write("\u059e\7\u02da\2\2\u059e\u05a3\5\u0208\u0105\2\u059f\u05a0")
        buf.write("\7\u02e0\2\2\u05a0\u05a2\5\u0208\u0105\2\u05a1\u059f\3")
        buf.write("\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4")
        buf.write("\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6")
        buf.write("\u05a7\7\u02db\2\2\u05a7\u05a9\3\2\2\2\u05a8\u059d\3\2")
        buf.write("\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ab")
        buf.write("\7\u01ef\2\2\u05ab\u05b2\5\u0416\u020c\2\u05ac\u05b1\5")
        buf.write("\u01fa\u00fe\2\u05ad\u05b1\5\f\7\2\u05ae\u05b1\5\20\t")
        buf.write("\2\u05af\u05b1\7\u0099\2\2\u05b0\u05ac\3\2\2\2\u05b0\u05ad")
        buf.write("\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b0\u05af\3\2\2\2\u05b1")
        buf.write("\u05b4\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b2\u05b3\3\2\2\2")
        buf.write("\u05b3\u05c6\3\2\2\2\u05b4\u05b2\3\2\2\2\u05b5\u05b7\7")
        buf.write("\u01b1\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05b8\3\2\2\2\u05b8\u05c1\t\2\2\2\u05b9\u05bb\7\u008a")
        buf.write("\2\2\u05ba\u05b9\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd")
        buf.write("\3\2\2\2\u05bc\u05be\5\u020c\u0107\2\u05bd\u05bc\3\2\2")
        buf.write("\2\u05bd\u05be\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05c2")
        buf.write("\5\u0258\u012d\2\u05c0\u05c2\5\u01fe\u0100\2\u05c1\u05ba")
        buf.write("\3\2\2\2\u05c1\u05c0\3\2\2\2\u05c2\u05c7\3\2\2\2\u05c3")
        buf.write("\u05c4\t\3\2\2\u05c4\u05c5\7\u027a\2\2\u05c5\u05c7\5\u03c8")
        buf.write("\u01e5\2\u05c6\u05b6\3\2\2\2\u05c6\u05c3\3\2\2\2\u05c7")
        buf.write("\u05c8\3\2\2\2\u05c8\u05c9\7\u02ec\2\2\u05c9+\3\2\2\2")
        buf.write("\u05ca\u05cb\7\u01c4\2\2\u05cb\u05d7\5\u0432\u021a\2\u05cc")
        buf.write("\u05cd\7\u02da\2\2\u05cd\u05d2\5\u0208\u0105\2\u05ce\u05cf")
        buf.write("\7\u02e0\2\2\u05cf\u05d1\5\u0208\u0105\2\u05d0\u05ce\3")
        buf.write("\2\2\2\u05d1\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3")
        buf.write("\3\2\2\2\u05d3\u05d5\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d5")
        buf.write("\u05d6\7\u02db\2\2\u05d6\u05d8\3\2\2\2\u05d7\u05cc\3\2")
        buf.write("\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05e3")
        buf.write("\t\2\2\2\u05da\u05dc\7\u008a\2\2\u05db\u05da\3\2\2\2\u05db")
        buf.write("\u05dc\3\2\2\2\u05dc\u05de\3\2\2\2\u05dd\u05df\5\u020c")
        buf.write("\u0107\2\u05de\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df")
        buf.write("\u05e0\3\2\2\2\u05e0\u05e4\5\u0258\u012d\2\u05e1\u05e4")
        buf.write("\5\u01fe\u0100\2\u05e2\u05e4\7\u00c8\2\2\u05e3\u05db\3")
        buf.write("\2\2\2\u05e3\u05e1\3\2\2\2\u05e3\u05e2\3\2\2\2\u05e4\u05e5")
        buf.write("\3\2\2\2\u05e5\u05e6\7\u02ec\2\2\u05e6-\3\2\2\2\u05e7")
        buf.write("\u05ea\7t\2\2\u05e8\u05e9\7\u0195\2\2\u05e9\u05eb\7\u01e4")
        buf.write("\2\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ec")
        buf.write("\3\2\2\2\u05ec\u05ed\7\u01c4\2\2\u05ed\u05f9\5\u03e6\u01f4")
        buf.write("\2\u05ee\u05ef\7\u02da\2\2\u05ef\u05f4\5\u0208\u0105\2")
        buf.write("\u05f0\u05f1\7\u02e0\2\2\u05f1\u05f3\5\u0208\u0105\2\u05f2")
        buf.write("\u05f0\3\2\2\2\u05f3\u05f6\3\2\2\2\u05f4\u05f2\3\2\2\2")
        buf.write("\u05f4\u05f5\3\2\2\2\u05f5\u05f7\3\2\2\2\u05f6\u05f4\3")
        buf.write("\2\2\2\u05f7\u05f8\7\u02db\2\2\u05f8\u05fa\3\2\2\2\u05f9")
        buf.write("\u05ee\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2")
        buf.write("\u05fb\u05fd\5\u01fa\u00fe\2\u05fc\u05fb\3\2\2\2\u05fc")
        buf.write("\u05fd\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u0608\t\2\2\2")
        buf.write("\u05ff\u0601\7\u008a\2\2\u0600\u05ff\3\2\2\2\u0600\u0601")
        buf.write("\3\2\2\2\u0601\u0603\3\2\2\2\u0602\u0604\5\u020c\u0107")
        buf.write("\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u0609\5\u0258\u012d\2\u0606\u0609\5\u01fe")
        buf.write("\u0100\2\u0607\u0609\7\u00c8\2\2\u0608\u0600\3\2\2\2\u0608")
        buf.write("\u0606\3\2\2\2\u0608\u0607\3\2\2\2\u0609\u060a\3\2\2\2")
        buf.write("\u060a\u060b\7\u02ec\2\2\u060b/\3\2\2\2\u060c\u060d\7")
        buf.write("\u00a4\2\2\u060d\u060e\7\u0261\2\2\u060e\u060f\5\u03e8")
        buf.write("\u01f5\2\u060f\u0610\7\u02ec\2\2\u0610\61\3\2\2\2\u0611")
        buf.write("\u0612\7\20\2\2\u0612\u0613\7\u0261\2\2\u0613\u0626\5")
        buf.write("\u03e8\u01f5\2\u0614\u0627\t\7\2\2\u0615\u0616\7\u01e3")
        buf.write("\2\2\u0616\u0617\7\u025a\2\2\u0617\u0627\5\u03e8\u01f5")
        buf.write("\2\u0618\u061a\7_\2\2\u0619\u061b\7\u0087\2\2\u061a\u0619")
        buf.write("\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061f\3\2\2\2\u061c")
        buf.write("\u061e\5\u01fc\u00ff\2\u061d\u061c\3\2\2\2\u061e\u0621")
        buf.write("\3\2\2\2\u061f\u061d\3\2\2\2\u061f\u0620\3\2\2\2\u0620")
        buf.write("\u0624\3\2\2\2\u0621\u061f\3\2\2\2\u0622\u0623\7\u01f0")
        buf.write("\2\2\u0623\u0625\7\u0217\2\2\u0624\u0622\3\2\2\2\u0624")
        buf.write("\u0625\3\2\2\2\u0625\u0627\3\2\2\2\u0626\u0614\3\2\2\2")
        buf.write("\u0626\u0615\3\2\2\2\u0626\u0618\3\2\2\2\u0627\u0628\3")
        buf.write("\2\2\2\u0628\u0629\7\u02ec\2\2\u0629\63\3\2\2\2\u062a")
        buf.write("\u062d\7t\2\2\u062b\u062c\7\u0195\2\2\u062c\u062e\7\u01e4")
        buf.write("\2\2\u062d\u062b\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f")
        buf.write("\3\2\2\2\u062f\u0630\7\u0261\2\2\u0630\u0634\5\u03e8\u01f5")
        buf.write("\2\u0631\u0635\5:\36\2\u0632\u0635\5> \2\u0633\u0635\5")
        buf.write("@!\2\u0634\u0631\3\2\2\2\u0634\u0632\3\2\2\2\u0634\u0633")
        buf.write("\3\2\2\2\u0635\u0637\3\2\2\2\u0636\u0638\5\66\34\2\u0637")
        buf.write("\u0636\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063a\3\2\2\2")
        buf.write("\u0639\u063b\t\7\2\2\u063a\u0639\3\2\2\2\u063a\u063b\3")
        buf.write("\2\2\2\u063b\u063d\3\2\2\2\u063c\u063e\58\35\2\u063d\u063c")
        buf.write("\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f")
        buf.write("\u0640\5B\"\2\u0640\u0641\7\u02ec\2\2\u0641\65\3\2\2\2")
        buf.write("\u0642\u0643\7\u00d8\2\2\u0643\u0648\5\u03e8\u01f5\2\u0644")
        buf.write("\u0645\7\u02e0\2\2\u0645\u0647\5\u03e8\u01f5\2\u0646\u0644")
        buf.write("\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2\2\u0648")
        buf.write("\u0649\3\2\2\2\u0649\67\3\2\2\2\u064a\u0648\3\2\2\2\u064b")
        buf.write("\u064c\7\u028c\2\2\u064c\u064d\7\u02da\2\2\u064d\u064e")
        buf.write("\5\u033a\u019e\2\u064e\u064f\7\u02db\2\2\u064f9\3\2\2")
        buf.write("\2\u0650\u0655\7,\2\2\u0651\u0655\7\t\2\2\u0652\u0653")
        buf.write("\7\u010d\2\2\u0653\u0655\7\u0186\2\2\u0654\u0650\3\2\2")
        buf.write("\2\u0654\u0651\3\2\2\2\u0654\u0652\3\2\2\2\u0655\u0656")
        buf.write("\3\2\2\2\u0656\u0658\5L\'\2\u0657\u0659\5R*\2\u0658\u0657")
        buf.write("\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a")
        buf.write("\u065c\5<\37\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2")
        buf.write("\u065c;\3\2\2\2\u065d\u065e\7\u00dc\2\2\u065e\u065f\7")
        buf.write("\u00a6\2\2\u065f\u0660\7\u01fb\2\2\u0660=\3\2\2\2\u0661")
        buf.write("\u0662\7\u00dc\2\2\u0662\u0664\5L\'\2\u0663\u0665\5R*")
        buf.write("\2\u0664\u0663\3\2\2\2\u0664\u0665\3\2\2\2\u0665?\3\2")
        buf.write("\2\2\u0666\u0667\t\b\2\2\u0667\u066c\5J&\2\u0668\u0669")
        buf.write("\7\u0195\2\2\u0669\u066b\5J&\2\u066a\u0668\3\2\2\2\u066b")
        buf.write("\u066e\3\2\2\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2\2\2")
        buf.write("\u066d\u066f\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u0677\7")
        buf.write("\u018d\2\2\u0670\u0678\7}\2\2\u0671\u0672\5\u03c2\u01e2")
        buf.write("\2\u0672\u0673\7\u02d3\2\2\u0673\u0675\3\2\2\2\u0674\u0671")
        buf.write("\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676\3\2\2\2\u0676")
        buf.write("\u0678\7\u0204\2\2\u0677\u0670\3\2\2\2\u0677\u0674\3\2")
        buf.write("\2\2\u0678A\3\2\2\2\u0679\u067a\7a\2\2\u067a\u067f\7\u0261")
        buf.write("\2\2\u067b\u067c\7B\2\2\u067c\u067f\5\u0432\u021a\2\u067d")
        buf.write("\u067f\5\u025c\u012f\2\u067e\u0679\3\2\2\2\u067e\u067b")
        buf.write("\3\2\2\2\u067e\u067d\3\2\2\2\u067fC\3\2\2\2\u0680\u0682")
        buf.write("\5\u03c4\u01e3\2\u0681\u0683\5\u040c\u0207\2\u0682\u0681")
        buf.write("\3\2\2\2\u0682\u0683\3\2\2\2\u0683E\3\2\2\2\u0684\u0685")
        buf.write("\7a\2\2\u0685\u0687\7\u0261\2\2\u0686\u0688\5\u020c\u0107")
        buf.write("\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u068a")
        buf.write("\3\2\2\2\u0689\u068b\5H%\2\u068a\u0689\3\2\2\2\u068b\u068c")
        buf.write("\3\2\2\2\u068c\u068a\3\2\2\2\u068c\u068d\3\2\2\2\u068d")
        buf.write("\u068e\3\2\2\2\u068e\u068f\7\u00b2\2\2\u068f\u0690\5\u03e8")
        buf.write("\u01f5\2\u0690G\3\2\2\2\u0691\u0692\7,\2\2\u0692\u0693")
        buf.write("\7\u0231\2\2\u0693\u0694\7\u0114\2\2\u0694\u0695\5\u025c")
        buf.write("\u012f\2\u0695\u0696\7,\2\2\u0696\u0697\7\u0231\2\2\u0697")
        buf.write("\u0698\7\u02ec\2\2\u0698\u06b6\3\2\2\2\u0699\u069a\7,")
        buf.write("\2\2\u069a\u069b\7\u00a6\2\2\u069b\u069c\7\u01fb\2\2\u069c")
        buf.write("\u069d\7\u0114\2\2\u069d\u069e\5\u025c\u012f\2\u069e\u069f")
        buf.write("\7,\2\2\u069f\u06a0\7\u00a6\2\2\u06a0\u06a1\7\u01fb\2")
        buf.write("\2\u06a1\u06a2\7\u02ec\2\2\u06a2\u06b6\3\2\2\2\u06a3\u06a4")
        buf.write("\7\t\2\2\u06a4\u06a5\7\u0231\2\2\u06a5\u06a6\7\u0114\2")
        buf.write("\2\u06a6\u06a7\5\u025c\u012f\2\u06a7\u06a8\7\t\2\2\u06a8")
        buf.write("\u06a9\7\u0231\2\2\u06a9\u06aa\7\u02ec\2\2\u06aa\u06b6")
        buf.write("\3\2\2\2\u06ab\u06ac\7\t\2\2\u06ac\u06ad\7\u00a6\2\2\u06ad")
        buf.write("\u06ae\7\u01fb\2\2\u06ae\u06af\7\u0114\2\2\u06af\u06b0")
        buf.write("\5\u025c\u012f\2\u06b0\u06b1\7\t\2\2\u06b1\u06b2\7\u00a6")
        buf.write("\2\2\u06b2\u06b3\7\u01fb\2\2\u06b3\u06b4\7\u02ec\2\2\u06b4")
        buf.write("\u06b6\3\2\2\2\u06b5\u0691\3\2\2\2\u06b5\u0699\3\2\2\2")
        buf.write("\u06b5\u06a3\3\2\2\2\u06b5\u06ab\3\2\2\2\u06b6I\3\2\2")
        buf.write("\2\u06b7\u06d2\7\20\2\2\u06b8\u06d2\7\22\2\2\u06b9\u06ba")
        buf.write("\7\32\2\2\u06ba\u06d2\7\u0233\2\2\u06bb\u06d2\7\36\2\2")
        buf.write("\u06bc\u06d2\7Z\2\2\u06bd\u06d2\7t\2\2\u06be\u06bf\7\u009f")
        buf.write("\2\2\u06bf\u06d2\7\u0233\2\2\u06c0\u06d2\7\u00a4\2\2\u06c1")
        buf.write("\u06d2\7\u00e7\2\2\u06c2\u06d2\7\u0166\2\2\u06c3\u06d2")
        buf.write("\7\u01e3\2\2\u06c4\u06d2\7\u01f2\2\2\u06c5\u06d2\7\u0263")
        buf.write("\2\2\u06c6\u06d2\7\u0085\2\2\u06c7\u06d2\7\u022f\2\2\u06c8")
        buf.write("\u06d2\7\u021b\2\2\u06c9\u06d2\7\u0083\2\2\u06ca\u06d2")
        buf.write("\7\u0137\2\2\u06cb\u06d2\7\u0136\2\2\u06cc\u06d2\7\u0212")
        buf.write("\2\2\u06cd\u06d2\7\u023d\2\2\u06ce\u06d2\7}\2\2\u06cf")
        buf.write("\u06d2\7\u0204\2\2\u06d0\u06d2\7\u00d8\2\2\u06d1\u06b7")
        buf.write("\3\2\2\2\u06d1\u06b8\3\2\2\2\u06d1\u06b9\3\2\2\2\u06d1")
        buf.write("\u06bb\3\2\2\2\u06d1\u06bc\3\2\2\2\u06d1\u06bd\3\2\2\2")
        buf.write("\u06d1\u06be\3\2\2\2\u06d1\u06c0\3\2\2\2\u06d1\u06c1\3")
        buf.write("\2\2\2\u06d1\u06c2\3\2\2\2\u06d1\u06c3\3\2\2\2\u06d1\u06c4")
        buf.write("\3\2\2\2\u06d1\u06c5\3\2\2\2\u06d1\u06c6\3\2\2\2\u06d1")
        buf.write("\u06c7\3\2\2\2\u06d1\u06c8\3\2\2\2\u06d1\u06c9\3\2\2\2")
        buf.write("\u06d1\u06ca\3\2\2\2\u06d1\u06cb\3\2\2\2\u06d1\u06cc\3")
        buf.write("\2\2\2\u06d1\u06cd\3\2\2\2\u06d1\u06ce\3\2\2\2\u06d1\u06cf")
        buf.write("\3\2\2\2\u06d1\u06d0\3\2\2\2\u06d2K\3\2\2\2\u06d3\u06d8")
        buf.write("\5N(\2\u06d4\u06d5\7\u0195\2\2\u06d5\u06d7\5N(\2\u06d6")
        buf.write("\u06d4\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8\u06d6\3\2\2\2")
        buf.write("\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2\2\u06da\u06d8\3")
        buf.write("\2\2\2\u06db\u06dd\7\u018d\2\2\u06dc\u06de\5P)\2\u06dd")
        buf.write("\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06df\3\2\2\2")
        buf.write("\u06df\u06e0\5\u03f8\u01fd\2\u06e0M\3\2\2\2\u06e1\u06e4")
        buf.write("\t\t\2\2\u06e2\u06e3\7\u0186\2\2\u06e3\u06e5\5\u0406\u0204")
        buf.write("\2\u06e4\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5O\3\2")
        buf.write("\2\2\u06e6\u06e7\7\u0162\2\2\u06e7\u06e8\7\u024a\2\2\u06e8")
        buf.write("\u06e9\5\u03f8\u01fd\2\u06e9\u06ea\7\u0186\2\2\u06eaQ")
        buf.write("\3\2\2\2\u06eb\u06ed\7\u01da\2\2\u06ec\u06ee\5T+\2\u06ed")
        buf.write("\u06ec\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06ed\3\2\2\2")
        buf.write("\u06ef\u06f0\3\2\2\2\u06f0S\3\2\2\2\u06f1\u06f2\t\n\2")
        buf.write("\2\u06f2\u06f3\5\u03ae\u01d8\2\u06f3U\3\2\2\2\u06f4\u06f5")
        buf.write("\7\u00a4\2\2\u06f5\u06f7\7\u0266\2\2\u06f6\u06f8\78\2")
        buf.write("\2\u06f7\u06f6\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06f9")
        buf.write("\3\2\2\2\u06f9\u06fb\5\u03de\u01f0\2\u06fa\u06fc\t\13")
        buf.write("\2\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fd")
        buf.write("\3\2\2\2\u06fd\u06fe\7\u02ec\2\2\u06feW\3\2\2\2\u06ff")
        buf.write("\u0700\7\20\2\2\u0700\u0701\7\u0266\2\2\u0701\u0707\5")
        buf.write("\u03de\u01f0\2\u0702\u0708\5Z.\2\u0703\u0708\5\\/\2\u0704")
        buf.write("\u0708\5^\60\2\u0705\u0708\5f\64\2\u0706\u0708\5\u0088")
        buf.write("E\2\u0707\u0702\3\2\2\2\u0707\u0703\3\2\2\2\u0707\u0704")
        buf.write("\3\2\2\2\u0707\u0705\3\2\2\2\u0707\u0706\3\2\2\2\u0708")
        buf.write("\u070a\3\2\2\2\u0709\u070b\5h\65\2\u070a\u0709\3\2\2\2")
        buf.write("\u070a\u070b\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070d\7")
        buf.write("\u02ec\2\2\u070dY\3\2\2\2\u070e\u0710\7_\2\2\u070f\u0711")
        buf.write("\7\u0087\2\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711")
        buf.write("\u0713\3\2\2\2\u0712\u0714\t\f\2\2\u0713\u0712\3\2\2\2")
        buf.write("\u0713\u0714\3\2\2\2\u0714\u0718\3\2\2\2\u0715\u0717\5")
        buf.write("\u01fc\u00ff\2\u0716\u0715\3\2\2\2\u0717\u071a\3\2\2\2")
        buf.write("\u0718\u0716\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071d\3")
        buf.write("\2\2\2\u071a\u0718\3\2\2\2\u071b\u071c\7\u01f0\2\2\u071c")
        buf.write("\u071e\7\u0217\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2")
        buf.write("\2\2\u071e[\3\2\2\2\u071f\u0721\7\u01e4\2\2\u0720\u0722")
        buf.write("\5\u01fa\u00fe\2\u0721\u0720\3\2\2\2\u0721\u0722\3\2\2")
        buf.write("\2\u0722\u0723\3\2\2\2\u0723\u0724\7\30\2\2\u0724\u0725")
        buf.write("\7\u0183\2\2\u0725\u0726\7\u02da\2\2\u0726\u072b\5\u008a")
        buf.write("F\2\u0727\u0728\7\u02e0\2\2\u0728\u072a\5\u008aF\2\u0729")
        buf.write("\u0727\3\2\2\2\u072a\u072d\3\2\2\2\u072b\u0729\3\2\2\2")
        buf.write("\u072b\u072c\3\2\2\2\u072c\u072e\3\2\2\2\u072d\u072b\3")
        buf.write("\2\2\2\u072e\u072f\7\u02db\2\2\u072f]\3\2\2\2\u0730\u0735")
        buf.write("\5`\61\2\u0731\u0732\7\u02e0\2\2\u0732\u0734\5`\61\2\u0733")
        buf.write("\u0731\3\2\2\2\u0734\u0737\3\2\2\2\u0735\u0733\3\2\2\2")
        buf.write("\u0735\u0736\3\2\2\2\u0736_\3\2\2\2\u0737\u0735\3\2\2")
        buf.write("\2\u0738\u073b\t\r\2\2\u0739\u073c\5\u009aN\2\u073a\u073c")
        buf.write("\5\u0092J\2\u073b\u0739\3\2\2\2\u073b\u073a\3\2\2\2\u073c")
        buf.write("a\3\2\2\2\u073d\u073e\t\16\2\2\u073e\u074b\7\35\2\2\u073f")
        buf.write("\u074c\5d\63\2\u0740\u0741\7\u02da\2\2\u0741\u0746\5d")
        buf.write("\63\2\u0742\u0743\7\u02e0\2\2\u0743\u0745\5d\63\2\u0744")
        buf.write("\u0742\3\2\2\2\u0745\u0748\3\2\2\2\u0746\u0744\3\2\2\2")
        buf.write("\u0746\u0747\3\2\2\2\u0747\u0749\3\2\2\2\u0748\u0746\3")
        buf.write("\2\2\2\u0749\u074a\7\u02db\2\2\u074a\u074c\3\2\2\2\u074b")
        buf.write("\u073f\3\2\2\2\u074b\u0740\3\2\2\2\u074cc\3\2\2\2\u074d")
        buf.write("\u074f\5\u03ba\u01de\2\u074e\u0750\5\u0416\u020c\2\u074f")
        buf.write("\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750e\3\2\2\2\u0751")
        buf.write("\u0757\7\u0155\2\2\u0752\u0753\7\u012a\2\2\u0753\u0758")
        buf.write("\5\u033e\u01a0\2\u0754\u0755\7\u00aa\2\2\u0755\u0756\7")
        buf.write("\u0266\2\2\u0756\u0758\5\u0416\u020c\2\u0757\u0752\3\2")
        buf.write("\2\2\u0757\u0754\3\2\2\2\u0758g\3\2\2\2\u0759\u076a\7")
        buf.write("\u0113\2\2\u075a\u0764\7D\2\2\u075b\u075c\7o\2\2\u075c")
        buf.write("\u075d\7\u025a\2\2\u075d\u0765\7\u0239\2\2\u075e\u0760")
        buf.write("\7\u017b\2\2\u075f\u075e\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write("\u0761\3\2\2\2\u0761\u0762\7\u00f9\2\2\u0762\u0763\7\u024a")
        buf.write("\2\2\u0763\u0765\7~\2\2\u0764\u075b\3\2\2\2\u0764\u075f")
        buf.write("\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0767\3\2\2\2\u0766")
        buf.write("\u0768\5j\66\2\u0767\u0766\3\2\2\2\u0767\u0768\3\2\2\2")
        buf.write("\u0768\u076a\3\2\2\2\u0769\u0759\3\2\2\2\u0769\u075a\3")
        buf.write("\2\2\2\u076ai\3\2\2\2\u076b\u076d\7\u00da\2\2\u076c\u076b")
        buf.write("\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076e\3\2\2\2\u076e")
        buf.write("\u076f\7\u00bd\2\2\u076f\u0770\7\u0112\2\2\u0770\u0771")
        buf.write("\5\u03f8\u01fd\2\u0771k\3\2\2\2\u0772\u0775\7t\2\2\u0773")
        buf.write("\u0774\7\u0195\2\2\u0774\u0776\7\u01e4\2\2\u0775\u0773")
        buf.write("\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0777\3\2\2\2\u0777")
        buf.write("\u077a\7\u0266\2\2\u0778\u077b\5n8\2\u0779\u077b\5z>\2")
        buf.write("\u077a\u0778\3\2\2\2\u077a\u0779\3\2\2\2\u077b\u077c\3")
        buf.write("\2\2\2\u077c\u077d\7\u02ec\2\2\u077dm\3\2\2\2\u077e\u0781")
        buf.write("\5\u03de\u01f0\2\u077f\u0780\7\u0188\2\2\u0780\u0782\7")
        buf.write("\u02d6\2\2\u0781\u077f\3\2\2\2\u0781\u0782\3\2\2\2\u0782")
        buf.write("\u0784\3\2\2\2\u0783\u0785\5p9\2\u0784\u0783\3\2\2\2\u0784")
        buf.write("\u0785\3\2\2\2\u0785o\3\2\2\2\u0786\u0788\5\u01fa\u00fe")
        buf.write("\2\u0787\u0786\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u078b")
        buf.write("\3\2\2\2\u0789\u078c\5r:\2\u078a\u078c\5t;\2\u078b\u0789")
        buf.write("\3\2\2\2\u078b\u078a\3\2\2\2\u078c\u078e\3\2\2\2\u078d")
        buf.write("\u078f\5x=\2\u078e\u078d\3\2\2\2\u078e\u078f\3\2\2\2\u078f")
        buf.write("\u079b\3\2\2\2\u0790\u0791\7\u02da\2\2\u0791\u0796\5\u008a")
        buf.write("F\2\u0792\u0793\7\u02e0\2\2\u0793\u0795\5\u008aF\2\u0794")
        buf.write("\u0792\3\2\2\2\u0795\u0798\3\2\2\2\u0796\u0794\3\2\2\2")
        buf.write("\u0796\u0797\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u0796\3")
        buf.write("\2\2\2\u0799\u079a\7\u02db\2\2\u079a\u079c\3\2\2\2\u079b")
        buf.write("\u0790\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u07a0\3\2\2\2")
        buf.write("\u079d\u079f\5\u0088E\2\u079e\u079d\3\2\2\2\u079f\u07a2")
        buf.write("\3\2\2\2\u07a0\u079e\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1")
        buf.write("q\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a3\u07a7\t\2\2\2\u07a4")
        buf.write("\u07a8\7\u0183\2\2\u07a5\u07a8\5\u0228\u0115\2\u07a6\u07a8")
        buf.write("\5v<\2\u07a7\u07a4\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a6")
        buf.write("\3\2\2\2\u07a8s\3\2\2\2\u07a9\u07aa\7\u0268\2\2\u07aa")
        buf.write("\u07ab\5\u0416\u020c\2\u07abu\3\2\2\2\u07ac\u07ad\7\u024a")
        buf.write("\2\2\u07ad\u07ae\7\u0186\2\2\u07ae\u07b1\5\u0416\u020c")
        buf.write("\2\u07af\u07b0\7\u017b\2\2\u07b0\u07b2\7\u017e\2\2\u07b1")
        buf.write("\u07af\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2w\3\2\2\2\u07b3")
        buf.write("\u07b4\7\u00c8\2\2\u07b4\u07b5\7\u015a\2\2\u07b5\u07b6")
        buf.write("\5\u033e\u01a0\2\u07b6\u07b7\7\u011d\2\2\u07b7\u07b8\7")
        buf.write("\u0117\2\2\u07b8\u07b9\7\u027a\2\2\u07b9\u07ba\t\17\2")
        buf.write("\2\u07bay\3\2\2\2\u07bb\u07bc\78\2\2\u07bc\u07bd\5\u03de")
        buf.write("\u01f0\2\u07bd\u07bf\t\2\2\2\u07be\u07c0\5|?\2\u07bf\u07be")
        buf.write("\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c1")
        buf.write("\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c4\7\u00b2")
        buf.write("\2\2\u07c4{\3\2\2\2\u07c5\u07c8\5~@\2\u07c6\u07c8\5\u0080")
        buf.write("A\2\u07c7\u07c5\3\2\2\2\u07c7\u07c6\3\2\2\2\u07c8}\3\2")
        buf.write("\2\2\u07c9\u07ca\t\20\2\2\u07ca\u07cb\7\u0149\2\2\u07cb")
        buf.write("\u07cc\5\u0084C\2\u07cc\177\3\2\2\2\u07cd\u07d1\t\21\2")
        buf.write("\2\u07ce\u07d2\5\u0082B\2\u07cf\u07d2\5\u0084C\2\u07d0")
        buf.write("\u07d2\5\u0086D\2\u07d1\u07ce\3\2\2\2\u07d1\u07cf\3\2")
        buf.write("\2\2\u07d1\u07d0\3\2\2\2\u07d2\u0081\3\2\2\2\u07d3\u07d4")
        buf.write("\7\u01c4\2\2\u07d4\u07d5\5\u03e6\u01f4\2\u07d5\u07d6\7")
        buf.write("\u02da\2\2\u07d6\u07db\5\u00a0Q\2\u07d7\u07d8\7\u02e0")
        buf.write("\2\2\u07d8\u07da\5\u00a0Q\2\u07d9\u07d7\3\2\2\2\u07da")
        buf.write("\u07dd\3\2\2\2\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2")
        buf.write("\u07dc\u07de\3\2\2\2\u07dd\u07db\3\2\2\2\u07de\u07df\7")
        buf.write("\u02db\2\2\u07df\u07ea\t\2\2\2\u07e0\u07eb\5\u01fe\u0100")
        buf.write("\2\u07e1\u07e3\7\u008a\2\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3")
        buf.write("\3\2\2\2\u07e3\u07e5\3\2\2\2\u07e4\u07e6\5\u020c\u0107")
        buf.write("\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7")
        buf.write("\3\2\2\2\u07e7\u07e8\5\u0258\u012d\2\u07e8\u07e9\7\u02ec")
        buf.write("\2\2\u07e9\u07eb\3\2\2\2\u07ea\u07e0\3\2\2\2\u07ea\u07e2")
        buf.write("\3\2\2\2\u07eb\u0083\3\2\2\2\u07ec\u07ed\7\u00e2\2\2\u07ed")
        buf.write("\u07f9\5\u03e4\u01f3\2\u07ee\u07ef\7\u02da\2\2\u07ef\u07f4")
        buf.write("\5\u00a0Q\2\u07f0\u07f1\7\u02e0\2\2\u07f1\u07f3\5\u00a0")
        buf.write("Q\2\u07f2\u07f0\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2")
        buf.write("\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2\u07f6")
        buf.write("\u07f4\3\2\2\2\u07f7\u07f8\7\u02db\2\2\u07f8\u07fa\3\2")
        buf.write("\2\2\u07f9\u07ee\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb")
        buf.write("\3\2\2\2\u07fb\u07fc\7\u01ef\2\2\u07fc\u07fd\5\u0416\u020c")
        buf.write("\2\u07fd\u0808\t\2\2\2\u07fe\u0809\5\u01fe\u0100\2\u07ff")
        buf.write("\u0801\7\u008a\2\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2")
        buf.write("\2\2\u0801\u0803\3\2\2\2\u0802\u0804\5\u020c\u0107\2\u0803")
        buf.write("\u0802\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\3\2\2\2")
        buf.write("\u0805\u0806\5\u0258\u012d\2\u0806\u0807\7\u02ec\2\2\u0807")
        buf.write("\u0809\3\2\2\2\u0808\u07fe\3\2\2\2\u0808\u0800\3\2\2\2")
        buf.write("\u0809\u0085\3\2\2\2\u080a\u080c\7\u00d0\2\2\u080b\u080a")
        buf.write("\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080e\3\2\2\2\u080d")
        buf.write("\u080f\7\u010c\2\2\u080e\u080d\3\2\2\2\u080e\u080f\3\2")
        buf.write("\2\2\u080f\u0810\3\2\2\2\u0810\u0811\7i\2\2\u0811\u0812")
        buf.write("\7\u00e2\2\2\u0812\u0824\5\u0416\u020c\2\u0813\u0814\7")
        buf.write("\u02da\2\2\u0814\u0815\7\u020d\2\2\u0815\u0816\7\u0103")
        buf.write("\2\2\u0816\u0817\7\u0199\2\2\u0817\u0818\5\u0416\u020c")
        buf.write("\2\u0818\u0819\7\u02e0\2\2\u0819\u081a\3\2\2\2\u081a\u081f")
        buf.write("\5\u00a0Q\2\u081b\u081c\7\u02e0\2\2\u081c\u081e\5\u00a0")
        buf.write("Q\2\u081d\u081b\3\2\2\2\u081e\u0821\3\2\2\2\u081f\u081d")
        buf.write("\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0822\3\2\2\2\u0821")
        buf.write("\u081f\3\2\2\2\u0822\u0823\7\u02db\2\2\u0823\u0825\3\2")
        buf.write("\2\2\u0824\u0813\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0826")
        buf.write("\3\2\2\2\u0826\u0827\7\u01ef\2\2\u0827\u0828\7\u020d\2")
        buf.write("\2\u0828\u0829\7\30\2\2\u0829\u082a\7\u01eb\2\2\u082a")
        buf.write("\u0835\t\2\2\2\u082b\u0836\5\u01fe\u0100\2\u082c\u082e")
        buf.write("\7\u008a\2\2\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e")
        buf.write("\u0830\3\2\2\2\u082f\u0831\5\u020c\u0107\2\u0830\u082f")
        buf.write("\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0832\3\2\2\2\u0832")
        buf.write("\u0833\5\u0258\u012d\2\u0833\u0834\7\u02ec\2\2\u0834\u0836")
        buf.write("\3\2\2\2\u0835\u082b\3\2\2\2\u0835\u082d\3\2\2\2\u0836")
        buf.write("\u0087\3\2\2\2\u0837\u0839\7\u017b\2\2\u0838\u0837\3\2")
        buf.write("\2\2\u0838\u0839\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083b")
        buf.write("\t\22\2\2\u083b\u0089\3\2\2\2\u083c\u083d\5\u0432\u021a")
        buf.write("\2\u083d\u083f\5\u0416\u020c\2\u083e\u0840\5\u008cG\2")
        buf.write("\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0843\3")
        buf.write("\2\2\2\u0841\u0843\5\u008eH\2\u0842\u083c\3\2\2\2\u0842")
        buf.write("\u0841\3\2\2\2\u0843\u008b\3\2\2\2\u0844\u0845\7\u00c8")
        buf.write("\2\2\u0845\u0846\7\u015a\2\2\u0846\u0847\5\u033e\u01a0")
        buf.write("\2\u0847\u008d\3\2\2\2\u0848\u084a\5\u0088E\2\u0849\u0848")
        buf.write("\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084c\3\2\2\2\u084b")
        buf.write("\u084d\5\u0090I\2\u084c\u084b\3\2\2\2\u084d\u084e\3\2")
        buf.write("\2\2\u084e\u084c\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0852")
        buf.write("\3\2\2\2\u0850\u0851\7\u02e0\2\2\u0851\u0853\5\u009cO")
        buf.write("\2\u0852\u0850\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u008f")
        buf.write("\3\2\2\2\u0854\u0858\5\u0092J\2\u0855\u0858\5\u0098M\2")
        buf.write("\u0856\u0858\5\u009aN\2\u0857\u0854\3\2\2\2\u0857\u0855")
        buf.write("\3\2\2\2\u0857\u0856\3\2\2\2\u0858\u0091\3\2\2\2\u0859")
        buf.write("\u085c\t\21\2\2\u085a\u085d\5\u0094K\2\u085b\u085d\5\u0096")
        buf.write("L\2\u085c\u085a\3\2\2\2\u085c\u085b\3\2\2\2\u085d\u0093")
        buf.write("\3\2\2\2\u085e\u085f\7\u01c4\2\2\u085f\u0860\5\u03e6\u01f4")
        buf.write("\2\u0860\u0861\7\u02da\2\2\u0861\u0866\5\u00a0Q\2\u0862")
        buf.write("\u0863\7\u02e0\2\2\u0863\u0865\5\u00a0Q\2\u0864\u0862")
        buf.write("\3\2\2\2\u0865\u0868\3\2\2\2\u0866\u0864\3\2\2\2\u0866")
        buf.write("\u0867\3\2\2\2\u0867\u0869\3\2\2\2\u0868\u0866\3\2\2\2")
        buf.write("\u0869\u086c\7\u02db\2\2\u086a\u086b\t\2\2\2\u086b\u086d")
        buf.write("\5\u01fe\u0100\2\u086c\u086a\3\2\2\2\u086c\u086d\3\2\2")
        buf.write("\2\u086d\u0095\3\2\2\2\u086e\u086f\7\u00e2\2\2\u086f\u087b")
        buf.write("\5\u03e4\u01f3\2\u0870\u0871\7\u02da\2\2\u0871\u0876\5")
        buf.write("\u00a0Q\2\u0872\u0873\7\u02e0\2\2\u0873\u0875\5\u00a0")
        buf.write("Q\2\u0874\u0872\3\2\2\2\u0875\u0878\3\2\2\2\u0876\u0874")
        buf.write("\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0879\3\2\2\2\u0878")
        buf.write("\u0876\3\2\2\2\u0879\u087a\7\u02db\2\2\u087a\u087c\3\2")
        buf.write("\2\2\u087b\u0870\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d")
        buf.write("\3\2\2\2\u087d\u0882\7\u01ef\2\2\u087e\u0883\5\u0416\u020c")
        buf.write("\2\u087f\u0880\7\u020d\2\2\u0880\u0881\7\30\2\2\u0881")
        buf.write("\u0883\7\u01eb\2\2\u0882\u087e\3\2\2\2\u0882\u087f\3\2")
        buf.write("\2\2\u0883\u088c\3\2\2\2\u0884\u0885\t\2\2\2\u0885\u088d")
        buf.write("\5\u01fe\u0100\2\u0886\u0888\7\u00c8\2\2\u0887\u0889\7")
        buf.write("\u0280\2\2\u0888\u0887\3\2\2\2\u0888\u0889\3\2\2\2\u0889")
        buf.write("\u088a\3\2\2\2\u088a\u088b\7\u015a\2\2\u088b\u088d\5\u033e")
        buf.write("\u01a0\2\u088c\u0884\3\2\2\2\u088c\u0886\3\2\2\2\u088c")
        buf.write("\u088d\3\2\2\2\u088d\u0097\3\2\2\2\u088e\u0890\7\u00d0")
        buf.write("\2\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0892")
        buf.write("\3\2\2\2\u0891\u0893\7\u010c\2\2\u0892\u0891\3\2\2\2\u0892")
        buf.write("\u0893\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0895\7i\2\2")
        buf.write("\u0895\u0896\7\u00e2\2\2\u0896\u08a8\5\u0416\u020c\2\u0897")
        buf.write("\u0898\7\u02da\2\2\u0898\u0899\7\u020d\2\2\u0899\u089a")
        buf.write("\7\u0103\2\2\u089a\u089b\7\u0199\2\2\u089b\u089c\5\u0416")
        buf.write("\u020c\2\u089c\u089d\7\u02e0\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u08a3\5\u00a0Q\2\u089f\u08a0\7\u02e0\2\2\u08a0\u08a2")
        buf.write("\5\u00a0Q\2\u08a1\u089f\3\2\2\2\u08a2\u08a5\3\2\2\2\u08a3")
        buf.write("\u08a1\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a6\3\2\2\2")
        buf.write("\u08a5\u08a3\3\2\2\2\u08a6\u08a7\7\u02db\2\2\u08a7\u08a9")
        buf.write("\3\2\2\2\u08a8\u0897\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9")
        buf.write("\u08aa\3\2\2\2\u08aa\u08ab\7\u01ef\2\2\u08ab\u08ac\7\u020d")
        buf.write("\2\2\u08ac\u08ad\7\30\2\2\u08ad\u08b0\7\u01eb\2\2\u08ae")
        buf.write("\u08af\t\2\2\2\u08af\u08b1\5\u01fe\u0100\2\u08b0\u08ae")
        buf.write("\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u0099\3\2\2\2\u08b2")
        buf.write("\u08b3\t\20\2\2\u08b3\u08b4\7\u0149\2\2\u08b4\u08b5\5")
        buf.write("\u0096L\2\u08b5\u009b\3\2\2\2\u08b6\u08b7\7\u01ba\2\2")
        buf.write("\u08b7\u08b8\7\u01e9\2\2\u08b8\u08b9\7\u02da\2\2\u08b9")
        buf.write("\u08be\5\u009eP\2\u08ba\u08bb\7\u02e0\2\2\u08bb\u08bd")
        buf.write("\5\u009eP\2\u08bc\u08ba\3\2\2\2\u08bd\u08c0\3\2\2\2\u08be")
        buf.write("\u08bc\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c1\3\2\2\2")
        buf.write("\u08c0\u08be\3\2\2\2\u08c1\u08c2\7\u02db\2\2\u08c2\u009d")
        buf.write("\3\2\2\2\u08c3\u08c6\5\u0432\u021a\2\u08c4\u08c6\7\u008f")
        buf.write("\2\2\u08c5\u08c3\3\2\2\2\u08c5\u08c4\3\2\2\2\u08c6\u009f")
        buf.write("\3\2\2\2\u08c7\u08c8\5\u03ca\u01e6\2\u08c8\u08c9\5\u0416")
        buf.write("\u020c\2\u08c9\u00a1\3\2\2\2\u08ca\u08cb\7\u00a4\2\2\u08cb")
        buf.write("\u08cc\7\u020e\2\2\u08cc\u08cd\5\u03e0\u01f1\2\u08cd\u08ce")
        buf.write("\7\u02ec\2\2\u08ce\u00a3\3\2\2\2\u08cf\u08d0\7\20\2\2")
        buf.write("\u08d0\u08d1\7\u020e\2\2\u08d1\u08d3\5\u03e0\u01f1\2\u08d2")
        buf.write("\u08d4\5\u00a8U\2\u08d3\u08d2\3\2\2\2\u08d4\u08d5\3\2")
        buf.write("\2\2\u08d5\u08d3\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d7")
        buf.write("\3\2\2\2\u08d7\u08d8\7\u02ec\2\2\u08d8\u00a5\3\2\2\2\u08d9")
        buf.write("\u08da\7t\2\2\u08da\u08db\7\u020e\2\2\u08db\u08e0\5\u03e0")
        buf.write("\u01f1\2\u08dc\u08df\5\u00aaV\2\u08dd\u08df\5\u00a8U\2")
        buf.write("\u08de\u08dc\3\2\2\2\u08de\u08dd\3\2\2\2\u08df\u08e2\3")
        buf.write("\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e3")
        buf.write("\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3\u08e4\7\u02ec\2\2\u08e4")
        buf.write("\u00a7\3\2\2\2\u08e5\u08e6\7\u00fa\2\2\u08e6\u08e7\7?")
        buf.write("\2\2\u08e7\u08f6\7\u02d4\2\2\u08e8\u08e9\7\u0145\2\2\u08e9")
        buf.write("\u08f6\7\u02d4\2\2\u08ea\u08f6\7\u016f\2\2\u08eb\u08ec")
        buf.write("\7\u0151\2\2\u08ec\u08f6\7\u02d4\2\2\u08ed\u08f6\7\u0171")
        buf.write("\2\2\u08ee\u08f6\7|\2\2\u08ef\u08f6\7\u016a\2\2\u08f0")
        buf.write("\u08f1\7A\2\2\u08f1\u08f6\7\u02d4\2\2\u08f2\u08f6\7\u0167")
        buf.write("\2\2\u08f3\u08f6\7\u0193\2\2\u08f4\u08f6\7\u0175\2\2\u08f5")
        buf.write("\u08e5\3\2\2\2\u08f5\u08e8\3\2\2\2\u08f5\u08ea\3\2\2\2")
        buf.write("\u08f5\u08eb\3\2\2\2\u08f5\u08ed\3\2\2\2\u08f5\u08ee\3")
        buf.write("\2\2\2\u08f5\u08ef\3\2\2\2\u08f5\u08f0\3\2\2\2\u08f5\u08f2")
        buf.write("\3\2\2\2\u08f5\u08f3\3\2\2\2\u08f5\u08f4\3\2\2\2\u08f6")
        buf.write("\u00a9\3\2\2\2\u08f7\u08f8\7\u022e\2\2\u08f8\u08f9\7\u0291")
        buf.write("\2\2\u08f9\u08fa\7\u02d4\2\2\u08fa\u00ab\3\2\2\2\u08fb")
        buf.write("\u08fd\7t\2\2\u08fc\u08fe\7\u026c\2\2\u08fd\u08fc\3\2")
        buf.write("\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0900")
        buf.write("\7\u00fd\2\2\u0900\u0901\5\u03ec\u01f7\2\u0901\u0902\7")
        buf.write("\u018d\2\2\u0902\u0903\5\u03f8\u01fd\2\u0903\u0906\5\u0408")
        buf.write("\u0205\2\u0904\u0905\7\u0248\2\2\u0905\u0907\5\u0434\u021b")
        buf.write("\2\u0906\u0904\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u090a")
        buf.write("\3\2\2\2\u0908\u0909\7c\2\2\u0909\u090b\7\u0233\2\2\u090a")
        buf.write("\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\3\2\2\2")
        buf.write("\u090c\u090d\7\u02ec\2\2\u090d\u00ad\3\2\2\2\u090e\u090f")
        buf.write("\7\20\2\2\u090f\u0910\7\u00fd\2\2\u0910\u0911\5\u03ec")
        buf.write("\u01f7\2\u0911\u0912\7\u01e3\2\2\u0912\u0913\7\u025a\2")
        buf.write("\2\u0913\u0914\5\u03ec\u01f7\2\u0914\u0915\7\u02ec\2\2")
        buf.write("\u0915\u00af\3\2\2\2\u0916\u0917\7t\2\2\u0917\u0918\7")
        buf.write("\u0278\2\2\u0918\u0922\5\u0402\u0202\2\u0919\u0923\5\u00b6")
        buf.write("\\\2\u091a\u0923\5\u00b8]\2\u091b\u0923\5\u00ba^\2\u091c")
        buf.write("\u0923\5\u00bc_\2\u091d\u0923\5\u00be`\2\u091e\u0923\5")
        buf.write("\u00c4c\2\u091f\u0923\5\u00c6d\2\u0920\u0923\5\u00c8e")
        buf.write("\2\u0921\u0923\5\u00dan\2\u0922\u0919\3\2\2\2\u0922\u091a")
        buf.write("\3\2\2\2\u0922\u091b\3\2\2\2\u0922\u091c\3\2\2\2\u0922")
        buf.write("\u091d\3\2\2\2\u0922\u091e\3\2\2\2\u0922\u091f\3\2\2\2")
        buf.write("\u0922\u0920\3\2\2\2\u0922\u0921\3\2\2\2\u0923\u0924\3")
        buf.write("\2\2\2\u0924\u0922\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0926")
        buf.write("\3\2\2\2\u0926\u0927\7\u02ec\2\2\u0927\u00b1\3\2\2\2\u0928")
        buf.write("\u0929\7\20\2\2\u0929\u092a\7\u0278\2\2\u092a\u0936\5")
        buf.write("\u0402\u0202\2\u092b\u0937\5\u00b4[\2\u092c\u0937\5\u00b8")
        buf.write("]\2\u092d\u0937\5\u00ba^\2\u092e\u0937\5\u00bc_\2\u092f")
        buf.write("\u0937\5\u00be`\2\u0930\u0937\5\u00c2b\2\u0931\u0937\5")
        buf.write("\u00c4c\2\u0932\u0937\5\u00c6d\2\u0933\u0937\5\u00caf")
        buf.write("\2\u0934\u0937\5\u00dan\2\u0935\u0937\5\u00d4k\2\u0936")
        buf.write("\u092b\3\2\2\2\u0936\u092c\3\2\2\2\u0936\u092d\3\2\2\2")
        buf.write("\u0936\u092e\3\2\2\2\u0936\u092f\3\2\2\2\u0936\u0930\3")
        buf.write("\2\2\2\u0936\u0931\3\2\2\2\u0936\u0932\3\2\2\2\u0936\u0933")
        buf.write("\3\2\2\2\u0936\u0934\3\2\2\2\u0936\u0935\3\2\2\2\u0937")
        buf.write("\u0938\3\2\2\2\u0938\u0936\3\2\2\2\u0938\u0939\3\2\2\2")
        buf.write("\u0939\u093a\3\2\2\2\u093a\u093b\7\u02ec\2\2\u093b\u0948")
        buf.write("\3\2\2\2\u093c\u093e\7\u02e0\2\2\u093d\u093c\3\2\2\2\u093d")
        buf.write("\u093e\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0941\5\u0402")
        buf.write("\u0202\2\u0940\u093d\3\2\2\2\u0941\u0942\3\2\2\2\u0942")
        buf.write("\u0940\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0944\3\2\2\2")
        buf.write("\u0944\u0945\5\u00ccg\2\u0945\u0946\7\u02ec\2\2\u0946")
        buf.write("\u0948\3\2\2\2\u0947\u0928\3\2\2\2\u0947\u0940\3\2\2\2")
        buf.write("\u0948\u00b3\3\2\2\2\u0949\u094c\5\u00b6\\\2\u094a\u094b")
        buf.write("\7\u01e4\2\2\u094b\u094d\5\u0434\u021b\2\u094c\u094a\3")
        buf.write("\2\2\2\u094c\u094d\3\2\2\2\u094d\u00b5\3\2\2\2\u094e\u094f")
        buf.write("\7\u00f2\2\2\u094f\u0950\7?\2\2\u0950\u0951\5\u0434\u021b")
        buf.write("\2\u0951\u00b7\3\2\2\2\u0952\u0953\7\u00f2\2\2\u0953\u0956")
        buf.write("\t\23\2\2\u0954\u0955\7\30\2\2\u0955\u0957\5\u0430\u0219")
        buf.write("\2\u0956\u0954\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u00b9")
        buf.write("\3\2\2\2\u0958\u0959\t\24\2\2\u0959\u095a\7\u0248\2\2")
        buf.write("\u095a\u095b\5\u0434\u021b\2\u095b\u00bb\3\2\2\2\u095c")
        buf.write("\u095f\7\u01cb\2\2\u095d\u0960\5\u013e\u00a0\2\u095e\u0960")
        buf.write("\7\u026d\2\2\u095f\u095d\3\2\2\2\u095f\u095e\3\2\2\2\u0960")
        buf.write("\u0961\3\2\2\2\u0961\u0962\7\u018d\2\2\u0962\u0963\5\u0434")
        buf.write("\u021b\2\u0963\u00bd\3\2\2\2\u0964\u0965\7\u01c6\2\2\u0965")
        buf.write("\u0966\5\u0434\u021b\2\u0966\u00bf\3\2\2\2\u0967\u0969")
        buf.write("\7\u02e0\2\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969")
        buf.write("\u096a\3\2\2\2\u096a\u096c\5\u03d8\u01ed\2\u096b\u0968")
        buf.write("\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u096b\3\2\2\2\u096d")
        buf.write("\u096e\3\2\2\2\u096e\u097f\3\2\2\2\u096f\u097b\7\r\2\2")
        buf.write("\u0970\u0975\7\u00ba\2\2\u0971\u0973\7\u02e0\2\2\u0972")
        buf.write("\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0974\3\2\2\2")
        buf.write("\u0974\u0976\5\u03d8\u01ed\2\u0975\u0972\3\2\2\2\u0976")
        buf.write("\u0977\3\2\2\2\u0977\u0975\3\2\2\2\u0977\u0978\3\2\2\2")
        buf.write("\u0978\u097a\3\2\2\2\u0979\u0970\3\2\2\2\u097a\u097d\3")
        buf.write("\2\2\2\u097b\u0979\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097f")
        buf.write("\3\2\2\2\u097d\u097b\3\2\2\2\u097e\u096b\3\2\2\2\u097e")
        buf.write("\u096f\3\2\2\2\u097f\u00c1\3\2\2\2\u0980\u0981\7\u008f")
        buf.write("\2\2\u0981\u0984\7\u01f5\2\2\u0982\u0985\7\u0172\2\2\u0983")
        buf.write("\u0985\5\u00c0a\2\u0984\u0982\3\2\2\2\u0984\u0983\3\2")
        buf.write("\2\2\u0985\u00c3\3\2\2\2\u0986\u0987\7\u01a4\2\2\u0987")
        buf.write("\u0988\7\u00c5\2\2\u0988\u00c5\3\2\2\2\u0989\u098a\7\4")
        buf.write("\2\2\u098a\u098b\t\25\2\2\u098b\u00c7\3\2\2\2\u098c\u098d")
        buf.write("\7\u00ae\2\2\u098d\u098e\7\u00a9\2\2\u098e\u00c9\3\2\2")
        buf.write("\2\u098f\u0999\5\u00c8e\2\u0990\u0995\7\u00dc\2\2\u0991")
        buf.write("\u0993\7\u02e0\2\2\u0992\u0991\3\2\2\2\u0992\u0993\3\2")
        buf.write("\2\2\u0993\u0994\3\2\2\2\u0994\u0996\5\u0438\u021d\2\u0995")
        buf.write("\u0992\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0995\3\2\2\2")
        buf.write("\u0997\u0998\3\2\2\2\u0998\u099a\3\2\2\2\u0999\u0990\3")
        buf.write("\2\2\2\u0999\u099a\3\2\2\2\u099a\u099c\3\2\2\2\u099b\u099d")
        buf.write("\7\u00da\2\2\u099c\u099b\3\2\2\2\u099c\u099d\3\2\2\2\u099d")
        buf.write("\u00cb\3\2\2\2\u099e\u099f\7\u01f2\2\2\u099f\u09a0\7e")
        buf.write("\2\2\u09a0\u09a4\7\u0250\2\2\u09a1\u09a2\7\u00b4\2\2\u09a2")
        buf.write("\u09a5\7\u0277\2\2\u09a3\u09a5\5\u0402\u0202\2\u09a4\u09a1")
        buf.write("\3\2\2\2\u09a4\u09a3\3\2\2\2\u09a5\u09c6\3\2\2\2\u09a6")
        buf.write("\u09a7\7\u00e7\2\2\u09a7\u09a8\7e\2\2\u09a8\u09c3\7\u0250")
        buf.write("\2\2\u09a9\u09aa\7\u00b4\2\2\u09aa\u09c4\7\u0277\2\2\u09ab")
        buf.write("\u09b3\5\u0402\u0202\2\u09ac\u09b1\7\u0291\2\2\u09ad\u09ae")
        buf.write("\7\u0173\2\2\u09ae\u09b2\7\u01f6\2\2\u09af\u09b0\7\u01f5")
        buf.write("\2\2\u09b0\u09b2\5\u00c0a\2\u09b1\u09ad\3\2\2\2\u09b1")
        buf.write("\u09af\3\2\2\2\u09b2\u09b4\3\2\2\2\u09b3\u09ac\3\2\2\2")
        buf.write("\u09b3\u09b4\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b6\7")
        buf.write(" \2\2\u09b6\u09b8\7\u01e5\2\2\u09b7\u09b5\3\2\2\2\u09b7")
        buf.write("\u09b8\3\2\2\2\u09b8\u09c1\3\2\2\2\u09b9\u09ba\7\37\2")
        buf.write("\2\u09ba\u09bf\7\u027a\2\2\u09bb\u09c0\7\u01a4\2\2\u09bc")
        buf.write("\u09c0\7G\2\2\u09bd\u09be\7\u00a1\2\2\u09be\u09c0\7\u015a")
        buf.write("\2\2\u09bf\u09bb\3\2\2\2\u09bf\u09bc\3\2\2\2\u09bf\u09bd")
        buf.write("\3\2\2\2\u09c0\u09c2\3\2\2\2\u09c1\u09b9\3\2\2\2\u09c1")
        buf.write("\u09c2\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09a9\3\2\2\2")
        buf.write("\u09c3\u09ab\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u099e\3")
        buf.write("\2\2\2\u09c5\u09a6\3\2\2\2\u09c6\u00cd\3\2\2\2\u09c7\u09cc")
        buf.write("\7\u02da\2\2\u09c8\u09ca\7\u02e0\2\2\u09c9\u09c8\3\2\2")
        buf.write("\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cd")
        buf.write("\5\u0434\u021b\2\u09cc\u09c9\3\2\2\2\u09cd\u09ce\3\2\2")
        buf.write("\2\u09ce\u09cc\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0")
        buf.write("\3\2\2\2\u09d0\u09d1\7\u02db\2\2\u09d1\u00cf\3\2\2\2\u09d2")
        buf.write("\u09d3\7\u0215\2\2\u09d3\u09d4\7k\2\2\u09d4\u09d8\7\u02ee")
        buf.write("\2\2\u09d5\u09d9\7\r\2\2\u09d6\u09d9\7\u008f\2\2\u09d7")
        buf.write("\u09d9\5\u00ceh\2\u09d8\u09d5\3\2\2\2\u09d8\u09d6\3\2")
        buf.write("\2\2\u09d8\u09d7\3\2\2\2\u09d9\u00d1\3\2\2\2\u09da\u09db")
        buf.write("\t\26\2\2\u09db\u09dc\7k\2\2\u09dc\u09dd\7\u02ee\2\2\u09dd")
        buf.write("\u09de\5\u00ceh\2\u09de\u00d3\3\2\2\2\u09df\u09e6\5\u00d0")
        buf.write("i\2\u09e0\u09e3\5\u00d2j\2\u09e1\u09e2\7\u00dc\2\2\u09e2")
        buf.write("\u09e4\5\u03d0\u01e9\2\u09e3\u09e1\3\2\2\2\u09e3\u09e4")
        buf.write("\3\2\2\2\u09e4\u09e6\3\2\2\2\u09e5\u09df\3\2\2\2\u09e5")
        buf.write("\u09e0\3\2\2\2\u09e6\u00d5\3\2\2\2\u09e7\u09e8\7\u00a4")
        buf.write("\2\2\u09e8\u09e9\7\u00fd\2\2\u09e9\u09ea\5\u03ec\u01f7")
        buf.write("\2\u09ea\u09eb\7\u02ec\2\2\u09eb\u00d7\3\2\2\2\u09ec\u09f8")
        buf.write("\7\u00e7\2\2\u09ed\u09ef\7\u02e0\2\2\u09ee\u09ed\3\2\2")
        buf.write("\2\u09ee\u09ef\3\2\2\2\u09ef\u09f6\3\2\2\2\u09f0\u09f7")
        buf.write("\5\u03d8\u01ed\2\u09f1\u09f7\5\u0428\u0215\2\u09f2\u09f4")
        buf.write("\5\u0426\u0214\2\u09f3\u09f5\5\u0408\u0205\2\u09f4\u09f3")
        buf.write("\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f7\3\2\2\2\u09f6")
        buf.write("\u09f0\3\2\2\2\u09f6\u09f1\3\2\2\2\u09f6\u09f2\3\2\2\2")
        buf.write("\u09f7\u09f9\3\2\2\2\u09f8\u09ee\3\2\2\2\u09f9\u09fa\3")
        buf.write("\2\2\2\u09fa\u09f8\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09fe")
        buf.write("\3\2\2\2\u09fc\u09fd\7\u018d\2\2\u09fd\u09ff\5\u0404\u0203")
        buf.write("\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00")
        buf.write("\3\2\2\2\u0a00\u0a06\7\u025a\2\2\u0a01\u0a03\7\u02e0\2")
        buf.write("\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04")
        buf.write("\3\2\2\2\u0a04\u0a07\5\u03d6\u01ec\2\u0a05\u0a07\7\u01c8")
        buf.write("\2\2\u0a06\u0a02\3\2\2\2\u0a06\u0a05\3\2\2\2\u0a07\u0a08")
        buf.write("\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09")
        buf.write("\u0a0d\3\2\2\2\u0a0a\u0a0b\7\u0291\2\2\u0a0b\u0a0c\t\27")
        buf.write("\2\2\u0a0c\u0a0e\7\u0191\2\2\u0a0d\u0a0a\3\2\2\2\u0a0d")
        buf.write("\u0a0e\3\2\2\2\u0a0e\u0a12\3\2\2\2\u0a0f\u0a10\7\u0291")
        buf.write("\2\2\u0a10\u0a11\7\u00ef\2\2\u0a11\u0a13\7\u0191\2\2\u0a12")
        buf.write("\u0a0f\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a17\3\2\2\2")
        buf.write("\u0a14\u0a15\7\u0291\2\2\u0a15\u0a16\7\u00e7\2\2\u0a16")
        buf.write("\u0a18\7\u0191\2\2\u0a17\u0a14\3\2\2\2\u0a17\u0a18\3\2")
        buf.write("\2\2\u0a18\u0a1a\3\2\2\2\u0a19\u0a1b\5\u00dan\2\u0a1a")
        buf.write("\u0a19\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a1c\3\2\2\2")
        buf.write("\u0a1c\u0a1d\7\u02ec\2\2\u0a1d\u00d9\3\2\2\2\u0a1e\u0a1f")
        buf.write("\7j\2\2\u0a1f\u0a20\7\u02ee\2\2\u0a20\u0a21\t\30\2\2\u0a21")
        buf.write("\u00db\3\2\2\2\u0a22\u0a25\7t\2\2\u0a23\u0a24\7\u0195")
        buf.write("\2\2\u0a24\u0a26\7\u01e4\2\2\u0a25\u0a23\3\2\2\2\u0a25")
        buf.write("\u0a26\3\2\2\2\u0a26\u0a2b\3\2\2\2\u0a27\u0a29\7\u0195")
        buf.write("\2\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a")
        buf.write("\3\2\2\2\u0a2a\u0a2c\7\u00da\2\2\u0a2b\u0a28\3\2\2\2\u0a2b")
        buf.write("\u0a2c\3\2\2\2\u0a2c\u0a2e\3\2\2\2\u0a2d\u0a2f\7\u00a8")
        buf.write("\2\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a30")
        buf.write("\3\2\2\2\u0a30\u0a31\7\u0286\2\2\u0a31\u0a33\5\u03f8\u01fd")
        buf.write("\2\u0a32\u0a34\5\u00dep\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34")
        buf.write("\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36\7\30\2\2\u0a36")
        buf.write("\u0a38\5\u028c\u0147\2\u0a37\u0a39\5\u0334\u019b\2\u0a38")
        buf.write("\u0a37\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u00dd\3\2\2\2")
        buf.write("\u0a3a\u0a3d\5\u00e0q\2\u0a3b\u0a3d\5\u00e2r\2\u0a3c\u0a3a")
        buf.write("\3\2\2\2\u0a3c\u0a3b\3\2\2\2\u0a3d\u00df\3\2\2\2\u0a3e")
        buf.write("\u0a4c\7\u02da\2\2\u0a3f\u0a41\7\u02e0\2\2\u0a40\u0a3f")
        buf.write("\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a4a\3\2\2\2\u0a42")
        buf.write("\u0a46\5\u03b0\u01d9\2\u0a43\u0a45\5\u00e4s\2\u0a44\u0a43")
        buf.write("\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46")
        buf.write("\u0a47\3\2\2\2\u0a47\u0a4b\3\2\2\2\u0a48\u0a46\3\2\2\2")
        buf.write("\u0a49\u0a4b\5\u00eav\2\u0a4a\u0a42\3\2\2\2\u0a4a\u0a49")
        buf.write("\3\2\2\2\u0a4b\u0a4d\3\2\2\2\u0a4c\u0a40\3\2\2\2\u0a4d")
        buf.write("\u0a4e\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4e\u0a4f\3\2\2\2")
        buf.write("\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\7\u02db\2\2\u0a51\u00e1")
        buf.write("\3\2\2\2\u0a52\u0a53\7\u0186\2\2\u0a53\u0a66\5\u03de\u01f0")
        buf.write("\2\u0a54\u0a55\7\u0291\2\2\u0a55\u0a56\7\u0183\2\2\u0a56")
        buf.write("\u0a62\t\31\2\2\u0a57\u0a63\7\u008f\2\2\u0a58\u0a5d\7")
        buf.write("\u02da\2\2\u0a59\u0a5b\7\u02e0\2\2\u0a5a\u0a59\3\2\2\2")
        buf.write("\u0a5a\u0a5b\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5e\7")
        buf.write("\u02f7\2\2\u0a5d\u0a5a\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f")
        buf.write("\u0a5d\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\3\2\2\2")
        buf.write("\u0a61\u0a63\7\u02db\2\2\u0a62\u0a57\3\2\2\2\u0a62\u0a58")
        buf.write("\3\2\2\2\u0a63\u0a67\3\2\2\2\u0a64\u0a65\7\u0268\2\2\u0a65")
        buf.write("\u0a67\5\u03f8\u01fd\2\u0a66\u0a54\3\2\2\2\u0a66\u0a64")
        buf.write("\3\2\2\2\u0a67\u0a79\3\2\2\2\u0a68\u0a71\7\u02da\2\2\u0a69")
        buf.write("\u0a6b\7\u02e0\2\2\u0a6a\u0a69\3\2\2\2\u0a6a\u0a6b\3\2")
        buf.write("\2\2\u0a6b\u0a6f\3\2\2\2\u0a6c\u0a70\5\u00eav\2\u0a6d")
        buf.write("\u0a6e\7\u02f7\2\2\u0a6e\u0a70\5\u00e4s\2\u0a6f\u0a6c")
        buf.write("\3\2\2\2\u0a6f\u0a6d\3\2\2\2\u0a70\u0a72\3\2\2\2\u0a71")
        buf.write("\u0a6a\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a71\3\2\2\2")
        buf.write("\u0a73\u0a74\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a76\7")
        buf.write("\u02db\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a68\3\2\2\2\u0a78")
        buf.write("\u0a7b\3\2\2\2\u0a79\u0a77\3\2\2\2\u0a79\u0a7a\3\2\2\2")
        buf.write("\u0a7a\u00e3\3\2\2\2\u0a7b\u0a79\3\2\2\2\u0a7c\u0a7d\7")
        buf.write("g\2\2\u0a7d\u0a7f\5\u03da\u01ee\2\u0a7e\u0a7c\3\2\2\2")
        buf.write("\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a89\3\2\2\2\u0a80\u0a82\7")
        buf.write("\u017b\2\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82")
        buf.write("\u0a83\3\2\2\2\u0a83\u0a8a\7\u017e\2\2\u0a84\u0a8a\7\u026c")
        buf.write("\2\2\u0a85\u0a86\7\u01c0\2\2\u0a86\u0a8a\7\u011c\2\2\u0a87")
        buf.write("\u0a8a\5\u01f0\u00f9\2\u0a88\u0a8a\5\u01e6\u00f4\2\u0a89")
        buf.write("\u0a81\3\2\2\2\u0a89\u0a84\3\2\2\2\u0a89\u0a85\3\2\2\2")
        buf.write("\u0a89\u0a87\3\2\2\2\u0a89\u0a88\3\2\2\2\u0a8a\u0a8c\3")
        buf.write("\2\2\2\u0a8b\u0a8d\5\u00ecw\2\u0a8c\u0a8b\3\2\2\2\u0a8c")
        buf.write("\u0a8d\3\2\2\2\u0a8d\u00e5\3\2\2\2\u0a8e\u0a8f\7\u0206")
        buf.write("\2\2\u0a8f\u0a90\7\u0114\2\2\u0a90\u0a9c\5\u03f8\u01fd")
        buf.write("\2\u0a91\u0a92\7\u0291\2\2\u0a92\u0a9c\7\u01fa\2\2\u0a93")
        buf.write("\u0a94\7g\2\2\u0a94\u0a96\5\u03da\u01ee\2\u0a95\u0a93")
        buf.write("\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97")
        buf.write("\u0a99\5\u01f0\u00f9\2\u0a98\u0a9a\5\u00ecw\2\u0a99\u0a98")
        buf.write("\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9c\3\2\2\2\u0a9b")
        buf.write("\u0a8e\3\2\2\2\u0a9b\u0a91\3\2\2\2\u0a9b\u0a95\3\2\2\2")
        buf.write("\u0a9c\u00e7\3\2\2\2\u0a9d\u0a9e\7\u0206\2\2\u0a9e\u0a9f")
        buf.write("\7\u00dc\2\2\u0a9f\u0aa0\7\u02da\2\2\u0aa0\u0aa1\5\u0438")
        buf.write("\u021d\2\u0aa1\u0aa2\7\u02db\2\2\u0aa2\u0aa3\7\u0114\2")
        buf.write("\2\u0aa3\u0aa4\5\u03f8\u01fd\2\u0aa4\u0ac1\3\2\2\2\u0aa5")
        buf.write("\u0aa6\7\u01db\2\2\u0aa6\u0aa7\7\u02da\2\2\u0aa7\u0aa8")
        buf.write("\5\u0438\u021d\2\u0aa8\u0aa9\7\u02db\2\2\u0aa9\u0aaa\7")
        buf.write("\u0291\2\2\u0aaa\u0aab\7\u01fa\2\2\u0aab\u0ac1\3\2\2\2")
        buf.write("\u0aac\u0aad\7g\2\2\u0aad\u0aaf\5\u03da\u01ee\2\u0aae")
        buf.write("\u0aac\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\3\2\2\2")
        buf.write("\u0ab0\u0ab1\7\u00db\2\2\u0ab1\u0ab2\7\u011c\2\2\u0ab2")
        buf.write("\u0ab7\7\u02da\2\2\u0ab3\u0ab5\7\u02e0\2\2\u0ab4\u0ab3")
        buf.write("\3\2\2\2\u0ab4\u0ab5\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6")
        buf.write("\u0ab8\5\u0438\u021d\2\u0ab7\u0ab4\3\2\2\2\u0ab8\u0ab9")
        buf.write("\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba")
        buf.write("\u0abb\3\2\2\2\u0abb\u0abc\7\u02db\2\2\u0abc\u0abe\5\u01f0")
        buf.write("\u00f9\2\u0abd\u0abf\5\u00ecw\2\u0abe\u0abd\3\2\2\2\u0abe")
        buf.write("\u0abf\3\2\2\2\u0abf\u0ac1\3\2\2\2\u0ac0\u0a9d\3\2\2\2")
        buf.write("\u0ac0\u0aa5\3\2\2\2\u0ac0\u0aae\3\2\2\2\u0ac1\u00e9\3")
        buf.write("\2\2\2\u0ac2\u0ac3\7g\2\2\u0ac3\u0ac5\5\u03da\u01ee\2")
        buf.write("\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ae5\3")
        buf.write("\2\2\2\u0ac6\u0ac7\7\u026c\2\2\u0ac7\u0acc\7\u02da\2\2")
        buf.write("\u0ac8\u0aca\7\u02e0\2\2\u0ac9\u0ac8\3\2\2\2\u0ac9\u0aca")
        buf.write("\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0acd\5\u03f6\u01fc")
        buf.write("\2\u0acc\u0ac9\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0acc")
        buf.write("\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0")
        buf.write("\u0ad1\7\u02db\2\2\u0ad1\u0ae6\3\2\2\2\u0ad2\u0ad3\7\u01c0")
        buf.write("\2\2\u0ad3\u0ad4\7\u011c\2\2\u0ad4\u0ad9\7\u02da\2\2\u0ad5")
        buf.write("\u0ad7\7\u02e0\2\2\u0ad6\u0ad5\3\2\2\2\u0ad6\u0ad7\3\2")
        buf.write("\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u0ada\5\u03f6\u01fc\2\u0ad9")
        buf.write("\u0ad6\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0ad9\3\2\2\2")
        buf.write("\u0adb\u0adc\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ade\7")
        buf.write("\u02db\2\2\u0ade\u0ae6\3\2\2\2\u0adf\u0ae6\5\u01ee\u00f8")
        buf.write("\2\u0ae0\u0ae1\7L\2\2\u0ae1\u0ae2\7\u02da\2\2\u0ae2\u0ae3")
        buf.write("\5\u033e\u01a0\2\u0ae3\u0ae4\7\u02db\2\2\u0ae4\u0ae6\3")
        buf.write("\2\2\2\u0ae5\u0ac6\3\2\2\2\u0ae5\u0ad2\3\2\2\2\u0ae5\u0adf")
        buf.write("\3\2\2\2\u0ae5\u0ae0\3\2\2\2\u0ae6\u0ae8\3\2\2\2\u0ae7")
        buf.write("\u0ae9\5\u00ecw\2\u0ae8\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2")
        buf.write("\2\2\u0ae9\u00eb\3\2\2\2\u0aea\u0aec\7\u017b\2\2\u0aeb")
        buf.write("\u0aea\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aed\3\2\2\2")
        buf.write("\u0aed\u0af4\7\u0091\2\2\u0aee\u0aef\7\u0105\2\2\u0aef")
        buf.write("\u0af4\t\32\2\2\u0af0\u0af4\t\33\2\2\u0af1\u0af4\t\7\2")
        buf.write("\2\u0af2\u0af4\t\34\2\2\u0af3\u0aeb\3\2\2\2\u0af3\u0aee")
        buf.write("\3\2\2\2\u0af3\u0af0\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3")
        buf.write("\u0af2\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0af3\3\2\2\2")
        buf.write("\u0af5\u0af6\3\2\2\2\u0af6\u00ed\3\2\2\2\u0af7\u0af9\7")
        buf.write("t\2\2\u0af8\u0afa\t\35\2\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa")
        buf.write("\3\2\2\2\u0afa\u0afe\3\2\2\2\u0afb\u0aff\5\u00f0y\2\u0afc")
        buf.write("\u0aff\5\u00fc\177\2\u0afd\u0aff\5\u0100\u0081\2\u0afe")
        buf.write("\u0afb\3\2\2\2\u0afe\u0afc\3\2\2\2\u0afe\u0afd\3\2\2\2")
        buf.write("\u0aff\u0b00\3\2\2\2\u0b00\u0b01\7\u02ec\2\2\u0b01\u00ef")
        buf.write("\3\2\2\2\u0b02\u0b03\7\u0248\2\2\u0b03\u0b05\5\u0434\u021b")
        buf.write("\2\u0b04\u0b06\5\u0104\u0083\2\u0b05\u0b04\3\2\2\2\u0b05")
        buf.write("\u0b06\3\2\2\2\u0b06\u0b18\3\2\2\2\u0b07\u0b08\7\u014d")
        buf.write("\2\2\u0b08\u0b09\7\u00c7\2\2\u0b09\u0b17\5\u013e\u00a0")
        buf.write("\2\u0b0a\u0b0b\7\67\2\2\u0b0b\u0b17\5\u013e\u00a0\2\u0b0c")
        buf.write("\u0b17\5\u00f4{\2\u0b0d\u0b0e\7\u00da\2\2\u0b0e\u0b17")
        buf.write("\7\u0133\2\2\u0b0f\u0b17\t\36\2\2\u0b10\u0b11\7\u00b1")
        buf.write("\2\2\u0b11\u0b17\5\u00f2z\2\u0b12\u0b17\7\u008f\2\2\u0b13")
        buf.write("\u0b17\5\u00f6|\2\u0b14\u0b17\5\u00f8}\2\u0b15\u0b17\5")
        buf.write("\u00fa~\2\u0b16\u0b07\3\2\2\2\u0b16\u0b0a\3\2\2\2\u0b16")
        buf.write("\u0b0c\3\2\2\2\u0b16\u0b0d\3\2\2\2\u0b16\u0b0f\3\2\2\2")
        buf.write("\u0b16\u0b10\3\2\2\2\u0b16\u0b12\3\2\2\2\u0b16\u0b13\3")
        buf.write("\2\2\2\u0b16\u0b14\3\2\2\2\u0b16\u0b15\3\2\2\2\u0b17\u0b1a")
        buf.write("\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19")
        buf.write("\u00f1\3\2\2\2\u0b1a\u0b18\3\2\2\2\u0b1b\u0b1c\7\u027a")
        buf.write("\2\2\u0b1c\u0b1d\7\u02d6\2\2\u0b1d\u00f3\3\2\2\2\u0b1e")
        buf.write("\u0b1f\t\37\2\2\u0b1f\u00f5\3\2\2\2\u0b20\u0b21\7\u00c7")
        buf.write("\2\2\u0b21\u0b22\7\u013d\2\2\u0b22\u0b29\7\u012f\2\2\u0b23")
        buf.write("\u0b2a\7\"\2\2\u0b24\u0b27\7\u026a\2\2\u0b25\u0b26\7\u0220")
        buf.write("\2\2\u0b26\u0b28\5\u013e\u00a0\2\u0b27\u0b25\3\2\2\2\u0b27")
        buf.write("\u0b28\3\2\2\2\u0b28\u0b2a\3\2\2\2\u0b29\u0b23\3\2\2\2")
        buf.write("\u0b29\u0b24\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u00f7\3")
        buf.write("\2\2\2\u0b2b\u0b2c\7\u020b\2\2\u0b2c\u0b2d\7\u0228\2\2")
        buf.write("\u0b2d\u0b2e\7\u013d\2\2\u0b2e\u0b2f\t \2\2\u0b2f\u00f9")
        buf.write("\3\2\2\2\u0b30\u0b31\7\u00d3\2\2\u0b31\u0b32\t!\2\2\u0b32")
        buf.write("\u00fb\3\2\2\2\u0b33\u0b34\7\u024c\2\2\u0b34\u0b35\7\u0248")
        buf.write("\2\2\u0b35\u0b37\5\u0434\u021b\2\u0b36\u0b38\5\u0106\u0084")
        buf.write("\2\u0b37\u0b36\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b3a")
        buf.write("\3\2\2\2\u0b39\u0b3b\5\u00fe\u0080\2\u0b3a\u0b39\3\2\2")
        buf.write("\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b3e")
        buf.write("\5\u00f6|\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e")
        buf.write("\u00fd\3\2\2\2\u0b3f\u0b40\7\u0248\2\2\u0b40\u0b41\7\u00e8")
        buf.write("\2\2\u0b41\u0b42\t\"\2\2\u0b42\u00ff\3\2\2\2\u0b43\u0b44")
        buf.write("\7\u0269\2\2\u0b44\u0b45\7\u0248\2\2\u0b45\u0b47\5\u0434")
        buf.write("\u021b\2\u0b46\u0b48\5\u0104\u0083\2\u0b47\u0b46\3\2\2")
        buf.write("\2\u0b47\u0b48\3\2\2\2\u0b48\u0b4a\3\2\2\2\u0b49\u0b4b")
        buf.write("\5\u00f6|\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b")
        buf.write("\u0b4d\3\2\2\2\u0b4c\u0b4e\5\u0102\u0082\2\u0b4d\u0b4c")
        buf.write("\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0101\3\2\2\2\u0b4f")
        buf.write("\u0b50\7\u01ed\2\2\u0b50\u0b51\t#\2\2\u0b51\u0103\3\2")
        buf.write("\2\2\u0b52\u0b54\7\177\2\2\u0b53\u0b55\7\u02e0\2\2\u0b54")
        buf.write("\u0b53\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b56\3\2\2\2")
        buf.write("\u0b56\u0b57\5\u0108\u0085\2\u0b57\u0105\3\2\2\2\u0b58")
        buf.write("\u0b5a\7\u024b\2\2\u0b59\u0b5b\7\u02e0\2\2\u0b5a\u0b59")
        buf.write("\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c")
        buf.write("\u0b5d\5\u0108\u0085\2\u0b5d\u0107\3\2\2\2\u0b5e\u0b60")
        buf.write("\7\u02d6\2\2\u0b5f\u0b5e\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60")
        buf.write("\u0b63\3\2\2\2\u0b61\u0b62\7\u0220\2\2\u0b62\u0b64\5\u013e")
        buf.write("\u00a0\2\u0b63\u0b61\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64")
        buf.write("\u0b66\3\2\2\2\u0b65\u0b67\7\u01f0\2\2\u0b66\u0b65\3\2")
        buf.write("\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b69\3\2\2\2\u0b68\u0b6a")
        buf.write("\5\u010c\u0087\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3\2\2")
        buf.write("\2\u0b6a\u0109\3\2\2\2\u0b6b\u0b77\7\177\2\2\u0b6c\u0b78")
        buf.write("\7\u02d6\2\2\u0b6d\u0b72\7\u02da\2\2\u0b6e\u0b70\7\u02e0")
        buf.write("\2\2\u0b6f\u0b6e\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b71")
        buf.write("\3\2\2\2\u0b71\u0b73\7\u02d6\2\2\u0b72\u0b6f\3\2\2\2\u0b73")
        buf.write("\u0b74\3\2\2\2\u0b74\u0b72\3\2\2\2\u0b74\u0b75\3\2\2\2")
        buf.write("\u0b75\u0b76\3\2\2\2\u0b76\u0b78\7\u02db\2\2\u0b77\u0b6c")
        buf.write("\3\2\2\2\u0b77\u0b6d\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78")
        buf.write("\u0b7b\3\2\2\2\u0b79\u0b7a\7\u0220\2\2\u0b7a\u0b7c\5\u013e")
        buf.write("\u00a0\2\u0b7b\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c")
        buf.write("\u0b7f\3\2\2\2\u0b7d\u0b7e\7\67\2\2\u0b7e\u0b80\5\u013e")
        buf.write("\u00a0\2\u0b7f\u0b7d\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80")
        buf.write("\u0b82\3\2\2\2\u0b81\u0b83\7\u01f0\2\2\u0b82\u0b81\3\2")
        buf.write("\2\2\u0b82\u0b83\3\2\2\2\u0b83\u010b\3\2\2\2\u0b84\u0b8e")
        buf.write("\7$\2\2\u0b85\u0b8f\7\u0185\2\2\u0b86\u0b89\7\u018d\2")
        buf.write("\2\u0b87\u0b88\7\u0165\2\2\u0b88\u0b8a\5\u013e\u00a0\2")
        buf.write("\u0b89\u0b87\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8c\3")
        buf.write("\2\2\2\u0b8b\u0b8d\5\u010e\u0088\2\u0b8c\u0b8b\3\2\2\2")
        buf.write("\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8f\3\2\2\2\u0b8e\u0b85\3")
        buf.write("\2\2\2\u0b8e\u0b86\3\2\2\2\u0b8f\u010d\3\2\2\2\u0b90\u0b93")
        buf.write("\7\u0144\2\2\u0b91\u0b94\7\u026d\2\2\u0b92\u0b94\5\u013e")
        buf.write("\u00a0\2\u0b93\u0b91\3\2\2\2\u0b93\u0b92\3\2\2\2\u0b94")
        buf.write("\u010f\3\2\2\2\u0b95\u0b96\7=\2\2\u0b96\u0b97\t\32\2\2")
        buf.write("\u0b97\u0111\3\2\2\2\u0b98\u0b9e\7\u0176\2\2\u0b99\u0b9b")
        buf.write("\7\u019f\2\2\u0b9a\u0b9c\7\u02d4\2\2\u0b9b\u0b9a\3\2\2")
        buf.write("\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9e\3\2\2\2\u0b9d\u0b98")
        buf.write("\3\2\2\2\u0b9d\u0b99\3\2\2\2\u0b9e\u0113\3\2\2\2\u0b9f")
        buf.write("\u0ba0\7t\2\2\u0ba0\u0ba1\7\u0143\2\2\u0ba1\u0ba2\7\u0286")
        buf.write("\2\2\u0ba2\u0ba3\7\u0134\2\2\u0ba3\u0ba4\7\u018d\2\2\u0ba4")
        buf.write("\u0bae\5\u03f8\u01fd\2\u0ba5\u0bab\5\u0142\u00a2\2\u0ba6")
        buf.write("\u0ba7\7\u0248\2\2\u0ba7\u0bab\5\u0434\u021b\2\u0ba8\u0bab")
        buf.write("\5\u00f4{\2\u0ba9\u0bab\t$\2\2\u0baa\u0ba5\3\2\2\2\u0baa")
        buf.write("\u0ba6\3\2\2\2\u0baa\u0ba8\3\2\2\2\u0baa\u0ba9\3\2\2\2")
        buf.write("\u0bab\u0bac\3\2\2\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3")
        buf.write("\2\2\2\u0bad\u0baf\3\2\2\2\u0bae\u0baa\3\2\2\2\u0bae\u0baf")
        buf.write("\3\2\2\2\u0baf\u0bb1\3\2\2\2\u0bb0\u0bb2\5\u0112\u008a")
        buf.write("\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bda")
        buf.write("\3\2\2\2\u0bb3\u0bc3\7\u0291\2\2\u0bb4\u0bb6\7\u02e0\2")
        buf.write("\2\u0bb5\u0bb4\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bbf")
        buf.write("\3\2\2\2\u0bb7\u0bb8\7\u0183\2\2\u0bb8\u0bc0\7\u00f4\2")
        buf.write("\2\u0bb9\u0bba\7\u01c0\2\2\u0bba\u0bc0\7\u011c\2\2\u0bbb")
        buf.write("\u0bc0\7\u01fa\2\2\u0bbc\u0bc0\7\u020e\2\2\u0bbd\u0bbe")
        buf.write("\7[\2\2\u0bbe\u0bc0\7\u0205\2\2\u0bbf\u0bb7\3\2\2\2\u0bbf")
        buf.write("\u0bb9\3\2\2\2\u0bbf\u0bbb\3\2\2\2\u0bbf\u0bbc\3\2\2\2")
        buf.write("\u0bbf\u0bbd\3\2\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bb5\3")
        buf.write("\2\2\2\u0bc2\u0bc5\3\2\2\2\u0bc3\u0bc1\3\2\2\2\u0bc3\u0bc4")
        buf.write("\3\2\2\2\u0bc4\u0bd3\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc6")
        buf.write("\u0bcb\7\u02da\2\2\u0bc7\u0bc9\7\u02e0\2\2\u0bc8\u0bc7")
        buf.write("\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca")
        buf.write("\u0bcc\5\u0438\u021d\2\u0bcb\u0bc8\3\2\2\2\u0bcc\u0bcd")
        buf.write("\3\2\2\2\u0bcd\u0bcb\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce")
        buf.write("\u0bcf\3\2\2\2\u0bcf\u0bd1\7\u02db\2\2\u0bd0\u0bd2\5\u0116")
        buf.write("\u008c\2\u0bd1\u0bd0\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2")
        buf.write("\u0bd4\3\2\2\2\u0bd3\u0bc6\3\2\2\2\u0bd3\u0bd4\3\2\2\2")
        buf.write("\u0bd4\u0bd6\3\2\2\2\u0bd5\u0bd7\5\u0118\u008d\2\u0bd6")
        buf.write("\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd9\3\2\2\2")
        buf.write("\u0bd8\u0bb3\3\2\2\2\u0bd9\u0bdc\3\2\2\2\u0bda\u0bd8\3")
        buf.write("\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0115\3\2\2\2\u0bdc\u0bda")
        buf.write("\3\2\2\2\u0bdd\u0bde\t%\2\2\u0bde\u0bdf\7\u0164\2\2\u0bdf")
        buf.write("\u0be0\7\u027c\2\2\u0be0\u0117\3\2\2\2\u0be1\u0be2\7\u01c9")
        buf.write("\2\2\u0be2\u0be4\7\u00f7\2\2\u0be3\u0be5\t&\2\2\u0be4")
        buf.write("\u0be3\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0119\3\2\2\2")
        buf.write("\u0be6\u0be7\7t\2\2\u0be7\u0be8\7\u0143\2\2\u0be8\u0be9")
        buf.write("\7\u0286\2\2\u0be9\u0bec\5\u03f8\u01fd\2\u0bea\u0beb\7")
        buf.write("\u0186\2\2\u0beb\u0bed\5\u03de\u01f0\2\u0bec\u0bea\3\2")
        buf.write("\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0c02\3\2\2\2\u0bee\u0bef")
        buf.write("\7\u018d\2\2\u0bef\u0bf0\7\u01bb\2\2\u0bf0\u0bf4\7\u024a")
        buf.write("\2\2\u0bf1\u0bf2\t\'\2\2\u0bf2\u0bf3\7\u01d7\2\2\u0bf3")
        buf.write("\u0bf5\7\u01bd\2\2\u0bf4\u0bf1\3\2\2\2\u0bf4\u0bf5\3\2")
        buf.write("\2\2\u0bf5\u0c03\3\2\2\2\u0bf6\u0bf8\5\u014a\u00a6\2\u0bf7")
        buf.write("\u0bf6\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bfa\3\2\2\2")
        buf.write("\u0bf9\u0bfb\t$\2\2\u0bfa\u0bf9\3\2\2\2\u0bfa\u0bfb\3")
        buf.write("\2\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bfe\5\u0112\u008a\2")
        buf.write("\u0bfd\u0bfc\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c00\3")
        buf.write("\2\2\2\u0bff\u0c01\5\u0110\u0089\2\u0c00\u0bff\3\2\2\2")
        buf.write("\u0c00\u0c01\3\2\2\2\u0c01\u0c03\3\2\2\2\u0c02\u0bee\3")
        buf.write("\2\2\2\u0c02\u0bf7\3\2\2\2\u0c03\u0c15\3\2\2\2\u0c04\u0c05")
        buf.write("\7\u027a\2\2\u0c05\u0c0f\7\u00fd\2\2\u0c06\u0c0a\5\u0142")
        buf.write("\u00a2\2\u0c07\u0c08\7\u0248\2\2\u0c08\u0c0a\5\u0434\u021b")
        buf.write("\2\u0c09\u0c06\3\2\2\2\u0c09\u0c07\3\2\2\2\u0c0a\u0c0b")
        buf.write("\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c")
        buf.write("\u0c0e\3\2\2\2\u0c0d\u0c09\3\2\2\2\u0c0e\u0c11\3\2\2\2")
        buf.write("\u0c0f\u0c0d\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c16\3")
        buf.write("\2\2\2\u0c11\u0c0f\3\2\2\2\u0c12\u0c13\7\u027a\2\2\u0c13")
        buf.write("\u0c14\7\u0173\2\2\u0c14\u0c16\7\u00fd\2\2\u0c15\u0c04")
        buf.write("\3\2\2\2\u0c15\u0c12\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16")
        buf.write("\u0c18\3\2\2\2\u0c17\u0c19\5\u011c\u008f\2\u0c18\u0c17")
        buf.write("\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1c\3\2\2\2\u0c1a")
        buf.write("\u0c1b\7\u00dc\2\2\u0c1b\u0c1d\7\u0273\2\2\u0c1c\u0c1a")
        buf.write("\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c21\3\2\2\2\u0c1e")
        buf.write("\u0c1f\t\7\2\2\u0c1f\u0c20\7\u01ca\2\2\u0c20\u0c22\7\u01f3")
        buf.write("\2\2\u0c21\u0c1e\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22\u0c23")
        buf.write("\3\2\2\2\u0c23\u0c24\7\30\2\2\u0c24\u0c25\5\u028c\u0147")
        buf.write("\2\u0c25\u0c26\7\u02ec\2\2\u0c26\u011b\3\2\2\2\u0c27\u0c28")
        buf.write("\7\u0163\2\2\u0c28\u0c4f\7\u01dc\2\2\u0c29\u0c4a\7\u01dc")
        buf.write("\2\2\u0c2a\u0c4b\t(\2\2\u0c2b\u0c2c\7\u018d\2\2\u0c2c")
        buf.write("\u0c4b\t)\2\2\u0c2d\u0c2e\7\u022e\2\2\u0c2e\u0c31\7\u0291")
        buf.write("\2\2\u0c2f\u0c31\7\u0165\2\2\u0c30\u0c2d\3\2\2\2\u0c30")
        buf.write("\u0c2f\3\2\2\2\u0c31\u0c4b\3\2\2\2\u0c32\u0c36\7\u0291")
        buf.write("\2\2\u0c33\u0c34\7\u01c0\2\2\u0c34\u0c37\7\u011c\2\2\u0c35")
        buf.write("\u0c37\7\u01fa\2\2\u0c36\u0c33\3\2\2\2\u0c36\u0c35\3\2")
        buf.write("\2\2\u0c37\u0c4b\3\2\2\2\u0c38\u0c45\7\u027a\2\2\u0c39")
        buf.write("\u0c3b\7\u008f\2\2\u0c3a\u0c3c\t*\2\2\u0c3b\u0c3a\3\2")
        buf.write("\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e")
        buf.write("\7\u01f7\2\2\u0c3e\u0c46\7\u020b\2\2\u0c3f\u0c41\t*\2")
        buf.write("\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c42")
        buf.write("\3\2\2\2\u0c42\u0c43\7\u01f7\2\2\u0c43\u0c44\7\u020b\2")
        buf.write("\2\u0c44\u0c46\7\u02f7\2\2\u0c45\u0c39\3\2\2\2\u0c45\u0c40")
        buf.write("\3\2\2\2\u0c46\u0c4b\3\2\2\2\u0c47\u0c48\7\u027a\2\2\u0c48")
        buf.write("\u0c49\t+\2\2\u0c49\u0c4b\7h\2\2\u0c4a\u0c2a\3\2\2\2\u0c4a")
        buf.write("\u0c2b\3\2\2\2\u0c4a\u0c30\3\2\2\2\u0c4a\u0c32\3\2\2\2")
        buf.write("\u0c4a\u0c38\3\2\2\2\u0c4a\u0c47\3\2\2\2\u0c4b\u0c4c\3")
        buf.write("\2\2\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4f")
        buf.write("\3\2\2\2\u0c4e\u0c27\3\2\2\2\u0c4e\u0c29\3\2\2\2\u0c4f")
        buf.write("\u011d\3\2\2\2\u0c50\u0c53\7t\2\2\u0c51\u0c52\7\u00e4")
        buf.write("\2\2\u0c52\u0c54\7\u024c\2\2\u0c53\u0c51\3\2\2\2\u0c53")
        buf.write("\u0c54\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c56\7\u024a")
        buf.write("\2\2\u0c56\u0c5a\5\u03f8\u01fd\2\u0c57\u0c5b\5\u0134\u009b")
        buf.write("\2\u0c58\u0c5b\5\u012a\u0096\2\u0c59\u0c5b\5\u0120\u0091")
        buf.write("\2\u0c5a\u0c57\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5a\u0c59")
        buf.write("\3\2\2\2\u0c5b\u0c5e\3\2\2\2\u0c5c\u0c5d\7\30\2\2\u0c5d")
        buf.write("\u0c5f\5\u028c\u0147\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f")
        buf.write("\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c61\7\u02ec\2\2\u0c61")
        buf.write("\u011f\3\2\2\2\u0c62\u0c63\7\u0186\2\2\u0c63\u0c68\7\u02a3")
        buf.write("\2\2\u0c64\u0c65\7\u02da\2\2\u0c65\u0c66\5\u0130\u0099")
        buf.write("\2\u0c66\u0c67\7\u02db\2\2\u0c67\u0c69\3\2\2\2\u0c68\u0c64")
        buf.write("\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6c\3\2\2\2\u0c6a")
        buf.write("\u0c6b\7\u02a3\2\2\u0c6b\u0c6d\5\u0126\u0094\2\u0c6c\u0c6a")
        buf.write("\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d\u0c6f\3\2\2\2\u0c6e")
        buf.write("\u0c70\5\u0128\u0095\2\u0c6f\u0c6e\3\2\2\2\u0c6f\u0c70")
        buf.write("\3\2\2\2\u0c70\u0c72\3\2\2\2\u0c71\u0c73\5\u0122\u0092")
        buf.write("\2\u0c72\u0c71\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c78")
        buf.write("\3\2\2\2\u0c74\u0c75\7\u018d\2\2\u0c75\u0c76\7[\2\2\u0c76")
        buf.write("\u0c77\t,\2\2\u0c77\u0c79\7\u01fc\2\2\u0c78\u0c74\3\2")
        buf.write("\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c7b\3\2\2\2\u0c7a\u0c7c")
        buf.write("\5\u012e\u0098\2\u0c7b\u0c7a\3\2\2\2\u0c7b\u0c7c\3\2\2")
        buf.write("\2\u0c7c\u0c7e\3\2\2\2\u0c7d\u0c7f\5\u012c\u0097\2\u0c7e")
        buf.write("\u0c7d\3\2\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c81\3\2\2\2")
        buf.write("\u0c80\u0c82\5\u014a\u00a6\2\u0c81\u0c80\3\2\2\2\u0c81")
        buf.write("\u0c82\3\2\2\2\u0c82\u0c84\3\2\2\2\u0c83\u0c85\5\u01c4")
        buf.write("\u00e3\2\u0c84\u0c83\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85")
        buf.write("\u0c87\3\2\2\2\u0c86\u0c88\5\u0138\u009d\2\u0c87\u0c86")
        buf.write("\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a\3\2\2\2\u0c89")
        buf.write("\u0c8b\t$\2\2\u0c8a\u0c89\3\2\2\2\u0c8a\u0c8b\3\2\2\2")
        buf.write("\u0c8b\u0c91\3\2\2\2\u0c8c\u0c8d\7\u01ea\2\2\u0c8d\u0c8e")
        buf.write("\7\u02da\2\2\u0c8e\u0c8f\7\u0154\2\2\u0c8f\u0c90\t-\2")
        buf.write("\2\u0c90\u0c92\7\u02db\2\2\u0c91\u0c8c\3\2\2\2\u0c91\u0c92")
        buf.write("\3\2\2\2\u0c92\u0c94\3\2\2\2\u0c93\u0c95\5\u0112\u008a")
        buf.write("\2\u0c94\u0c93\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c97")
        buf.write("\3\2\2\2\u0c96\u0c98\t.\2\2\u0c97\u0c96\3\2\2\2\u0c97")
        buf.write("\u0c98\3\2\2\2\u0c98\u0c9e\3\2\2\2\u0c99\u0c9b\5\u017c")
        buf.write("\u00bf\2\u0c9a\u0c99\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c")
        buf.write("\u0c9a\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f\3\2\2\2")
        buf.write("\u0c9e\u0c9a\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca1\3")
        buf.write("\2\2\2\u0ca0\u0ca2\5\u014c\u00a7\2\u0ca1\u0ca0\3\2\2\2")
        buf.write("\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca4\3\2\2\2\u0ca3\u0ca5\5")
        buf.write("\u014e\u00a8\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2\2")
        buf.write("\u0ca5\u0121\3\2\2\2\u0ca6\u0ca7\7\u0287\2\2\u0ca7\u0ca8")
        buf.write("\7X\2\2\u0ca8\u0cb2\7\u02da\2\2\u0ca9\u0cab\7\u02e0\2")
        buf.write("\2\u0caa\u0ca9\3\2\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cac")
        buf.write("\3\2\2\2\u0cac\u0cad\5\u03f6\u01fc\2\u0cad\u0cae\7\30")
        buf.write("\2\2\u0cae\u0caf\7\u02da\2\2\u0caf\u0cb0\5\u033e\u01a0")
        buf.write("\2\u0cb0\u0cb1\7\u02db\2\2\u0cb1\u0cb3\3\2\2\2\u0cb2\u0caa")
        buf.write("\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb2\3\2\2\2\u0cb4")
        buf.write("\u0cb5\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7\7\u02db")
        buf.write("\2\2\u0cb7\u0123\3\2\2\2\u0cb8\u0cba\7\u02a3\2\2\u0cb9")
        buf.write("\u0cbb\7W\2\2\u0cba\u0cb9\3\2\2\2\u0cba\u0cbb\3\2\2\2")
        buf.write("\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cbe\5\u03f6\u01fc\2\u0cbd")
        buf.write("\u0cbf\5\u0126\u0094\2\u0cbe\u0cbd\3\2\2\2\u0cbe\u0cbf")
        buf.write("\3\2\2\2\u0cbf\u0cc1\3\2\2\2\u0cc0\u0cc2\5\u0128\u0095")
        buf.write("\2\u0cc1\u0cc0\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0125")
        buf.write("\3\2\2\2\u0cc3\u0cc4\7\u0235\2\2\u0cc4\u0cdc\7\30\2\2")
        buf.write("\u0cc5\u0cc6\7\u0183\2\2\u0cc6\u0cdd\7\u01df\2\2\u0cc7")
        buf.write("\u0cc9\t/\2\2\u0cc8\u0cc7\3\2\2\2\u0cc8\u0cc9\3\2\2\2")
        buf.write("\u0cc9\u0ccd\3\2\2\2\u0cca\u0cce\7R\2\2\u0ccb\u0ccc\7")
        buf.write("\61\2\2\u0ccc\u0cce\7\u02a4\2\2\u0ccd\u0cca\3\2\2\2\u0ccd")
        buf.write("\u0ccb\3\2\2\2\u0cce\u0cda\3\2\2\2\u0ccf\u0cd4\5\u01aa")
        buf.write("\u00d6\2\u0cd0\u0cd1\7\u02da\2\2\u0cd1\u0cd2\5\u01b6\u00dc")
        buf.write("\2\u0cd2\u0cd3\7\u02db\2\2\u0cd3\u0cd5\3\2\2\2\u0cd4\u0cd0")
        buf.write("\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cdb\3\2\2\2\u0cd6")
        buf.write("\u0cd7\7\u02da\2\2\u0cd7\u0cd8\5\u01b6\u00dc\2\u0cd8\u0cd9")
        buf.write("\7\u02db\2\2\u0cd9\u0cdb\3\2\2\2\u0cda\u0ccf\3\2\2\2\u0cda")
        buf.write("\u0cd6\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdd\3\2\2\2")
        buf.write("\u0cdc\u0cc5\3\2\2\2\u0cdc\u0cc8\3\2\2\2\u0cdd\u0ce3\3")
        buf.write("\2\2\2\u0cde\u0cdf\7\u0235\2\2\u0cdf\u0ce0\7\u0281\2\2")
        buf.write("\u0ce0\u0ce1\7\30\2\2\u0ce1\u0ce3\t\60\2\2\u0ce2\u0cc3")
        buf.write("\3\2\2\2\u0ce2\u0cde\3\2\2\2\u0ce3\u0127\3\2\2\2\u0ce4")
        buf.write("\u0ce5\7\u02a0\2\2\u0ce5\u0ce7\7\u02d7\2\2\u0ce6\u0ce4")
        buf.write("\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8")
        buf.write("\u0ce9\7\u00aa\2\2\u0ce9\u0ced\7\u02d7\2\2\u0cea\u0ceb")
        buf.write("\5\u0168\u00b5\2\u0ceb\u0cec\7\u0174\2\2\u0cec\u0cee\3")
        buf.write("\2\2\2\u0ced\u0cea\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cf2")
        buf.write("\3\2\2\2\u0cef\u0cf0\5\u0168\u00b5\2\u0cf0\u0cf1\7\25")
        buf.write("\2\2\u0cf1\u0cf3\3\2\2\2\u0cf2\u0cef\3\2\2\2\u0cf2\u0cf3")
        buf.write("\3\2\2\2\u0cf3\u0129\3\2\2\2\u0cf4\u0cf5\7\u0186\2\2\u0cf5")
        buf.write("\u0cf7\5\u03de\u01f0\2\u0cf6\u0cf8\5\u0132\u009a\2\u0cf7")
        buf.write("\u0cf6\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u0d04\3\2\2\2")
        buf.write("\u0cf9\u0cfe\7\u02da\2\2\u0cfa\u0cfc\7\u02e0\2\2\u0cfb")
        buf.write("\u0cfa\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\3\2\2\2")
        buf.write("\u0cfd\u0cff\5\u0130\u0099\2\u0cfe\u0cfb\3\2\2\2\u0cff")
        buf.write("\u0d00\3\2\2\2\u0d00\u0cfe\3\2\2\2\u0d00\u0d01\3\2\2\2")
        buf.write("\u0d01\u0d02\3\2\2\2\u0d02\u0d03\7\u02db\2\2\u0d03\u0d05")
        buf.write("\3\2\2\2\u0d04\u0cf9\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05")
        buf.write("\u0d0a\3\2\2\2\u0d06\u0d07\7\u018d\2\2\u0d07\u0d08\7[")
        buf.write("\2\2\u0d08\u0d09\t,\2\2\u0d09\u0d0b\7\u01fc\2\2\u0d0a")
        buf.write("\u0d06\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\3\2\2\2")
        buf.write("\u0d0c\u0d0e\5\u012e\u0098\2\u0d0d\u0d0c\3\2\2\2\u0d0d")
        buf.write("\u0d0e\3\2\2\2\u0d0e\u0d10\3\2\2\2\u0d0f\u0d11\5\u012c")
        buf.write("\u0097\2\u0d10\u0d0f\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11")
        buf.write("\u0d13\3\2\2\2\u0d12\u0d14\5\u014a\u00a6\2\u0d13\u0d12")
        buf.write("\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d16\3\2\2\2\u0d15")
        buf.write("\u0d17\5\u01c4\u00e3\2\u0d16\u0d15\3\2\2\2\u0d16\u0d17")
        buf.write("\3\2\2\2\u0d17\u0d19\3\2\2\2\u0d18\u0d1a\5\u0138\u009d")
        buf.write("\2\u0d19\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1c")
        buf.write("\3\2\2\2\u0d1b\u0d1d\t$\2\2\u0d1c\u0d1b\3\2\2\2\u0d1c")
        buf.write("\u0d1d\3\2\2\2\u0d1d\u0d23\3\2\2\2\u0d1e\u0d1f\7\u01ea")
        buf.write("\2\2\u0d1f\u0d20\7\u02da\2\2\u0d20\u0d21\7\u0154\2\2\u0d21")
        buf.write("\u0d22\t-\2\2\u0d22\u0d24\7\u02db\2\2\u0d23\u0d1e\3\2")
        buf.write("\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d26\3\2\2\2\u0d25\u0d27")
        buf.write("\5\u0112\u008a\2\u0d26\u0d25\3\2\2\2\u0d26\u0d27\3\2\2")
        buf.write("\2\u0d27\u0d29\3\2\2\2\u0d28\u0d2a\t.\2\2\u0d29\u0d28")
        buf.write("\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d30\3\2\2\2\u0d2b")
        buf.write("\u0d2d\5\u017c\u00bf\2\u0d2c\u0d2b\3\2\2\2\u0d2d\u0d2e")
        buf.write("\3\2\2\2\u0d2e\u0d2c\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f")
        buf.write("\u0d31\3\2\2\2\u0d30\u0d2c\3\2\2\2\u0d30\u0d31\3\2\2\2")
        buf.write("\u0d31\u0d33\3\2\2\2\u0d32\u0d34\5\u014c\u00a7\2\u0d33")
        buf.write("\u0d32\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d36\3\2\2\2")
        buf.write("\u0d35\u0d37\5\u014e\u00a8\2\u0d36\u0d35\3\2\2\2\u0d36")
        buf.write("\u0d37\3\2\2\2\u0d37\u012b\3\2\2\2\u0d38\u0d3a\7\u0187")
        buf.write("\2\2\u0d39\u0d3b\5\u03ec\u01f7\2\u0d3a\u0d39\3\2\2\2\u0d3a")
        buf.write("\u0d3b\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d40\7\u02da")
        buf.write("\2\2\u0d3d\u0d41\5\u0142\u00a2\2\u0d3e\u0d3f\7\u0248\2")
        buf.write("\2\u0d3f\u0d41\5\u01c0\u00e1\2\u0d40\u0d3d\3\2\2\2\u0d40")
        buf.write("\u0d3e\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d40\3\2\2\2")
        buf.write("\u0d42\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d45\7")
        buf.write("\u02db\2\2\u0d45\u012d\3\2\2\2\u0d46\u0d47\7\u0183\2\2")
        buf.write("\u0d47\u0d48\7\u00f3\2\2\u0d48\u0d4d\7\u0114\2\2\u0d49")
        buf.write("\u0d4a\7\u0247\2\2\u0d4a\u0d4e\7\u00e3\2\2\u0d4b\u0d4c")
        buf.write("\7\u01c0\2\2\u0d4c\u0d4e\7\u011c\2\2\u0d4d\u0d49\3\2\2")
        buf.write("\2\u0d4d\u0d4b\3\2\2\2\u0d4e\u012f\3\2\2\2\u0d4f\u0d52")
        buf.write("\5\u03f6\u01fc\2\u0d50\u0d52\5\u03ba\u01de\2\u0d51\u0d4f")
        buf.write("\3\2\2\2\u0d51\u0d50\3\2\2\2\u0d52\u0d55\3\2\2\2\u0d53")
        buf.write("\u0d54\7\u008f\2\2\u0d54\u0d56\5\u033e\u01a0\2\u0d55\u0d53")
        buf.write("\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d60\3\2\2\2\u0d57")
        buf.write("\u0d59\7\u02e0\2\2\u0d58\u0d57\3\2\2\2\u0d58\u0d59\3\2")
        buf.write("\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5c\5\u00e4s\2\u0d5b")
        buf.write("\u0d58\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5b\3\2\2\2")
        buf.write("\u0d5d\u0d5e\3\2\2\2\u0d5e\u0d61\3\2\2\2\u0d5f\u0d61\5")
        buf.write("\u00e6t\2\u0d60\u0d5b\3\2\2\2\u0d60\u0d5f\3\2\2\2\u0d60")
        buf.write("\u0d61\3\2\2\2\u0d61\u0d66\3\2\2\2\u0d62\u0d66\5\u00ea")
        buf.write("v\2\u0d63\u0d66\5\u00e8u\2\u0d64\u0d66\5\u01d4\u00eb\2")
        buf.write("\u0d65\u0d51\3\2\2\2\u0d65\u0d62\3\2\2\2\u0d65\u0d63\3")
        buf.write("\2\2\2\u0d65\u0d64\3\2\2\2\u0d66\u0131\3\2\2\2\u0d67\u0d69")
        buf.write("\7\u017b\2\2\u0d68\u0d67\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69")
        buf.write("\u0d6a\3\2\2\2\u0d6a\u0d6b\7\u0239\2\2\u0d6b\u0d6c\7\34")
        buf.write("\2\2\u0d6c\u0d6d\7\r\2\2\u0d6d\u0d6e\7\u0124\2\2\u0d6e")
        buf.write("\u0133\3\2\2\2\u0d6f\u0d70\7\u02da\2\2\u0d70\u0d71\5\u0136")
        buf.write("\u009c\2\u0d71\u0d72\7\u02db\2\2\u0d72\u0d74\3\2\2\2\u0d73")
        buf.write("\u0d6f\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d79\3\2\2\2")
        buf.write("\u0d75\u0d76\7\u018d\2\2\u0d76\u0d77\7[\2\2\u0d77\u0d78")
        buf.write("\t,\2\2\u0d78\u0d7a\7\u01fc\2\2\u0d79\u0d75\3\2\2\2\u0d79")
        buf.write("\u0d7a\3\2\2\2\u0d7a\u0d7c\3\2\2\2\u0d7b\u0d7d\5\u014a")
        buf.write("\u00a6\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d")
        buf.write("\u0d7f\3\2\2\2\u0d7e\u0d80\5\u01c4\u00e3\2\u0d7f\u0d7e")
        buf.write("\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81")
        buf.write("\u0d83\5\u0138\u009d\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83")
        buf.write("\3\2\2\2\u0d83\u0d85\3\2\2\2\u0d84\u0d86\t$\2\2\u0d85")
        buf.write("\u0d84\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u0d8c\3\2\2\2")
        buf.write("\u0d87\u0d88\7\u01ea\2\2\u0d88\u0d89\7\u02da\2\2\u0d89")
        buf.write("\u0d8a\7\u0154\2\2\u0d8a\u0d8b\t-\2\2\u0d8b\u0d8d\7\u02db")
        buf.write("\2\2\u0d8c\u0d87\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8f")
        buf.write("\3\2\2\2\u0d8e\u0d90\5\u0112\u008a\2\u0d8f\u0d8e\3\2\2")
        buf.write("\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d93")
        buf.write("\t.\2\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93")
        buf.write("\u0d99\3\2\2\2\u0d94\u0d96\5\u017c\u00bf\2\u0d95\u0d94")
        buf.write("\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d95\3\2\2\2\u0d97")
        buf.write("\u0d98\3\2\2\2\u0d98\u0d9a\3\2\2\2\u0d99\u0d95\3\2\2\2")
        buf.write("\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d9d\5")
        buf.write("\u014c\u00a7\2\u0d9c\u0d9b\3\2\2\2\u0d9c\u0d9d\3\2\2\2")
        buf.write("\u0d9d\u0d9f\3\2\2\2\u0d9e\u0da0\5\u014e\u00a8\2\u0d9f")
        buf.write("\u0d9e\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0135\3\2\2\2")
        buf.write("\u0da1\u0da3\7\u02e0\2\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3")
        buf.write("\3\2\2\2\u0da3\u0da9\3\2\2\2\u0da4\u0daa\5\u01c6\u00e4")
        buf.write("\2\u0da5\u0daa\5\u01c8\u00e5\2\u0da6\u0daa\5\u00eav\2")
        buf.write("\u0da7\u0daa\5\u00e8u\2\u0da8\u0daa\5\u01d4\u00eb\2\u0da9")
        buf.write("\u0da4\3\2\2\2\u0da9\u0da5\3\2\2\2\u0da9\u0da6\3\2\2\2")
        buf.write("\u0da9\u0da7\3\2\2\2\u0da9\u0da8\3\2\2\2\u0daa\u0dac\3")
        buf.write("\2\2\2\u0dab\u0da2\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0dab")
        buf.write("\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae\u0137\3\2\2\2\u0daf")
        buf.write("\u0db0\5\u013a\u009e\2\u0db0\u0139\3\2\2\2\u0db1\u0db2")
        buf.write("\7\u01a2\2\2\u0db2\u0db3\7?\2\2\u0db3\u0db4\7\u01cd\2")
        buf.write("\2\u0db4\u0dc7\5\u0408\u0205\2\u0db5\u0db6\7\u0110\2\2")
        buf.write("\u0db6\u0db7\7\u02da\2\2\u0db7\u0db8\5\u033e\u01a0\2\u0db8")
        buf.write("\u0dc5\7\u02db\2\2\u0db9\u0dba\7\u0235\2\2\u0dba\u0dbb")
        buf.write("\7\u0103\2\2\u0dbb\u0dc0\7\u02da\2\2\u0dbc\u0dbe\7\u02e0")
        buf.write("\2\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dbf")
        buf.write("\3\2\2\2\u0dbf\u0dc1\7\u02f7\2\2\u0dc0\u0dbd\3\2\2\2\u0dc1")
        buf.write("\u0dc2\3\2\2\2\u0dc2\u0dc0\3\2\2\2\u0dc2\u0dc3\3\2\2\2")
        buf.write("\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc6\7\u02db\2\2\u0dc5\u0db9")
        buf.write("\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc8\3\2\2\2\u0dc7")
        buf.write("\u0db5\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dc9\3\2\2\2")
        buf.write("\u0dc9\u0df8\7\u02da\2\2\u0dca\u0dcc\7\u02e0\2\2\u0dcb")
        buf.write("\u0dca\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dcd\3\2\2\2")
        buf.write("\u0dcd\u0dce\7\u01a2\2\2\u0dce\u0dcf\5\u01d2\u00ea\2\u0dcf")
        buf.write("\u0dd0\7\u027c\2\2\u0dd0\u0dd1\7\u0122\2\2\u0dd1\u0dd2")
        buf.write("\7\u024d\2\2\u0dd2\u0de3\7\u02da\2\2\u0dd3\u0dd5\7\u02e0")
        buf.write("\2\2\u0dd4\u0dd3\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6")
        buf.write("\3\2\2\2\u0dd6\u0de4\7\u02d6\2\2\u0dd7\u0dd9\7\u02e0\2")
        buf.write("\2\u0dd8\u0dd7\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda")
        buf.write("\3\2\2\2\u0dda\u0de4\5\u036e\u01b8\2\u0ddb\u0ddd\7\u02e0")
        buf.write("\2\2\u0ddc\u0ddb\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde")
        buf.write("\3\2\2\2\u0dde\u0de4\5\u042c\u0217\2\u0ddf\u0de1\7\u02e0")
        buf.write("\2\2\u0de0\u0ddf\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de2")
        buf.write("\3\2\2\2\u0de2\u0de4\7\u0145\2\2\u0de3\u0dd4\3\2\2\2\u0de3")
        buf.write("\u0dd8\3\2\2\2\u0de3\u0ddc\3\2\2\2\u0de3\u0de0\3\2\2\2")
        buf.write("\u0de4\u0de5\3\2\2\2\u0de5\u0de3\3\2\2\2\u0de5\u0de6\3")
        buf.write("\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0dea\7\u02db\2\2\u0de8")
        buf.write("\u0de9\7\u0248\2\2\u0de9\u0deb\5\u0434\u021b\2\u0dea\u0de8")
        buf.write("\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0df0\3\2\2\2\u0dec")
        buf.write("\u0ded\7\u018d\2\2\u0ded\u0dee\7[\2\2\u0dee\u0def\t,\2")
        buf.write("\2\u0def\u0df1\7\u01fc\2\2\u0df0\u0dec\3\2\2\2\u0df0\u0df1")
        buf.write("\3\2\2\2\u0df1\u0df3\3\2\2\2\u0df2\u0df4\5\u0146\u00a4")
        buf.write("\2\u0df3\u0df2\3\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0df6")
        buf.write("\3\2\2\2\u0df5\u0df7\5\u0142\u00a2\2\u0df6\u0df5\3\2\2")
        buf.write("\2\u0df6\u0df7\3\2\2\2\u0df7\u0df9\3\2\2\2\u0df8\u0dcb")
        buf.write("\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0df8\3\2\2\2\u0dfa")
        buf.write("\u0dfb\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfd\7\u02db")
        buf.write("\2\2\u0dfd\u013b\3\2\2\2\u0dfe\u0dff\5\u03f6\u01fc\2\u0dff")
        buf.write("\u0e01\5\u0418\u020d\2\u0e00\u0e02\7\u0226\2\2\u0e01\u0e00")
        buf.write("\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e05\3\2\2\2\u0e03")
        buf.write("\u0e04\7\u008f\2\2\u0e04\u0e06\5\u033e\u01a0\2\u0e05\u0e03")
        buf.write("\3\2\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e1a\3\2\2\2\u0e07")
        buf.write("\u0e0a\7\u00b0\2\2\u0e08\u0e09\7\u027a\2\2\u0e09\u0e0b")
        buf.write("\7\u02d6\2\2\u0e0a\u0e08\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b")
        buf.write("\u0e0f\3\2\2\2\u0e0c\u0e0d\7\u00f2\2\2\u0e0d\u0e0e\7?")
        buf.write("\2\2\u0e0e\u0e10\7\u02f7\2\2\u0e0f\u0e0c\3\2\2\2\u0e0f")
        buf.write("\u0e10\3\2\2\2\u0e10\u0e12\3\2\2\2\u0e11\u0e13\7\u02d6")
        buf.write("\2\2\u0e12\u0e11\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u0e18")
        buf.write("\3\2\2\2\u0e14\u0e16\7\u0173\2\2\u0e15\u0e14\3\2\2\2\u0e15")
        buf.write("\u0e16\3\2\2\2\u0e16\u0e17\3\2\2\2\u0e17\u0e19\7\u01fe")
        buf.write("\2\2\u0e18\u0e15\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19\u0e1b")
        buf.write("\3\2\2\2\u0e1a\u0e07\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b")
        buf.write("\u0e1e\3\2\2\2\u0e1c\u0e1d\7\u017b\2\2\u0e1d\u0e1f\7\u017e")
        buf.write("\2\2\u0e1e\u0e1c\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e21")
        buf.write("\3\2\2\2\u0e20\u0e22\t\7\2\2\u0e21\u0e20\3\2\2\2\u0e21")
        buf.write("\u0e22\3\2\2\2\u0e22\u013d\3\2\2\2\u0e23\u0e25\7\u02d4")
        buf.write("\2\2\u0e24\u0e26\7\u02f7\2\2\u0e25\u0e24\3\2\2\2\u0e25")
        buf.write("\u0e26\3\2\2\2\u0e26\u013f\3\2\2\2\u0e27\u0e31\7b\2\2")
        buf.write("\u0e28\u0e32\7(\2\2\u0e29\u0e2f\7\u00dc\2\2\u0e2a\u0e30")
        buf.write("\7\u018a\2\2\u0e2b\u0e2d\t\61\2\2\u0e2c\u0e2e\t\62\2\2")
        buf.write("\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30\3")
        buf.write("\2\2\2\u0e2f\u0e2a\3\2\2\2\u0e2f\u0e2b\3\2\2\2\u0e30\u0e32")
        buf.write("\3\2\2\2\u0e31\u0e28\3\2\2\2\u0e31\u0e29\3\2\2\2\u0e31")
        buf.write("\u0e32\3\2\2\2\u0e32\u0e35\3\2\2\2\u0e33\u0e35\7\u0168")
        buf.write("\2\2\u0e34\u0e27\3\2\2\2\u0e34\u0e33\3\2\2\2\u0e35\u0141")
        buf.write("\3\2\2\2\u0e36\u0e37\7\u01a6\2\2\u0e37\u0e3e\7\u02d4\2")
        buf.write("\2\u0e38\u0e39\7\u01a9\2\2\u0e39\u0e3e\7\u02d4\2\2\u0e3a")
        buf.write("\u0e3b\7\u0106\2\2\u0e3b\u0e3e\7\u02d4\2\2\u0e3c\u0e3e")
        buf.write("\5\u0144\u00a3\2\u0e3d\u0e36\3\2\2\2\u0e3d\u0e38\3\2\2")
        buf.write("\2\u0e3d\u0e3a\3\2\2\2\u0e3d\u0e3c\3\2\2\2\u0e3e\u0e3f")
        buf.write("\3\2\2\2\u0e3f\u0e3d\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40")
        buf.write("\u0143\3\2\2\2\u0e41\u0e42\7\u0234\2\2\u0e42\u0e5a\7\u02da")
        buf.write("\2\2\u0e43\u0e44\7\u0104\2\2\u0e44\u0e5b\5\u013e\u00a0")
        buf.write("\2\u0e45\u0e46\7\u0165\2\2\u0e46\u0e5b\5\u013e\u00a0\2")
        buf.write("\u0e47\u0e48\7\u014b\2\2\u0e48\u0e5b\t\63\2\2\u0e49\u0e4a")
        buf.write("\7\u01a7\2\2\u0e4a\u0e5b\7\u02d4\2\2\u0e4b\u0e4c\7\u00de")
        buf.write("\2\2\u0e4c\u0e5b\7\u02d4\2\2\u0e4d\u0e4e\7\u00dd\2\2\u0e4e")
        buf.write("\u0e4f\7\u00ea\2\2\u0e4f\u0e5b\7\u02d4\2\2\u0e50\u0e53")
        buf.write("\7\u0190\2\2\u0e51\u0e54\5\u013e\u00a0\2\u0e52\u0e54\7")
        buf.write("\u017e\2\2\u0e53\u0e51\3\2\2\2\u0e53\u0e52\3\2\2\2\u0e54")
        buf.write("\u0e5b\3\2\2\2\u0e55\u0e56\7<\2\2\u0e56\u0e5b\t\64\2\2")
        buf.write("\u0e57\u0e58\7\u00d4\2\2\u0e58\u0e5b\t\65\2\2\u0e59\u0e5b")
        buf.write("\7\u00b0\2\2\u0e5a\u0e43\3\2\2\2\u0e5a\u0e45\3\2\2\2\u0e5a")
        buf.write("\u0e47\3\2\2\2\u0e5a\u0e49\3\2\2\2\u0e5a\u0e4b\3\2\2\2")
        buf.write("\u0e5a\u0e4d\3\2\2\2\u0e5a\u0e50\3\2\2\2\u0e5a\u0e55\3")
        buf.write("\2\2\2\u0e5a\u0e57\3\2\2\2\u0e5a\u0e59\3\2\2\2\u0e5b\u0e5c")
        buf.write("\3\2\2\2\u0e5c\u0e5a\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d")
        buf.write("\u0e5e\3\2\2\2\u0e5e\u0e5f\7\u02db\2\2\u0e5f\u0145\3\2")
        buf.write("\2\2\u0e60\u0e61\7\u020b\2\2\u0e61\u0e62\7u\2\2\u0e62")
        buf.write("\u0e63\t\32\2\2\u0e63\u0147\3\2\2\2\u0e64\u0e69\5\u0142")
        buf.write("\u00a2\2\u0e65\u0e66\7\u0248\2\2\u0e66\u0e69\5\u0434\u021b")
        buf.write("\2\u0e67\u0e69\5\u00f4{\2\u0e68\u0e64\3\2\2\2\u0e68\u0e65")
        buf.write("\3\2\2\2\u0e68\u0e67\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a")
        buf.write("\u0e68\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0149\3\2\2\2")
        buf.write("\u0e6c\u0e6e\5\u0146\u00a4\2\u0e6d\u0e6c\3\2\2\2\u0e6d")
        buf.write("\u0e6e\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e71\5\u0148")
        buf.write("\u00a5\2\u0e70\u0e72\5\u0140\u00a1\2\u0e71\u0e70\3\2\2")
        buf.write("\2\u0e71\u0e72\3\2\2\2\u0e72\u014b\3\2\2\2\u0e73\u0e75")
        buf.write("\t\7\2\2\u0e74\u0e73\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75")
        buf.write("\u0e76\3\2\2\2\u0e76\u0e77\7\u01fb\2\2\u0e77\u0e78\7\u0157")
        buf.write("\2\2\u0e78\u014d\3\2\2\2\u0e79\u0e7a\7\u00d3\2\2\u0e7a")
        buf.write("\u0e7b\7\26\2\2\u0e7b\u0e80\7\u02f7\2\2\u0e7c\u0e7d\7")
        buf.write("\u0173\2\2\u0e7d\u0e7e\7\u00d3\2\2\u0e7e\u0e80\7\26\2")
        buf.write("\2\u0e7f\u0e79\3\2\2\2\u0e7f\u0e7c\3\2\2\2\u0e80\u014f")
        buf.write("\3\2\2\2\u0e81\u0e82\7\u02d4\2\2\u0e82\u0151\3\2\2\2\u0e83")
        buf.write("\u0e8f\7\5\2\2\u0e84\u0e86\7\u02e0\2\2\u0e85\u0e84\3\2")
        buf.write("\2\2\u0e85\u0e86\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e88")
        buf.write("\7\u023c\2\2\u0e88\u0e8b\7\u0134\2\2\u0e89\u0e8c\5\u0154")
        buf.write("\u00ab\2\u0e8a\u0e8c\5\u0156\u00ac\2\u0e8b\u0e89\3\2\2")
        buf.write("\2\u0e8b\u0e8a\3\2\2\2\u0e8c\u0e8e\3\2\2\2\u0e8d\u0e85")
        buf.write("\3\2\2\2\u0e8e\u0e91\3\2\2\2\u0e8f\u0e8d\3\2\2\2\u0e8f")
        buf.write("\u0e90\3\2\2\2\u0e90\u0ea3\3\2\2\2\u0e91\u0e8f\3\2\2\2")
        buf.write("\u0e92\u0e9f\7\u00a4\2\2\u0e93\u0e95\7\u02e0\2\2\u0e94")
        buf.write("\u0e93\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e96\3\2\2\2")
        buf.write("\u0e96\u0e97\7\u023c\2\2\u0e97\u0e9b\7\u0134\2\2\u0e98")
        buf.write("\u0e9c\5\u0156\u00ac\2\u0e99\u0e9a\7\u00e8\2\2\u0e9a\u0e9c")
        buf.write("\5\u0150\u00a9\2\u0e9b\u0e98\3\2\2\2\u0e9b\u0e99\3\2\2")
        buf.write("\2\u0e9c\u0e9e\3\2\2\2\u0e9d\u0e94\3\2\2\2\u0e9e\u0ea1")
        buf.write("\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0")
        buf.write("\u0ea3\3\2\2\2\u0ea1\u0e9f\3\2\2\2\u0ea2\u0e83\3\2\2\2")
        buf.write("\u0ea2\u0e92\3\2\2\2\u0ea3\u0153\3\2\2\2\u0ea4\u0ea5\7")
        buf.write("\u00e8\2\2\u0ea5\u0ea6\5\u0150\u00a9\2\u0ea6\u0eaf\7\u02da")
        buf.write("\2\2\u0ea7\u0ea9\7\u02e0\2\2\u0ea8\u0ea7\3\2\2\2\u0ea8")
        buf.write("\u0ea9\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0ead\5\u0438")
        buf.write("\u021d\2\u0eab\u0eac\7\u0173\2\2\u0eac\u0eae\7\u0134\2")
        buf.write("\2\u0ead\u0eab\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eb0")
        buf.write("\3\2\2\2\u0eaf\u0ea8\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1")
        buf.write("\u0eaf\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0eb3\3\2\2\2")
        buf.write("\u0eb3\u0eb5\7\u02db\2\2\u0eb4\u0eb6\7\21\2\2\u0eb5\u0eb4")
        buf.write("\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0155\3\2\2\2\u0eb7")
        buf.write("\u0eb8\7~\2\2\u0eb8\u0ec4\7\u02da\2\2\u0eb9\u0ebb\7\u02e0")
        buf.write("\2\2\u0eba\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ec2")
        buf.write("\3\2\2\2\u0ebc\u0ec3\7\r\2\2\u0ebd\u0ebe\7\u01c0\2\2\u0ebe")
        buf.write("\u0ec3\7\u011c\2\2\u0ebf\u0ec3\7\u026c\2\2\u0ec0\u0ec1")
        buf.write("\7\u00db\2\2\u0ec1\u0ec3\7\u011c\2\2\u0ec2\u0ebc\3\2\2")
        buf.write("\2\u0ec2\u0ebd\3\2\2\2\u0ec2\u0ebf\3\2\2\2\u0ec2\u0ec0")
        buf.write("\3\2\2\2\u0ec3\u0ec5\3\2\2\2\u0ec4\u0eba\3\2\2\2\u0ec5")
        buf.write("\u0ec6\3\2\2\2\u0ec6\u0ec4\3\2\2\2\u0ec6\u0ec7\3\2\2\2")
        buf.write("\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ec9\7\u02db\2\2\u0ec9\u0eca")
        buf.write("\7X\2\2\u0eca\u0157\3\2\2\2\u0ecb\u0ecc\7\16\2\2\u0ecc")
        buf.write("\u0ed9\7\u00c7\2\2\u0ecd\u0ed4\7\u02da\2\2\u0ece\u0ecf")
        buf.write("\7\u0220\2\2\u0ecf\u0ed5\5\u013e\u00a0\2\u0ed0\u0ed1\7")
        buf.write("\177\2\2\u0ed1\u0ed5\7\u02d6\2\2\u0ed2\u0ed3\7\u010b\2")
        buf.write("\2\u0ed3\u0ed5\7\u02d4\2\2\u0ed4\u0ece\3\2\2\2\u0ed4\u0ed0")
        buf.write("\3\2\2\2\u0ed4\u0ed2\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6")
        buf.write("\u0ed4\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0ed8\3\2\2\2")
        buf.write("\u0ed8\u0eda\7\u02db\2\2\u0ed9\u0ecd\3\2\2\2\u0ed9\u0eda")
        buf.write("\3\2\2\2\u0eda\u0159\3\2\2\2\u0edb\u0edc\7\u0086\2\2\u0edc")
        buf.write("\u0edf\7\u0271\2\2\u0edd\u0ede\7\u011b\2\2\u0ede\u0ee0")
        buf.write("\5\u013e\u00a0\2\u0edf\u0edd\3\2\2\2\u0edf\u0ee0\3\2\2")
        buf.write("\2\u0ee0\u015b\3\2\2\2\u0ee1\u0ee2\7\u021a\2\2\u0ee2\u0ee4")
        buf.write("\7\u0228\2\2\u0ee3\u0ee5\7]\2\2\u0ee4\u0ee3\3\2\2\2\u0ee4")
        buf.write("\u0ee5\3\2\2\2\u0ee5\u0ee7\3\2\2\2\u0ee6\u0ee8\7D\2\2")
        buf.write("\u0ee7\u0ee6\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u015d\3")
        buf.write("\2\2\2\u0ee9\u0eeb\t\66\2\2\u0eea\u0ee9\3\2\2\2\u0eea")
        buf.write("\u0eeb\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eed\7\u01d4")
        buf.write("\2\2\u0eed\u015f\3\2\2\2\u0eee\u0ef0\7\u0274\2\2\u0eef")
        buf.write("\u0ef1\7\u017b\2\2\u0ef0\u0eef\3\2\2\2\u0ef0\u0ef1\3\2")
        buf.write("\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0ef3\7\u00f9\2\2\u0ef3")
        buf.write("\u0ef4\7~\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0ef6\5\u01c4")
        buf.write("\u00e3\2\u0ef6\u0161\3\2\2\2\u0ef7\u0ef8\7\u00a4\2\2\u0ef8")
        buf.write("\u0ef9\7\u024a\2\2\u0ef9\u0efa\5\u03f8\u01fd\2\u0efa\u0efb")
        buf.write("\7\u02ec\2\2\u0efb\u0163\3\2\2\2\u0efc\u0efd\7Z\2\2\u0efd")
        buf.write("\u0efe\7\u018d\2\2\u0efe\u0eff\7W\2\2\u0eff\u0f00\5\u03f8")
        buf.write("\u01fd\2\u0f00\u0f01\7\u02d3\2\2\u0f01\u0f02\5\u03f6\u01fc")
        buf.write("\2\u0f02\u0f03\7\u0114\2\2\u0f03\u0f04\5\u0430\u0219\2")
        buf.write("\u0f04\u0165\3\2\2\2\u0f05\u0f06\t\7\2\2\u0f06\u0167\3")
        buf.write("\2\2\2\u0f07\u0f08\t\67\2\2\u0f08\u0169\3\2\2\2\u0f09")
        buf.write("\u0f0c\7t\2\2\u0f0a\u0f0b\7\u0195\2\2\u0f0b\u0f0d\7\u01e4")
        buf.write("\2\2\u0f0c\u0f0a\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e")
        buf.write("\3\2\2\2\u0f0e\u0f0f\7\u01c8\2\2\u0f0f\u0f10\7\u023f\2")
        buf.write("\2\u0f10\u0f11\5\u03fc\u01ff\2\u0f11\u0f15\7\u00dc\2\2")
        buf.write("\u0f12\u0f13\5\u03c2\u01e2\2\u0f13\u0f14\7\u02d3\2\2\u0f14")
        buf.write("\u0f16\3\2\2\2\u0f15\u0f12\3\2\2\2\u0f15\u0f16\3\2\2\2")
        buf.write("\u0f16\u0f17\3\2\2\2\u0f17\u0f1a\5\u03fe\u0200\2\u0f18")
        buf.write("\u0f19\7\u02e2\2\2\u0f19\u0f1b\5\u03f4\u01fb\2\u0f1a\u0f18")
        buf.write("\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f34\3\2\2\2\u0f1c")
        buf.write("\u0f1f\7t\2\2\u0f1d\u0f1e\7\u0195\2\2\u0f1e\u0f20\7\u01e4")
        buf.write("\2\2\u0f1f\u0f1d\3\2\2\2\u0f1f\u0f20\3\2\2\2\u0f20\u0f21")
        buf.write("\3\2\2\2\u0f21\u0f25\7\u023f\2\2\u0f22\u0f23\5\u03c2\u01e2")
        buf.write("\2\u0f23\u0f24\7\u02d3\2\2\u0f24\u0f26\3\2\2\2\u0f25\u0f22")
        buf.write("\3\2\2\2\u0f25\u0f26\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27")
        buf.write("\u0f28\5\u03fc\u01ff\2\u0f28\u0f2c\7\u00dc\2\2\u0f29\u0f2a")
        buf.write("\5\u03c2\u01e2\2\u0f2a\u0f2b\7\u02d3\2\2\u0f2b\u0f2d\3")
        buf.write("\2\2\2\u0f2c\u0f29\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u0f2e")
        buf.write("\3\2\2\2\u0f2e\u0f31\5\u03fe\u0200\2\u0f2f\u0f30\7\u02e2")
        buf.write("\2\2\u0f30\u0f32\5\u03f4\u01fb\2\u0f31\u0f2f\3\2\2\2\u0f31")
        buf.write("\u0f32\3\2\2\2\u0f32\u0f34\3\2\2\2\u0f33\u0f09\3\2\2\2")
        buf.write("\u0f33\u0f1c\3\2\2\2\u0f34\u016b\3\2\2\2\u0f35\u0f36\7")
        buf.write("Z\2\2\u0f36\u0f37\7\u018d\2\2\u0f37\u0f38\7\u024a\2\2")
        buf.write("\u0f38\u0f39\5\u03f8\u01fd\2\u0f39\u0f3a\7\u0114\2\2\u0f3a")
        buf.write("\u0f3b\5\u0430\u0219\2\u0f3b\u016d\3\2\2\2\u0f3c\u0f3d")
        buf.write("\7\20\2\2\u0f3d\u0f3e\7\u024a\2\2\u0f3e\u0f44\5\u03f8")
        buf.write("\u01fd\2\u0f3f\u0f45\3\2\2\2\u0f40\u0f45\5\u0170\u00b9")
        buf.write("\2\u0f41\u0f45\5\u018c\u00c7\2\u0f42\u0f45\5\u01da\u00ee")
        buf.write("\2\u0f43\u0f45\5\u0182\u00c2\2\u0f44\u0f3f\3\2\2\2\u0f44")
        buf.write("\u0f40\3\2\2\2\u0f44\u0f41\3\2\2\2\u0f44\u0f42\3\2\2\2")
        buf.write("\u0f44\u0f43\3\2\2\2\u0f45\u0f52\3\2\2\2\u0f46\u0f4f\5")
        buf.write("\u017c\u00bf\2\u0f47\u0f4c\5\u0166\u00b4\2\u0f48\u0f49")
        buf.write("\7\u024a\2\2\u0f49\u0f4d\7\u0132\2\2\u0f4a\u0f4b\7\r\2")
        buf.write("\2\u0f4b\u0f4d\7\u0260\2\2\u0f4c\u0f48\3\2\2\2\u0f4c\u0f4a")
        buf.write("\3\2\2\2\u0f4d\u0f4f\3\2\2\2\u0f4e\u0f46\3\2\2\2\u0f4e")
        buf.write("\u0f47\3\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u0f4e\3\2\2\2")
        buf.write("\u0f50\u0f51\3\2\2\2\u0f51\u0f53\3\2\2\2\u0f52\u0f4e\3")
        buf.write("\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f55")
        buf.write("\7\u02ec\2\2\u0f55\u016f\3\2\2\2\u0f56\u0f62\5\u0172\u00ba")
        buf.write("\2\u0f57\u0f58\7\u01e3\2\2\u0f58\u0f59\7\u025a\2\2\u0f59")
        buf.write("\u0f62\5\u03f8\u01fd\2\u0f5a\u0f62\5\u015c\u00af\2\u0f5b")
        buf.write("\u0f5c\7\u01cf\2\2\u0f5c\u0f62\7\u018c\2\2\u0f5d\u0f5e")
        buf.write("\7\u01cf\2\2\u0f5e\u0f62\7\u0293\2\2\u0f5f\u0f60\7\u01de")
        buf.write("\2\2\u0f60\u0f62\7\u02d6\2\2\u0f61\u0f56\3\2\2\2\u0f61")
        buf.write("\u0f57\3\2\2\2\u0f61\u0f5a\3\2\2\2\u0f61\u0f5b\3\2\2\2")
        buf.write("\u0f61\u0f5d\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f62\u0171\3")
        buf.write("\2\2\2\u0f63\u0f75\5\u0142\u00a2\2\u0f64\u0f75\5\u00f4")
        buf.write("{\2\u0f65\u0f75\5\u0140\u00a1\2\u0f66\u0f75\5\u0152\u00aa")
        buf.write("\2\u0f67\u0f75\5\u0158\u00ad\2\u0f68\u0f75\5\u015a\u00ae")
        buf.write("\2\u0f69\u0f75\t$\2\2\u0f6a\u0f6b\7\u01ea\2\2\u0f6b\u0f6c")
        buf.write("\7\u02da\2\2\u0f6c\u0f6d\7\u0154\2\2\u0f6d\u0f6e\t-\2")
        buf.write("\2\u0f6e\u0f75\7\u02db\2\2\u0f6f\u0f75\5\u0160\u00b1\2")
        buf.write("\u0f70\u0f75\5\u015e\u00b0\2\u0f71\u0f75\5\u0112\u008a")
        buf.write("\2\u0f72\u0f75\5\u014c\u00a7\2\u0f73\u0f75\5\u014e\u00a8")
        buf.write("\2\u0f74\u0f63\3\2\2\2\u0f74\u0f64\3\2\2\2\u0f74\u0f65")
        buf.write("\3\2\2\2\u0f74\u0f66\3\2\2\2\u0f74\u0f67\3\2\2\2\u0f74")
        buf.write("\u0f68\3\2\2\2\u0f74\u0f69\3\2\2\2\u0f74\u0f6a\3\2\2\2")
        buf.write("\u0f74\u0f6f\3\2\2\2\u0f74\u0f70\3\2\2\2\u0f74\u0f71\3")
        buf.write("\2\2\2\u0f74\u0f72\3\2\2\2\u0f74\u0f73\3\2\2\2\u0f75\u0f76")
        buf.write("\3\2\2\2\u0f76\u0f74\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77")
        buf.write("\u0f79\3\2\2\2\u0f78\u0f7a\5\u0174\u00bb\2\u0f79\u0f78")
        buf.write("\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a\u0173\3\2\2\2\u0f7b")
        buf.write("\u0f80\5\u0184\u00c3\2\u0f7c\u0f80\5\u0178\u00bd\2\u0f7d")
        buf.write("\u0f80\5\u0176\u00bc\2\u0f7e\u0f80\7U\2\2\u0f7f\u0f7b")
        buf.write("\3\2\2\2\u0f7f\u0f7c\3\2\2\2\u0f7f\u0f7d\3\2\2\2\u0f7f")
        buf.write("\u0f7e\3\2\2\2\u0f80\u0175\3\2\2\2\u0f81\u0f82\7\u0140")
        buf.write("\2\2\u0f82\u0f85\7\u024a\2\2\u0f83\u0f86\5\u0158\u00ad")
        buf.write("\2\u0f84\u0f86\5\u015a\u00ae\2\u0f85\u0f83\3\2\2\2\u0f85")
        buf.write("\u0f84\3\2\2\2\u0f86\u0177\3\2\2\2\u0f87\u0f92\5\u017a")
        buf.write("\u00be\2\u0f88\u0f8d\7\u019a\2\2\u0f89\u0f8e\5\u0148\u00a5")
        buf.write("\2\u0f8a\u0f8e\5\u0158\u00ad\2\u0f8b\u0f8e\5\u015c\u00af")
        buf.write("\2\u0f8c\u0f8e\5\u015a\u00ae\2\u0f8d\u0f89\3\2\2\2\u0f8d")
        buf.write("\u0f8a\3\2\2\2\u0f8d\u0f8b\3\2\2\2\u0f8d\u0f8c\3\2\2\2")
        buf.write("\u0f8e\u0f8f\3\2\2\2\u0f8f\u0f8d\3\2\2\2\u0f8f\u0f90\3")
        buf.write("\2\2\2\u0f90\u0f92\3\2\2\2\u0f91\u0f87\3\2\2\2\u0f91\u0f88")
        buf.write("\3\2\2\2\u0f92\u0179\3\2\2\2\u0f93\u0f94\7\5\2\2\u0f94")
        buf.write("\u0f96\7\u019a\2\2\u0f95\u0f97\5\u0148\u00a5\2\u0f96\u0f95")
        buf.write("\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0fa5\3\2\2\2\u0f98")
        buf.write("\u0fa0\7\u02da\2\2\u0f99\u0f9b\7\u02e0\2\2\u0f9a\u0f99")
        buf.write("\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0f9c\3\2\2\2\u0f9c")
        buf.write("\u0f9e\7\u01a2\2\2\u0f9d\u0f9f\5\u0148\u00a5\2\u0f9e\u0f9d")
        buf.write("\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u0fa1\3\2\2\2\u0fa0")
        buf.write("\u0f9a\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fa0\3\2\2\2")
        buf.write("\u0fa2\u0fa3\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0fa6\7")
        buf.write("\u02db\2\2\u0fa5\u0f98\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6")
        buf.write("\u017b\3\2\2\2\u0fa7\u0fa9\t\7\2\2\u0fa8\u0faa\t\34\2")
        buf.write("\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa\u0fbb")
        buf.write("\3\2\2\2\u0fab\u0fac\7\u026c\2\2\u0fac\u0fb1\7\u02da\2")
        buf.write("\2\u0fad\u0faf\7\u02e0\2\2\u0fae\u0fad\3\2\2\2\u0fae\u0faf")
        buf.write("\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb2\5\u03f6\u01fc")
        buf.write("\2\u0fb1\u0fae\3\2\2\2\u0fb2\u0fb3\3\2\2\2\u0fb3\u0fb1")
        buf.write("\3\2\2\2\u0fb3\u0fb4\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5")
        buf.write("\u0fb6\7\u02db\2\2\u0fb6\u0fbc\3\2\2\2\u0fb7\u0fb8\7\u01c0")
        buf.write("\2\2\u0fb8\u0fbc\7\u011c\2\2\u0fb9\u0fba\7g\2\2\u0fba")
        buf.write("\u0fbc\5\u03da\u01ee\2\u0fbb\u0fab\3\2\2\2\u0fbb\u0fb7")
        buf.write("\3\2\2\2\u0fbb\u0fb9\3\2\2\2\u0fbc\u0fbe\3\2\2\2\u0fbd")
        buf.write("\u0fbf\5\u017e\u00c0\2\u0fbe\u0fbd\3\2\2\2\u0fbe\u0fbf")
        buf.write("\3\2\2\2\u0fbf\u0fc1\3\2\2\2\u0fc0\u0fc2\5\u0180\u00c1")
        buf.write("\2\u0fc1\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc4")
        buf.write("\3\2\2\2\u0fc3\u0fc5\7D\2\2\u0fc4\u0fc3\3\2\2\2\u0fc4")
        buf.write("\u0fc5\3\2\2\2\u0fc5\u0fc8\3\2\2\2\u0fc6\u0fc7\t8\2\2")
        buf.write("\u0fc7\u0fc9\7\u00fd\2\2\u0fc8\u0fc6\3\2\2\2\u0fc8\u0fc9")
        buf.write("\3\2\2\2\u0fc9\u017d\3\2\2\2\u0fca\u0fcb\7\u027a\2\2\u0fcb")
        buf.write("\u0fd1\7\u00fd\2\2\u0fcc\u0fd2\5\u03ec\u01f7\2\u0fcd\u0fce")
        buf.write("\7\u02da\2\2\u0fce\u0fcf\5\u00acW\2\u0fcf\u0fd0\7\u02db")
        buf.write("\2\2\u0fd0\u0fd2\3\2\2\2\u0fd1\u0fcc\3\2\2\2\u0fd1\u0fcd")
        buf.write("\3\2\2\2\u0fd2\u017f\3\2\2\2\u0fd3\u0fd4\7\u00bd\2\2\u0fd4")
        buf.write("\u0fd5\7\u0112\2\2\u0fd5\u0fd6\5\u03f8\u01fd\2\u0fd6\u0181")
        buf.write("\3\2\2\2\u0fd7\u0fd9\7\u0158\2\2\u0fd8\u0fda\7\u018b\2")
        buf.write("\2\u0fd9\u0fd8\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdc")
        buf.write("\3\2\2\2\u0fdb\u0fdd\5\u0148\u00a5\2\u0fdc\u0fdb\3\2\2")
        buf.write("\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fdf\3\2\2\2\u0fde\u0fe0")
        buf.write("\5\u0140\u00a1\2\u0fdf\u0fde\3\2\2\2\u0fdf\u0fe0\3\2\2")
        buf.write("\2\u0fe0\u0fe2\3\2\2\2\u0fe1\u0fe3\5\u0184\u00c3\2\u0fe2")
        buf.write("\u0fe1\3\2\2\2\u0fe2\u0fe3\3\2\2\2\u0fe3\u0fea\3\2\2\2")
        buf.write("\u0fe4\u0fe7\5\u01b0\u00d9\2\u0fe5\u0fe7\5\u01a6\u00d4")
        buf.write("\2\u0fe6\u0fe4\3\2\2\2\u0fe6\u0fe5\3\2\2\2\u0fe7\u0fe8")
        buf.write("\3\2\2\2\u0fe8\u0fe6\3\2\2\2\u0fe8\u0fe9\3\2\2\2\u0fe9")
        buf.write("\u0feb\3\2\2\2\u0fea\u0fe6\3\2\2\2\u0fea\u0feb\3\2\2\2")
        buf.write("\u0feb\u0fed\3\2\2\2\u0fec\u0fee\5\u0112\u008a\2\u0fed")
        buf.write("\u0fec\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0183\3\2\2\2")
        buf.write("\u0fef\u0ff4\5\u0186\u00c4\2\u0ff0\u0ff1\7\u01a8\2\2\u0ff1")
        buf.write("\u0ff4\7\u02d4\2\2\u0ff2\u0ff4\5\u0188\u00c5\2\u0ff3\u0fef")
        buf.write("\3\2\2\2\u0ff3\u0ff0\3\2\2\2\u0ff3\u0ff2\3\2\2\2\u0ff4")
        buf.write("\u0ff6\3\2\2\2\u0ff5\u0ff7\5\u018a\u00c6\2\u0ff6\u0ff5")
        buf.write("\3\2\2\2\u0ff6\u0ff7\3\2\2\2\u0ff7\u0185\3\2\2\2\u0ff8")
        buf.write("\u0ff9\7\u0140\2\2\u0ff9\u0ffc\7\u024a\2\2\u0ffa\u0ffc")
        buf.write("\7\u016e\2\2\u0ffb\u0ff8\3\2\2\2\u0ffb\u0ffa\3\2\2\2\u0ffc")
        buf.write("\u0187\3\2\2\2\u0ffd\u1001\7\u0168\2\2\u0ffe\u0fff\7b")
        buf.write("\2\2\u0fff\u1001\7\u02d4\2\2\u1000\u0ffd\3\2\2\2\u1000")
        buf.write("\u0ffe\3\2\2\2\u1001\u0189\3\2\2\2\u1002\u1003\7\u00f9")
        buf.write("\2\2\u1003\u1005\5\u03f6\u01fc\2\u1004\u1002\3\2\2\2\u1004")
        buf.write("\u1005\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u1008\7\u019a")
        buf.write("\2\2\u1007\u1009\5\u0148\u00a5\2\u1008\u1007\3\2\2\2\u1008")
        buf.write("\u1009\3\2\2\2\u1009\u018b\3\2\2\2\u100a\u100f\5\u0198")
        buf.write("\u00cd\2\u100b\u100f\5\u0192\u00ca\2\u100c\u100f\5\u018e")
        buf.write("\u00c8\2\u100d\u100f\5\u01b2\u00da\2\u100e\u100a\3\2\2")
        buf.write("\2\u100e\u100b\3\2\2\2\u100e\u100c\3\2\2\2\u100e\u100d")
        buf.write("\3\2\2\2\u100f\u018d\3\2\2\2\u1010\u1011\7\u0155\2\2\u1011")
        buf.write("\u1012\7\u0162\2\2\u1012\u1013\7\u024a\2\2\u1013\u1014")
        buf.write("\5\u0190\u00c9\2\u1014\u1015\7\u01ef\2\2\u1015\u1016\7")
        buf.write("\30\2\2\u1016\u1017\t9\2\2\u1017\u018f\3\2\2\2\u1018\u1019")
        buf.write("\5\u03f8\u01fd\2\u1019\u0191\3\2\2\2\u101a\u101b\7\u01e3")
        buf.write("\2\2\u101b\u101c\7W\2\2\u101c\u101d\5\u0194\u00cb\2\u101d")
        buf.write("\u101e\7\u025a\2\2\u101e\u101f\5\u0196\u00cc\2\u101f\u0193")
        buf.write("\3\2\2\2\u1020\u1021\5\u03f6\u01fc\2\u1021\u0195\3\2\2")
        buf.write("\2\u1022\u1023\5\u03f6\u01fc\2\u1023\u0197\3\2\2\2\u1024")
        buf.write("\u1028\5\u01a2\u00d2\2\u1025\u1028\5\u019c\u00cf\2\u1026")
        buf.write("\u1028\5\u019a\u00ce\2\u1027\u1024\3\2\2\2\u1027\u1025")
        buf.write("\3\2\2\2\u1027\u1026\3\2\2\2\u1028\u1029\3\2\2\2\u1029")
        buf.write("\u1027\3\2\2\2\u1029\u102a\3\2\2\2\u102a\u0199\3\2\2\2")
        buf.write("\u102b\u102c\7\u0215\2\2\u102c\u103a\7\u0271\2\2\u102d")
        buf.write("\u102e\7W\2\2\u102e\u103b\5\u03f6\u01fc\2\u102f\u1034")
        buf.write("\7\u02da\2\2\u1030\u1032\7\u02e0\2\2\u1031\u1030\3\2\2")
        buf.write("\2\u1031\u1032\3\2\2\2\u1032\u1033\3\2\2\2\u1033\u1035")
        buf.write("\5\u03f6\u01fc\2\u1034\u1031\3\2\2\2\u1035\u1036\3\2\2")
        buf.write("\2\u1036\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u1038")
        buf.write("\3\2\2\2\u1038\u1039\7\u02db\2\2\u1039\u103b\3\2\2\2\u103a")
        buf.write("\u102d\3\2\2\2\u103a\u102f\3\2\2\2\u103b\u1041\3\2\2\2")
        buf.write("\u103c\u103d\7D\2\2\u103d\u1040\7h\2\2\u103e\u1040\7\u0113")
        buf.write("\2\2\u103f\u103c\3\2\2\2\u103f\u103e\3\2\2\2\u1040\u1043")
        buf.write("\3\2\2\2\u1041\u103f\3\2\2\2\u1041\u1042\3\2\2\2\u1042")
        buf.write("\u106a\3\2\2\2\u1043\u1041\3\2\2\2\u1044\u1052\7\u00a4")
        buf.write("\2\2\u1045\u1046\7W\2\2\u1046\u1053\5\u03f6\u01fc\2\u1047")
        buf.write("\u104c\7\u02da\2\2\u1048\u104a\7\u02e0\2\2\u1049\u1048")
        buf.write("\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u104b\3\2\2\2\u104b")
        buf.write("\u104d\5\u03f6\u01fc\2\u104c\u1049\3\2\2\2\u104d\u104e")
        buf.write("\3\2\2\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f")
        buf.write("\u1050\3\2\2\2\u1050\u1051\7\u02db\2\2\u1051\u1053\3\2")
        buf.write("\2\2\u1052\u1045\3\2\2\2\u1052\u1047\3\2\2\2\u1053\u1059")
        buf.write("\3\2\2\2\u1054\u1055\7D\2\2\u1055\u1058\7h\2\2\u1056\u1058")
        buf.write("\7\u0113\2\2\u1057\u1054\3\2\2\2\u1057\u1056\3\2\2\2\u1058")
        buf.write("\u105b\3\2\2\2\u1059\u1057\3\2\2\2\u1059\u105a\3\2\2\2")
        buf.write("\u105a\u105e\3\2\2\2\u105b\u1059\3\2\2\2\u105c\u105d\7")
        buf.write("M\2\2\u105d\u105f\7\u02d4\2\2\u105e\u105c\3\2\2\2\u105e")
        buf.write("\u105f\3\2\2\2\u105f\u106a\3\2\2\2\u1060\u1065\7\u00a4")
        buf.write("\2\2\u1061\u1062\7\u0271\2\2\u1062\u1066\7X\2\2\u1063")
        buf.write("\u1064\7X\2\2\u1064\u1066\7n\2\2\u1065\u1061\3\2\2\2\u1065")
        buf.write("\u1063\3\2\2\2\u1066\u1067\3\2\2\2\u1067\u1068\7M\2\2")
        buf.write("\u1068\u106a\7\u02d4\2\2\u1069\u102b\3\2\2\2\u1069\u1044")
        buf.write("\3\2\2\2\u1069\u1060\3\2\2\2\u106a\u019b\3\2\2\2\u106b")
        buf.write("\u1078\7\u0155\2\2\u106c\u1071\7\u02da\2\2\u106d\u106f")
        buf.write("\7\u02e0\2\2\u106e\u106d\3\2\2\2\u106e\u106f\3\2\2\2\u106f")
        buf.write("\u1070\3\2\2\2\u1070\u1072\5\u019e\u00d0\2\u1071\u106e")
        buf.write("\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u1071\3\2\2\2\u1073")
        buf.write("\u1074\3\2\2\2\u1074\u1075\3\2\2\2\u1075\u1076\7\u02db")
        buf.write("\2\2\u1076\u1079\3\2\2\2\u1077\u1079\5\u01a0\u00d1\2\u1078")
        buf.write("\u106c\3\2\2\2\u1078\u1077\3\2\2\2\u1079\u019d\3\2\2\2")
        buf.write("\u107a\u107c\5\u03f6\u01fc\2\u107b\u107d\5\u0418\u020d")
        buf.write("\2\u107c\u107b\3\2\2\2\u107c\u107d\3\2\2\2\u107d\u1080")
        buf.write("\3\2\2\2\u107e\u107f\7\u008f\2\2\u107f\u1081\5\u033e\u01a0")
        buf.write("\2\u1080\u107e\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u1085")
        buf.write("\3\2\2\2\u1082\u1083\7\u00b0\2\2\u1083\u1086\5\u01be\u00e0")
        buf.write("\2\u1084\u1086\7\u008d\2\2\u1085\u1082\3\2\2\2\u1085\u1084")
        buf.write("\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u108a\3\2\2\2\u1087")
        buf.write("\u1089\5\u00e4s\2\u1088\u1087\3\2\2\2\u1089\u108c\3\2")
        buf.write("\2\2\u108a\u1088\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u108e")
        buf.write("\3\2\2\2\u108c\u108a\3\2\2\2\u108d\u108f\5\u01b0\u00d9")
        buf.write("\2\u108e\u108d\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u019f")
        buf.write("\3\2\2\2\u1090\u1091\7W\2\2\u1091\u1093\5\u03f6\u01fc")
        buf.write("\2\u1092\u1094\7\u017b\2\2\u1093\u1092\3\2\2\2\u1093\u1094")
        buf.write("\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\7\u0239\2\2\u1096")
        buf.write("\u1097\7\34\2\2\u1097\u1098\7\r\2\2\u1098\u109a\7\u0124")
        buf.write("\2\2\u1099\u109b\7\u00da\2\2\u109a\u1099\3\2\2\2\u109a")
        buf.write("\u109b\3\2\2\2\u109b\u01a1\3\2\2\2\u109c\u109d\7\5\2\2")
        buf.write("\u109d\u10a6\7\u02da\2\2\u109e\u10a0\7\u02e0\2\2\u109f")
        buf.write("\u109e\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a1\3\2\2\2")
        buf.write("\u10a1\u10a7\5\u01c6\u00e4\2\u10a2\u10a4\7\u02e0\2\2\u10a3")
        buf.write("\u10a2\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a5\3\2\2\2")
        buf.write("\u10a5\u10a7\5\u01c8\u00e5\2\u10a6\u109f\3\2\2\2\u10a6")
        buf.write("\u10a3\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10a6\3\2\2\2")
        buf.write("\u10a8\u10a9\3\2\2\2\u10a9\u10aa\3\2\2\2\u10aa\u10ac\7")
        buf.write("\u02db\2\2\u10ab\u10ad\5\u01c4\u00e3\2\u10ac\u10ab\3\2")
        buf.write("\2\2\u10ac\u10ad\3\2\2\2\u10ad\u01a3\3\2\2\2\u10ae\u10af")
        buf.write("\7\u0155\2\2\u10af\u10b0\7\u0282\2\2\u10b0\u10b1\5\u01c2")
        buf.write("\u00e2\2\u10b1\u10b2\7\u02da\2\2\u10b2\u10b3\5\u01b4\u00db")
        buf.write("\2\u10b3\u10b4\7\u02db\2\2\u10b4\u01a5\3\2\2\2\u10b5\u10b6")
        buf.write("\7\u0282\2\2\u10b6\u10bc\5\u01c2\u00e2\2\u10b7\u10b9\5")
        buf.write("\u01d0\u00e9\2\u10b8\u10b7\3\2\2\2\u10b8\u10b9\3\2\2\2")
        buf.write("\u10b9\u10ba\3\2\2\2\u10ba\u10bd\5\u01a8\u00d5\2\u10bb")
        buf.write("\u10bd\5\u01d0\u00e9\2\u10bc\u10b8\3\2\2\2\u10bc\u10bb")
        buf.write("\3\2\2\2\u10bd\u01a7\3\2\2\2\u10be\u10bf\7\u0235\2\2\u10bf")
        buf.write("\u10c1\7\30\2\2\u10c0\u10c2\t/\2\2\u10c1\u10c0\3\2\2\2")
        buf.write("\u10c1\u10c2\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10cc\7")
        buf.write("\u012d\2\2\u10c4\u10c6\5\u01aa\u00d6\2\u10c5\u10c4\3\2")
        buf.write("\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10c7\3\2\2\2\u10c7\u10c8")
        buf.write("\7\u02da\2\2\u10c8\u10c9\5\u01ae\u00d8\2\u10c9\u10ca\7")
        buf.write("\u02db\2\2\u10ca\u10cd\3\2\2\2\u10cb\u10cd\5\u01aa\u00d6")
        buf.write("\2\u10cc\u10c5\3\2\2\2\u10cc\u10cb\3\2\2\2\u10cd\u01a9")
        buf.write("\3\2\2\2\u10ce\u10cf\5\u0438\u021d\2\u10cf\u01ab\3\2\2")
        buf.write("\2\u10d0\u10d1\5\u0438\u021d\2\u10d1\u01ad\3\2\2\2\u10d2")
        buf.write("\u10d3\7\u0248\2\2\u10d3\u10da\5\u01c0\u00e1\2\u10d4\u10d6")
        buf.write("\5\u01b6\u00dc\2\u10d5\u10d7\5\u0144\u00a3\2\u10d6\u10d5")
        buf.write("\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10da\3\2\2\2\u10d8")
        buf.write("\u10da\5\u0144\u00a3\2\u10d9\u10d2\3\2\2\2\u10d9\u10d4")
        buf.write("\3\2\2\2\u10d9\u10d8\3\2\2\2\u10da\u01af\3\2\2\2\u10db")
        buf.write("\u1100\7\u012d\2\2\u10dc\u10e1\7\u02da\2\2\u10dd\u10df")
        buf.write("\7\u02e0\2\2\u10de\u10dd\3\2\2\2\u10de\u10df\3\2\2\2\u10df")
        buf.write("\u10e0\3\2\2\2\u10e0\u10e2\5\u01ac\u00d7\2\u10e1\u10de")
        buf.write("\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e1\3\2\2\2\u10e3")
        buf.write("\u10e4\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e6\7\u02db")
        buf.write("\2\2\u10e6\u10e7\7\u0235\2\2\u10e7\u10ed\7\30\2\2\u10e8")
        buf.write("\u10ee\t/\2\2\u10e9\u10ea\7\u02da\2\2\u10ea\u10eb\5\u01ae")
        buf.write("\u00d8\2\u10eb\u10ec\7\u02db\2\2\u10ec\u10ee\3\2\2\2\u10ed")
        buf.write("\u10e8\3\2\2\2\u10ed\u10e9\3\2\2\2\u10ee\u10ef\3\2\2\2")
        buf.write("\u10ef\u10ed\3\2\2\2\u10ef\u10f0\3\2\2\2\u10f0\u1101\3")
        buf.write("\2\2\2\u10f1\u10f2\7\u02da\2\2\u10f2\u10f3\5\u01ac\u00d7")
        buf.write("\2\u10f3\u10f4\7\u02db\2\2\u10f4\u10f5\7\u0235\2\2\u10f5")
        buf.write("\u10fc\7\30\2\2\u10f6\u10fd\t/\2\2\u10f7\u10fd\5\u01aa")
        buf.write("\u00d6\2\u10f8\u10f9\7\u02da\2\2\u10f9\u10fa\5\u01ae\u00d8")
        buf.write("\2\u10fa\u10fb\7\u02db\2\2\u10fb\u10fd\3\2\2\2\u10fc\u10f6")
        buf.write("\3\2\2\2\u10fc\u10f7\3\2\2\2\u10fc\u10f8\3\2\2\2\u10fd")
        buf.write("\u10fe\3\2\2\2\u10fe\u10fc\3\2\2\2\u10fe\u10ff\3\2\2\2")
        buf.write("\u10ff\u1101\3\2\2\2\u1100\u10dc\3\2\2\2\u1100\u10f1\3")
        buf.write("\2\2\2\u1101\u01b1\3\2\2\2\u1102\u1103\7\u0155\2\2\u1103")
        buf.write("\u1104\7\u012d\2\2\u1104\u1105\7\u02da\2\2\u1105\u1106")
        buf.write("\5\u01ac\u00d7\2\u1106\u1107\7\u02db\2\2\u1107\u1108\7")
        buf.write("\u02da\2\2\u1108\u1109\5\u01b4\u00db\2\u1109\u110a\7\u02db")
        buf.write("\2\2\u110a\u01b3\3\2\2\2\u110b\u1124\5\u0144\u00a3\2\u110c")
        buf.write("\u110d\t:\2\2\u110d\u1124\7\u02d4\2\2\u110e\u110f\7\u01d2")
        buf.write("\2\2\u110f\u1124\7\u00df\2\2\u1110\u1124\5\u01bc\u00df")
        buf.write("\2\u1111\u1124\5\u01b8\u00dd\2\u1112\u1124\5\u01ba\u00de")
        buf.write("\2\u1113\u1114\7\u00b0\2\2\u1114\u1124\5\u01be\u00e0\2")
        buf.write("\u1115\u1124\7\u008d\2\2\u1116\u1124\7A\2\2\u1117\u111c")
        buf.write("\7A\2\2\u1118\u111c\7\u0167\2\2\u1119\u111a\7A\2\2\u111a")
        buf.write("\u111c\7\u01d0\2\2\u111b\u1117\3\2\2\2\u111b\u1118\3\2")
        buf.write("\2\2\u111b\u1119\3\2\2\2\u111c\u111e\3\2\2\2\u111d\u111f")
        buf.write("\5\u00f4{\2\u111e\u111d\3\2\2\2\u111e\u111f\3\2\2\2\u111f")
        buf.write("\u1124\3\2\2\2\u1120\u1124\5\u0158\u00ad\2\u1121\u1124")
        buf.write("\5\u015c\u00af\2\u1122\u1124\5\u015a\u00ae\2\u1123\u110b")
        buf.write("\3\2\2\2\u1123\u110c\3\2\2\2\u1123\u110e\3\2\2\2\u1123")
        buf.write("\u1110\3\2\2\2\u1123\u1111\3\2\2\2\u1123\u1112\3\2\2\2")
        buf.write("\u1123\u1113\3\2\2\2\u1123\u1115\3\2\2\2\u1123\u1116\3")
        buf.write("\2\2\2\u1123\u111b\3\2\2\2\u1123\u1120\3\2\2\2\u1123\u1121")
        buf.write("\3\2\2\2\u1123\u1122\3\2\2\2\u1124\u1125\3\2\2\2\u1125")
        buf.write("\u1123\3\2\2\2\u1125\u1126\3\2\2\2\u1126\u01b5\3\2\2\2")
        buf.write("\u1127\u1128\t\7\2\2\u1128\u1129\7\u0234\2\2\u1129\u112a")
        buf.write("\7\u0103\2\2\u112a\u1141\7\u01fb\2\2\u112b\u112c\7O\2")
        buf.write("\2\u112c\u1141\7\u02d4\2\2\u112d\u112e\7\u01aa\2\2\u112e")
        buf.write("\u1141\7\u02d4\2\2\u112f\u1130\7\u00df\2\2\u1130\u1141")
        buf.write("\7\u02d4\2\2\u1131\u1141\5\u01bc\u00df\2\u1132\u1141\5")
        buf.write("\u01b8\u00dd\2\u1133\u1141\5\u01ba\u00de\2\u1134\u1135")
        buf.write("\7\u00b0\2\2\u1135\u1141\5\u01be\u00e0\2\u1136\u1141\7")
        buf.write("\u008d\2\2\u1137\u113c\7A\2\2\u1138\u113c\7\u0167\2\2")
        buf.write("\u1139\u113a\7A\2\2\u113a\u113c\7\u01d0\2\2\u113b\u1137")
        buf.write("\3\2\2\2\u113b\u1138\3\2\2\2\u113b\u1139\3\2\2\2\u113c")
        buf.write("\u113e\3\2\2\2\u113d\u113f\5\u00f4{\2\u113e\u113d\3\2")
        buf.write("\2\2\u113e\u113f\3\2\2\2\u113f\u1141\3\2\2\2\u1140\u1127")
        buf.write("\3\2\2\2\u1140\u112b\3\2\2\2\u1140\u112d\3\2\2\2\u1140")
        buf.write("\u112f\3\2\2\2\u1140\u1131\3\2\2\2\u1140\u1132\3\2\2\2")
        buf.write("\u1140\u1133\3\2\2\2\u1140\u1134\3\2\2\2\u1140\u1136\3")
        buf.write("\2\2\2\u1140\u113b\3\2\2\2\u1141\u1142\3\2\2\2\u1142\u1140")
        buf.write("\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u01b7\3\2\2\2\u1144")
        buf.write("\u1145\t;\2\2\u1145\u01b9\3\2\2\2\u1146\u114c\7\u0168")
        buf.write("\2\2\u1147\u1149\7b\2\2\u1148\u114a\t<\2\2\u1149\u1148")
        buf.write("\3\2\2\2\u1149\u114a\3\2\2\2\u114a\u114c\3\2\2\2\u114b")
        buf.write("\u1146\3\2\2\2\u114b\u1147\3\2\2\2\u114c\u01bb\3\2\2\2")
        buf.write("\u114d\u1153\7\u01ed\2\2\u114e\u1154\7\u02bc\2\2\u114f")
        buf.write("\u1150\7\u02be\2\2\u1150\u1154\7\u02d4\2\2\u1151\u1154")
        buf.write("\7#\2\2\u1152\u1154\7\u0172\2\2\u1153\u114e\3\2\2\2\u1153")
        buf.write("\u114f\3\2\2\2\u1153\u1151\3\2\2\2\u1153\u1152\3\2\2\2")
        buf.write("\u1153\u1154\3\2\2\2\u1154\u01bd\3\2\2\2\u1155\u1156\7")
        buf.write("\u027a\2\2\u1156\u1158\7\u02d6\2\2\u1157\u1155\3\2\2\2")
        buf.write("\u1157\u1158\3\2\2\2\u1158\u115c\3\2\2\2\u1159\u115a\7")
        buf.write("\u00f2\2\2\u115a\u115b\7?\2\2\u115b\u115d\7\u02f7\2\2")
        buf.write("\u115c\u1159\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u115f\3")
        buf.write("\2\2\2\u115e\u1160\7\u02d6\2\2\u115f\u115e\3\2\2\2\u115f")
        buf.write("\u1160\3\2\2\2\u1160\u1165\3\2\2\2\u1161\u1163\7\u0173")
        buf.write("\2\2\u1162\u1161\3\2\2\2\u1162\u1163\3\2\2\2\u1163\u1164")
        buf.write("\3\2\2\2\u1164\u1166\7\u01fe\2\2\u1165\u1162\3\2\2\2\u1165")
        buf.write("\u1166\3\2\2\2\u1166\u01bf\3\2\2\2\u1167\u1168\5\u0438")
        buf.write("\u021d\2\u1168\u01c1\3\2\2\2\u1169\u116a\5\u0434\u021b")
        buf.write("\2\u116a\u116b\7\u02d3\2\2\u116b\u116d\3\2\2\2\u116c\u1169")
        buf.write("\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u1171\3\2\2\2\u116e")
        buf.write("\u116f\5\u0434\u021b\2\u116f\u1170\7\u02d3\2\2\u1170\u1172")
        buf.write("\3\2\2\2\u1171\u116e\3\2\2\2\u1171\u1172\3\2\2\2\u1172")
        buf.write("\u1173\3\2\2\2\u1173\u1174\5\u0434\u021b\2\u1174\u01c3")
        buf.write("\3\2\2\2\u1175\u117d\5\u01d8\u00ed\2\u1176\u117d\5\u01cc")
        buf.write("\u00e7\2\u1177\u117a\5\u01a6\u00d4\2\u1178\u117a\5\u01b0")
        buf.write("\u00d9\2\u1179\u1177\3\2\2\2\u1179\u1178\3\2\2\2\u117a")
        buf.write("\u117d\3\2\2\2\u117b\u117d\5\u0124\u0093\2\u117c\u1175")
        buf.write("\3\2\2\2\u117c\u1176\3\2\2\2\u117c\u1179\3\2\2\2\u117c")
        buf.write("\u117b\3\2\2\2\u117d\u01c5\3\2\2\2\u117e\u1181\5\u03f6")
        buf.write("\u01fc\2\u117f\u1182\5\u0418\u020d\2\u1180\u1182\5\u03de")
        buf.write("\u01f0\2\u1181\u117f\3\2\2\2\u1181\u1180\3\2\2\2\u1182")
        buf.write("\u1184\3\2\2\2\u1183\u1185\7\u0226\2\2\u1184\u1183\3\2")
        buf.write("\2\2\u1184\u1185\3\2\2\2\u1185\u1188\3\2\2\2\u1186\u1187")
        buf.write("\7\u008f\2\2\u1187\u1189\5\u033e\u01a0\2\u1188\u1186\3")
        buf.write("\2\2\2\u1188\u1189\3\2\2\2\u1189\u119d\3\2\2\2\u118a\u118d")
        buf.write("\7\u00b0\2\2\u118b\u118c\7\u027a\2\2\u118c\u118e\7\u02d6")
        buf.write("\2\2\u118d\u118b\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u1192")
        buf.write("\3\2\2\2\u118f\u1190\7\u00f2\2\2\u1190\u1191\7?\2\2\u1191")
        buf.write("\u1193\5\u0438\u021d\2\u1192\u118f\3\2\2\2\u1192\u1193")
        buf.write("\3\2\2\2\u1193\u1195\3\2\2\2\u1194\u1196\7\u02d6\2\2\u1195")
        buf.write("\u1194\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u119b\3\2\2\2")
        buf.write("\u1197\u1199\7\u0173\2\2\u1198\u1197\3\2\2\2\u1198\u1199")
        buf.write("\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119c\7\u01fe\2\2\u119b")
        buf.write("\u1198\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u119e\3\2\2\2")
        buf.write("\u119d\u118a\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11a6\3")
        buf.write("\2\2\2\u119f\u11a1\5\u00e4s\2\u11a0\u119f\3\2\2\2\u11a1")
        buf.write("\u11a4\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2")
        buf.write("\u11a3\u11a7\3\2\2\2\u11a4\u11a2\3\2\2\2\u11a5\u11a7\5")
        buf.write("\u00e6t\2\u11a6\u11a2\3\2\2\2\u11a6\u11a5\3\2\2\2\u11a7")
        buf.write("\u01c7\3\2\2\2\u11a8\u11aa\5\u03f6\u01fc\2\u11a9\u11ab")
        buf.write("\5\u0418\u020d\2\u11aa\u11a9\3\2\2\2\u11aa\u11ab\3\2\2")
        buf.write("\2\u11ab\u11ae\3\2\2\2\u11ac\u11ad\7\u00e3\2\2\u11ad\u11af")
        buf.write("\7\21\2\2\u11ae\u11ac\3\2\2\2\u11ae\u11af\3\2\2\2\u11af")
        buf.write("\u11b0\3\2\2\2\u11b0\u11b1\7\30\2\2\u11b1\u11b2\7\u02da")
        buf.write("\2\2\u11b2\u11b3\5\u033e\u01a0\2\u11b3\u11b5\7\u02db\2")
        buf.write("\2\u11b4\u11b6\7\u0287\2\2\u11b5\u11b4\3\2\2\2\u11b5\u11b6")
        buf.write("\3\2\2\2\u11b6\u11ba\3\2\2\2\u11b7\u11b9\5\u00e4s\2\u11b8")
        buf.write("\u11b7\3\2\2\2\u11b9\u11bc\3\2\2\2\u11ba\u11b8\3\2\2\2")
        buf.write("\u11ba\u11bb\3\2\2\2\u11bb\u01c9\3\2\2\2\u11bc\u11ba\3")
        buf.write("\2\2\2\u11bd\u11be\7\u01a2\2\2\u11be\u11bf\5\u01d2\u00ea")
        buf.write("\2\u11bf\u01cb\3\2\2\2\u11c0\u11c1\7\u0162\2\2\u11c1\u11c4")
        buf.write("\7\u024a\2\2\u11c2\u11c5\5\u01ce\u00e8\2\u11c3\u11c5\7")
        buf.write("Y\2\2\u11c4\u11c2\3\2\2\2\u11c4\u11c3\3\2\2\2\u11c5\u11c7")
        buf.write("\3\2\2\2\u11c6\u11c8\5\u01d0\u00e9\2\u11c7\u11c6\3\2\2")
        buf.write("\2\u11c7\u11c8\3\2\2\2\u11c8\u11ca\3\2\2\2\u11c9\u11cb")
        buf.write("\t=\2\2\u11ca\u11c9\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb")
        buf.write("\u11cc\3\2\2\2\u11cc\u11cd\7\u0235\2\2\u11cd\u11ce\7\30")
        buf.write("\2\2\u11ce\u11dc\5\u03f8\u01fd\2\u11cf\u11d6\7\u02da\2")
        buf.write("\2\u11d0\u11d1\7\u02da\2\2\u11d1\u11d2\5\u0130\u0099\2")
        buf.write("\u11d2\u11d3\7\u02db\2\2\u11d3\u11d7\3\2\2\2\u11d4\u11d7")
        buf.write("\5\u014a\u00a6\2\u11d5\u11d7\5\u01c4\u00e3\2\u11d6\u11d0")
        buf.write("\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d6\u11d5\3\2\2\2\u11d7")
        buf.write("\u11d8\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2")
        buf.write("\u11d9\u11da\3\2\2\2\u11da\u11db\7\u02db\2\2\u11db\u11dd")
        buf.write("\3\2\2\2\u11dc\u11cf\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd")
        buf.write("\u11e3\3\2\2\2\u11de\u11e0\7\u01ef\2\2\u11df\u11e1\7\30")
        buf.write("\2\2\u11e0\u11df\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11e2")
        buf.write("\3\2\2\2\u11e2\u11e4\t9\2\2\u11e3\u11de\3\2\2\2\u11e3")
        buf.write("\u11e4\3\2\2\2\u11e4\u01cd\3\2\2\2\u11e5\u11e6\5\u0438")
        buf.write("\u021d\2\u11e6\u01cf\3\2\2\2\u11e7\u11e9\7\u00aa\2\2\u11e8")
        buf.write("\u11e7\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11ea\3\2\2\2")
        buf.write("\u11ea\u11eb\7\u0114\2\2\u11eb\u11ed\7\u0186\2\2\u11ec")
        buf.write("\u11ee\7\u0266\2\2\u11ed\u11ec\3\2\2\2\u11ed\u11ee\3\2")
        buf.write("\2\2\u11ee\u11ef\3\2\2\2\u11ef\u11f0\7\u02da\2\2\u11f0")
        buf.write("\u11f1\5\u03de\u01f0\2\u11f1\u11f2\7\u02db\2\2\u11f2\u11fb")
        buf.write("\3\2\2\2\u11f3\u11f5\7\u017b\2\2\u11f4\u11f3\3\2\2\2\u11f4")
        buf.write("\u11f5\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11f7\7\u0239")
        buf.write("\2\2\u11f7\u11f8\7\34\2\2\u11f8\u11f9\7\r\2\2\u11f9\u11fb")
        buf.write("\7\u0124\2\2\u11fa\u11e8\3\2\2\2\u11fa\u11f4\3\2\2\2\u11fb")
        buf.write("\u01d1\3\2\2\2\u11fc\u11fd\5\u0438\u021d\2\u11fd\u01d3")
        buf.write("\3\2\2\2\u11fe\u11ff\7\u023c\2\2\u11ff\u1202\7\u0134\2")
        buf.write("\2\u1200\u1203\5\u0154\u00ab\2\u1201\u1203\5\u0156\u00ac")
        buf.write("\2\u1202\u1200\3\2\2\2\u1202\u1201\3\2\2\2\u1203\u01d5")
        buf.write("\3\2\2\2\u1204\u1205\5\u0438\u021d\2\u1205\u01d7\3\2\2")
        buf.write("\2\u1206\u1207\7W\2\2\u1207\u1208\5\u0438\u021d\2\u1208")
        buf.write("\u1209\5\u01d0\u00e9\2\u1209\u01d9\3\2\2\2\u120a\u1212")
        buf.write("\7\5\2\2\u120b\u120d\5\u00eav\2\u120c\u120b\3\2\2\2\u120d")
        buf.write("\u1210\3\2\2\2\u120e\u120c\3\2\2\2\u120e\u120f\3\2\2\2")
        buf.write("\u120f\u1213\3\2\2\2\u1210\u120e\3\2\2\2\u1211\u1213\5")
        buf.write("\u00e8u\2\u1212\u120e\3\2\2\2\u1212\u1211\3\2\2\2\u1213")
        buf.write("\u1237\3\2\2\2\u1214\u1225\7\u0155\2\2\u1215\u1216\7g")
        buf.write("\2\2\u1216\u1226\5\u03da\u01ee\2\u1217\u1218\7\u01c0\2")
        buf.write("\2\u1218\u1226\7\u011c\2\2\u1219\u121a\7\u026c\2\2\u121a")
        buf.write("\u121f\7\u02da\2\2\u121b\u121d\7\u02e0\2\2\u121c\u121b")
        buf.write("\3\2\2\2\u121c\u121d\3\2\2\2\u121d\u121e\3\2\2\2\u121e")
        buf.write("\u1220\5\u03f6\u01fc\2\u121f\u121c\3\2\2\2\u1220\u1221")
        buf.write("\3\2\2\2\u1221\u121f\3\2\2\2\u1221\u1222\3\2\2\2\u1222")
        buf.write("\u1223\3\2\2\2\u1223\u1224\7\u02db\2\2\u1224\u1226\3\2")
        buf.write("\2\2\u1225\u1215\3\2\2\2\u1225\u1217\3\2\2\2\u1225\u1219")
        buf.write("\3\2\2\2\u1226\u1227\3\2\2\2\u1227\u1229\5\u00ecw\2\u1228")
        buf.write("\u122a\7D\2\2\u1229\u1228\3\2\2\2\u1229\u122a\3\2\2\2")
        buf.write("\u122a\u1237\3\2\2\2\u122b\u122c\7\u01e3\2\2\u122c\u122d")
        buf.write("\7g\2\2\u122d\u122e\5\u01dc\u00ef\2\u122e\u122f\7\u025a")
        buf.write("\2\2\u122f\u1230\5\u01de\u00f0\2\u1230\u1237\3\2\2\2\u1231")
        buf.write("\u1233\5\u01e0\u00f1\2\u1232\u1231\3\2\2\2\u1233\u1234")
        buf.write("\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235\3\2\2\2\u1235")
        buf.write("\u1237\3\2\2\2\u1236\u120a\3\2\2\2\u1236\u1214\3\2\2\2")
        buf.write("\u1236\u122b\3\2\2\2\u1236\u1232\3\2\2\2\u1237\u01db\3")
        buf.write("\2\2\2\u1238\u1239\5\u03da\u01ee\2\u1239\u01dd\3\2\2\2")
        buf.write("\u123a\u123b\5\u03da\u01ee\2\u123b\u01df\3\2\2\2\u123c")
        buf.write("\u123d\7\u00a4\2\2\u123d\u123e\5\u01e2\u00f2\2\u123e\u01e1")
        buf.write("\3\2\2\2\u123f\u1240\7\u01c0\2\2\u1240\u124e\7\u011c\2")
        buf.write("\2\u1241\u1242\7\u026c\2\2\u1242\u1247\7\u02da\2\2\u1243")
        buf.write("\u1245\7\u02e0\2\2\u1244\u1243\3\2\2\2\u1244\u1245\3\2")
        buf.write("\2\2\u1245\u1246\3\2\2\2\u1246\u1248\5\u03f6\u01fc\2\u1247")
        buf.write("\u1244\3\2\2\2\u1248\u1249\3\2\2\2\u1249\u1247\3\2\2\2")
        buf.write("\u1249\u124a\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124c\7")
        buf.write("\u02db\2\2\u124c\u124e\3\2\2\2\u124d\u123f\3\2\2\2\u124d")
        buf.write("\u1241\3\2\2\2\u124e\u1250\3\2\2\2\u124f\u1251\7D\2\2")
        buf.write("\u1250\u124f\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u1253\3")
        buf.write("\2\2\2\u1252\u1254\t8\2\2\u1253\u1252\3\2\2\2\u1253\u1254")
        buf.write("\3\2\2\2\u1254\u125b\3\2\2\2\u1255\u1256\7g\2\2\u1256")
        buf.write("\u1258\5\u03da\u01ee\2\u1257\u1259\7D\2\2\u1258\u1257")
        buf.write("\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u125b\3\2\2\2\u125a")
        buf.write("\u124d\3\2\2\2\u125a\u1255\3\2\2\2\u125b\u01e3\3\2\2\2")
        buf.write("\u125c\u126a\7\5\2\2\u125d\u125f\7\u02e0\2\2\u125e\u125d")
        buf.write("\3\2\2\2\u125e\u125f\3\2\2\2\u125f\u1262\3\2\2\2\u1260")
        buf.write("\u1261\7g\2\2\u1261\u1263\5\u03da\u01ee\2\u1262\u1260")
        buf.write("\3\2\2\2\u1262\u1263\3\2\2\2\u1263\u1268\3\2\2\2\u1264")
        buf.write("\u1269\5\u01f6\u00fc\2\u1265\u1269\5\u01ee\u00f8\2\u1266")
        buf.write("\u1269\5\u01f4\u00fb\2\u1267\u1269\5\u01e6\u00f4\2\u1268")
        buf.write("\u1264\3\2\2\2\u1268\u1265\3\2\2\2\u1268\u1266\3\2\2\2")
        buf.write("\u1268\u1267\3\2\2\2\u1269\u126b\3\2\2\2\u126a\u125e\3")
        buf.write("\2\2\2\u126b\u126c\3\2\2\2\u126c\u126a\3\2\2\2\u126c\u126d")
        buf.write("\3\2\2\2\u126d\u01e5\3\2\2\2\u126e\u126f\7L\2\2\u126f")
        buf.write("\u1270\7\u02da\2\2\u1270\u1271\5\u033a\u019e\2\u1271\u1273")
        buf.write("\7\u02db\2\2\u1272\u1274\7\u009d\2\2\u1273\u1272\3\2\2")
        buf.write("\2\u1273\u1274\3\2\2\2\u1274\u01e7\3\2\2\2\u1275\u1276")
        buf.write("\7\u00a4\2\2\u1276\u1277\7g\2\2\u1277\u1278\5\u03da\u01ee")
        buf.write("\2\u1278\u01e9\3\2\2\2\u1279\u127a\7\u00ae\2\2\u127a\u127b")
        buf.write("\7g\2\2\u127b\u127c\5\u03da\u01ee\2\u127c\u01eb\3\2\2")
        buf.write("\2\u127d\u127e\7\u009d\2\2\u127e\u127f\7g\2\2\u127f\u1280")
        buf.write("\5\u03da\u01ee\2\u1280\u01ed\3\2\2\2\u1281\u1282\7\u00db")
        buf.write("\2\2\u1282\u1283\7\u011c\2\2\u1283\u1284\5\u0408\u0205")
        buf.write("\2\u1284\u1286\5\u01f0\u00f9\2\u1285\u1287\5\u01f2\u00fa")
        buf.write("\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2\2\2\u1287\u01ef")
        buf.write("\3\2\2\2\u1288\u1289\7\u01d9\2\2\u1289\u128a\5\u03f8\u01fd")
        buf.write("\2\u128a\u128b\5\u0408\u0205\2\u128b\u01f1\3\2\2\2\u128c")
        buf.write("\u128d\7\u018d\2\2\u128d\u1291\7\u0095\2\2\u128e\u1292")
        buf.write("\7D\2\2\u128f\u1290\7\u0215\2\2\u1290\u1292\7\u017e\2")
        buf.write("\2\u1291\u128e\3\2\2\2\u1291\u128f\3\2\2\2\u1292\u01f3")
        buf.write("\3\2\2\2\u1293\u1294\7\u026c\2\2\u1294\u1296\5\u0408\u0205")
        buf.write("\2\u1295\u1297\5\u017e\u00c0\2\u1296\u1295\3\2\2\2\u1296")
        buf.write("\u1297\3\2\2\2\u1297\u01f5\3\2\2\2\u1298\u1299\7\u01c0")
        buf.write("\2\2\u1299\u129a\7\u011c\2\2\u129a\u129c\5\u0408\u0205")
        buf.write("\2\u129b\u129d\5\u017e\u00c0\2\u129c\u129b\3\2\2\2\u129c")
        buf.write("\u129d\3\2\2\2\u129d\u01f7\3\2\2\2\u129e\u129f\7\u008a")
        buf.write("\2\2\u129f\u12a1\5\u020c\u0107\2\u12a0\u129e\3\2\2\2\u12a0")
        buf.write("\u12a1\3\2\2\2\u12a1\u12a2\3\2\2\2\u12a2\u12a3\7-\2\2")
        buf.write("\u12a3\u12aa\5\u022a\u0116\2\u12a4\u12a6\7\u00bb\2\2\u12a5")
        buf.write("\u12a7\5\u025a\u012e\2\u12a6\u12a5\3\2\2\2\u12a7\u12a8")
        buf.write("\3\2\2\2\u12a8\u12a6\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9")
        buf.write("\u12ab\3\2\2\2\u12aa\u12a4\3\2\2\2\u12aa\u12ab\3\2\2\2")
        buf.write("\u12ab\u12ac\3\2\2\2\u12ac\u12ad\7\u00b2\2\2\u12ad\u12ae")
        buf.write("\7\u02ec\2\2\u12ae\u01f9\3\2\2\2\u12af\u12b0\7!\2\2\u12b0")
        buf.write("\u12b1\t>\2\2\u12b1\u01fb\3\2\2\2\u12b2\u12b3\5\u0432")
        buf.write("\u021a\2\u12b3\u12b4\7\u02ee\2\2\u12b4\u12b5\5\u033e\u01a0")
        buf.write("\2\u12b5\u01fd\3\2\2\2\u12b6\u12b9\7\u011d\2\2\u12b7\u12ba")
        buf.write("\5\u0200\u0101\2\u12b8\u12ba\5\u0202\u0102\2\u12b9\u12b7")
        buf.write("\3\2\2\2\u12b9\u12b8\3\2\2\2\u12ba\u01ff\3\2\2\2\u12bb")
        buf.write("\u12bc\7\u0117\2\2\u12bc\u12bd\7\u015a\2\2\u12bd\u12be")
        buf.write("\7\u02d6\2\2\u12be\u0201\3\2\2\2\u12bf\u12c2\7Q\2\2\u12c0")
        buf.write("\u12c1\7\u015a\2\2\u12c1\u12c3\7\u02d6\2\2\u12c2\u12c0")
        buf.write("\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4")
        buf.write("\u12c5\7\u0125\2\2\u12c5\u12c7\5\u0432\u021a\2\u12c6\u12c8")
        buf.write("\5\u0204\u0103\2\u12c7\u12c6\3\2\2\2\u12c7\u12c8\3\2\2")
        buf.write("\2\u12c8\u12cb\3\2\2\2\u12c9\u12ca\7\u0291\2\2\u12ca\u12cc")
        buf.write("\7m\2\2\u12cb\u12c9\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc")
        buf.write("\u12ce\3\2\2\2\u12cd\u12cf\5\u0206\u0104\2\u12ce\u12cd")
        buf.write("\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u0203\3\2\2\2\u12d0")
        buf.write("\u12d1\7\n\2\2\u12d1\u12d2\7\u0103\2\2\u12d2\u12d3\7\u02da")
        buf.write("\2\2\u12d3\u12d4\5\u033c\u019f\2\u12d4\u12d5\7\u02db\2")
        buf.write("\2\u12d5\u0205\3\2\2\2\u12d6\u12d7\7\u01a0\2\2\u12d7\u12dc")
        buf.write("\7\u02da\2\2\u12d8\u12dd\5\u033c\u019f\2\u12d9\u12da\7")
        buf.write("\u02d3\2\2\u12da\u12db\7\u02d3\2\2\u12db\u12dd\7\u02d3")
        buf.write("\2\2\u12dc\u12d8\3\2\2\2\u12dc\u12d9\3\2\2\2\u12dd\u12de")
        buf.write("\3\2\2\2\u12de\u12df\7\u02db\2\2\u12df\u0207\3\2\2\2\u12e0")
        buf.write("\u12e4\5\u03ca\u01e6\2\u12e1\u12e3\t?\2\2\u12e2\u12e1")
        buf.write("\3\2\2\2\u12e3\u12e6\3\2\2\2\u12e4\u12e2\3\2\2\2\u12e4")
        buf.write("\u12e5\3\2\2\2\u12e5\u12e8\3\2\2\2\u12e6\u12e4\3\2\2\2")
        buf.write("\u12e7\u12e9\5\u0416\u020c\2\u12e8\u12e7\3\2\2\2\u12e8")
        buf.write("\u12e9\3\2\2\2\u12e9\u12eb\3\2\2\2\u12ea\u12ec\5\u020a")
        buf.write("\u0106\2\u12eb\u12ea\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec")
        buf.write("\u0209\3\2\2\2\u12ed\u12ee\t@\2\2\u12ee\u12ef\5\u033e")
        buf.write("\u01a0\2\u12ef\u020b\3\2\2\2\u12f0\u12f2\5\u020e\u0108")
        buf.write("\2\u12f1\u12f0\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3\u12f1")
        buf.write("\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u020d\3\2\2\2\u12f5")
        buf.write("\u1300\5\u021a\u010e\2\u12f6\u1300\5\u0210\u0109\2\u12f7")
        buf.write("\u1300\5\u0212\u010a\2\u12f8\u1300\5\u0214\u010b\2\u12f9")
        buf.write("\u1300\5\u0218\u010d\2\u12fa\u1300\5\u0222\u0112\2\u12fb")
        buf.write("\u1300\5 \21\2\u12fc\u1300\5\"\22\2\u12fd\u1300\5,\27")
        buf.write("\2\u12fe\u1300\5*\26\2\u12ff\u12f5\3\2\2\2\u12ff\u12f6")
        buf.write("\3\2\2\2\u12ff\u12f7\3\2\2\2\u12ff\u12f8\3\2\2\2\u12ff")
        buf.write("\u12f9\3\2\2\2\u12ff\u12fa\3\2\2\2\u12ff\u12fb\3\2\2\2")
        buf.write("\u12ff\u12fc\3\2\2\2\u12ff\u12fd\3\2\2\2\u12ff\u12fe\3")
        buf.write("\2\2\2\u1300\u020f\3\2\2\2\u1301\u1303\5\u0432\u021a\2")
        buf.write("\u1302\u1304\7f\2\2\u1303\u1302\3\2\2\2\u1303\u1304\3")
        buf.write("\2\2\2\u1304\u1305\3\2\2\2\u1305\u1308\5\u0416\u020c\2")
        buf.write("\u1306\u1307\7\u017b\2\2\u1307\u1309\7\u017e\2\2\u1308")
        buf.write("\u1306\3\2\2\2\u1308\u1309\3\2\2\2\u1309\u130b\3\2\2\2")
        buf.write("\u130a\u130c\5\u020a\u0106\2\u130b\u130a\3\2\2\2\u130b")
        buf.write("\u130c\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u130e\7\u02ec")
        buf.write("\2\2\u130e\u0211\3\2\2\2\u130f\u1310\7\u023a\2\2\u1310")
        buf.write("\u1311\5\u0432\u021a\2\u1311\u1312\7\u0114\2\2\u1312\u1318")
        buf.write("\5\u0416\u020c\2\u1313\u1314\7\u01cd\2\2\u1314\u1315\5")
        buf.write("\u033e\u01a0\2\u1315\u1316\7\u02d2\2\2\u1316\u1317\5\u033e")
        buf.write("\u01a0\2\u1317\u1319\3\2\2\2\u1318\u1313\3\2\2\2\u1318")
        buf.write("\u1319\3\2\2\2\u1319\u131c\3\2\2\2\u131a\u131b\7\u017b")
        buf.write("\2\2\u131b\u131d\7\u017e\2\2\u131c\u131a\3\2\2\2\u131c")
        buf.write("\u131d\3\2\2\2\u131d\u131e\3\2\2\2\u131e\u131f\7\u02ec")
        buf.write("\2\2\u131f\u0213\3\2\2\2\u1320\u1321\7z\2\2\u1321\u132d")
        buf.write("\5\u0432\u021a\2\u1322\u1327\7\u02da\2\2\u1323\u1325\7")
        buf.write("\u02e0\2\2\u1324\u1323\3\2\2\2\u1324\u1325\3\2\2\2\u1325")
        buf.write("\u1326\3\2\2\2\u1326\u1328\5\u0216\u010c\2\u1327\u1324")
        buf.write("\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u1327\3\2\2\2\u1329")
        buf.write("\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132c\7\u02db")
        buf.write("\2\2\u132c\u132e\3\2\2\2\u132d\u1322\3\2\2\2\u132d\u132e")
        buf.write("\3\2\2\2\u132e\u1331\3\2\2\2\u132f\u1330\7\u01ef\2\2\u1330")
        buf.write("\u1332\5\u0416\u020c\2\u1331\u132f\3\2\2\2\u1331\u1332")
        buf.write("\3\2\2\2\u1332\u1335\3\2\2\2\u1333\u1334\7\u0114\2\2\u1334")
        buf.write("\u1336\5\u0282\u0142\2\u1335\u1333\3\2\2\2\u1335\u1336")
        buf.write("\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u1338\7\u02ec\2\2\u1338")
        buf.write("\u0215\3\2\2\2\u1339\u133e\5\u03ca\u01e6\2\u133a\u133c")
        buf.write("\7\u0103\2\2\u133b\u133a\3\2\2\2\u133b\u133c\3\2\2\2\u133c")
        buf.write("\u133d\3\2\2\2\u133d\u133f\5\u0416\u020c\2\u133e\u133b")
        buf.write("\3\2\2\2\u133e\u133f\3\2\2\2\u133f\u1341\3\2\2\2\u1340")
        buf.write("\u1342\5\u020a\u0106\2\u1341\u1340\3\2\2\2\u1341\u1342")
        buf.write("\3\2\2\2\u1342\u0217\3\2\2\2\u1343\u1344\5\u0432\u021a")
        buf.write("\2\u1344\u1345\7\u00bb\2\2\u1345\u1346\7\u02ec\2\2\u1346")
        buf.write("\u0219\3\2\2\2\u1347\u1366\7\u01ba\2\2\u1348\u1367\7\u0211")
        buf.write("\2\2\u1349\u1367\7&\2\2\u134a\u134b\7\u00bc\2\2\u134b")
        buf.write("\u134c\7\u02da\2\2\u134c\u134d\5\u03e2\u01f2\2\u134d\u134e")
        buf.write("\7\u02e0\2\2\u134e\u134f\5\u042e\u0218\2\u134f\u1350\7")
        buf.write("\u02db\2\2\u1350\u1367\3\2\2\2\u1351\u1352\7\u0107\2\2")
        buf.write("\u1352\u1353\7\u02da\2\2\u1353\u1354\5\u0432\u021a\2\u1354")
        buf.write("\u1355\7\u02e0\2\2\u1355\u1356\5\u033e\u01a0\2\u1356\u1357")
        buf.write("\7\u02db\2\2\u1357\u1367\3\2\2\2\u1358\u1359\7\u01e9\2")
        buf.write("\2\u1359\u135c\7\u02da\2\2\u135a\u135d\5\u0432\u021a\2")
        buf.write("\u135b\u135d\7\u008f\2\2\u135c\u135a\3\2\2\2\u135c\u135b")
        buf.write("\3\2\2\2\u135d\u1360\3\2\2\2\u135e\u135f\7\u02e0\2\2\u135f")
        buf.write("\u1361\5\u0432\u021a\2\u1360\u135e\3\2\2\2\u1361\u1362")
        buf.write("\3\2\2\2\u1362\u1360\3\2\2\2\u1362\u1363\3\2\2\2\u1363")
        buf.write("\u1364\3\2\2\2\u1364\u1365\7\u02db\2\2\u1365\u1367\3\2")
        buf.write("\2\2\u1366\u1348\3\2\2\2\u1366\u1349\3\2\2\2\u1366\u134a")
        buf.write("\3\2\2\2\u1366\u1351\3\2\2\2\u1366\u1358\3\2\2\2\u1367")
        buf.write("\u1368\3\2\2\2\u1368\u1369\7\u02ec\2\2\u1369\u021b\3\2")
        buf.write("\2\2\u136a\u136b\7\u01d3\2\2\u136b\u1370\7\u02da\2\2\u136c")
        buf.write("\u136e\7\u02e0\2\2\u136d\u136c\3\2\2\2\u136d\u136e\3\2")
        buf.write("\2\2\u136e\u136f\3\2\2\2\u136f\u1371\5\u021e\u0110\2\u1370")
        buf.write("\u136d\3\2\2\2\u1371\u1372\3\2\2\2\u1372\u1370\3\2\2\2")
        buf.write("\u1372\u1373\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1375\7")
        buf.write("\u02db\2\2\u1375\u021d\3\2\2\2\u1376\u1378\5\u03f6\u01fc")
        buf.write("\2\u1377\u1379\5\u0416\u020c\2\u1378\u1377\3\2\2\2\u1378")
        buf.write("\u1379\3\2\2\2\u1379\u137c\3\2\2\2\u137a\u137b\7\u017b")
        buf.write("\2\2\u137b\u137d\7\u017e\2\2\u137c\u137a\3\2\2\2\u137c")
        buf.write("\u137d\3\2\2\2\u137d\u137f\3\2\2\2\u137e\u1380\5\u020a")
        buf.write("\u0106\2\u137f\u137e\3\2\2\2\u137f\u1380\3\2\2\2\u1380")
        buf.write("\u021f\3\2\2\2\u1381\u1382\7\u01db\2\2\u1382\u1385\7z")
        buf.write("\2\2\u1383\u1384\7\u01ef\2\2\u1384\u1386\5\u0416\u020c")
        buf.write("\2\u1385\u1383\3\2\2\2\u1385\u1386\3\2\2\2\u1386\u0221")
        buf.write("\3\2\2\2\u1387\u1388\7\u0266\2\2\u1388\u1389\5\u0432\u021a")
        buf.write("\2\u1389\u138e\7\u0114\2\2\u138a\u138f\5\u0224\u0113\2")
        buf.write("\u138b\u138f\5\u0228\u0115\2\u138c\u138f\5\u021c\u010f")
        buf.write("\2\u138d\u138f\5\u0220\u0111\2\u138e\u138a\3\2\2\2\u138e")
        buf.write("\u138b\3\2\2\2\u138e\u138c\3\2\2\2\u138e\u138d\3\2\2\2")
        buf.write("\u138f\u1390\3\2\2\2\u1390\u1391\7\u02ec\2\2\u1391\u0223")
        buf.write("\3\2\2\2\u1392\u1393\7\u024a\2\2\u1393\u1394\7\u0186\2")
        buf.write("\2\u1394\u1396\5\u0416\u020c\2\u1395\u1397\5\u0226\u0114")
        buf.write("\2\u1396\u1395\3\2\2\2\u1396\u1397\3\2\2\2\u1397\u139a")
        buf.write("\3\2\2\2\u1398\u1399\7\u017b\2\2\u1399\u139b\7\u017e\2")
        buf.write("\2\u139a\u1398\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u0225")
        buf.write("\3\2\2\2\u139c\u139f\7\u00fc\2\2\u139d\u139f\7\u00fd\2")
        buf.write("\2\u139e\u139c\3\2\2\2\u139e\u139d\3\2\2\2\u139f\u13a0")
        buf.write("\3\2\2\2\u13a0\u13a1\7?\2\2\u13a1\u13a2\5\u0416\u020c")
        buf.write("\2\u13a2\u0227\3\2\2\2\u13a3\u13a7\7\u0282\2\2\u13a4\u13a5")
        buf.write("\7\u0283\2\2\u13a5\u13a7\7\27\2\2\u13a6\u13a3\3\2\2\2")
        buf.write("\u13a6\u13a4\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8\u13a9\7")
        buf.write("\u02da\2\2\u13a9\u13aa\5\u033e\u01a0\2\u13aa\u13ab\7\u02db")
        buf.write("\2\2\u13ab\u13ac\7\u0186\2\2\u13ac\u13af\5\u0416\u020c")
        buf.write("\2\u13ad\u13ae\7\u017b\2\2\u13ae\u13b0\7\u017e\2\2\u13af")
        buf.write("\u13ad\3\2\2\2\u13af\u13b0\3\2\2\2\u13b0\u0229\3\2\2\2")
        buf.write("\u13b1\u13b2\5\u022e\u0118\2\u13b2\u13b3\tA\2\2\u13b3")
        buf.write("\u13b6\3\2\2\2\u13b4\u13b6\5\u022c\u0117\2\u13b5\u13b1")
        buf.write("\3\2\2\2\u13b5\u13b4\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7")
        buf.write("\u13b5\3\2\2\2\u13b7\u13b8\3\2\2\2\u13b8\u022b\3\2\2\2")
        buf.write("\u13b9\u13ba\7\u02ea\2\2\u13ba\u13bb\7\u02ea\2\2\u13bb")
        buf.write("\u13bc\5\u03dc\u01ef\2\u13bc\u13bd\7\u02e9\2\2\u13bd\u13be")
        buf.write("\7\u02e9\2\2\u13be\u022d\3\2\2\2\u13bf\u13c0\7t\2\2\u13c0")
        buf.write("\u13d4\5\u0230\u0119\2\u13c1\u13c2\7\u0263\2\2\u13c2\u13d4")
        buf.write("\5\u0230\u0119\2\u13c3\u13d4\5\u0258\u012d\2\u13c4\u13d4")
        buf.write("\5\u025e\u0130\2\u13c5\u13d4\5\u0232\u011a\2\u13c6\u13d4")
        buf.write("\5\u0234\u011b\2\u13c7\u13d4\5\u0236\u011c\2\u13c8\u13d4")
        buf.write("\5\u0238\u011d\2\u13c9\u13d4\5\u023a\u011e\2\u13ca\u13d4")
        buf.write("\5\u0240\u0121\2\u13cb\u13d4\5\u0244\u0123\2\u13cc\u13d4")
        buf.write("\5\u024e\u0128\2\u13cd\u13d4\5\u0250\u0129\2\u13ce\u13d4")
        buf.write("\5\u0252\u012a\2\u13cf\u13d4\5\u035e\u01b0\2\u13d0\u13d4")
        buf.write("\5\u0260\u0131\2\u13d1\u13d4\5\u0254\u012b\2\u13d2\u13d4")
        buf.write("\5\u0256\u012c\2\u13d3\u13bf\3\2\2\2\u13d3\u13c1\3\2\2")
        buf.write("\2\u13d3\u13c3\3\2\2\2\u13d3\u13c4\3\2\2\2\u13d3\u13c5")
        buf.write("\3\2\2\2\u13d3\u13c6\3\2\2\2\u13d3\u13c7\3\2\2\2\u13d3")
        buf.write("\u13c8\3\2\2\2\u13d3\u13c9\3\2\2\2\u13d3\u13ca\3\2\2\2")
        buf.write("\u13d3\u13cb\3\2\2\2\u13d3\u13cc\3\2\2\2\u13d3\u13cd\3")
        buf.write("\2\2\2\u13d3\u13ce\3\2\2\2\u13d3\u13cf\3\2\2\2\u13d3\u13d0")
        buf.write("\3\2\2\2\u13d3\u13d1\3\2\2\2\u13d3\u13d2\3\2\2\2\u13d4")
        buf.write("\u022f\3\2\2\2\u13d5\u13d7\nB\2\2\u13d6\u13d5\3\2\2\2")
        buf.write("\u13d7\u13d8\3\2\2\2\u13d8\u13d6\3\2\2\2\u13d8\u13d9\3")
        buf.write("\2\2\2\u13d9\u0231\3\2\2\2\u13da\u13dd\5\u0420\u0211\2")
        buf.write("\u13db\u13dd\5\u041e\u0210\2\u13dc\u13da\3\2\2\2\u13dc")
        buf.write("\u13db\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13df\7\u02e3")
        buf.write("\2\2\u13df\u13e0\5\u033e\u01a0\2\u13e0\u0233\3\2\2\2\u13e1")
        buf.write("\u13e3\7n\2\2\u13e2\u13e4\5\u03dc\u01ef\2\u13e3\u13e2")
        buf.write("\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e7\3\2\2\2\u13e5")
        buf.write("\u13e6\7\u028c\2\2\u13e6\u13e8\5\u033a\u019e\2\u13e7\u13e5")
        buf.write("\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u0235\3\2\2\2\u13e9")
        buf.write("\u13eb\7\u00c4\2\2\u13ea\u13ec\5\u03dc\u01ef\2\u13eb\u13ea")
        buf.write("\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ef\3\2\2\2\u13ed")
        buf.write("\u13ee\7\u028c\2\2\u13ee\u13f0\5\u033a\u019e\2\u13ef\u13ed")
        buf.write("\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u0237\3\2\2\2\u13f1")
        buf.write("\u13f2\7\u00e6\2\2\u13f2\u13f3\5\u03dc\u01ef\2\u13f3\u0239")
        buf.write("\3\2\2\2\u13f4\u13f5\7\u00f5\2\2\u13f5\u13f6\5\u033a\u019e")
        buf.write("\2\u13f6\u13f7\7\u024e\2\2\u13f7\u13fb\5\u022a\u0116\2")
        buf.write("\u13f8\u13fa\5\u023c\u011f\2\u13f9\u13f8\3\2\2\2\u13fa")
        buf.write("\u13fd\3\2\2\2\u13fb\u13f9\3\2\2\2\u13fb\u13fc\3\2\2\2")
        buf.write("\u13fc\u13ff\3\2\2\2\u13fd\u13fb\3\2\2\2\u13fe\u1400\5")
        buf.write("\u023e\u0120\2\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2")
        buf.write("\u1400\u1401\3\2\2\2\u1401\u1402\7\u00b2\2\2\u1402\u1403")
        buf.write("\7\u00f5\2\2\u1403\u023b\3\2\2\2\u1404\u1405\7\u00ac\2")
        buf.write("\2\u1405\u1406\5\u033a\u019e\2\u1406\u1407\7\u024e\2\2")
        buf.write("\u1407\u1408\5\u022a\u0116\2\u1408\u023d\3\2\2\2\u1409")
        buf.write("\u140a\7\u00ab\2\2\u140a\u140b\5\u022a\u0116\2\u140b\u023f")
        buf.write("\3\2\2\2\u140c\u140e\5\u022c\u0117\2\u140d\u140c\3\2\2")
        buf.write("\2\u140d\u140e\3\2\2\2\u140e\u1413\3\2\2\2\u140f\u1410")
        buf.write("\7\u028e\2\2\u1410\u1414\5\u033a\u019e\2\u1411\u1412\7")
        buf.write("\u00dc\2\2\u1412\u1414\5\u0242\u0122\2\u1413\u140f\3\2")
        buf.write("\2\2\u1413\u1411\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1415")
        buf.write("\3\2\2\2\u1415\u1416\7\u0139\2\2\u1416\u1417\5\u022a\u0116")
        buf.write("\2\u1417\u1418\7\u00b2\2\2\u1418\u141a\7\u0139\2\2\u1419")
        buf.write("\u141b\5\u03dc\u01ef\2\u141a\u1419\3\2\2\2\u141a\u141b")
        buf.write("\3\2\2\2\u141b\u0241\3\2\2\2\u141c\u141d\5\u03ec\u01f7")
        buf.write("\2\u141d\u141f\7\u0103\2\2\u141e\u1420\7\u01f1\2\2\u141f")
        buf.write("\u141e\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u1421\3\2\2\2")
        buf.write("\u1421\u1422\5\u024a\u0126\2\u1422\u1423\7\u02d2\2\2\u1423")
        buf.write("\u1424\5\u024c\u0127\2\u1424\u1436\3\2\2\2\u1425\u1426")
        buf.write("\5\u03f0\u01f9\2\u1426\u1433\7\u0103\2\2\u1427\u142d\5")
        buf.write("\u03ee\u01f8\2\u1428\u142a\7\u02da\2\2\u1429\u142b\5\u033c")
        buf.write("\u019f\2\u142a\u1429\3\2\2\2\u142a\u142b\3\2\2\2\u142b")
        buf.write("\u142c\3\2\2\2\u142c\u142e\7\u02db\2\2\u142d\u1428\3\2")
        buf.write("\2\2\u142d\u142e\3\2\2\2\u142e\u1434\3\2\2\2\u142f\u1430")
        buf.write("\7\u02da\2\2\u1430\u1431\5\u0282\u0142\2\u1431\u1432\7")
        buf.write("\u02db\2\2\u1432\u1434\3\2\2\2\u1433\u1427\3\2\2\2\u1433")
        buf.write("\u142f\3\2\2\2\u1434\u1436\3\2\2\2\u1435\u141c\3\2\2\2")
        buf.write("\u1435\u1425\3\2\2\2\u1436\u0243\3\2\2\2\u1437\u1438\7")
        buf.write("\u00d9\2\2\u1438\u1439\5\u03ec\u01f7\2\u1439\u143a\7\u0103")
        buf.write("\2\2\u143a\u143b\5\u0246\u0124\2\u143b\u143e\5\u0260\u0131")
        buf.write("\2\u143c\u143d\7\u0201\2\2\u143d\u143f\7\u00bd\2\2\u143e")
        buf.write("\u143c\3\2\2\2\u143e\u143f\3\2\2\2\u143f\u0245\3\2\2\2")
        buf.write("\u1440\u1441\5\u024a\u0126\2\u1441\u1442\7\u02d2\2\2\u1442")
        buf.write("\u1443\5\u024c\u0127\2\u1443\u144e\3\2\2\2\u1444\u1445")
        buf.write("\7\u0100\2\2\u1445\u1446\7\u0186\2\2\u1446\u1448\5\u03f2")
        buf.write("\u01fa\2\u1447\u1449\5\u0248\u0125\2\u1448\u1447\3\2\2")
        buf.write("\2\u1448\u1449\3\2\2\2\u1449\u144e\3\2\2\2\u144a\u144b")
        buf.write("\7\u027c\2\2\u144b\u144c\7\u0186\2\2\u144c\u144e\5\u03ec")
        buf.write("\u01f7\2\u144d\u1440\3\2\2\2\u144d\u1444\3\2\2\2\u144d")
        buf.write("\u144a\3\2\2\2\u144e\u0247\3\2\2\2\u144f\u1450\7.\2\2")
        buf.write("\u1450\u1451\5\u024a\u0126\2\u1451\u1452\7\23\2\2\u1452")
        buf.write("\u1453\5\u024c\u0127\2\u1453\u0249\3\2\2\2\u1454\u1455")
        buf.write("\5\u0350\u01a9\2\u1455\u024b\3\2\2\2\u1456\u1457\5\u0350")
        buf.write("\u01a9\2\u1457\u024d\3\2\2\2\u1458\u1459\7\u017e\2\2\u1459")
        buf.write("\u024f\3\2\2\2\u145a\u145c\7\u01cc\2\2\u145b\u145d\5\u03e2")
        buf.write("\u01f2\2\u145c\u145b\3\2\2\2\u145c\u145d\3\2\2\2\u145d")
        buf.write("\u0251\3\2\2\2\u145e\u1460\7\u01ef\2\2\u145f\u1461\5\u033e")
        buf.write("\u01a0\2\u1460\u145f\3\2\2\2\u1460\u1461\3\2\2\2\u1461")
        buf.write("\u0253\3\2\2\2\u1462\u1464\7B\2\2\u1463\u1462\3\2\2\2")
        buf.write("\u1463\u1464\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u1467\5")
        buf.write("\u03c4\u01e3\2\u1466\u1468\5\u040c\u0207\2\u1467\u1466")
        buf.write("\3\2\2\2\u1467\u1468\3\2\2\2\u1468\u0255\3\2\2\2\u1469")
        buf.write("\u146a\7\u01b2\2\2\u146a\u146b\7\u01fb\2\2\u146b\u146c")
        buf.write("\7\u02da\2\2\u146c\u146d\5\u033e\u01a0\2\u146d\u146e\7")
        buf.write("\u02db\2\2\u146e\u0257\3\2\2\2\u146f\u1470\7-\2\2\u1470")
        buf.write("\u1477\5\u022a\u0116\2\u1471\u1473\7\u00bb\2\2\u1472\u1474")
        buf.write("\5\u025a\u012e\2\u1473\u1472\3\2\2\2\u1474\u1475\3\2\2")
        buf.write("\2\u1475\u1473\3\2\2\2\u1475\u1476\3\2\2\2\u1476\u1478")
        buf.write("\3\2\2\2\u1477\u1471\3\2\2\2\u1477\u1478\3\2\2\2\u1478")
        buf.write("\u1479\3\2\2\2\u1479\u147b\7\u00b2\2\2\u147a\u147c\5\u03dc")
        buf.write("\u01ef\2\u147b\u147a\3\2\2\2\u147b\u147c\3\2\2\2\u147c")
        buf.write("\u0259\3\2\2\2\u147d\u147e\7\u028c\2\2\u147e\u1483\5\u03e2")
        buf.write("\u01f2\2\u147f\u1480\7\u0195\2\2\u1480\u1482\5\u03e2\u01f2")
        buf.write("\2\u1481\u147f\3\2\2\2\u1482\u1485\3\2\2\2\u1483\u1481")
        buf.write("\3\2\2\2\u1483\u1484\3\2\2\2\u1484\u1486\3\2\2\2\u1485")
        buf.write("\u1483\3\2\2\2\u1486\u1487\7\u024e\2\2\u1487\u1488\5\u022a")
        buf.write("\u0116\2\u1488\u025b\3\2\2\2\u1489\u148b\7\u008a\2\2\u148a")
        buf.write("\u1489\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u148d\3\2\2\2")
        buf.write("\u148c\u148e\5\u020e\u0108\2\u148d\u148c\3\2\2\2\u148e")
        buf.write("\u148f\3\2\2\2\u148f\u148d\3\2\2\2\u148f\u1490\3\2\2\2")
        buf.write("\u1490\u1492\3\2\2\2\u1491\u148a\3\2\2\2\u1491\u1492\3")
        buf.write("\2\2\2\u1492\u1493\3\2\2\2\u1493\u1494\5\u0258\u012d\2")
        buf.write("\u1494\u025d\3\2\2\2\u1495\u1497\7\u008a\2\2\u1496\u1495")
        buf.write("\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u1499\3\2\2\2\u1498")
        buf.write("\u149a\5\u020e\u0108\2\u1499\u1498\3\2\2\2\u149a\u149b")
        buf.write("\3\2\2\2\u149b\u1499\3\2\2\2\u149b\u149c\3\2\2\2\u149c")
        buf.write("\u149d\3\2\2\2\u149d\u149e\5\u0258\u012d\2\u149e\u025f")
        buf.write("\3\2\2\2\u149f\u14a4\5\u0262\u0132\2\u14a0\u14a4\5\u0266")
        buf.write("\u0134\2\u14a1\u14a4\5\u0268\u0135\2\u14a2\u14a4\5\u0272")
        buf.write("\u013a\2\u14a3\u149f\3\2\2\2\u14a3\u14a0\3\2\2\2\u14a3")
        buf.write("\u14a1\3\2\2\2\u14a3\u14a2\3\2\2\2\u14a4\u0261\3\2\2\2")
        buf.write("\u14a5\u14a6\7\u00c1\2\2\u14a6\u14a7\7\u00f7\2\2\u14a7")
        buf.write("\u14b1\5\u033e\u01a0\2\u14a8\u14aa\5\u03b4\u01db\2\u14a9")
        buf.write("\u14ab\5\u0386\u01c4\2\u14aa\u14a9\3\2\2\2\u14aa\u14ab")
        buf.write("\3\2\2\2\u14ab\u14b2\3\2\2\2\u14ac\u14ae\5\u0386\u01c4")
        buf.write("\2\u14ad\u14af\5\u0264\u0133\2\u14ae\u14ad\3\2\2\2\u14ae")
        buf.write("\u14af\3\2\2\2\u14af\u14b2\3\2\2\2\u14b0\u14b2\5\u0264")
        buf.write("\u0133\2\u14b1\u14a8\3\2\2\2\u14b1\u14ac\3\2\2\2\u14b1")
        buf.write("\u14b0\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u0263\3\2\2\2")
        buf.write("\u14b3\u14b4\tC\2\2\u14b4\u14b5\5\u03b4\u01db\2\u14b5")
        buf.write("\u0265\3\2\2\2\u14b6\u14be\5\u0312\u018a\2\u14b7\u14be")
        buf.write("\5\u031e\u0190\2\u14b8\u14be\5\u0282\u0142\2\u14b9\u14be")
        buf.write("\5\u02f8\u017d\2\u14ba\u14be\5\u02fe\u0180\2\u14bb\u14be")
        buf.write("\5\u0300\u0181\2\u14bc\u14be\5\u0280\u0141\2\u14bd\u14b6")
        buf.write("\3\2\2\2\u14bd\u14b7\3\2\2\2\u14bd\u14b8\3\2\2\2\u14bd")
        buf.write("\u14b9\3\2\2\2\u14bd\u14ba\3\2\2\2\u14bd\u14bb\3\2\2\2")
        buf.write("\u14bd\u14bc\3\2\2\2\u14be\u0267\3\2\2\2\u14bf\u14c4\5")
        buf.write("\u026a\u0136\2\u14c0\u14c4\5\u026c\u0137\2\u14c1\u14c4")
        buf.write("\5\u026e\u0138\2\u14c2\u14c4\5\u0270\u0139\2\u14c3\u14bf")
        buf.write("\3\2\2\2\u14c3\u14c0\3\2\2\2\u14c3\u14c1\3\2\2\2\u14c3")
        buf.write("\u14c2\3\2\2\2\u14c4\u0269\3\2\2\2\u14c5\u14c6\7S\2\2")
        buf.write("\u14c6\u14c7\5\u03ee\u01f8\2\u14c7\u026b\3\2\2\2\u14c8")
        buf.write("\u14c9\7\u018e\2\2\u14c9\u14cf\5\u03ee\u01f8\2\u14ca\u14cc")
        buf.write("\7\u02da\2\2\u14cb\u14cd\5\u033c\u019f\2\u14cc\u14cb\3")
        buf.write("\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14d0")
        buf.write("\7\u02db\2\2\u14cf\u14ca\3\2\2\2\u14cf\u14d0\3\2\2\2\u14d0")
        buf.write("\u026d\3\2\2\2\u14d1\u14d2\7\u00ce\2\2\u14d2\u14e7\5\u03ee")
        buf.write("\u01f8\2\u14d3\u14d8\7\u0112\2\2\u14d4\u14d6\7\u02e0\2")
        buf.write("\2\u14d5\u14d4\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d7")
        buf.write("\3\2\2\2\u14d7\u14d9\5\u03ea\u01f6\2\u14d8\u14d5\3\2\2")
        buf.write("\2\u14d9\u14da\3\2\2\2\u14da\u14d8\3\2\2\2\u14da\u14db")
        buf.write("\3\2\2\2\u14db\u14e8\3\2\2\2\u14dc\u14dd\7>\2\2\u14dd")
        buf.write("\u14de\7V\2\2\u14de\u14e3\7\u0112\2\2\u14df\u14e1\7\u02e0")
        buf.write("\2\2\u14e0\u14df\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u14e2")
        buf.write("\3\2\2\2\u14e2\u14e4\5\u03ea\u01f6\2\u14e3\u14e0\3\2\2")
        buf.write("\2\u14e4\u14e5\3\2\2\2\u14e5\u14e3\3\2\2\2\u14e5\u14e6")
        buf.write("\3\2\2\2\u14e6\u14e8\3\2\2\2\u14e7\u14d3\3\2\2\2\u14e7")
        buf.write("\u14dc\3\2\2\2\u14e8\u026f\3\2\2\2\u14e9\u14ea\7\u018e")
        buf.write("\2\2\u14ea\u14eb\5\u03ea\u01f6\2\u14eb\u14ee\7\u00dc\2")
        buf.write("\2\u14ec\u14ef\5\u0282\u0142\2\u14ed\u14ef\5\u033e\u01a0")
        buf.write("\2\u14ee\u14ec\3\2\2\2\u14ee\u14ed\3\2\2\2\u14ef\u14f1")
        buf.write("\3\2\2\2\u14f0\u14f2\5\u0386\u01c4\2\u14f1\u14f0\3\2\2")
        buf.write("\2\u14f1\u14f2\3\2\2\2\u14f2\u0271\3\2\2\2\u14f3\u14f9")
        buf.write("\5\u0274\u013b\2\u14f4\u14f9\5\u0276\u013c\2\u14f5\u14f9")
        buf.write("\5\u0278\u013d\2\u14f6\u14f9\5\u027c\u013f\2\u14f7\u14f9")
        buf.write("\5\u027e\u0140\2\u14f8\u14f3\3\2\2\2\u14f8\u14f4\3\2\2")
        buf.write("\2\u14f8\u14f5\3\2\2\2\u14f8\u14f6\3\2\2\2\u14f8\u14f7")
        buf.write("\3\2\2\2\u14f9\u0273\3\2\2\2\u14fa\u14fb\7\u0215\2\2\u14fb")
        buf.write("\u1509\7\u025c\2\2\u14fc\u14fd\7\u01cf\2\2\u14fd\u150a")
        buf.write("\tD\2\2\u14fe\u14ff\7\u0115\2\2\u14ff\u1503\7\u0123\2")
        buf.write("\2\u1500\u1504\7\u0210\2\2\u1501\u1502\7\u01cf\2\2\u1502")
        buf.write("\u1504\7\\\2\2\u1503\u1500\3\2\2\2\u1503\u1501\3\2\2\2")
        buf.write("\u1504\u150a\3\2\2\2\u1505\u1506\7\u0279\2\2\u1506\u1507")
        buf.write("\7\u01f7\2\2\u1507\u1508\7\u020b\2\2\u1508\u150a\5\u03be")
        buf.write("\u01e0\2\u1509\u14fc\3\2\2\2\u1509\u14fe\3\2\2\2\u1509")
        buf.write("\u1505\3\2\2\2\u1509\u150a\3\2\2\2\u150a\u150d\3\2\2\2")
        buf.write("\u150b\u150c\7\u015a\2\2\u150c\u150e\5\u0430\u0219\2\u150d")
        buf.write("\u150b\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u0275\3\2\2\2")
        buf.write("\u150f\u1510\7\u0215\2\2\u1510\u151a\tE\2\2\u1511\u151b")
        buf.write("\7\r\2\2\u1512\u1514\7\u02e0\2\2\u1513\u1512\3\2\2\2\u1513")
        buf.write("\u1514\3\2\2\2\u1514\u1515\3\2\2\2\u1515\u1517\5\u03da")
        buf.write("\u01ee\2\u1516\u1513\3\2\2\2\u1517\u1518\3\2\2\2\u1518")
        buf.write("\u1516\3\2\2\2\u1518\u1519\3\2\2\2\u1519\u151b\3\2\2\2")
        buf.write("\u151a\u1511\3\2\2\2\u151a\u1516\3\2\2\2\u151b\u151c\3")
        buf.write("\2\2\2\u151c\u151d\t\32\2\2\u151d\u0277\3\2\2\2\u151e")
        buf.write("\u1520\7[\2\2\u151f\u1521\7\u0292\2\2\u1520\u151f\3\2")
        buf.write("\2\2\u1520\u1521\3\2\2\2\u1521\u152f\3\2\2\2\u1522\u1523")
        buf.write("\7Z\2\2\u1523\u1530\5\u033e\u01a0\2\u1524\u152d\7\u00da")
        buf.write("\2\2\u1525\u1526\7q\2\2\u1526\u152e\5\u033e\u01a0\2\u1527")
        buf.write("\u152e\7p\2\2\u1528\u152b\5\u033e\u01a0\2\u1529\u152a")
        buf.write("\7\u02e0\2\2\u152a\u152c\5\u033e\u01a0\2\u152b\u1529\3")
        buf.write("\2\2\2\u152b\u152c\3\2\2\2\u152c\u152e\3\2\2\2\u152d\u1525")
        buf.write("\3\2\2\2\u152d\u1527\3\2\2\2\u152d\u1528\3\2\2\2\u152e")
        buf.write("\u1530\3\2\2\2\u152f\u1522\3\2\2\2\u152f\u1524\3\2\2\2")
        buf.write("\u152f\u1530\3\2\2\2\u1530\u1532\3\2\2\2\u1531\u1533\5")
        buf.write("\u027a\u013e\2\u1532\u1531\3\2\2\2\u1532\u1533\3\2\2\2")
        buf.write("\u1533\u0279\3\2\2\2\u1534\u1536\7\u0293\2\2\u1535\u1537")
        buf.write("\tF\2\2\u1536\u1535\3\2\2\2\u1536\u1537\3\2\2\2\u1537")
        buf.write("\u1539\3\2\2\2\u1538\u153a\tG\2\2\u1539\u1538\3\2\2\2")
        buf.write("\u1539\u153a\3\2\2\2\u153a\u027b\3\2\2\2\u153b\u153d\7")
        buf.write("\u01f7\2\2\u153c\u153e\7\u0292\2\2\u153d\u153c\3\2\2\2")
        buf.write("\u153d\u153e\3\2\2\2\u153e\u1546\3\2\2\2\u153f\u1541\7")
        buf.write("\u025a\2\2\u1540\u1542\7\u0200\2\2\u1541\u1540\3\2\2\2")
        buf.write("\u1541\u1542\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u1547\5")
        buf.write("\u03bc\u01df\2\u1544\u1545\7\u00da\2\2\u1545\u1547\5\u0430")
        buf.write("\u0219\2\u1546\u153f\3\2\2\2\u1546\u1544\3\2\2\2\u1546")
        buf.write("\u1547\3\2\2\2\u1547\u027d\3\2\2\2\u1548\u1549\7\u0200")
        buf.write("\2\2\u1549\u154a\5\u03bc\u01df\2\u154a\u027f\3\2\2\2\u154b")
        buf.write("\u154c\7\u00c6\2\2\u154c\u1551\7\u01b4\2\2\u154d\u154e")
        buf.write("\7\u0215\2\2\u154e\u154f\7\u0230\2\2\u154f\u1550\7\u02ee")
        buf.write("\2\2\u1550\u1552\5\u0430\u0219\2\u1551\u154d\3\2\2\2\u1551")
        buf.write("\u1552\3\2\2\2\u1552\u1555\3\2\2\2\u1553\u1554\7\u0112")
        buf.write("\2\2\u1554\u1556\5\u03f8\u01fd\2\u1555\u1553\3\2\2\2\u1555")
        buf.write("\u1556\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u155d\7\u00dc")
        buf.write("\2\2\u1558\u155e\5\u0282\u0142\2\u1559\u155e\5\u02f8\u017d")
        buf.write("\2\u155a\u155e\5\u02fe\u0180\2\u155b\u155e\5\u0300\u0181")
        buf.write("\2\u155c\u155e\5\u0312\u018a\2\u155d\u1558\3\2\2\2\u155d")
        buf.write("\u1559\3\2\2\2\u155d\u155a\3\2\2\2\u155d\u155b\3\2\2\2")
        buf.write("\u155d\u155c\3\2\2\2\u155e\u0281\3\2\2\2\u155f\u1561\5")
        buf.write("\u0284\u0143\2\u1560\u155f\3\2\2\2\u1560\u1561\3\2\2\2")
        buf.write("\u1561\u1562\3\2\2\2\u1562\u1567\5\u028c\u0147\2\u1563")
        buf.write("\u1566\5\u02f2\u017a\2\u1564\u1566\5\u02ee\u0178\2\u1565")
        buf.write("\u1563\3\2\2\2\u1565\u1564\3\2\2\2\u1566\u1569\3\2\2\2")
        buf.write("\u1567\u1565\3\2\2\2\u1567\u1568\3\2\2\2\u1568\u0283\3")
        buf.write("\2\2\2\u1569\u1567\3\2\2\2\u156a\u156f\7\u0291\2\2\u156b")
        buf.write("\u156d\7\u02e0\2\2\u156c\u156b\3\2\2\2\u156c\u156d\3\2")
        buf.write("\2\2\u156d\u156e\3\2\2\2\u156e\u1570\5\u0286\u0144\2\u156f")
        buf.write("\u156c\3\2\2\2\u1570\u1571\3\2\2\2\u1571\u156f\3\2\2\2")
        buf.write("\u1571\u1572\3\2\2\2\u1572\u0285\3\2\2\2\u1573\u1575\5")
        buf.write("\u03d4\u01eb\2\u1574\u1576\5\u0408\u0205\2\u1575\u1574")
        buf.write("\3\2\2\2\u1575\u1576\3\2\2\2\u1576\u1577\3\2\2\2\u1577")
        buf.write("\u1578\7\30\2\2\u1578\u1579\7\u02da\2\2\u1579\u157b\5")
        buf.write("\u028c\u0147\2\u157a\u157c\5\u02ee\u0178\2\u157b\u157a")
        buf.write("\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u157d\3\2\2\2\u157d")
        buf.write("\u157f\7\u02db\2\2\u157e\u1580\5\u0288\u0145\2\u157f\u157e")
        buf.write("\3\2\2\2\u157f\u1580\3\2\2\2\u1580\u1582\3\2\2\2\u1581")
        buf.write("\u1583\5\u028a\u0146\2\u1582\u1581\3\2\2\2\u1582\u1583")
        buf.write("\3\2\2\2\u1583\u0287\3\2\2\2\u1584\u1585\7\u0207\2\2\u1585")
        buf.write("\u1586\tH\2\2\u1586\u1587\7\u00d1\2\2\u1587\u1588\7?\2")
        buf.write("\2\u1588\u158a\5\u03f6\u01fc\2\u1589\u158b\7\31\2\2\u158a")
        buf.write("\u1589\3\2\2\2\u158a\u158b\3\2\2\2\u158b\u158d\3\2\2\2")
        buf.write("\u158c\u158e\7\u0098\2\2\u158d\u158c\3\2\2\2\u158d\u158e")
        buf.write("\3\2\2\2\u158e\u1591\3\2\2\2\u158f\u1590\7\u017f\2\2\u1590")
        buf.write("\u1592\7\u00d1\2\2\u1591\u158f\3\2\2\2\u1591\u1592\3\2")
        buf.write("\2\2\u1592\u1595\3\2\2\2\u1593\u1594\7\u017f\2\2\u1594")
        buf.write("\u1596\7\u011e\2\2\u1595\u1593\3\2\2\2\u1595\u1596\3\2")
        buf.write("\2\2\u1596\u15a9\3\2\2\2\u1597\u1598\7\u02e0\2\2\u1598")
        buf.write("\u159a\5\u03f6\u01fc\2\u1599\u159b\7\31\2\2\u159a\u1599")
        buf.write("\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u159d\3\2\2\2\u159c")
        buf.write("\u159e\7\u0098\2\2\u159d\u159c\3\2\2\2\u159d\u159e\3\2")
        buf.write("\2\2\u159e\u15a1\3\2\2\2\u159f\u15a0\7\u017f\2\2\u15a0")
        buf.write("\u15a2\7\u00d1\2\2\u15a1\u159f\3\2\2\2\u15a1\u15a2\3\2")
        buf.write("\2\2\u15a2\u15a5\3\2\2\2\u15a3\u15a4\7\u017f\2\2\u15a4")
        buf.write("\u15a6\7\u011e\2\2\u15a5\u15a3\3\2\2\2\u15a5\u15a6\3\2")
        buf.write("\2\2\u15a6\u15a8\3\2\2\2\u15a7\u1597\3\2\2\2\u15a8\u15ab")
        buf.write("\3\2\2\2\u15a9\u15a7\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa")
        buf.write("\u15ac\3\2\2\2\u15ab\u15a9\3\2\2\2\u15ac\u15ad\7\u0215")
        buf.write("\2\2\u15ad\u15ae\5\u03f6\u01fc\2\u15ae\u0289\3\2\2\2\u15af")
        buf.write("\u15b0\7|\2\2\u15b0\u15b1\5\u0406\u0204\2\u15b1\u15b2")
        buf.write("\7\u0215\2\2\u15b2\u15b3\5\u03f6\u01fc\2\u15b3\u15b4\7")
        buf.write("\u025a\2\2\u15b4\u15b5\5\u033e\u01a0\2\u15b5\u15b6\7\u008f")
        buf.write("\2\2\u15b6\u15b7\5\u033e\u01a0\2\u15b7\u028b\3\2\2\2\u15b8")
        buf.write("\u15bc\5\u028e\u0148\2\u15b9\u15bb\5\u0290\u0149\2\u15ba")
        buf.write("\u15b9\3\2\2\2\u15bb\u15be\3\2\2\2\u15bc\u15ba\3\2\2\2")
        buf.write("\u15bc\u15bd\3\2\2\2\u15bd\u028d\3\2\2\2\u15be\u15bc\3")
        buf.write("\2\2\2\u15bf\u15c5\5\u0292\u014a\2\u15c0\u15c1\7\u02da")
        buf.write("\2\2\u15c1\u15c2\5\u028c\u0147\2\u15c2\u15c3\7\u02db\2")
        buf.write("\2\u15c3\u15c5\3\2\2\2\u15c4\u15bf\3\2\2\2\u15c4\u15c0")
        buf.write("\3\2\2\2\u15c5\u028f\3\2\2\2\u15c6\u15c8\7\u026b\2\2\u15c7")
        buf.write("\u15c9\7\r\2\2\u15c8\u15c7\3\2\2\2\u15c8\u15c9\3\2\2\2")
        buf.write("\u15c9\u15cd\3\2\2\2\u15ca\u15cd\7\u010f\2\2\u15cb\u15cd")
        buf.write("\7\u014f\2\2\u15cc\u15c6\3\2\2\2\u15cc\u15ca\3\2\2\2\u15cc")
        buf.write("\u15cb\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce\u15cf\5\u028e")
        buf.write("\u0148\2\u15cf\u0291\3\2\2\2\u15d0\u15d2\7\u020c\2\2\u15d1")
        buf.write("\u15d3\tI\2\2\u15d2\u15d1\3\2\2\2\u15d2\u15d3\3\2\2\2")
        buf.write("\u15d3\u15dd\3\2\2\2\u15d4\u15de\7\u02dd\2\2\u15d5\u15d7")
        buf.write("\7\u02e0\2\2\u15d6\u15d5\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7")
        buf.write("\u15d8\3\2\2\2\u15d8\u15da\5\u0294\u014b\2\u15d9\u15d6")
        buf.write("\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15d9\3\2\2\2\u15db")
        buf.write("\u15dc\3\2\2\2\u15dc\u15de\3\2\2\2\u15dd\u15d4\3\2\2\2")
        buf.write("\u15dd\u15d9\3\2\2\2\u15de\u15e0\3\2\2\2\u15df\u15e1\5")
        buf.write("\u03b4\u01db\2\u15e0\u15df\3\2\2\2\u15e0\u15e1\3\2\2\2")
        buf.write("\u15e1\u15e2\3\2\2\2\u15e2\u15e4\5\u0296\u014c\2\u15e3")
        buf.write("\u15e5\5\u03b2\u01da\2\u15e4\u15e3\3\2\2\2\u15e4\u15e5")
        buf.write("\3\2\2\2\u15e5\u15e7\3\2\2\2\u15e6\u15e8\5\u02c0\u0161")
        buf.write("\2\u15e7\u15e6\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8\u15ea")
        buf.write("\3\2\2\2\u15e9\u15eb\5\u02c4\u0163\2\u15ea\u15e9\3\2\2")
        buf.write("\2\u15ea\u15eb\3\2\2\2\u15eb\u15ed\3\2\2\2\u15ec\u15ee")
        buf.write("\5\u02d0\u0169\2\u15ed\u15ec\3\2\2\2\u15ed\u15ee\3\2\2")
        buf.write("\2\u15ee\u0293\3\2\2\2\u15ef\u15f1\5\u0298\u014d\2\u15f0")
        buf.write("\u15f2\5\u03ae\u01d8\2\u15f1\u15f0\3\2\2\2\u15f1\u15f2")
        buf.write("\3\2\2\2\u15f2\u0295\3\2\2\2\u15f3\u15f4\7\u00e0\2\2\u15f4")
        buf.write("\u15f5\5\u029a\u014e\2\u15f5\u0297\3\2\2\2\u15f6\u15f7")
        buf.write("\5\u03f8\u01fd\2\u15f7\u15f8\7\u02d3\2\2\u15f8\u15f9\7")
        buf.write("\u02dd\2\2\u15f9\u1601\3\2\2\2\u15fa\u15fb\5\u0438\u021d")
        buf.write("\2\u15fb\u15fc\7\u02d3\2\2\u15fc\u15fe\3\2\2\2\u15fd\u15fa")
        buf.write("\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u15ff\3\2\2\2\u15ff")
        buf.write("\u1601\5\u033e\u01a0\2\u1600\u15f6\3\2\2\2\u1600\u15fd")
        buf.write("\3\2\2\2\u1601\u0299\3\2\2\2\u1602\u1604\7\u02e0\2\2\u1603")
        buf.write("\u1602\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u1605\3\2\2\2")
        buf.write("\u1605\u1607\5\u029c\u014f\2\u1606\u1603\3\2\2\2\u1607")
        buf.write("\u1608\3\2\2\2\u1608\u1606\3\2\2\2\u1608\u1609\3\2\2\2")
        buf.write("\u1609\u029b\3\2\2\2\u160a\u160e\5\u029e\u0150\2\u160b")
        buf.write("\u160d\5\u02a2\u0152\2\u160c\u160b\3\2\2\2\u160d\u1610")
        buf.write("\3\2\2\2\u160e\u160c\3\2\2\2\u160e\u160f\3\2\2\2\u160f")
        buf.write("\u1613\3\2\2\2\u1610\u160e\3\2\2\2\u1611\u1614\5\u02ae")
        buf.write("\u0158\2\u1612\u1614\5\u02ba\u015e\2\u1613\u1611\3\2\2")
        buf.write("\2\u1613\u1612\3\2\2\2\u1613\u1614\3\2\2\2\u1614\u029d")
        buf.write("\3\2\2\2\u1615\u1619\5\u02a0\u0151\2\u1616\u1618\5\u02ac")
        buf.write("\u0157\2\u1617\u1616\3\2\2\2\u1618\u161b\3\2\2\2\u1619")
        buf.write("\u1617\3\2\2\2\u1619\u161a\3\2\2\2\u161a\u161d\3\2\2\2")
        buf.write("\u161b\u1619\3\2\2\2\u161c\u161e\5\u03b0\u01d9\2\u161d")
        buf.write("\u161c\3\2\2\2\u161d\u161e\3\2\2\2\u161e\u029f\3\2\2\2")
        buf.write("\u161f\u1622\5\u0330\u0199\2\u1620\u1623\5\u02ae\u0158")
        buf.write("\2\u1621\u1623\5\u02ba\u015e\2\u1622\u1620\3\2\2\2\u1622")
        buf.write("\u1621\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1637\3\2\2\2")
        buf.write("\u1624\u1625\7\u02da\2\2\u1625\u1629\5\u029c\u014f\2\u1626")
        buf.write("\u1628\5\u0290\u0149\2\u1627\u1626\3\2\2\2\u1628\u162b")
        buf.write("\3\2\2\2\u1629\u1627\3\2\2\2\u1629\u162a\3\2\2\2\u162a")
        buf.write("\u162c\3\2\2\2\u162b\u1629\3\2\2\2\u162c\u162f\7\u02db")
        buf.write("\2\2\u162d\u1630\5\u02ae\u0158\2\u162e\u1630\5\u02ba\u015e")
        buf.write("\2\u162f\u162d\3\2\2\2\u162f\u162e\3\2\2\2\u162f\u1630")
        buf.write("\3\2\2\2\u1630\u1637\3\2\2\2\u1631\u1632\7\u018c\2\2\u1632")
        buf.write("\u1633\7\u02da\2\2\u1633\u1634\5\u0330\u0199\2\u1634\u1635")
        buf.write("\7\u02db\2\2\u1635\u1637\3\2\2\2\u1636\u161f\3\2\2\2\u1636")
        buf.write("\u1624\3\2\2\2\u1636\u1631\3\2\2\2\u1637\u02a1\3\2\2\2")
        buf.write("\u1638\u163a\5\u02aa\u0156\2\u1639\u1638\3\2\2\2\u1639")
        buf.write("\u163a\3\2\2\2\u163a\u163c\3\2\2\2\u163b\u163d\tJ\2\2")
        buf.write("\u163c\u163b\3\2\2\2\u163c\u163d\3\2\2\2\u163d\u1640\3")
        buf.write("\2\2\2\u163e\u1641\7\u0108\2\2\u163f\u1641\5\u02a8\u0155")
        buf.write("\2\u1640\u163e\3\2\2\2\u1640\u163f\3\2\2\2\u1640\u1641")
        buf.write("\3\2\2\2\u1641\u1642\3\2\2\2\u1642\u1643\7\u0119\2\2\u1643")
        buf.write("\u1645\5\u029e\u0150\2\u1644\u1646\5\u02aa\u0156\2\u1645")
        buf.write("\u1644\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u164b\3\2\2\2")
        buf.write("\u1647\u164a\5\u02a4\u0153\2\u1648\u164a\5\u02a6\u0154")
        buf.write("\2\u1649\u1647\3\2\2\2\u1649\u1648\3\2\2\2\u164a\u164d")
        buf.write("\3\2\2\2\u164b\u1649\3\2\2\2\u164b\u164c\3\2\2\2\u164c")
        buf.write("\u02a3\3\2\2\2\u164d\u164b\3\2\2\2\u164e\u164f\7\u018d")
        buf.write("\2\2\u164f\u1650\5\u033a\u019e\2\u1650\u02a5\3\2\2\2\u1651")
        buf.write("\u1652\7\u027a\2\2\u1652\u1653\5\u0408\u0205\2\u1653\u02a7")
        buf.write("\3\2\2\2\u1654\u1656\tK\2\2\u1655\u1657\7\u0197\2\2\u1656")
        buf.write("\u1655\3\2\2\2\u1656\u1657\3\2\2\2\u1657\u02a9\3\2\2\2")
        buf.write("\u1658\u1659\7\u01a2\2\2\u1659\u1661\7?\2\2\u165a\u165d")
        buf.write("\7\u02da\2\2\u165b\u165e\5\u028c\u0147\2\u165c\u165e\5")
        buf.write("\u033c\u019f\2\u165d\u165b\3\2\2\2\u165d\u165c\3\2\2\2")
        buf.write("\u165d\u165e\3\2\2\2\u165e\u165f\3\2\2\2\u165f\u1662\7")
        buf.write("\u02db\2\2\u1660\u1662\5\u033c\u019f\2\u1661\u165a\3\2")
        buf.write("\2\2\u1661\u1660\3\2\2\2\u1662\u02ab\3\2\2\2\u1663\u1664")
        buf.write("\7\u0284\2\2\u1664\u1665\7.\2\2\u1665\u1666\tL\2\2\u1666")
        buf.write("\u166c\5\u033e\u01a0\2\u1667\u1668\7\30\2\2\u1668\u1669")
        buf.write("\7\u0186\2\2\u1669\u166a\tM\2\2\u166a\u166c\5\u033e\u01a0")
        buf.write("\2\u166b\u1663\3\2\2\2\u166b\u1667\3\2\2\2\u166c\u02ad")
        buf.write("\3\2\2\2\u166d\u166f\7\u01b3\2\2\u166e\u1670\7\u02a4\2")
        buf.write("\2\u166f\u166e\3\2\2\2\u166f\u1670\3\2\2\2\u1670\u1671")
        buf.write("\3\2\2\2\u1671\u1676\7\u02da\2\2\u1672\u1674\7\u02e0\2")
        buf.write("\2\u1673\u1672\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1675")
        buf.write("\3\2\2\2\u1675\u1677\5\u02b0\u0159\2\u1676\u1673\3\2\2")
        buf.write("\2\u1677\u1678\3\2\2\2\u1678\u1676\3\2\2\2\u1678\u1679")
        buf.write("\3\2\2\2\u1679\u167a\3\2\2\2\u167a\u167b\5\u02b2\u015a")
        buf.write("\2\u167b\u167c\5\u02b4\u015b\2\u167c\u167d\7\u02db\2\2")
        buf.write("\u167d\u02af\3\2\2\2\u167e\u167f\5\u03d2\u01ea\2\u167f")
        buf.write("\u1680\7\u02da\2\2\u1680\u1681\5\u033e\u01a0\2\u1681\u1683")
        buf.write("\7\u02db\2\2\u1682\u1684\5\u03ae\u01d8\2\u1683\u1682\3")
        buf.write("\2\2\2\u1683\u1684\3\2\2\2\u1684\u02b1\3\2\2\2\u1685\u1688")
        buf.write("\7\u00dc\2\2\u1686\u1689\5\u03f6\u01fc\2\u1687\u1689\5")
        buf.write("\u0408\u0205\2\u1688\u1686\3\2\2\2\u1688\u1687\3\2\2\2")
        buf.write("\u1689\u02b3\3\2\2\2\u168a\u168b\7\u0103\2\2\u168b\u169d")
        buf.write("\7\u02da\2\2\u168c\u169e\5\u028c\u0147\2\u168d\u168f\7")
        buf.write("\u02e0\2\2\u168e\u168d\3\2\2\2\u168e\u168f\3\2\2\2\u168f")
        buf.write("\u1690\3\2\2\2\u1690\u1692\7\24\2\2\u1691\u168e\3\2\2")
        buf.write("\2\u1692\u1693\3\2\2\2\u1693\u1691\3\2\2\2\u1693\u1694")
        buf.write("\3\2\2\2\u1694\u169e\3\2\2\2\u1695\u1697\7\u02e0\2\2\u1696")
        buf.write("\u1695\3\2\2\2\u1696\u1697\3\2\2\2\u1697\u1698\3\2\2\2")
        buf.write("\u1698\u169a\5\u02b6\u015c\2\u1699\u1696\3\2\2\2\u169a")
        buf.write("\u169b\3\2\2\2\u169b\u1699\3\2\2\2\u169b\u169c\3\2\2\2")
        buf.write("\u169c\u169e\3\2\2\2\u169d\u168c\3\2\2\2\u169d\u1691\3")
        buf.write("\2\2\2\u169d\u1699\3\2\2\2\u169e\u169f\3\2\2\2\u169f\u16a0")
        buf.write("\7\u02db\2\2\u16a0\u02b5\3\2\2\2\u16a1\u16a3\5\u02b8\u015d")
        buf.write("\2\u16a2\u16a4\5\u03ae\u01d8\2\u16a3\u16a2\3\2\2\2\u16a3")
        buf.write("\u16a4\3\2\2\2\u16a4\u02b7\3\2\2\2\u16a5\u16ac\5\u033e")
        buf.write("\u01a0\2\u16a6\u16a8\7\u02da\2\2\u16a7\u16a9\5\u033c\u019f")
        buf.write("\2\u16a8\u16a7\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u16aa")
        buf.write("\3\2\2\2\u16aa\u16ac\7\u02db\2\2\u16ab\u16a5\3\2\2\2\u16ab")
        buf.write("\u16a6\3\2\2\2\u16ac\u02b9\3\2\2\2\u16ad\u16b0\7\u026f")
        buf.write("\2\2\u16ae\u16af\tN\2\2\u16af\u16b1\7\u017f\2\2\u16b0")
        buf.write("\u16ae\3\2\2\2\u16b0\u16b1\3\2\2\2\u16b1\u16b2\3\2\2\2")
        buf.write("\u16b2\u16b5\7\u02da\2\2\u16b3\u16b6\5\u03f6\u01fc\2\u16b4")
        buf.write("\u16b6\5\u0408\u0205\2\u16b5\u16b3\3\2\2\2\u16b5\u16b4")
        buf.write("\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16b8\5\u02b2\u015a")
        buf.write("\2\u16b8\u16b9\5\u02bc\u015f\2\u16b9\u16ba\7\u02db\2\2")
        buf.write("\u16ba\u02bb\3\2\2\2\u16bb\u16bc\7\u0103\2\2\u16bc\u16c1")
        buf.write("\7\u02da\2\2\u16bd\u16bf\7\u02e0\2\2\u16be\u16bd\3\2\2")
        buf.write("\2\u16be\u16bf\3\2\2\2\u16bf\u16c0\3\2\2\2\u16c0\u16c2")
        buf.write("\5\u02be\u0160\2\u16c1\u16be\3\2\2\2\u16c2\u16c3\3\2\2")
        buf.write("\2\u16c3\u16c1\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c5")
        buf.write("\3\2\2\2\u16c5\u16c6\7\u02db\2\2\u16c6\u02bd\3\2\2\2\u16c7")
        buf.write("\u16ca\5\u03f6\u01fc\2\u16c8\u16ca\5\u0408\u0205\2\u16c9")
        buf.write("\u16c7\3\2\2\2\u16c9\u16c8\3\2\2\2\u16ca\u16da\3\2\2\2")
        buf.write("\u16cb\u16d8\7\30\2\2\u16cc\u16d9\5\u042a\u0216\2\u16cd")
        buf.write("\u16d2\7\u02da\2\2\u16ce\u16d0\7\u02e0\2\2\u16cf\u16ce")
        buf.write("\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1")
        buf.write("\u16d3\5\u042a\u0216\2\u16d2\u16cf\3\2\2\2\u16d3\u16d4")
        buf.write("\3\2\2\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5")
        buf.write("\u16d6\3\2\2\2\u16d6\u16d7\7\u02db\2\2\u16d7\u16d9\3\2")
        buf.write("\2\2\u16d8\u16cc\3\2\2\2\u16d8\u16cd\3\2\2\2\u16d9\u16db")
        buf.write("\3\2\2\2\u16da\u16cb\3\2\2\2\u16da\u16db\3\2\2\2\u16db")
        buf.write("\u02bf\3\2\2\2\u16dc\u16dd\7e\2\2\u16dd\u16df\7?\2\2\u16de")
        buf.write("\u16e0\7\u016a\2\2\u16df\u16de\3\2\2\2\u16df\u16e0\3\2")
        buf.write("\2\2\u16e0\u16e1\3\2\2\2\u16e1\u16e3\5\u033a\u019e\2\u16e2")
        buf.write("\u16e4\5\u02c2\u0162\2\u16e3\u16e2\3\2\2\2\u16e3\u16e4")
        buf.write("\3\2\2\2\u16e4\u16ee\3\2\2\2\u16e5\u16e6\5\u02c2\u0162")
        buf.write("\2\u16e6\u16e7\7e\2\2\u16e7\u16e9\7?\2\2\u16e8\u16ea\7")
        buf.write("\u016a\2\2\u16e9\u16e8\3\2\2\2\u16e9\u16ea\3\2\2\2\u16ea")
        buf.write("\u16eb\3\2\2\2\u16eb\u16ec\5\u033a\u019e\2\u16ec\u16ee")
        buf.write("\3\2\2\2\u16ed\u16dc\3\2\2\2\u16ed\u16e5\3\2\2\2\u16ee")
        buf.write("\u02c1\3\2\2\2\u16ef\u16f0\7\u022e\2\2\u16f0\u16f1\7\u0291")
        buf.write("\2\2\u16f1\u16f2\5\u033a\u019e\2\u16f2\u02c3\3\2\2\2\u16f3")
        buf.write("\u16f4\7\u00e8\2\2\u16f4\u16f9\7?\2\2\u16f5\u16f7\7\u02e0")
        buf.write("\2\2\u16f6\u16f5\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7\u16f8")
        buf.write("\3\2\2\2\u16f8\u16fa\5\u02c6\u0164\2\u16f9\u16f6\3\2\2")
        buf.write("\2\u16fa\u16fb\3\2\2\2\u16fb\u16f9\3\2\2\2\u16fb\u16fc")
        buf.write("\3\2\2\2\u16fc\u16fe\3\2\2\2\u16fd\u16ff\5\u02ce\u0168")
        buf.write("\2\u16fe\u16fd\3\2\2\2\u16fe\u16ff\3\2\2\2\u16ff\u170e")
        buf.write("\3\2\2\2\u1700\u170b\5\u02ce\u0168\2\u1701\u1702\7\u00e8")
        buf.write("\2\2\u1702\u1707\7?\2\2\u1703\u1705\7\u02e0\2\2\u1704")
        buf.write("\u1703\3\2\2\2\u1704\u1705\3\2\2\2\u1705\u1706\3\2\2\2")
        buf.write("\u1706\u1708\5\u02c6\u0164\2\u1707\u1704\3\2\2\2\u1708")
        buf.write("\u1709\3\2\2\2\u1709\u1707\3\2\2\2\u1709\u170a\3\2\2\2")
        buf.write("\u170a\u170c\3\2\2\2\u170b\u1701\3\2\2\2\u170b\u170c\3")
        buf.write("\2\2\2\u170c\u170e\3\2\2\2\u170d\u16f3\3\2\2\2\u170d\u1700")
        buf.write("\3\2\2\2\u170e\u02c5\3\2\2\2\u170f\u1713\5\u02ca\u0166")
        buf.write("\2\u1710\u1713\5\u02c8\u0165\2\u1711\u1713\5\u033e\u01a0")
        buf.write("\2\u1712\u170f\3\2\2\2\u1712\u1710\3\2\2\2\u1712\u1711")
        buf.write("\3\2\2\2\u1713\u02c7\3\2\2\2\u1714\u1715\tO\2\2\u1715")
        buf.write("\u171a\7\u02da\2\2\u1716\u1718\7\u02e0\2\2\u1717\u1716")
        buf.write("\3\2\2\2\u1717\u1718\3\2\2\2\u1718\u1719\3\2\2\2\u1719")
        buf.write("\u171b\5\u02cc\u0167\2\u171a\u1717\3\2\2\2\u171b\u171c")
        buf.write("\3\2\2\2\u171c\u171a\3\2\2\2\u171c\u171d\3\2\2\2\u171d")
        buf.write("\u171e\3\2\2\2\u171e\u171f\7\u02db\2\2\u171f\u02c9\3\2")
        buf.write("\2\2\u1720\u1721\7\u00e9\2\2\u1721\u1722\7\u0216\2\2\u1722")
        buf.write("\u1727\7\u02da\2\2\u1723\u1725\7\u02e0\2\2\u1724\u1723")
        buf.write("\3\2\2\2\u1724\u1725\3\2\2\2\u1725\u1726\3\2\2\2\u1726")
        buf.write("\u1728\5\u02cc\u0167\2\u1727\u1724\3\2\2\2\u1728\u1729")
        buf.write("\3\2\2\2\u1729\u1727\3\2\2\2\u1729\u172a\3\2\2\2\u172a")
        buf.write("\u172b\3\2\2\2\u172b\u172c\7\u02db\2\2\u172c\u02cb\3\2")
        buf.write("\2\2\u172d\u1735\5\u02c8\u0165\2\u172e\u1730\7\u02da\2")
        buf.write("\2\u172f\u1731\5\u033c\u019f\2\u1730\u172f\3\2\2\2\u1730")
        buf.write("\u1731\3\2\2\2\u1731\u1732\3\2\2\2\u1732\u1735\7\u02db")
        buf.write("\2\2\u1733\u1735\5\u033e\u01a0\2\u1734\u172d\3\2\2\2\u1734")
        buf.write("\u172e\3\2\2\2\u1734\u1733\3\2\2\2\u1735\u02cd\3\2\2\2")
        buf.write("\u1736\u1737\7\u00ed\2\2\u1737\u1738\5\u033a\u019e\2\u1738")
        buf.write("\u02cf\3\2\2\2\u1739\u173d\7\u0153\2\2\u173a\u173c\5\u02d2")
        buf.write("\u016a\2\u173b\u173a\3\2\2\2\u173c\u173f\3\2\2\2\u173d")
        buf.write("\u173b\3\2\2\2\u173d\u173e\3\2\2\2\u173e\u1741\3\2\2\2")
        buf.write("\u173f\u173d\3\2\2\2\u1740\u1742\5\u02d4\u016b\2\u1741")
        buf.write("\u1740\3\2\2\2\u1741\u1742\3\2\2\2\u1742\u1746\3\2\2\2")
        buf.write("\u1743\u1745\5\u02d6\u016c\2\u1744\u1743\3\2\2\2\u1745")
        buf.write("\u1748\3\2\2\2\u1746\u1744\3\2\2\2\u1746\u1747\3\2\2\2")
        buf.write("\u1747\u1749\3\2\2\2\u1748\u1746\3\2\2\2\u1749\u174a\5")
        buf.write("\u02d8\u016d\2\u174a\u02d1\3\2\2\2\u174b\u174c\tP\2\2")
        buf.write("\u174c\u1754\7\u015e\2\2\u174d\u1751\7\u026c\2\2\u174e")
        buf.write("\u1752\7\u009b\2\2\u174f\u1750\7\u021f\2\2\u1750\u1752")
        buf.write("\7\u01d8\2\2\u1751\u174e\3\2\2\2\u1751\u174f\3\2\2\2\u1752")
        buf.write("\u1754\3\2\2\2\u1753\u174b\3\2\2\2\u1753\u174d\3\2\2\2")
        buf.write("\u1754\u02d3\3\2\2\2\u1755\u1756\7\u01ef\2\2\u1756\u1757")
        buf.write("\tQ\2\2\u1757\u1758\7\u01fc\2\2\u1758\u02d5\3\2\2\2\u1759")
        buf.write("\u175a\7\u01d8\2\2\u175a\u175b\5\u03cc\u01e7\2\u175b\u175c")
        buf.write("\7\u018d\2\2\u175c\u175d\7\u02da\2\2\u175d\u175e\5\u028c")
        buf.write("\u0147\2\u175e\u175f\7\u02db\2\2\u175f\u1763\5\u02da\u016e")
        buf.write("\2\u1760\u1762\5\u02d2\u016a\2\u1761\u1760\3\2\2\2\u1762")
        buf.write("\u1765\3\2\2\2\u1763\u1761\3\2\2\2\u1763\u1764\3\2\2\2")
        buf.write("\u1764\u02d7\3\2\2\2\u1765\u1763\3\2\2\2\u1766\u1767\7")
        buf.write("\u013b\2\2\u1767\u1769\5\u03ce\u01e8\2\u1768\u1766\3\2")
        buf.write("\2\2\u1768\u1769\3\2\2\2\u1769\u176a\3\2\2\2\u176a\u176e")
        buf.write("\5\u02da\u016e\2\u176b\u176d\5\u02d2\u016a\2\u176c\u176b")
        buf.write("\3\2\2\2\u176d\u1770\3\2\2\2\u176e\u176c\3\2\2\2\u176e")
        buf.write("\u176f\3\2\2\2\u176f\u1771\3\2\2\2\u1770\u176e\3\2\2\2")
        buf.write("\u1771\u1772\5\u02e2\u0172\2\u1772\u02d9\3\2\2\2\u1773")
        buf.write("\u1775\5\u02dc\u016f\2\u1774\u1773\3\2\2\2\u1774\u1775")
        buf.write("\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1777\7\u009b\2\2\u1777")
        buf.write("\u1778\7?\2\2\u1778\u1779\5\u02de\u0170\2\u1779\u177a")
        buf.write("\7\u0147\2\2\u177a\u177b\5\u02de\u0170\2\u177b\u02db\3")
        buf.write("\2\2\2\u177c\u177d\7\u01a2\2\2\u177d\u177e\7?\2\2\u177e")
        buf.write("\u177f\5\u02de\u0170\2\u177f\u02dd\3\2\2\2\u1780\u1785")
        buf.write("\7\u02da\2\2\u1781\u1783\7\u02e0\2\2\u1782\u1781\3\2\2")
        buf.write("\2\u1782\u1783\3\2\2\2\u1783\u1784\3\2\2\2\u1784\u1786")
        buf.write("\5\u02e0\u0171\2\u1785\u1782\3\2\2\2\u1786\u1787\3\2\2")
        buf.write("\2\u1787\u1785\3\2\2\2\u1787\u1788\3\2\2\2\u1788\u1789")
        buf.write("\3\2\2\2\u1789\u178a\7\u02db\2\2\u178a\u02df\3\2\2\2\u178b")
        buf.write("\u178e\5\u033e\u01a0\2\u178c\u178e\5\u0292\u014a\2\u178d")
        buf.write("\u178b\3\2\2\2\u178d\u178c\3\2\2\2\u178e\u1790\3\2\2\2")
        buf.write("\u178f\u1791\5\u03ae\u01d8\2\u1790\u178f\3\2\2\2\u1790")
        buf.write("\u1791\3\2\2\2\u1791\u02e1\3\2\2\2\u1792\u1794\5\u02e4")
        buf.write("\u0173\2\u1793\u1792\3\2\2\2\u1793\u1794\3\2\2\2\u1794")
        buf.write("\u1795\3\2\2\2\u1795\u179c\7\u02da\2\2\u1796\u1798\7\u02e0")
        buf.write("\2\2\u1797\u1796\3\2\2\2\u1797\u1798\3\2\2\2\u1798\u1799")
        buf.write("\3\2\2\2\u1799\u179b\5\u02e6\u0174\2\u179a\u1797\3\2\2")
        buf.write("\2\u179b\u179e\3\2\2\2\u179c\u179a\3\2\2\2\u179c\u179d")
        buf.write("\3\2\2\2\u179d\u179f\3\2\2\2\u179e\u179c\3\2\2\2\u179f")
        buf.write("\u17a0\7\u02db\2\2\u17a0\u02e3\3\2\2\2\u17a1\u17a7\7\u01fd")
        buf.write("\2\2\u17a2\u17a8\7\u0273\2\2\u17a3\u17a5\7\u0275\2\2\u17a4")
        buf.write("\u17a6\7\r\2\2\u17a5\u17a4\3\2\2\2\u17a5\u17a6\3\2\2\2")
        buf.write("\u17a6\u17a8\3\2\2\2\u17a7\u17a2\3\2\2\2\u17a7\u17a3\3")
        buf.write("\2\2\2\u17a7\u17a8\3\2\2\2\u17a8\u17ab\3\2\2\2\u17a9\u17aa")
        buf.write("\tR\2\2\u17aa\u17ac\7\u0193\2\2\u17ab\u17a9\3\2\2\2\u17ab")
        buf.write("\u17ac\3\2\2\2\u17ac\u17ae\3\2\2\2\u17ad\u17af\5\u02ea")
        buf.write("\u0176\2\u17ae\u17ad\3\2\2\2\u17ae\u17af\3\2\2\2\u17af")
        buf.write("\u02e5\3\2\2\2\u17b0\u17b6\7\u0273\2\2\u17b1\u17b3\7\u0275")
        buf.write("\2\2\u17b2\u17b4\7\r\2\2\u17b3\u17b2\3\2\2\2\u17b3\u17b4")
        buf.write("\3\2\2\2\u17b4\u17b6\3\2\2\2\u17b5\u17b0\3\2\2\2\u17b5")
        buf.write("\u17b1\3\2\2\2\u17b5\u17b6\3\2\2\2\u17b6\u17b7\3\2\2\2")
        buf.write("\u17b7\u17b9\5\u02e8\u0175\2\u17b8\u17ba\5\u02ee\u0178")
        buf.write("\2\u17b9\u17b8\3\2\2\2\u17b9\u17ba\3\2\2\2\u17ba\u17bb")
        buf.write("\3\2\2\2\u17bb\u17bc\7\u02ee\2\2\u17bc\u17bd\5\u033e\u01a0")
        buf.write("\2\u17bd\u02e7\3\2\2\2\u17be\u17bf\5\u0354\u01ab\2\u17bf")
        buf.write("\u02e9\3\2\2\2\u17c0\u17c1\7\u0116\2\2\u17c1\u17c2\7\u02da")
        buf.write("\2\2\u17c2\u17c3\5\u033e\u01a0\2\u17c3\u17c5\7\u02db\2")
        buf.write("\2\u17c4\u17c6\5\u02ec\u0177\2\u17c5\u17c4\3\2\2\2\u17c5")
        buf.write("\u17c6\3\2\2\2\u17c6\u02eb\3\2\2\2\u17c7\u17c8\7\u0270")
        buf.write("\2\2\u17c8\u17c9\7\u02da\2\2\u17c9\u17ca\5\u033a\u019e")
        buf.write("\2\u17ca\u17cb\7\u02db\2\2\u17cb\u02ed\3\2\2\2\u17cc\u17ce")
        buf.write("\7\u0193\2\2\u17cd\u17cf\7\u021c\2\2\u17ce\u17cd\3\2\2")
        buf.write("\2\u17ce\u17cf\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0\u17d5")
        buf.write("\7?\2\2\u17d1\u17d3\7\u02e0\2\2\u17d2\u17d1\3\2\2\2\u17d2")
        buf.write("\u17d3\3\2\2\2\u17d3\u17d4\3\2\2\2\u17d4\u17d6\5\u02f0")
        buf.write("\u0179\2\u17d5\u17d2\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7")
        buf.write("\u17d5\3\2\2\2\u17d7\u17d8\3\2\2\2\u17d8\u02ef\3\2\2\2")
        buf.write("\u17d9\u17db\5\u033e\u01a0\2\u17da\u17dc\tS\2\2\u17db")
        buf.write("\u17da\3\2\2\2\u17db\u17dc\3\2\2\2\u17dc\u17df\3\2\2\2")
        buf.write("\u17dd\u17de\7\u017f\2\2\u17de\u17e0\tT\2\2\u17df\u17dd")
        buf.write("\3\2\2\2\u17df\u17e0\3\2\2\2\u17e0\u02f1\3\2\2\2\u17e1")
        buf.write("\u17e2\7\u00dc\2\2\u17e2\u17e4\7\u0273\2\2\u17e3\u17e5")
        buf.write("\5\u02f4\u017b\2\u17e4\u17e3\3\2\2\2\u17e4\u17e5\3\2\2")
        buf.write("\2\u17e5\u17e7\3\2\2\2\u17e6\u17e8\5\u02f6\u017c\2\u17e7")
        buf.write("\u17e6\3\2\2\2\u17e7\u17e8\3\2\2\2\u17e8\u02f3\3\2\2\2")
        buf.write("\u17e9\u17ea\7\u0186\2\2\u17ea\u17eb\5\u0406\u0204\2\u17eb")
        buf.write("\u02f5\3\2\2\2\u17ec\u17ed\7\u0221\2\2\u17ed\u17f2\7\u0131")
        buf.write("\2\2\u17ee\u17f2\7\u017d\2\2\u17ef\u17f0\7\u0288\2\2\u17f0")
        buf.write("\u17f2\5\u033e\u01a0\2\u17f1\u17ec\3\2\2\2\u17f1\u17ee")
        buf.write("\3\2\2\2\u17f1\u17ef\3\2\2\2\u17f2\u02f7\3\2\2\2\u17f3")
        buf.write("\u17f4\7\u0273\2\2\u17f4\u17f5\5\u0326\u0194\2\u17f5\u17f7")
        buf.write("\5\u02fa\u017e\2\u17f6\u17f8\5\u03b2\u01da\2\u17f7\u17f6")
        buf.write("\3\2\2\2\u17f7\u17f8\3\2\2\2\u17f8\u17fa\3\2\2\2\u17f9")
        buf.write("\u17fb\5\u0328\u0195\2\u17fa\u17f9\3\2\2\2\u17fa\u17fb")
        buf.write("\3\2\2\2\u17fb\u17fd\3\2\2\2\u17fc\u17fe\5\u032a\u0196")
        buf.write("\2\u17fd\u17fc\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u02f9")
        buf.write("\3\2\2\2\u17ff\u180f\7\u0215\2\2\u1800\u1802\7\u02e0\2")
        buf.write("\2\u1801\u1800\3\2\2\2\u1801\u1802\3\2\2\2\u1802\u1803")
        buf.write("\3\2\2\2\u1803\u1805\5\u02fc\u017f\2\u1804\u1801\3\2\2")
        buf.write("\2\u1805\u1806\3\2\2\2\u1806\u1804\3\2\2\2\u1806\u1807")
        buf.write("\3\2\2\2\u1807\u1810\3\2\2\2\u1808\u1809\7\u027d\2\2\u1809")
        buf.write("\u180a\7\u02da\2\2\u180a\u180b\5\u0432\u021a\2\u180b\u180c")
        buf.write("\7\u02db\2\2\u180c\u180d\7\u02ee\2\2\u180d\u180e\5\u033e")
        buf.write("\u01a0\2\u180e\u1810\3\2\2\2\u180f\u1804\3\2\2\2\u180f")
        buf.write("\u1808\3\2\2\2\u1810\u02fb\3\2\2\2\u1811\u1812\5\u03f6")
        buf.write("\u01fc\2\u1812\u1813\7\u02ee\2\2\u1813\u1814\5\u033e\u01a0")
        buf.write("\2\u1814\u181a\3\2\2\2\u1815\u1816\5\u0408\u0205\2\u1816")
        buf.write("\u1817\7\u02ee\2\2\u1817\u1818\5\u028c\u0147\2\u1818\u181a")
        buf.write("\3\2\2\2\u1819\u1811\3\2\2\2\u1819\u1815\3\2\2\2\u181a")
        buf.write("\u02fd\3\2\2\2\u181b\u181d\7\u0095\2\2\u181c\u181e\7\u00e0")
        buf.write("\2\2\u181d\u181c\3\2\2\2\u181d\u181e\3\2\2\2\u181e\u181f")
        buf.write("\3\2\2\2\u181f\u1821\5\u0326\u0194\2\u1820\u1822\5\u03b2")
        buf.write("\u01da\2\u1821\u1820\3\2\2\2\u1821\u1822\3\2\2\2\u1822")
        buf.write("\u1824\3\2\2\2\u1823\u1825\5\u0328\u0195\2\u1824\u1823")
        buf.write("\3\2\2\2\u1824\u1825\3\2\2\2\u1825\u1827\3\2\2\2\u1826")
        buf.write("\u1828\5\u032a\u0196\2\u1827\u1826\3\2\2\2\u1827\u1828")
        buf.write("\3\2\2\2\u1828\u02ff\3\2\2\2\u1829\u182c\7\u010a\2\2\u182a")
        buf.write("\u182d\5\u0302\u0182\2\u182b\u182d\5\u0304\u0183\2\u182c")
        buf.write("\u182a\3\2\2\2\u182c\u182b\3\2\2\2\u182d\u0301\3\2\2\2")
        buf.write("\u182e\u1834\5\u030e\u0188\2\u182f\u1831\5\u0310\u0189")
        buf.write("\2\u1830\u1832\5\u0328\u0195\2\u1831\u1830\3\2\2\2\u1831")
        buf.write("\u1832\3\2\2\2\u1832\u1835\3\2\2\2\u1833\u1835\5\u0282")
        buf.write("\u0142\2\u1834\u182f\3\2\2\2\u1834\u1833\3\2\2\2\u1835")
        buf.write("\u1837\3\2\2\2\u1836\u1838\5\u032a\u0196\2\u1837\u1836")
        buf.write("\3\2\2\2\u1837\u1838\3\2\2\2\u1838\u0303\3\2\2\2\u1839")
        buf.write("\u183b\7\r\2\2\u183a\u183c\5\u0306\u0184\2\u183b\u183a")
        buf.write("\3\2\2\2\u183c\u183d\3\2\2\2\u183d\u183b\3\2\2\2\u183d")
        buf.write("\u183e\3\2\2\2\u183e\u1841\3\2\2\2\u183f\u1841\5\u0308")
        buf.write("\u0185\2\u1840\u1839\3\2\2\2\u1840\u183f\3\2\2\2\u1841")
        buf.write("\u1842\3\2\2\2\u1842\u1843\5\u0282\u0142\2\u1843\u0305")
        buf.write("\3\2\2\2\u1844\u1846\5\u030e\u0188\2\u1845\u1847\5\u0310")
        buf.write("\u0189\2\u1846\u1845\3\2\2\2\u1846\u1847\3\2\2\2\u1847")
        buf.write("\u1849\3\2\2\2\u1848\u184a\5\u032a\u0196\2\u1849\u1848")
        buf.write("\3\2\2\2\u1849\u184a\3\2\2\2\u184a\u0307\3\2\2\2\u184b")
        buf.write("\u184d\tU\2\2\u184c\u184b\3\2\2\2\u184c\u184d\3\2\2\2")
        buf.write("\u184d\u184f\3\2\2\2\u184e\u1850\5\u030a\u0186\2\u184f")
        buf.write("\u184e\3\2\2\2\u1850\u1851\3\2\2\2\u1851\u184f\3\2\2\2")
        buf.write("\u1851\u1852\3\2\2\2\u1852\u1854\3\2\2\2\u1853\u1855\5")
        buf.write("\u030c\u0187\2\u1854\u1853\3\2\2\2\u1854\u1855\3\2\2\2")
        buf.write("\u1855\u0309\3\2\2\2\u1856\u1857\7\u028c\2\2\u1857\u1858")
        buf.write("\5\u033a\u019e\2\u1858\u185a\7\u024e\2\2\u1859\u185b\5")
        buf.write("\u0306\u0184\2\u185a\u1859\3\2\2\2\u185b\u185c\3\2\2\2")
        buf.write("\u185c\u185a\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u030b\3")
        buf.write("\2\2\2\u185e\u1860\7\u00ab\2\2\u185f\u1861\5\u0306\u0184")
        buf.write("\2\u1860\u185f\3\2\2\2\u1861\u1862\3\2\2\2\u1862\u1860")
        buf.write("\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u030d\3\2\2\2\u1864")
        buf.write("\u1865\7\u0112\2\2\u1865\u1867\5\u0326\u0194\2\u1866\u1868")
        buf.write("\5\u0408\u0205\2\u1867\u1866\3\2\2\2\u1867\u1868\3\2\2")
        buf.write("\2\u1868\u030f\3\2\2\2\u1869\u186a\7\u027c\2\2\u186a\u186c")
        buf.write("\7\u02da\2\2\u186b\u186d\5\u033c\u019f\2\u186c\u186b\3")
        buf.write("\2\2\2\u186c\u186d\3\2\2\2\u186d\u186e\3\2\2\2\u186e\u186f")
        buf.write("\7\u02db\2\2\u186f\u0311\3\2\2\2\u1870\u1871\7\u014a\2")
        buf.write("\2\u1871\u1872\7\u0112\2\2\u1872\u1874\5\u03f8\u01fd\2")
        buf.write("\u1873\u1875\5\u03b0\u01d9\2\u1874\u1873\3\2\2\2\u1874")
        buf.write("\u1875\3\2\2\2\u1875\u1876\3\2\2\2\u1876\u1877\7\u027a")
        buf.write("\2\2\u1877\u1878\5\u031c\u018f\2\u1878\u1879\7\u018d\2")
        buf.write("\2\u1879\u187a\7\u02da\2\2\u187a\u187b\5\u033a\u019e\2")
        buf.write("\u187b\u1884\7\u02db\2\2\u187c\u187e\5\u0314\u018b\2\u187d")
        buf.write("\u187f\5\u031a\u018e\2\u187e\u187d\3\2\2\2\u187e\u187f")
        buf.write("\3\2\2\2\u187f\u1885\3\2\2\2\u1880\u1882\5\u031a\u018e")
        buf.write("\2\u1881\u1883\5\u0314\u018b\2\u1882\u1881\3\2\2\2\u1882")
        buf.write("\u1883\3\2\2\2\u1883\u1885\3\2\2\2\u1884\u187c\3\2\2\2")
        buf.write("\u1884\u1880\3\2\2\2\u1884\u1885\3\2\2\2\u1885\u1887\3")
        buf.write("\2\2\2\u1886\u1888\5\u032a\u0196\2\u1887\u1886\3\2\2\2")
        buf.write("\u1887\u1888\3\2\2\2\u1888\u0313\3\2\2\2\u1889\u188a\7")
        buf.write("\u028c\2\2\u188a\u188b\7\u0142\2\2\u188b\u188c\7\u024e")
        buf.write("\2\2\u188c\u188d\7\u0273\2\2\u188d\u188e\7\u0215\2\2\u188e")
        buf.write("\u1893\5\u0316\u018c\2\u188f\u1890\7\u02e0\2\2\u1890\u1892")
        buf.write("\5\u0316\u018c\2\u1891\u188f\3\2\2\2\u1892\u1895\3\2\2")
        buf.write("\2\u1893\u1891\3\2\2\2\u1893\u1894\3\2\2\2\u1894\u1897")
        buf.write("\3\2\2\2\u1895\u1893\3\2\2\2\u1896\u1898\5\u03b2\u01da")
        buf.write("\2\u1897\u1896\3\2\2\2\u1897\u1898\3\2\2\2\u1898\u189a")
        buf.write("\3\2\2\2\u1899\u189b\5\u0318\u018d\2\u189a\u1899\3\2\2")
        buf.write("\2\u189a\u189b\3\2\2\2\u189b\u0315\3\2\2\2\u189c\u189d")
        buf.write("\5\u03f6\u01fc\2\u189d\u189e\7\u02ee\2\2\u189e\u189f\5")
        buf.write("\u033e\u01a0\2\u189f\u0317\3\2\2\2\u18a0\u18a1\7\u0095")
        buf.write("\2\2\u18a1\u18a2\5\u03b2\u01da\2\u18a2\u0319\3\2\2\2\u18a3")
        buf.write("\u18a4\7\u028c\2\2\u18a4\u18a5\7\u017b\2\2\u18a5\u18a6")
        buf.write("\7\u0142\2\2\u18a6\u18a7\7\u024e\2\2\u18a7\u18a9\7\u010a")
        buf.write("\2\2\u18a8\u18aa\5\u0408\u0205\2\u18a9\u18a8\3\2\2\2\u18a9")
        buf.write("\u18aa\3\2\2\2\u18aa\u18ab\3\2\2\2\u18ab\u18ac\7\u027c")
        buf.write("\2\2\u18ac\u18ae\7\u02da\2\2\u18ad\u18af\5\u033c\u019f")
        buf.write("\2\u18ae\u18ad\3\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0")
        buf.write("\3\2\2\2\u18b0\u18b2\7\u02db\2\2\u18b1\u18b3\5\u03b2\u01da")
        buf.write("\2\u18b2\u18b1\3\2\2\2\u18b2\u18b3\3\2\2\2\u18b3\u031b")
        buf.write("\3\2\2\2\u18b4\u18ba\5\u03f8\u01fd\2\u18b5\u18b6\7\u02da")
        buf.write("\2\2\u18b6\u18b7\5\u0282\u0142\2\u18b7\u18b8\7\u02db\2")
        buf.write("\2\u18b8\u18ba\3\2\2\2\u18b9\u18b4\3\2\2\2\u18b9\u18b5")
        buf.write("\3\2\2\2\u18ba\u18bc\3\2\2\2\u18bb\u18bd\5\u03b0\u01d9")
        buf.write("\2\u18bc\u18bb\3\2\2\2\u18bc\u18bd\3\2\2\2\u18bd\u031d")
        buf.write("\3\2\2\2\u18be\u18bf\7\u0132\2\2\u18bf\u18c0\7\u024a\2")
        buf.write("\2\u18c0\u18c5\5\u0322\u0192\2\u18c1\u18c2\7\u02e0\2\2")
        buf.write("\u18c2\u18c4\5\u0322\u0192\2\u18c3\u18c1\3\2\2\2\u18c4")
        buf.write("\u18c7\3\2\2\2\u18c5\u18c3\3\2\2\2\u18c5\u18c6\3\2\2\2")
        buf.write("\u18c6\u18c8\3\2\2\2\u18c7\u18c5\3\2\2\2\u18c8\u18c9\7")
        buf.write("\u0103\2\2\u18c9\u18ca\5\u0324\u0193\2\u18ca\u18cc\7\u0154")
        buf.write("\2\2\u18cb\u18cd\5\u0320\u0191\2\u18cc\u18cb\3\2\2\2\u18cc")
        buf.write("\u18cd\3\2\2\2\u18cd\u031f\3\2\2\2\u18ce\u18cf\7\u0288")
        buf.write("\2\2\u18cf\u18d2\5\u033e\u01a0\2\u18d0\u18d2\7\u017d\2")
        buf.write("\2\u18d1\u18ce\3\2\2\2\u18d1\u18d0\3\2\2\2\u18d2\u0321")
        buf.write("\3\2\2\2\u18d3\u18d5\5\u03f8\u01fd\2\u18d4\u18d6\5\u03ac")
        buf.write("\u01d7\2\u18d5\u18d4\3\2\2\2\u18d5\u18d6\3\2\2\2\u18d6")
        buf.write("\u0323\3\2\2\2\u18d7\u18d8\7\u01fb\2\2\u18d8\u18e4\7\u0218")
        buf.write("\2\2\u18d9\u18da\7\u01fb\2\2\u18da\u18e4\7\u00c0\2\2\u18db")
        buf.write("\u18dd\7\u0218\2\2\u18dc\u18de\7\u0273\2\2\u18dd\u18dc")
        buf.write("\3\2\2\2\u18dd\u18de\3\2\2\2\u18de\u18e4\3\2\2\2\u18df")
        buf.write("\u18e0\7\u0218\2\2\u18e0\u18e1\7\u01fb\2\2\u18e1\u18e4")
        buf.write("\7\u00c0\2\2\u18e2\u18e4\7\u00c0\2\2\u18e3\u18d7\3\2\2")
        buf.write("\2\u18e3\u18d9\3\2\2\2\u18e3\u18db\3\2\2\2\u18e3\u18df")
        buf.write("\3\2\2\2\u18e3\u18e2\3\2\2\2\u18e4\u0325\3\2\2\2\u18e5")
        buf.write("\u18ec\5\u0330\u0199\2\u18e6\u18e7\7\u018c\2\2\u18e7\u18e8")
        buf.write("\7\u02da\2\2\u18e8\u18e9\5\u0330\u0199\2\u18e9\u18ea\7")
        buf.write("\u02db\2\2\u18ea\u18ec\3\2\2\2\u18eb\u18e5\3\2\2\2\u18eb")
        buf.write("\u18e6\3\2\2\2\u18ec\u18ee\3\2\2\2\u18ed\u18ef\5\u03b0")
        buf.write("\u01d9\2\u18ee\u18ed\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef")
        buf.write("\u0327\3\2\2\2\u18f0\u18f1\tC\2\2\u18f1\u18f2\5\u033c")
        buf.write("\u019f\2\u18f2\u18f3\5\u03b4\u01db\2\u18f3\u0329\3\2\2")
        buf.write("\2\u18f4\u18f5\7\u0134\2\2\u18f5\u18f7\7\u00b7\2\2\u18f6")
        buf.write("\u18f8\5\u032c\u0197\2\u18f7\u18f6\3\2\2\2\u18f7\u18f8")
        buf.write("\3\2\2\2\u18f8\u18fa\3\2\2\2\u18f9\u18fb\5\u033e\u01a0")
        buf.write("\2\u18fa\u18f9\3\2\2\2\u18fa\u18fb\3\2\2\2\u18fb\u18fd")
        buf.write("\3\2\2\2\u18fc\u18fe\5\u032e\u0198\2\u18fd\u18fc\3\2\2")
        buf.write("\2\u18fd\u18fe\3\2\2\2\u18fe\u032b\3\2\2\2\u18ff\u1900")
        buf.write("\7\u0112\2\2\u1900\u1901\5\u03f8\u01fd\2\u1901\u032d\3")
        buf.write("\2\2\2\u1902\u1903\7\u01dd\2\2\u1903\u1906\7\u012a\2\2")
        buf.write("\u1904\u1907\7\u026d\2\2\u1905\u1907\5\u033e\u01a0\2\u1906")
        buf.write("\u1904\3\2\2\2\u1906\u1905\3\2\2\2\u1907\u032f\3\2\2\2")
        buf.write("\u1908\u1915\5\u0332\u019a\2\u1909\u190a\7\u02da\2\2\u190a")
        buf.write("\u190c\5\u0282\u0142\2\u190b\u190d\5\u0334\u019b\2\u190c")
        buf.write("\u190b\3\2\2\2\u190c\u190d\3\2\2\2\u190d\u190e\3\2\2\2")
        buf.write("\u190e\u190f\7\u02db\2\2\u190f\u1915\3\2\2\2\u1910\u1912")
        buf.write("\5\u03f8\u01fd\2\u1911\u1913\5\u0336\u019c\2\u1912\u1911")
        buf.write("\3\2\2\2\u1912\u1913\3\2\2\2\u1913\u1915\3\2\2\2\u1914")
        buf.write("\u1908\3\2\2\2\u1914\u1909\3\2\2\2\u1914\u1910\3\2\2\2")
        buf.write("\u1915\u0331\3\2\2\2\u1916\u1923\tV\2\2\u1917\u1918\7")
        buf.write("\u02da\2\2\u1918\u1919\5\u028c\u0147\2\u1919\u191a\7\u02db")
        buf.write("\2\2\u191a\u1924\3\2\2\2\u191b\u191c\7\u02da\2\2\u191c")
        buf.write("\u191d\5\u033e\u01a0\2\u191d\u1921\7\u02db\2\2\u191e\u191f")
        buf.write("\7\u02da\2\2\u191f\u1920\7\u02de\2\2\u1920\u1922\7\u02db")
        buf.write("\2\2\u1921\u191e\3\2\2\2\u1921\u1922\3\2\2\2\u1922\u1924")
        buf.write("\3\2\2\2\u1923\u1917\3\2\2\2\u1923\u191b\3\2\2\2\u1924")
        buf.write("\u0333\3\2\2\2\u1925\u192e\7\u0291\2\2\u1926\u1927\7\u01cf")
        buf.write("\2\2\u1927\u192f\7\u018c\2\2\u1928\u1929\7L\2\2\u1929")
        buf.write("\u192c\7\u0191\2\2\u192a\u192b\7g\2\2\u192b\u192d\5\u03da")
        buf.write("\u01ee\2\u192c\u192a\3\2\2\2\u192c\u192d\3\2\2\2\u192d")
        buf.write("\u192f\3\2\2\2\u192e\u1926\3\2\2\2\u192e\u1928\3\2\2\2")
        buf.write("\u192f\u0335\3\2\2\2\u1930\u1932\7\u01ff\2\2\u1931\u1933")
        buf.write("\7\66\2\2\u1932\u1931\3\2\2\2\u1932\u1933\3\2\2\2\u1933")
        buf.write("\u1934\3\2\2\2\u1934\u1935\7\u02da\2\2\u1935\u1938\5\u033e")
        buf.write("\u01a0\2\u1936\u1937\7\u02e0\2\2\u1937\u1939\5\u033e\u01a0")
        buf.write("\2\u1938\u1936\3\2\2\2\u1938\u1939\3\2\2\2\u1939\u193a")
        buf.write("\3\2\2\2\u193a\u193c\7\u02db\2\2\u193b\u193d\5\u0338\u019d")
        buf.write("\2\u193c\u193b\3\2\2\2\u193c\u193d\3\2\2\2\u193d\u0337")
        buf.write("\3\2\2\2\u193e\u193f\7\u020a\2\2\u193f\u1940\7\u02da\2")
        buf.write("\2\u1940\u1941\5\u033e\u01a0\2\u1941\u1942\7\u02db\2\2")
        buf.write("\u1942\u0339\3\2\2\2\u1943\u1944\5\u033e\u01a0\2\u1944")
        buf.write("\u033b\3\2\2\2\u1945\u194a\5\u033e\u01a0\2\u1946\u1947")
        buf.write("\7\u02e0\2\2\u1947\u1949\5\u033e\u01a0\2\u1948\u1946\3")
        buf.write("\2\2\2\u1949\u194c\3\2\2\2\u194a\u1948\3\2\2\2\u194a\u194b")
        buf.write("\3\2\2\2\u194b\u033d\3\2\2\2\u194c\u194a\3\2\2\2\u194d")
        buf.write("\u1950\5\u0340\u01a1\2\u194e\u1950\5\u0342\u01a2\2\u194f")
        buf.write("\u194d\3\2\2\2\u194f\u194e\3\2\2\2\u1950\u033f\3\2\2\2")
        buf.write("\u1951\u1952\7z\2\2\u1952\u1953\7\u02da\2\2\u1953\u1954")
        buf.write("\5\u028c\u0147\2\u1954\u1955\7\u02db\2\2\u1955\u0341\3")
        buf.write("\2\2\2\u1956\u1957\b\u01a2\1\2\u1957\u1979\5\u0344\u01a3")
        buf.write("\2\u1958\u195a\7\u0114\2\2\u1959\u195b\7\u017b\2\2\u195a")
        buf.write("\u1959\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u1975\3\2\2\2")
        buf.write("\u195c\u1976\7\u017e\2\2\u195d\u1976\7\u015b\2\2\u195e")
        buf.write("\u1976\7\u01be\2\2\u195f\u1976\7\u0101\2\2\u1960\u1961")
        buf.write("\7\f\2\2\u1961\u1976\7\u0215\2\2\u1962\u1976\7\u00ad\2")
        buf.write("\2\u1963\u1965\7\u0186\2\2\u1964\u1966\7\u0266\2\2\u1965")
        buf.write("\u1964\3\2\2\2\u1965\u1966\3\2\2\2\u1966\u1967\3\2\2\2")
        buf.write("\u1967\u1969\7\u02da\2\2\u1968\u196a\7\u018c\2\2\u1969")
        buf.write("\u1968\3\2\2\2\u1969\u196a\3\2\2\2\u196a\u196b\3\2\2\2")
        buf.write("\u196b\u1970\5\u0416\u020c\2\u196c\u196d\7\u02e0\2\2\u196d")
        buf.write("\u196f\5\u0416\u020c\2\u196e\u196c\3\2\2\2\u196f\u1972")
        buf.write("\3\2\2\2\u1970\u196e\3\2\2\2\u1970\u1971\3\2\2\2\u1971")
        buf.write("\u1973\3\2\2\2\u1972\u1970\3\2\2\2\u1973\u1974\7\u02db")
        buf.write("\2\2\u1974\u1976\3\2\2\2\u1975\u195c\3\2\2\2\u1975\u195d")
        buf.write("\3\2\2\2\u1975\u195e\3\2\2\2\u1975\u195f\3\2\2\2\u1975")
        buf.write("\u1960\3\2\2\2\u1975\u1962\3\2\2\2\u1975\u1963\3\2\2\2")
        buf.write("\u1976\u1978\3\2\2\2\u1977\u1958\3\2\2\2\u1978\u197b\3")
        buf.write("\2\2\2\u1979\u1977\3\2\2\2\u1979\u197a\3\2\2\2\u197a\u197f")
        buf.write("\3\2\2\2\u197b\u1979\3\2\2\2\u197c\u197d\7\u017b\2\2\u197d")
        buf.write("\u197f\5\u0342\u01a2\5\u197e\u1956\3\2\2\2\u197e\u197c")
        buf.write("\3\2\2\2\u197f\u1988\3\2\2\2\u1980\u1981\f\4\2\2\u1981")
        buf.write("\u1982\7\23\2\2\u1982\u1987\5\u0342\u01a2\5\u1983\u1984")
        buf.write("\f\3\2\2\u1984\u1985\7\u0195\2\2\u1985\u1987\5\u0342\u01a2")
        buf.write("\4\u1986\u1980\3\2\2\2\u1986\u1983\3\2\2\2\u1987\u198a")
        buf.write("\3\2\2\2\u1988\u1986\3\2\2\2\u1988\u1989\3\2\2\2\u1989")
        buf.write("\u0343\3\2\2\2\u198a\u1988\3\2\2\2\u198b\u1991\5\u0346")
        buf.write("\u01a4\2\u198c\u198e\tW\2\2\u198d\u198f\7\u0186\2\2\u198e")
        buf.write("\u198d\3\2\2\2\u198e\u198f\3\2\2\2\u198f\u1990\3\2\2\2")
        buf.write("\u1990\u1992\5\u0350\u01a9\2\u1991\u198c\3\2\2\2\u1991")
        buf.write("\u1992\3\2\2\2\u1992\u0345\3\2\2\2\u1993\u1994\b\u01a4")
        buf.write("\1\2\u1994\u1995\5\u0348\u01a5\2\u1995\u199c\3\2\2\2\u1996")
        buf.write("\u1997\f\4\2\2\u1997\u1998\5\u034a\u01a6\2\u1998\u1999")
        buf.write("\5\u0346\u01a4\5\u1999\u199b\3\2\2\2\u199a\u1996\3\2\2")
        buf.write("\2\u199b\u199e\3\2\2\2\u199c\u199a\3\2\2\2\u199c\u199d")
        buf.write("\3\2\2\2\u199d\u0347\3\2\2\2\u199e\u199c\3\2\2\2\u199f")
        buf.write("\u19af\5\u0350\u01a9\2\u19a0\u19a2\7\u017b\2\2\u19a1\u19a0")
        buf.write("\3\2\2\2\u19a1\u19a2\3\2\2\2\u19a2\u19ad\3\2\2\2\u19a3")
        buf.write("\u19a4\7\u0103\2\2\u19a4\u19ae\5\u034c\u01a7\2\u19a5\u19a6")
        buf.write("\7.\2\2\u19a6\u19ae\5\u034e\u01a8\2\u19a7\u19a8\tX\2\2")
        buf.write("\u19a8\u19ab\5\u0350\u01a9\2\u19a9\u19aa\7\u00b8\2\2\u19aa")
        buf.write("\u19ac\5\u0350\u01a9\2\u19ab\u19a9\3\2\2\2\u19ab\u19ac")
        buf.write("\3\2\2\2\u19ac\u19ae\3\2\2\2\u19ad\u19a3\3\2\2\2\u19ad")
        buf.write("\u19a5\3\2\2\2\u19ad\u19a7\3\2\2\2\u19ae\u19b0\3\2\2\2")
        buf.write("\u19af\u19a1\3\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u0349\3")
        buf.write("\2\2\2\u19b1\u19c0\7\u02ee\2\2\u19b2\u19ba\7\u02e5\2\2")
        buf.write("\u19b3\u19b4\7\u02ea\2\2\u19b4\u19ba\7\u02e9\2\2\u19b5")
        buf.write("\u19b6\7\u02e8\2\2\u19b6\u19ba\7\u02ee\2\2\u19b7\u19b8")
        buf.write("\7\u02e6\2\2\u19b8\u19ba\7\u02ee\2\2\u19b9\u19b2\3\2\2")
        buf.write("\2\u19b9\u19b3\3\2\2\2\u19b9\u19b5\3\2\2\2\u19b9\u19b7")
        buf.write("\3\2\2\2\u19ba\u19c0\3\2\2\2\u19bb\u19bd\tY\2\2\u19bc")
        buf.write("\u19be\7\u02ee\2\2\u19bd\u19bc\3\2\2\2\u19bd\u19be\3\2")
        buf.write("\2\2\u19be\u19c0\3\2\2\2\u19bf\u19b1\3\2\2\2\u19bf\u19b9")
        buf.write("\3\2\2\2\u19bf\u19bb\3\2\2\2\u19c0\u034b\3\2\2\2\u19c1")
        buf.write("\u19c2\7\u02da\2\2\u19c2\u19c3\5\u028c\u0147\2\u19c3\u19c4")
        buf.write("\7\u02db\2\2\u19c4\u19d4\3\2\2\2\u19c5\u19c6\7\u02da\2")
        buf.write("\2\u19c6\u19cb\5\u0350\u01a9\2\u19c7\u19c8\7\u02e0\2\2")
        buf.write("\u19c8\u19ca\5\u0350\u01a9\2\u19c9\u19c7\3\2\2\2\u19ca")
        buf.write("\u19cd\3\2\2\2\u19cb\u19c9\3\2\2\2\u19cb\u19cc\3\2\2\2")
        buf.write("\u19cc\u19ce\3\2\2\2\u19cd\u19cb\3\2\2\2\u19ce\u19cf\7")
        buf.write("\u02db\2\2\u19cf\u19d4\3\2\2\2\u19d0\u19d4\5\u042a\u0216")
        buf.write("\2\u19d1\u19d4\5\u041e\u0210\2\u19d2\u19d4\5\u0420\u0211")
        buf.write("\2\u19d3\u19c1\3\2\2\2\u19d3\u19c5\3\2\2\2\u19d3\u19d0")
        buf.write("\3\2\2\2\u19d3\u19d1\3\2\2\2\u19d3\u19d2\3\2\2\2\u19d4")
        buf.write("\u034d\3\2\2\2\u19d5\u19d6\5\u0350\u01a9\2\u19d6\u19d7")
        buf.write("\7\23\2\2\u19d7\u19d8\5\u0350\u01a9\2\u19d8\u034f\3\2")
        buf.write("\2\2\u19d9\u19da\b\u01a9\1\2\u19da\u19e3\5\u0354\u01ab")
        buf.write("\2\u19db\u19e0\7\34\2\2\u19dc\u19e1\7\u012f\2\2\u19dd")
        buf.write("\u19de\7\u0255\2\2\u19de\u19df\7\u02a8\2\2\u19df\u19e1")
        buf.write("\5\u0350\u01a9\2\u19e0\u19dc\3\2\2\2\u19e0\u19dd\3\2\2")
        buf.write("\2\u19e1\u19e4\3\2\2\2\u19e2\u19e4\5\u0352\u01aa\2\u19e3")
        buf.write("\u19db\3\2\2\2\u19e3\u19e2\3\2\2\2\u19e3\u19e4\3\2\2\2")
        buf.write("\u19e4\u19f1\3\2\2\2\u19e5\u19e6\f\5\2\2\u19e6\u19e7\t")
        buf.write("Z\2\2\u19e7\u19f0\5\u0350\u01a9\6\u19e8\u19e9\f\4\2\2")
        buf.write("\u19e9\u19ea\t[\2\2\u19ea\u19f0\5\u0350\u01a9\5\u19eb")
        buf.write("\u19ec\f\3\2\2\u19ec\u19ed\7\u02ed\2\2\u19ed\u19ee\7\u02ed")
        buf.write("\2\2\u19ee\u19f0\5\u0350\u01a9\4\u19ef\u19e5\3\2\2\2\u19ef")
        buf.write("\u19e8\3\2\2\2\u19ef\u19eb\3\2\2\2\u19f0\u19f3\3\2\2\2")
        buf.write("\u19f1\u19ef\3\2\2\2\u19f1\u19f2\3\2\2\2\u19f2\u0351\3")
        buf.write("\2\2\2\u19f3\u19f1\3\2\2\2\u19f4\u19f9\7\u0081\2\2\u19f5")
        buf.write("\u19f6\7\u02da\2\2\u19f6\u19f7\5\u0350\u01a9\2\u19f7\u19f8")
        buf.write("\7\u02db\2\2\u19f8\u19fa\3\2\2\2\u19f9\u19f5\3\2\2\2\u19f9")
        buf.write("\u19fa\3\2\2\2\u19fa\u19fb\3\2\2\2\u19fb\u19fc\7\u025a")
        buf.write("\2\2\u19fc\u1a01\7\u0208\2\2\u19fd\u19fe\7\u02da\2\2\u19fe")
        buf.write("\u19ff\5\u0350\u01a9\2\u19ff\u1a00\7\u02db\2\2\u1a00\u1a02")
        buf.write("\3\2\2\2\u1a01\u19fd\3\2\2\2\u1a01\u1a02\3\2\2\2\u1a02")
        buf.write("\u1a0d\3\2\2\2\u1a03\u1a08\7\u02a5\2\2\u1a04\u1a05\7\u02da")
        buf.write("\2\2\u1a05\u1a06\5\u0350\u01a9\2\u1a06\u1a07\7\u02db\2")
        buf.write("\2\u1a07\u1a09\3\2\2\2\u1a08\u1a04\3\2\2\2\u1a08\u1a09")
        buf.write("\3\2\2\2\u1a09\u1a0a\3\2\2\2\u1a0a\u1a0b\7\u025a\2\2\u1a0b")
        buf.write("\u1a0d\7\u0156\2\2\u1a0c\u19f4\3\2\2\2\u1a0c\u1a03\3\2")
        buf.write("\2\2\u1a0d\u0353\3\2\2\2\u1a0e\u1a13\5\u035c\u01af\2\u1a0f")
        buf.write("\u1a10\7\u02ef\2\2\u1a10\u1a11\5\u0356\u01ac\2\u1a11\u1a12")
        buf.write("\7\u02f0\2\2\u1a12\u1a14\3\2\2\2\u1a13\u1a0f\3\2\2\2\u1a13")
        buf.write("\u1a14\3\2\2\2\u1a14\u0355\3\2\2\2\u1a15\u1a18\7\24\2")
        buf.write("\2\u1a16\u1a18\5\u033e\u01a0\2\u1a17\u1a15\3\2\2\2\u1a17")
        buf.write("\u1a16\3\2\2\2\u1a18\u1a20\3\2\2\2\u1a19\u1a1c\7\u02e0")
        buf.write("\2\2\u1a1a\u1a1d\7\24\2\2\u1a1b\u1a1d\5\u033e\u01a0\2")
        buf.write("\u1a1c\u1a1a\3\2\2\2\u1a1c\u1a1b\3\2\2\2\u1a1d\u1a1f\3")
        buf.write("\2\2\2\u1a1e\u1a19\3\2\2\2\u1a1f\u1a22\3\2\2\2\u1a20\u1a1e")
        buf.write("\3\2\2\2\u1a20\u1a21\3\2\2\2\u1a21\u1a2d\3\2\2\2\u1a22")
        buf.write("\u1a20\3\2\2\2\u1a23\u1a28\5\u0358\u01ad\2\u1a24\u1a25")
        buf.write("\7\u02e0\2\2\u1a25\u1a27\5\u0358\u01ad\2\u1a26\u1a24\3")
        buf.write("\2\2\2\u1a27\u1a2a\3\2\2\2\u1a28\u1a26\3\2\2\2\u1a28\u1a29")
        buf.write("\3\2\2\2\u1a29\u1a2d\3\2\2\2\u1a2a\u1a28\3\2\2\2\u1a2b")
        buf.write("\u1a2d\5\u035a\u01ae\2\u1a2c\u1a17\3\2\2\2\u1a2c\u1a23")
        buf.write("\3\2\2\2\u1a2c\u1a2b\3\2\2\2\u1a2d\u0357\3\2\2\2\u1a2e")
        buf.write("\u1a2f\7\u00dc\2\2\u1a2f\u1a41\5\u03f6\u01fc\2\u1a30\u1a31")
        buf.write("\7\u0103\2\2\u1a31\u1a33\7\u02da\2\2\u1a32\u1a34\5\u033c")
        buf.write("\u019f\2\u1a33\u1a32\3\2\2\2\u1a33\u1a34\3\2\2\2\u1a34")
        buf.write("\u1a35\3\2\2\2\u1a35\u1a42\7\u02db\2\2\u1a36\u1a37\7\u0129")
        buf.write("\2\2\u1a37\u1a39\5\u033e\u01a0\2\u1a38\u1a36\3\2\2\2\u1a38")
        buf.write("\u1a39\3\2\2\2\u1a39\u1a3a\3\2\2\2\u1a3a\u1a3b\7\u00e0")
        buf.write("\2\2\u1a3b\u1a3c\5\u033e\u01a0\2\u1a3c\u1a3d\7\u025a\2")
        buf.write("\2\u1a3d\u1a3e\5\u033e\u01a0\2\u1a3e\u1a3f\t\\\2\2\u1a3f")
        buf.write("\u1a40\5\u033e\u01a0\2\u1a40\u1a42\3\2\2\2\u1a41\u1a30")
        buf.write("\3\2\2\2\u1a41\u1a38\3\2\2\2\u1a42\u0359\3\2\2\2\u1a43")
        buf.write("\u1a44\7\u00dc\2\2\u1a44\u1a45\5\u0408\u0205\2\u1a45\u1a46")
        buf.write("\7\u0103\2\2\u1a46\u1a4d\7\u02da\2\2\u1a47\u1a4e\5\u028c")
        buf.write("\u0147\2\u1a48\u1a4a\7\u02da\2\2\u1a49\u1a4b\5\u033c\u019f")
        buf.write("\2\u1a4a\u1a49\3\2\2\2\u1a4a\u1a4b\3\2\2\2\u1a4b\u1a4c")
        buf.write("\3\2\2\2\u1a4c\u1a4e\7\u02db\2\2\u1a4d\u1a47\3\2\2\2\u1a4d")
        buf.write("\u1a48\3\2\2\2\u1a4e\u1a4f\3\2\2\2\u1a4f\u1a50\7\u02db")
        buf.write("\2\2\u1a50\u035b\3\2\2\2\u1a51\u1a52\t[\2\2\u1a52\u1a62")
        buf.write("\5\u035c\u01af\2\u1a53\u1a54\7\u01c1\2\2\u1a54\u1a62\5")
        buf.write("\u035c\u01af\2\u1a55\u1a56\7d\2\2\u1a56\u1a62\5\u035c")
        buf.write("\u01af\2\u1a57\u1a58\7\u0164\2\2\u1a58\u1a62\5\u035c\u01af")
        buf.write("\2\u1a59\u1a5a\7\u00a0\2\2\u1a5a\u1a62\5\u035c\u01af\2")
        buf.write("\u1a5b\u1a5c\7\r\2\2\u1a5c\u1a62\5\u035c\u01af\2\u1a5d")
        buf.write("\u1a62\5\u035e\u01b0\2\u1a5e\u1a62\5\u036c\u01b7\2\u1a5f")
        buf.write("\u1a62\5\u0370\u01b9\2\u1a60\u1a62\5\u036a\u01b6\2\u1a61")
        buf.write("\u1a51\3\2\2\2\u1a61\u1a53\3\2\2\2\u1a61\u1a55\3\2\2\2")
        buf.write("\u1a61\u1a57\3\2\2\2\u1a61\u1a59\3\2\2\2\u1a61\u1a5b\3")
        buf.write("\2\2\2\u1a61\u1a5d\3\2\2\2\u1a61\u1a5e\3\2\2\2\u1a61\u1a5f")
        buf.write("\3\2\2\2\u1a61\u1a60\3\2\2\2\u1a62\u035d\3\2\2\2\u1a63")
        buf.write("\u1a66\5\u0364\u01b3\2\u1a64\u1a66\5\u0360\u01b1\2\u1a65")
        buf.write("\u1a63\3\2\2\2\u1a65\u1a64\3\2\2\2\u1a66\u035f\3\2\2\2")
        buf.write("\u1a67\u1a69\5\u03dc\u01ef\2\u1a68\u1a67\3\2\2\2\u1a68")
        buf.write("\u1a69\3\2\2\2\u1a69\u1a6a\3\2\2\2\u1a6a\u1a6b\7E\2\2")
        buf.write("\u1a6b\u1a6d\5\u033e\u01a0\2\u1a6c\u1a6e\5\u0362\u01b2")
        buf.write("\2\u1a6d\u1a6c\3\2\2\2\u1a6e\u1a6f\3\2\2\2\u1a6f\u1a6d")
        buf.write("\3\2\2\2\u1a6f\u1a70\3\2\2\2\u1a70\u1a72\3\2\2\2\u1a71")
        buf.write("\u1a73\5\u0368\u01b5\2\u1a72\u1a71\3\2\2\2\u1a72\u1a73")
        buf.write("\3\2\2\2\u1a73\u1a74\3\2\2\2\u1a74\u1a76\7\u00b2\2\2\u1a75")
        buf.write("\u1a77\7E\2\2\u1a76\u1a75\3\2\2\2\u1a76\u1a77\3\2\2\2")
        buf.write("\u1a77\u1a79\3\2\2\2\u1a78\u1a7a\5\u03dc\u01ef\2\u1a79")
        buf.write("\u1a78\3\2\2\2\u1a79\u1a7a\3\2\2\2\u1a7a\u0361\3\2\2\2")
        buf.write("\u1a7b\u1a7c\7\u028c\2\2\u1a7c\u1a7d\5\u033e\u01a0\2\u1a7d")
        buf.write("\u1a80\7\u024e\2\2\u1a7e\u1a81\5\u022a\u0116\2\u1a7f\u1a81")
        buf.write("\5\u033e\u01a0\2\u1a80\u1a7e\3\2\2\2\u1a80\u1a7f\3\2\2")
        buf.write("\2\u1a81\u0363\3\2\2\2\u1a82\u1a84\5\u03dc\u01ef\2\u1a83")
        buf.write("\u1a82\3\2\2\2\u1a83\u1a84\3\2\2\2\u1a84\u1a85\3\2\2\2")
        buf.write("\u1a85\u1a87\7E\2\2\u1a86\u1a88\5\u0366\u01b4\2\u1a87")
        buf.write("\u1a86\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89\u1a87\3\2\2\2")
        buf.write("\u1a89\u1a8a\3\2\2\2\u1a8a\u1a8c\3\2\2\2\u1a8b\u1a8d\5")
        buf.write("\u0368\u01b5\2\u1a8c\u1a8b\3\2\2\2\u1a8c\u1a8d\3\2\2\2")
        buf.write("\u1a8d\u1a8e\3\2\2\2\u1a8e\u1a90\7\u00b2\2\2\u1a8f\u1a91")
        buf.write("\7E\2\2\u1a90\u1a8f\3\2\2\2\u1a90\u1a91\3\2\2\2\u1a91")
        buf.write("\u1a93\3\2\2\2\u1a92\u1a94\5\u03dc\u01ef\2\u1a93\u1a92")
        buf.write("\3\2\2\2\u1a93\u1a94\3\2\2\2\u1a94\u0365\3\2\2\2\u1a95")
        buf.write("\u1a96\7\u028c\2\2\u1a96\u1a97\5\u033e\u01a0\2\u1a97\u1a9a")
        buf.write("\7\u024e\2\2\u1a98\u1a9b\5\u022a\u0116\2\u1a99\u1a9b\5")
        buf.write("\u033e\u01a0\2\u1a9a\u1a98\3\2\2\2\u1a9a\u1a99\3\2\2\2")
        buf.write("\u1a9b\u0367\3\2\2\2\u1a9c\u1a9f\7\u00ab\2\2\u1a9d\u1aa0")
        buf.write("\5\u022a\u0116\2\u1a9e\u1aa0\5\u033e\u01a0\2\u1a9f\u1a9d")
        buf.write("\3\2\2\2\u1a9f\u1a9e\3\2\2\2\u1aa0\u0369\3\2\2\2\u1aa1")
        buf.write("\u1aa2\5\u0424\u0213\2\u1aa2\u1aa3\5\u0436\u021c\2\u1aa3")
        buf.write("\u1ab5\3\2\2\2\u1aa4\u1ab5\5\u041e\u0210\2\u1aa5\u1ab5")
        buf.write("\5\u042a\u0216\2\u1aa6\u1ab5\5\u0420\u0211\2\u1aa7\u1aa8")
        buf.write("\7\u02da\2\2\u1aa8\u1aa9\5\u028c\u0147\2\u1aa9\u1aad\7")
        buf.write("\u02db\2\2\u1aaa\u1aac\5\u0290\u0149\2\u1aab\u1aaa\3\2")
        buf.write("\2\2\u1aac\u1aaf\3\2\2\2\u1aad\u1aab\3\2\2\2\u1aad\u1aae")
        buf.write("\3\2\2\2\u1aae\u1ab5\3\2\2\2\u1aaf\u1aad\3\2\2\2\u1ab0")
        buf.write("\u1ab1\7\u02da\2\2\u1ab1\u1ab2\5\u033c\u019f\2\u1ab2\u1ab3")
        buf.write("\7\u02db\2\2\u1ab3\u1ab5\3\2\2\2\u1ab4\u1aa1\3\2\2\2\u1ab4")
        buf.write("\u1aa4\3\2\2\2\u1ab4\u1aa5\3\2\2\2\u1ab4\u1aa6\3\2\2\2")
        buf.write("\u1ab4\u1aa7\3\2\2\2\u1ab4\u1ab0\3\2\2\2\u1ab5\u036b\3")
        buf.write("\2\2\2\u1ab6\u1abf\t]\2\2\u1ab7\u1ab8\7\u02da\2\2\u1ab8")
        buf.write("\u1ab9\5\u028c\u0147\2\u1ab9\u1aba\7\u02db\2\2\u1aba\u1ac0")
        buf.write("\3\2\2\2\u1abb\u1abc\7\u02da\2\2\u1abc\u1abd\5\u033e\u01a0")
        buf.write("\2\u1abd\u1abe\7\u02db\2\2\u1abe\u1ac0\3\2\2\2\u1abf\u1ab7")
        buf.write("\3\2\2\2\u1abf\u1abb\3\2\2\2\u1ac0\u036d\3\2\2\2\u1ac1")
        buf.write("\u1ac2\7\u02c5\2\2\u1ac2\u1ac3\7\u02da\2\2\u1ac3\u1ac4")
        buf.write("\5\u033e\u01a0\2\u1ac4\u1ac5\7\u02e0\2\2\u1ac5\u1ac8\5")
        buf.write("\u033e\u01a0\2\u1ac6\u1ac7\7\u02e0\2\2\u1ac7\u1ac9\5\u033e")
        buf.write("\u01a0\2\u1ac8\u1ac6\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9")
        buf.write("\u1aca\3\2\2\2\u1aca\u1acb\7\u02db\2\2\u1acb\u1b08\3\2")
        buf.write("\2\2\u1acc\u1acd\7\u02c6\2\2\u1acd\u1ad1\7\u02da\2\2\u1ace")
        buf.write("\u1ad2\5\u0424\u0213\2\u1acf\u1ad2\5\u0370\u01b9\2\u1ad0")
        buf.write("\u1ad2\5\u033e\u01a0\2\u1ad1\u1ace\3\2\2\2\u1ad1\u1acf")
        buf.write("\3\2\2\2\u1ad1\u1ad0\3\2\2\2\u1ad2\u1ad5\3\2\2\2\u1ad3")
        buf.write("\u1ad4\7\u02e0\2\2\u1ad4\u1ad6\5\u0430\u0219\2\u1ad5\u1ad3")
        buf.write("\3\2\2\2\u1ad5\u1ad6\3\2\2\2\u1ad6\u1ad9\3\2\2\2\u1ad7")
        buf.write("\u1ad8\7\u02e0\2\2\u1ad8\u1ada\5\u0430\u0219\2\u1ad9\u1ad7")
        buf.write("\3\2\2\2\u1ad9\u1ada\3\2\2\2\u1ada\u1adb\3\2\2\2\u1adb")
        buf.write("\u1adc\7\u02db\2\2\u1adc\u1b08\3\2\2\2\u1add\u1ade\7\u02b9")
        buf.write("\2\2\u1ade\u1adf\7\u02da\2\2\u1adf\u1ae0\5\u033c\u019f")
        buf.write("\2\u1ae0\u1ae1\7\u02db\2\2\u1ae1\u1b08\3\2\2\2\u1ae2\u1ae3")
        buf.write("\7N\2\2\u1ae3\u1ae4\7\u02da\2\2\u1ae4\u1ae5\5\u0350\u01a9")
        buf.write("\2\u1ae5\u1ae6\7\u027a\2\2\u1ae6\u1ae7\7\u015f\2\2\u1ae7")
        buf.write("\u1ae8\7\u02db\2\2\u1ae8\u1b08\3\2\2\2\u1ae9\u1aea\7\u02c0")
        buf.write("\2\2\u1aea\u1aeb\7\u02da\2\2\u1aeb\u1aec\5\u033e\u01a0")
        buf.write("\2\u1aec\u1aed\7\u02e0\2\2\u1aed\u1aee\5\u033e\u01a0\2")
        buf.write("\u1aee\u1aef\7\u02db\2\2\u1aef\u1b08\3\2\2\2\u1af0\u1af1")
        buf.write("\7\u02c7\2\2\u1af1\u1af9\7\u02da\2\2\u1af2\u1af4\t^\2")
        buf.write("\2\u1af3\u1af2\3\2\2\2\u1af3\u1af4\3\2\2\2\u1af4\u1af6")
        buf.write("\3\2\2\2\u1af5\u1af7\5\u0430\u0219\2\u1af6\u1af5\3\2\2")
        buf.write("\2\u1af6\u1af7\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1afa")
        buf.write("\7\u00e0\2\2\u1af9\u1af3\3\2\2\2\u1af9\u1afa\3\2\2\2\u1afa")
        buf.write("\u1afb\3\2\2\2\u1afb\u1afc\5\u0350\u01a9\2\u1afc\u1afd")
        buf.write("\7\u02db\2\2\u1afd\u1b08\3\2\2\2\u1afe\u1aff\7\u02ce\2")
        buf.write("\2\u1aff\u1b00\7\u02da\2\2\u1b00\u1b03\5\u033e\u01a0\2")
        buf.write("\u1b01\u1b02\7\u02e0\2\2\u1b02\u1b04\5\u0430\u0219\2\u1b03")
        buf.write("\u1b01\3\2\2\2\u1b03\u1b04\3\2\2\2\u1b04\u1b05\3\2\2\2")
        buf.write("\u1b05\u1b06\7\u02db\2\2\u1b06\u1b08\3\2\2\2\u1b07\u1ac1")
        buf.write("\3\2\2\2\u1b07\u1acc\3\2\2\2\u1b07\u1add\3\2\2\2\u1b07")
        buf.write("\u1ae2\3\2\2\2\u1b07\u1ae9\3\2\2\2\u1b07\u1af0\3\2\2\2")
        buf.write("\u1b07\u1afe\3\2\2\2\u1b08\u036f\3\2\2\2\u1b09\u1b0d\5")
        buf.write("\u036e\u01b8\2\u1b0a\u1b0d\5\u0372\u01ba\2\u1b0b\u1b0d")
        buf.write("\5\u0376\u01bc\2\u1b0c\u1b09\3\2\2\2\u1b0c\u1b0a\3\2\2")
        buf.write("\2\u1b0c\u1b0b\3\2\2\2\u1b0d\u0371\3\2\2\2\u1b0e\u1b11")
        buf.write("\5\u0374\u01bb\2\u1b0f\u1b12\5\u0358\u01ad\2\u1b10\u1b12")
        buf.write("\5\u035a\u01ae\2\u1b11\u1b0f\3\2\2\2\u1b11\u1b10\3\2\2")
        buf.write("\2\u1b11\u1b12\3\2\2\2\u1b12\u0373\3\2\2\2\u1b13\u1b14")
        buf.write("\7\u02c8\2\2\u1b14\u1b16\7\u02da\2\2\u1b15\u1b17\t_\2")
        buf.write("\2\u1b16\u1b15\3\2\2\2\u1b16\u1b17\3\2\2\2\u1b17\u1b18")
        buf.write("\3\2\2\2\u1b18\u1b19\5\u033e\u01a0\2\u1b19\u1b1a\7\u02db")
        buf.write("\2\2\u1b1a\u1b4e\3\2\2\2\u1b1b\u1b1c\7s\2\2\u1b1c\u1b24")
        buf.write("\7\u02da\2\2\u1b1d\u1b25\7\u02dd\2\2\u1b1e\u1b20\tI\2")
        buf.write("\2\u1b1f\u1b1e\3\2\2\2\u1b1f\u1b20\3\2\2\2\u1b20\u1b21")
        buf.write("\3\2\2\2\u1b21\u1b23\5\u0350\u01a9\2\u1b22\u1b1f\3\2\2")
        buf.write("\2\u1b22\u1b23\3\2\2\2\u1b23\u1b25\3\2\2\2\u1b24\u1b1d")
        buf.write("\3\2\2\2\u1b24\u1b22\3\2\2\2\u1b25\u1b26\3\2\2\2\u1b26")
        buf.write("\u1b28\7\u02db\2\2\u1b27\u1b29\5\u037e\u01c0\2\u1b28\u1b27")
        buf.write("\3\2\2\2\u1b28\u1b29\3\2\2\2\u1b29\u1b4e\3\2\2\2\u1b2a")
        buf.write("\u1b2b\7\u02c3\2\2\u1b2b\u1b2c\7\u02da\2\2\u1b2c\u1b2f")
        buf.write("\5\u033e\u01a0\2\u1b2d\u1b2e\7\u02e0\2\2\u1b2e\u1b30\7")
        buf.write("\u02d4\2\2\u1b2f\u1b2d\3\2\2\2\u1b2f\u1b30\3\2\2\2\u1b30")
        buf.write("\u1b31\3\2\2\2\u1b31\u1b32\7\u02db\2\2\u1b32\u1b4e\3\2")
        buf.write("\2\2\u1b33\u1b34\7\u02b6\2\2\u1b34\u1b36\7\u02da\2\2\u1b35")
        buf.write("\u1b37\t_\2\2\u1b36\u1b35\3\2\2\2\u1b36\u1b37\3\2\2\2")
        buf.write("\u1b37\u1b38\3\2\2\2\u1b38\u1b39\5\u033e\u01a0\2\u1b39")
        buf.write("\u1b3a\7\u02db\2\2\u1b3a\u1b4e\3\2\2\2\u1b3b\u1b3c\7\u02bc")
        buf.write("\2\2\u1b3c\u1b3e\7\u02da\2\2\u1b3d\u1b3f\t_\2\2\u1b3e")
        buf.write("\u1b3d\3\2\2\2\u1b3e\u1b3f\3\2\2\2\u1b3f\u1b40\3\2\2\2")
        buf.write("\u1b40\u1b41\5\u033e\u01a0\2\u1b41\u1b42\7\u02db\2\2\u1b42")
        buf.write("\u1b4e\3\2\2\2\u1b43\u1b44\7\u02cc\2\2\u1b44\u1b45\7\u02da")
        buf.write("\2\2\u1b45\u1b46\5\u033c\u019f\2\u1b46\u1b47\7\u02db\2")
        buf.write("\2\u1b47\u1b4e\3\2\2\2\u1b48\u1b49\7\u02cd\2\2\u1b49\u1b4a")
        buf.write("\7\u02da\2\2\u1b4a\u1b4b\5\u033c\u019f\2\u1b4b\u1b4c\7")
        buf.write("\u02db\2\2\u1b4c\u1b4e\3\2\2\2\u1b4d\u1b13\3\2\2\2\u1b4d")
        buf.write("\u1b1b\3\2\2\2\u1b4d\u1b2a\3\2\2\2\u1b4d\u1b33\3\2\2\2")
        buf.write("\u1b4d\u1b3b\3\2\2\2\u1b4d\u1b43\3\2\2\2\u1b4d\u1b48\3")
        buf.write("\2\2\2\u1b4e\u0375\3\2\2\2\u1b4f\u1b50\5\u0378\u01bd\2")
        buf.write("\u1b50\u1b52\5\u040e\u0208\2\u1b51\u1b53\5\u037e\u01c0")
        buf.write("\2\u1b52\u1b51\3\2\2\2\u1b52\u1b53\3\2\2\2\u1b53\u1c8b")
        buf.write("\3\2\2\2\u1b54\u1b55\5\u0438\u021d\2\u1b55\u1b57\5\u0410")
        buf.write("\u0209\2\u1b56\u1b58\5\u0386\u01c4\2\u1b57\u1b56\3\2\2")
        buf.write("\2\u1b57\u1b58\3\2\2\2\u1b58\u1c8b\3\2\2\2\u1b59\u1b5a")
        buf.write("\7s\2\2\u1b5a\u1b60\7\u02da\2\2\u1b5b\u1b61\7\u02dd\2")
        buf.write("\2\u1b5c\u1b5e\tI\2\2\u1b5d\u1b5c\3\2\2\2\u1b5d\u1b5e")
        buf.write("\3\2\2\2\u1b5e\u1b5f\3\2\2\2\u1b5f\u1b61\5\u0350\u01a9")
        buf.write("\2\u1b60\u1b5b\3\2\2\2\u1b60\u1b5d\3\2\2\2\u1b61\u1b62")
        buf.write("\3\2\2\2\u1b62\u1b64\7\u02db\2\2\u1b63\u1b65\5\u037e\u01c0")
        buf.write("\2\u1b64\u1b63\3\2\2\2\u1b64\u1b65\3\2\2\2\u1b65\u1c8b")
        buf.write("\3\2\2\2\u1b66\u1b67\t`\2\2\u1b67\u1b6e\7\u02da\2\2\u1b68")
        buf.write("\u1b69\7\u0159\2\2\u1b69\u1b6a\7\u02da\2\2\u1b6a\u1b6b")
        buf.write("\5\u028c\u0147\2\u1b6b\u1b6c\7\u02db\2\2\u1b6c\u1b6f\3")
        buf.write("\2\2\2\u1b6d\u1b6f\5\u0350\u01a9\2\u1b6e\u1b68\3\2\2\2")
        buf.write("\u1b6e\u1b6d\3\2\2\2\u1b6f\u1b70\3\2\2\2\u1b70\u1b71\7")
        buf.write("\30\2\2\u1b71\u1b72\5\u0416\u020c\2\u1b72\u1b73\7\u02db")
        buf.write("\2\2\u1b73\u1c8b\3\2\2\2\u1b74\u1b75\7U\2\2\u1b75\u1b76")
        buf.write("\7\u02da\2\2\u1b76\u1b7c\5\u0424\u0213\2\u1b77\u1b7a\7")
        buf.write("\u02e0\2\2\u1b78\u1b7b\5\u042c\u0217\2\u1b79\u1b7b\5\u0430")
        buf.write("\u0219\2\u1b7a\u1b78\3\2\2\2\u1b7a\u1b79\3\2\2\2\u1b7b")
        buf.write("\u1b7d\3\2\2\2\u1b7c\u1b77\3\2\2\2\u1b7c\u1b7d\3\2\2\2")
        buf.write("\u1b7d\u1b7e\3\2\2\2\u1b7e\u1b7f\7\u02db\2\2\u1b7f\u1c8b")
        buf.write("\3\2\2\2\u1b80\u1b81\7V\2\2\u1b81\u1b83\7\u02da\2\2\u1b82")
        buf.write("\u1b84\ta\2\2\u1b83\u1b82\3\2\2\2\u1b83\u1b84\3\2\2\2")
        buf.write("\u1b84\u1b85\3\2\2\2\u1b85\u1b87\5\u0350\u01a9\2\u1b86")
        buf.write("\u1b88\5\u038a\u01c6\2\u1b87\u1b86\3\2\2\2\u1b87\u1b88")
        buf.write("\3\2\2\2\u1b88\u1b89\3\2\2\2\u1b89\u1b8a\7\u02db\2\2\u1b8a")
        buf.write("\u1c8b\3\2\2\2\u1b8b\u1b8c\5\u037a\u01be\2\u1b8c\u1b8e")
        buf.write("\5\u040c\u0207\2\u1b8d\u1b8f\5\u038c\u01c7\2\u1b8e\u1b8d")
        buf.write("\3\2\2\2\u1b8f\u1b90\3\2\2\2\u1b90\u1b8e\3\2\2\2\u1b90")
        buf.write("\u1b91\3\2\2\2\u1b91\u1c8b\3\2\2\2\u1b92\u1b93\5\u03ee")
        buf.write("\u01f8\2\u1b93\u1b94\tb\2\2\u1b94\u1c8b\3\2\2\2\u1b95")
        buf.write("\u1b96\7\u008b\2\2\u1b96\u1b97\7\u02da\2\2\u1b97\u1b99")
        buf.write("\5\u0350\u01a9\2\u1b98\u1b9a\tc\2\2\u1b99\u1b98\3\2\2")
        buf.write("\2\u1b99\u1b9a\3\2\2\2\u1b9a\u1b9b\3\2\2\2\u1b9b\u1b9c")
        buf.write("\7\u02db\2\2\u1b9c\u1c8b\3\2\2\2\u1b9d\u1b9e\7\u00ca\2")
        buf.write("\2\u1b9e\u1b9f\7\u02da\2\2\u1b9f\u1ba0\5\u0438\u021d\2")
        buf.write("\u1ba0\u1ba1\7\u00e0\2\2\u1ba1\u1ba2\5\u0350\u01a9\2\u1ba2")
        buf.write("\u1ba3\7\u02db\2\2\u1ba3\u1c8b\3\2\2\2\u1ba4\u1ba5\td")
        buf.write("\2\2\u1ba5\u1ba7\5\u040e\u0208\2\u1ba6\u1ba8\5\u0412\u020a")
        buf.write("\2\u1ba7\u1ba6\3\2\2\2\u1ba7\u1ba8\3\2\2\2\u1ba8\u1ba9")
        buf.write("\3\2\2\2\u1ba9\u1baa\5\u037e\u01c0\2\u1baa\u1c8b\3\2\2")
        buf.write("\2\u1bab\u1bac\5\u037c\u01bf\2\u1bac\u1bad\7\u02da\2\2")
        buf.write("\u1bad\u1baf\5\u033c\u019f\2\u1bae\u1bb0\5\u038e\u01c8")
        buf.write("\2\u1baf\u1bae\3\2\2\2\u1baf\u1bb0\3\2\2\2\u1bb0\u1bb2")
        buf.write("\3\2\2\2\u1bb1\u1bb3\5\u0386\u01c4\2\u1bb2\u1bb1\3\2\2")
        buf.write("\2\u1bb2\u1bb3\3\2\2\2\u1bb3\u1bb4\3\2\2\2\u1bb4\u1bb5")
        buf.write("\7\u02db\2\2\u1bb5\u1c8b\3\2\2\2\u1bb6\u1bb7\7\u025d\2")
        buf.write("\2\u1bb7\u1bb8\7\u02da\2\2\u1bb8\u1bbb\5\u033e\u01a0\2")
        buf.write("\u1bb9\u1bba\7\u027a\2\2\u1bba\u1bbc\te\2\2\u1bbb\u1bb9")
        buf.write("\3\2\2\2\u1bbb\u1bbc\3\2\2\2\u1bbc\u1bc1\3\2\2\2\u1bbd")
        buf.write("\u1bbe\7\u02e0\2\2\u1bbe\u1bc0\5\u033e\u01a0\2\u1bbf\u1bbd")
        buf.write("\3\2\2\2\u1bc0\u1bc3\3\2\2\2\u1bc1\u1bbf\3\2\2\2\u1bc1")
        buf.write("\u1bc2\3\2\2\2\u1bc2\u1bc4\3\2\2\2\u1bc3\u1bc1\3\2\2\2")
        buf.write("\u1bc4\u1bc5\7\u02db\2\2\u1bc5\u1c8b\3\2\2\2\u1bc6\u1bc7")
        buf.write("\7\u025f\2\2\u1bc7\u1bc8\7\u02da\2\2\u1bc8\u1bc9\5\u033e")
        buf.write("\u01a0\2\u1bc9\u1bcb\7\30\2\2\u1bca\u1bcc\7\u01db\2\2")
        buf.write("\u1bcb\u1bca\3\2\2\2\u1bcb\u1bcc\3\2\2\2\u1bcc\u1bcd\3")
        buf.write("\2\2\2\u1bcd\u1bce\5\u0416\u020c\2\u1bce\u1bcf\7\u02db")
        buf.write("\2\2\u1bcf\u1c8b\3\2\2\2\u1bd0\u1bd1\7\u02c7\2\2\u1bd1")
        buf.write("\u1bd9\7\u02da\2\2\u1bd2\u1bd4\t^\2\2\u1bd3\u1bd2\3\2")
        buf.write("\2\2\u1bd3\u1bd4\3\2\2\2\u1bd4\u1bd6\3\2\2\2\u1bd5\u1bd7")
        buf.write("\5\u0430\u0219\2\u1bd6\u1bd5\3\2\2\2\u1bd6\u1bd7\3\2\2")
        buf.write("\2\u1bd7\u1bd8\3\2\2\2\u1bd8\u1bda\7\u00e0\2\2\u1bd9\u1bd3")
        buf.write("\3\2\2\2\u1bd9\u1bda\3\2\2\2\u1bda\u1bdb\3\2\2\2\u1bdb")
        buf.write("\u1bdc\5\u0350\u01a9\2\u1bdc\u1bdd\7\u02db\2\2\u1bdd\u1c8b")
        buf.write("\3\2\2\2\u1bde\u1bdf\7\u0294\2\2\u1bdf\u1be0\7\u02da\2")
        buf.write("\2\u1be0\u1be2\5\u033e\u01a0\2\u1be1\u1be3\5\u02ee\u0178")
        buf.write("\2\u1be2\u1be1\3\2\2\2\u1be2\u1be3\3\2\2\2\u1be3\u1be4")
        buf.write("\3\2\2\2\u1be4\u1be7\7\u02db\2\2\u1be5\u1be6\7\u02d3\2")
        buf.write("\2\u1be6\u1be8\5\u0422\u0212\2\u1be7\u1be5\3\2\2\2\u1be7")
        buf.write("\u1be8\3\2\2\2\u1be8\u1c8b\3\2\2\2\u1be9\u1bea\tf\2\2")
        buf.write("\u1bea\u1bef\7\u02da\2\2\u1beb\u1bed\7\u02e0\2\2\u1bec")
        buf.write("\u1beb\3\2\2\2\u1bec\u1bed\3\2\2\2\u1bed\u1bee\3\2\2\2")
        buf.write("\u1bee\u1bf0\5\u039a\u01ce\2\u1bef\u1bec\3\2\2\2\u1bf0")
        buf.write("\u1bf1\3\2\2\2\u1bf1\u1bef\3\2\2\2\u1bf1\u1bf2\3\2\2\2")
        buf.write("\u1bf2\u1bf3\3\2\2\2\u1bf3\u1bf6\7\u02db\2\2\u1bf4\u1bf5")
        buf.write("\7\u02d3\2\2\u1bf5\u1bf7\5\u0422\u0212\2\u1bf6\u1bf4\3")
        buf.write("\2\2\2\u1bf6\u1bf7\3\2\2\2\u1bf7\u1c8b\3\2\2\2\u1bf8\u1bf9")
        buf.write("\7\u0298\2\2\u1bf9\u1bfb\7\u02da\2\2\u1bfa\u1bfc\tg\2")
        buf.write("\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc\u1bfe")
        buf.write("\3\2\2\2\u1bfd\u1bff\th\2\2\u1bfe\u1bfd\3\2\2\2\u1bfe")
        buf.write("\u1bff\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00\u1c03\5\u033e")
        buf.write("\u01a0\2\u1c01\u1c02\7\u02e0\2\2\u1c02\u1c04\5\u0392\u01ca")
        buf.write("\2\u1c03\u1c01\3\2\2\2\u1c03\u1c04\3\2\2\2\u1c04\u1c0c")
        buf.write("\3\2\2\2\u1c05\u1c06\7\u02e0\2\2\u1c06\u1c08\5\u033e\u01a0")
        buf.write("\2\u1c07\u1c09\5\u03ae\u01d8\2\u1c08\u1c07\3\2\2\2\u1c08")
        buf.write("\u1c09\3\2\2\2\u1c09\u1c0b\3\2\2\2\u1c0a\u1c05\3\2\2\2")
        buf.write("\u1c0b\u1c0e\3\2\2\2\u1c0c\u1c0a\3\2\2\2\u1c0c\u1c0d\3")
        buf.write("\2\2\2\u1c0d\u1c0f\3\2\2\2\u1c0e\u1c0c\3\2\2\2\u1c0f\u1c12")
        buf.write("\7\u02db\2\2\u1c10\u1c11\7\u02d3\2\2\u1c11\u1c13\5\u0422")
        buf.write("\u0212\2\u1c12\u1c10\3\2\2\2\u1c12\u1c13\3\2\2\2\u1c13")
        buf.write("\u1c8b\3\2\2\2\u1c14\u1c15\7\u0299\2\2\u1c15\u1c16\7\u02da")
        buf.write("\2\2\u1c16\u1c18\5\u033e\u01a0\2\u1c17\u1c19\5\u0390\u01c9")
        buf.write("\2\u1c18\u1c17\3\2\2\2\u1c18\u1c19\3\2\2\2\u1c19\u1c1a")
        buf.write("\3\2\2\2\u1c1a\u1c1b\7\u02db\2\2\u1c1b\u1c8b\3\2\2\2\u1c1c")
        buf.write("\u1c1d\7\u029c\2\2\u1c1d\u1c1e\7\u02da\2\2\u1c1e\u1c1f")
        buf.write("\ti\2\2\u1c1f\u1c21\5\u0350\u01a9\2\u1c20\u1c22\7\u028a")
        buf.write("\2\2\u1c21\u1c20\3\2\2\2\u1c21\u1c22\3\2\2\2\u1c22\u1c23")
        buf.write("\3\2\2\2\u1c23\u1c26\7\u02db\2\2\u1c24\u1c25\7\u02d3\2")
        buf.write("\2\u1c25\u1c27\5\u0422\u0212\2\u1c26\u1c24\3\2\2\2\u1c26")
        buf.write("\u1c27\3\2\2\2\u1c27\u1c8b\3\2\2\2\u1c28\u1c29\7\u029d")
        buf.write("\2\2\u1c29\u1c2e\7\u02da\2\2\u1c2a\u1c2b\7\u015a\2\2\u1c2b")
        buf.write("\u1c2f\5\u0432\u021a\2\u1c2c\u1c2d\7\u00b9\2\2\u1c2d\u1c2f")
        buf.write("\5\u0350\u01a9\2\u1c2e\u1c2a\3\2\2\2\u1c2e\u1c2c\3\2\2")
        buf.write("\2\u1c2f\u1c32\3\2\2\2\u1c30\u1c31\7\u02e0\2\2\u1c31\u1c33")
        buf.write("\5\u0350\u01a9\2\u1c32\u1c30\3\2\2\2\u1c32\u1c33\3\2\2")
        buf.write("\2\u1c33\u1c34\3\2\2\2\u1c34\u1c37\7\u02db\2\2\u1c35\u1c36")
        buf.write("\7\u02d3\2\2\u1c36\u1c38\5\u0422\u0212\2\u1c37\u1c35\3")
        buf.write("\2\2\2\u1c37\u1c38\3\2\2\2\u1c38\u1c8b\3\2\2\2\u1c39\u1c3a")
        buf.write("\7\u029e\2\2\u1c3a\u1c3b\7\u02da\2\2\u1c3b\u1c3d\5\u0350")
        buf.write("\u01a9\2\u1c3c\u1c3e\5\u0390\u01c9\2\u1c3d\u1c3c\3\2\2")
        buf.write("\2\u1c3d\u1c3e\3\2\2\2\u1c3e\u1c3f\3\2\2\2\u1c3f\u1c40")
        buf.write("\7\u01ee\2\2\u1c40\u1c44\7l\2\2\u1c41\u1c42\7\u017e\2")
        buf.write("\2\u1c42\u1c43\7\u018d\2\2\u1c43\u1c45\7\u00ad\2\2\u1c44")
        buf.write("\u1c41\3\2\2\2\u1c44\u1c45\3\2\2\2\u1c45\u1c46\3\2\2\2")
        buf.write("\u1c46\u1c49\7\u02db\2\2\u1c47\u1c48\7\u02d3\2\2\u1c48")
        buf.write("\u1c4a\5\u0422\u0212\2\u1c49\u1c47\3\2\2\2\u1c49\u1c4a")
        buf.write("\3\2\2\2\u1c4a\u1c8b\3\2\2\2\u1c4b\u1c4c\7\u029f\2\2\u1c4c")
        buf.write("\u1c4d\7\u02da\2\2\u1c4d\u1c50\5\u0350\u01a9\2\u1c4e\u1c4f")
        buf.write("\7\u02e0\2\2\u1c4f\u1c51\5\u039c\u01cf\2\u1c50\u1c4e\3")
        buf.write("\2\2\2\u1c50\u1c51\3\2\2\2\u1c51\u1c54\3\2\2\2\u1c52\u1c53")
        buf.write("\7\u02e0\2\2\u1c53\u1c55\5\u039e\u01d0\2\u1c54\u1c52\3")
        buf.write("\2\2\2\u1c54\u1c55\3\2\2\2\u1c55\u1c56\3\2\2\2\u1c56\u1c59")
        buf.write("\7\u02db\2\2\u1c57\u1c58\7\u02d3\2\2\u1c58\u1c5a\5\u0422")
        buf.write("\u0212\2\u1c59\u1c57\3\2\2\2\u1c59\u1c5a\3\2\2\2\u1c5a")
        buf.write("\u1c8b\3\2\2\2\u1c5b\u1c5c\7\u02a1\2\2\u1c5c\u1c5d\7\u02da")
        buf.write("\2\2\u1c5d\u1c5e\ti\2\2\u1c5e\u1c61\5\u0350\u01a9\2\u1c5f")
        buf.write("\u1c60\7\30\2\2\u1c60\u1c62\5\u0416\u020c\2\u1c61\u1c5f")
        buf.write("\3\2\2\2\u1c61\u1c62\3\2\2\2\u1c62\u1c64\3\2\2\2\u1c63")
        buf.write("\u1c65\5\u03a0\u01d1\2\u1c64\u1c63\3\2\2\2\u1c64\u1c65")
        buf.write("\3\2\2\2\u1c65\u1c67\3\2\2\2\u1c66\u1c68\5\u03a2\u01d2")
        buf.write("\2\u1c67\u1c66\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c6a")
        buf.write("\3\2\2\2\u1c69\u1c6b\5\u03a4\u01d3\2\u1c6a\u1c69\3\2\2")
        buf.write("\2\u1c6a\u1c6b\3\2\2\2\u1c6b\u1c6e\3\2\2\2\u1c6c\u1c6d")
        buf.write("\tj\2\2\u1c6d\u1c6f\7\u0090\2\2\u1c6e\u1c6c\3\2\2\2\u1c6e")
        buf.write("\u1c6f\3\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u1c73\7\u02db")
        buf.write("\2\2\u1c71\u1c72\7\u02d3\2\2\u1c72\u1c74\5\u0422\u0212")
        buf.write("\2\u1c73\u1c71\3\2\2\2\u1c73\u1c74\3\2\2\2\u1c74\u1c8b")
        buf.write("\3\2\2\2\u1c75\u1c76\7\u02a2\2\2\u1c76\u1c78\7\u02da\2")
        buf.write("\2\u1c77\u1c79\5\u0394\u01cb\2\u1c78\u1c77\3\2\2\2\u1c78")
        buf.write("\u1c79\3\2\2\2\u1c79\u1c7a\3\2\2\2\u1c7a\u1c7c\5\u0350")
        buf.write("\u01a9\2\u1c7b\u1c7d\5\u0390\u01c9\2\u1c7c\u1c7b\3\2\2")
        buf.write("\2\u1c7c\u1c7d\3\2\2\2\u1c7d\u1c83\3\2\2\2\u1c7e\u1c7f")
        buf.write("\7X\2\2\u1c7f\u1c80\5\u0396\u01cc\2\u1c80\u1c81\7\u02e0")
        buf.write("\2\2\u1c81\u1c82\5\u0396\u01cc\2\u1c82\u1c84\3\2\2\2\u1c83")
        buf.write("\u1c7e\3\2\2\2\u1c83\u1c84\3\2\2\2\u1c84\u1c85\3\2\2\2")
        buf.write("\u1c85\u1c88\7\u02db\2\2\u1c86\u1c87\7\u02d3\2\2\u1c87")
        buf.write("\u1c89\5\u0422\u0212\2\u1c88\u1c86\3\2\2\2\u1c88\u1c89")
        buf.write("\3\2\2\2\u1c89\u1c8b\3\2\2\2\u1c8a\u1b4f\3\2\2\2\u1c8a")
        buf.write("\u1b54\3\2\2\2\u1c8a\u1b59\3\2\2\2\u1c8a\u1b66\3\2\2\2")
        buf.write("\u1c8a\u1b74\3\2\2\2\u1c8a\u1b80\3\2\2\2\u1c8a\u1b8b\3")
        buf.write("\2\2\2\u1c8a\u1b92\3\2\2\2\u1c8a\u1b95\3\2\2\2\u1c8a\u1b9d")
        buf.write("\3\2\2\2\u1c8a\u1ba4\3\2\2\2\u1c8a\u1bab\3\2\2\2\u1c8a")
        buf.write("\u1bb6\3\2\2\2\u1c8a\u1bc6\3\2\2\2\u1c8a\u1bd0\3\2\2\2")
        buf.write("\u1c8a\u1bde\3\2\2\2\u1c8a\u1be9\3\2\2\2\u1c8a\u1bf8\3")
        buf.write("\2\2\2\u1c8a\u1c14\3\2\2\2\u1c8a\u1c1c\3\2\2\2\u1c8a\u1c28")
        buf.write("\3\2\2\2\u1c8a\u1c39\3\2\2\2\u1c8a\u1c4b\3\2\2\2\u1c8a")
        buf.write("\u1c5b\3\2\2\2\u1c8a\u1c75\3\2\2\2\u1c8b\u0377\3\2\2\2")
        buf.write("\u1c8c\u1c8d\tk\2\2\u1c8d\u0379\3\2\2\2\u1c8e\u1c8f\t")
        buf.write("l\2\2\u1c8f\u037b\3\2\2\2\u1c90\u1c91\tm\2\2\u1c91\u037d")
        buf.write("\3\2\2\2\u1c92\u1c93\7\u019b\2\2\u1c93\u1c95\7\u02da\2")
        buf.write("\2\u1c94\u1c96\5\u02aa\u0156\2\u1c95\u1c94\3\2\2\2\u1c95")
        buf.write("\u1c96\3\2\2\2\u1c96\u1c9b\3\2\2\2\u1c97\u1c99\5\u02ee")
        buf.write("\u0178\2\u1c98\u1c9a\5\u0380\u01c1\2\u1c99\u1c98\3\2\2")
        buf.write("\2\u1c99\u1c9a\3\2\2\2\u1c9a\u1c9c\3\2\2\2\u1c9b\u1c97")
        buf.write("\3\2\2\2\u1c9b\u1c9c\3\2\2\2\u1c9c\u1c9d\3\2\2\2\u1c9d")
        buf.write("\u1c9e\7\u02db\2\2\u1c9e\u037f\3\2\2\2\u1c9f\u1ca6\5\u0382")
        buf.write("\u01c2\2\u1ca0\u1ca1\7.\2\2\u1ca1\u1ca2\5\u0384\u01c3")
        buf.write("\2\u1ca2\u1ca3\7\23\2\2\u1ca3\u1ca4\5\u0384\u01c3\2\u1ca4")
        buf.write("\u1ca7\3\2\2\2\u1ca5\u1ca7\5\u0384\u01c3\2\u1ca6\u1ca0")
        buf.write("\3\2\2\2\u1ca6\u1ca5\3\2\2\2\u1ca7\u0381\3\2\2\2\u1ca8")
        buf.write("\u1ca9\tn\2\2\u1ca9\u0383\3\2\2\2\u1caa\u1cab\7\u0267")
        buf.write("\2\2\u1cab\u1cb2\7\u01bc\2\2\u1cac\u1cad\7x\2\2\u1cad")
        buf.write("\u1cb2\7\u01fb\2\2\u1cae\u1caf\5\u0350\u01a9\2\u1caf\u1cb0")
        buf.write("\to\2\2\u1cb0\u1cb2\3\2\2\2\u1cb1\u1caa\3\2\2\2\u1cb1")
        buf.write("\u1cac\3\2\2\2\u1cb1\u1cae\3\2\2\2\u1cb2\u0385\3\2\2\2")
        buf.write("\u1cb3\u1cbd\7\u027a\2\2\u1cb4\u1cbe\7\u02dd\2\2\u1cb5")
        buf.write("\u1cb7\7\u02e0\2\2\u1cb6\u1cb5\3\2\2\2\u1cb6\u1cb7\3\2")
        buf.write("\2\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cba\5\u0388\u01c5\2\u1cb9")
        buf.write("\u1cb6\3\2\2\2\u1cba\u1cbb\3\2\2\2\u1cbb\u1cb9\3\2\2\2")
        buf.write("\u1cbb\u1cbc\3\2\2\2\u1cbc\u1cbe\3\2\2\2\u1cbd\u1cb4\3")
        buf.write("\2\2\2\u1cbd\u1cb9\3\2\2\2\u1cbe\u0387\3\2\2\2\u1cbf\u1cc1")
        buf.write("\7\u0103\2\2\u1cc0\u1cc2\7\u0199\2\2\u1cc1\u1cc0\3\2\2")
        buf.write("\2\u1cc1\u1cc2\3\2\2\2\u1cc2\u1cc5\3\2\2\2\u1cc3\u1cc5")
        buf.write("\7\u0199\2\2\u1cc4\u1cbf\3\2\2\2\u1cc4\u1cc3\3\2\2\2\u1cc4")
        buf.write("\u1cc5\3\2\2\2\u1cc5\u1cc6\3\2\2\2\u1cc6\u1cc8\5\u0298")
        buf.write("\u014d\2\u1cc7\u1cc9\5\u03ae\u01d8\2\u1cc8\u1cc7\3\2\2")
        buf.write("\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u0389\3\2\2\2\u1cca\u1ccb")
        buf.write("\7\u0193\2\2\u1ccb\u1ccc\7?\2\2\u1ccc\u1ccd\5\u0350\u01a9")
        buf.write("\2\u1ccd\u038b\3\2\2\2\u1cce\u1ccf\7\u028f\2\2\u1ccf\u1cd0")
        buf.write("\7\u00e8\2\2\u1cd0\u1cd1\7\u02da\2\2\u1cd1\u1cd2\5\u02ee")
        buf.write("\u0178\2\u1cd2\u1cd3\7\u02db\2\2\u1cd3\u1cd6\3\2\2\2\u1cd4")
        buf.write("\u1cd6\5\u037e\u01c0\2\u1cd5\u1cce\3\2\2\2\u1cd5\u1cd4")
        buf.write("\3\2\2\2\u1cd6\u038d\3\2\2\2\u1cd7\u1ced\7r\2\2\u1cd8")
        buf.write("\u1cda\7\u0153\2\2\u1cd9\u1cdb\7#\2\2\u1cda\u1cd9\3\2")
        buf.write("\2\2\u1cda\u1cdb\3\2\2\2\u1cdb\u1cee\3\2\2\2\u1cdc\u1ce1")
        buf.write("\7\u02da\2\2\u1cdd\u1cdf\7\u02e0\2\2\u1cde\u1cdd\3\2\2")
        buf.write("\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce2")
        buf.write("\5\u03b8\u01dd\2\u1ce1\u1cde\3\2\2\2\u1ce2\u1ce3\3\2\2")
        buf.write("\2\u1ce3\u1ce1\3\2\2\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1ce5")
        buf.write("\3\2\2\2\u1ce5\u1ce6\7\u02db\2\2\u1ce6\u1ce7\7\u027c\2")
        buf.write("\2\u1ce7\u1ce9\7\u02da\2\2\u1ce8\u1cea\5\u033c\u019f\2")
        buf.write("\u1ce9\u1ce8\3\2\2\2\u1ce9\u1cea\3\2\2\2\u1cea\u1ceb\3")
        buf.write("\2\2\2\u1ceb\u1cec\7\u02db\2\2\u1cec\u1cee\3\2\2\2\u1ced")
        buf.write("\u1cd8\3\2\2\2\u1ced\u1cdc\3\2\2\2\u1cee\u038f\3\2\2\2")
        buf.write("\u1cef\u1cf2\7\u01a3\2\2\u1cf0\u1cf1\7?\2\2\u1cf1\u1cf3")
        buf.write("\7\u027d\2\2\u1cf2\u1cf0\3\2\2\2\u1cf2\u1cf3\3\2\2\2\u1cf3")
        buf.write("\u1cf4\3\2\2\2\u1cf4\u1cf6\5\u033e\u01a0\2\u1cf5\u1cf7")
        buf.write("\5\u03ae\u01d8\2\u1cf6\u1cf5\3\2\2\2\u1cf6\u1cf7\3\2\2")
        buf.write("\2\u1cf7\u1cf8\3\2\2\2\u1cf8\u1cf9\7\u02e0\2\2\u1cf9\u1cfb")
        buf.write("\5\u033e\u01a0\2\u1cfa\u1cfc\5\u03ae\u01d8\2\u1cfb\u1cfa")
        buf.write("\3\2\2\2\u1cfb\u1cfc\3\2\2\2\u1cfc\u0391\3\2\2\2\u1cfd")
        buf.write("\u1cfe\7\u0295\2\2\u1cfe\u1d00\7\u02da\2\2\u1cff\u1d01")
        buf.write("\tg\2\2\u1d00\u1cff\3\2\2\2\u1d00\u1d01\3\2\2\2\u1d01")
        buf.write("\u1d03\3\2\2\2\u1d02\u1d04\tp\2\2\u1d03\u1d02\3\2\2\2")
        buf.write("\u1d03\u1d04\3\2\2\2\u1d04\u1d09\3\2\2\2\u1d05\u1d07\7")
        buf.write("\u02e0\2\2\u1d06\u1d05\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07")
        buf.write("\u1d08\3\2\2\2\u1d08\u1d0a\5\u039a\u01ce\2\u1d09\u1d06")
        buf.write("\3\2\2\2\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d09\3\2\2\2\u1d0b")
        buf.write("\u1d0c\3\2\2\2\u1d0c\u1d0d\3\2\2\2\u1d0d\u1d0e\7\u02db")
        buf.write("\2\2\u1d0e\u0393\3\2\2\2\u1d0f\u1d10\7\u029b\2\2\u1d10")
        buf.write("\u1d14\7\u02da\2\2\u1d11\u1d12\5\u0350\u01a9\2\u1d12\u1d13")
        buf.write("\5\u03ae\u01d8\2\u1d13\u1d15\3\2\2\2\u1d14\u1d11\3\2\2")
        buf.write("\2\u1d14\u1d15\3\2\2\2\u1d15\u1d1c\3\2\2\2\u1d16\u1d17")
        buf.write("\7\u02e0\2\2\u1d17\u1d18\5\u0350\u01a9\2\u1d18\u1d19\5")
        buf.write("\u03ae\u01d8\2\u1d19\u1d1b\3\2\2\2\u1d1a\u1d16\3\2\2\2")
        buf.write("\u1d1b\u1d1e\3\2\2\2\u1d1c\u1d1a\3\2\2\2\u1d1c\u1d1d\3")
        buf.write("\2\2\2\u1d1d\u1d20\3\2\2\2\u1d1e\u1d1c\3\2\2\2\u1d1f\u1d21")
        buf.write("\5\u0398\u01cd\2\u1d20\u1d1f\3\2\2\2\u1d20\u1d21\3\2\2")
        buf.write("\2\u1d21\u1d22\3\2\2\2\u1d22\u1d23\7\u02db\2\2\u1d23\u0395")
        buf.write("\3\2\2\2\u1d24\u1d2f\5\u03b6\u01dc\2\u1d25\u1d26\7\u00dc")
        buf.write("\2\2\u1d26\u1d30\7\u0194\2\2\u1d27\u1d2a\5\u0416\u020c")
        buf.write("\2\u1d28\u1d29\7\u01a5\2\2\u1d29\u1d2b\5\u0350\u01a9\2")
        buf.write("\u1d2a\u1d28\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b\u1d2d\3")
        buf.write("\2\2\2\u1d2c\u1d2e\5\u0398\u01cd\2\u1d2d\u1d2c\3\2\2\2")
        buf.write("\u1d2d\u1d2e\3\2\2\2\u1d2e\u1d30\3\2\2\2\u1d2f\u1d25\3")
        buf.write("\2\2\2\u1d2f\u1d27\3\2\2\2\u1d30\u0397\3\2\2\2\u1d31\u1d32")
        buf.write("\7\u008f\2\2\u1d32\u1d33\5\u0350\u01a9\2\u1d33\u0399\3")
        buf.write("\2\2\2\u1d34\u1d3b\5\u033e\u01a0\2\u1d35\u1d39\7\30\2")
        buf.write("\2\u1d36\u1d3a\5\u0434\u021b\2\u1d37\u1d38\7\u00b9\2\2")
        buf.write("\u1d38\u1d3a\5\u0350\u01a9\2\u1d39\u1d36\3\2\2\2\u1d39")
        buf.write("\u1d37\3\2\2\2\u1d3a\u1d3c\3\2\2\2\u1d3b\u1d35\3\2\2\2")
        buf.write("\u1d3b\u1d3c\3\2\2\2\u1d3c\u039b\3\2\2\2\u1d3d\u1d41\7")
        buf.write("\u0285\2\2\u1d3e\u1d3f\7\u0173\2\2\u1d3f\u1d42\7\u027d")
        buf.write("\2\2\u1d40\u1d42\5\u033e\u01a0\2\u1d41\u1d3e\3\2\2\2\u1d41")
        buf.write("\u1d40\3\2\2\2\u1d42\u039d\3\2\2\2\u1d43\u1d49\7\u022d")
        buf.write("\2\2\u1d44\u1d4a\7\u02a6\2\2\u1d45\u1d47\7\u0173\2\2\u1d46")
        buf.write("\u1d48\7\u027d\2\2\u1d47\u1d46\3\2\2\2\u1d47\u1d48\3\2")
        buf.write("\2\2\u1d48\u1d4a\3\2\2\2\u1d49\u1d44\3\2\2\2\u1d49\u1d45")
        buf.write("\3\2\2\2\u1d4a\u039f\3\2\2\2\u1d4b\u1d4c\7\u00af\2\2\u1d4c")
        buf.write("\u1d4d\5\u0350\u01a9\2\u1d4d\u03a1\3\2\2\2\u1d4e\u1d4f")
        buf.write("\7\u0285\2\2\u1d4f\u1d50\5\u0350\u01a9\2\u1d50\u03a3\3")
        buf.write("\2\2\2\u1d51\u1d52\7\u0173\2\2\u1d52\u1d5a\7\u00fb\2\2")
        buf.write("\u1d53\u1d57\7\u00fb\2\2\u1d54\u1d55\7\u0220\2\2\u1d55")
        buf.write("\u1d56\7\u02ee\2\2\u1d56\u1d58\5\u0350\u01a9\2\u1d57\u1d54")
        buf.write("\3\2\2\2\u1d57\u1d58\3\2\2\2\u1d58\u1d5a\3\2\2\2\u1d59")
        buf.write("\u1d51\3\2\2\2\u1d59\u1d53\3\2\2\2\u1d5a\u03a5\3\2\2\2")
        buf.write("\u1d5b\u1d64\7\u02e1\2\2\u1d5c\u1d64\7\u00c4\2\2\u1d5d")
        buf.write("\u1d64\7\u02f5\2\2\u1d5e\u1d5f\7\u0219\2\2\u1d5f\u1d64")
        buf.write("\tq\2\2\u1d60\u1d64\7\u02f6\2\2\u1d61\u1d64\5\u03a8\u01d5")
        buf.write("\2\u1d62\u1d64\5\u03aa\u01d6\2\u1d63\u1d5b\3\2\2\2\u1d63")
        buf.write("\u1d5c\3\2\2\2\u1d63\u1d5d\3\2\2\2\u1d63\u1d5e\3\2\2\2")
        buf.write("\u1d63\u1d60\3\2\2\2\u1d63\u1d61\3\2\2\2\u1d63\u1d62\3")
        buf.write("\2\2\2\u1d64\u03a7\3\2\2\2\u1d65\u1d66\7\u028b\2\2\u1d66")
        buf.write("\u1d6c\tr\2\2\u1d67\u1d68\7\u00c4\2\2\u1d68\u1d69\ts\2")
        buf.write("\2\u1d69\u1d6d\tt\2\2\u1d6a\u1d6b\7n\2\2\u1d6b\u1d6d\t")
        buf.write("u\2\2\u1d6c\u1d67\3\2\2\2\u1d6c\u1d6a\3\2\2\2\u1d6d\u03a9")
        buf.write("\3\2\2\2\u1d6e\u1d6f\7\u0215\2\2\u1d6f\u1d75\5\u0438\u021d")
        buf.write("\2\u1d70\u1d76\7\u02d6\2\2\u1d71\u1d76\7\u018d\2\2\u1d72")
        buf.write("\u1d76\7\u0185\2\2\u1d73\u1d76\5\u042c\u0217\2\u1d74\u1d76")
        buf.write("\5\u0438\u021d\2\u1d75\u1d70\3\2\2\2\u1d75\u1d71\3\2\2")
        buf.write("\2\u1d75\u1d72\3\2\2\2\u1d75\u1d73\3\2\2\2\u1d75\u1d74")
        buf.write("\3\2\2\2\u1d76\u03ab\3\2\2\2\u1d77\u1d79\tv\2\2\u1d78")
        buf.write("\u1d7a\7\u00dc\2\2\u1d79\u1d78\3\2\2\2\u1d79\u1d7a\3\2")
        buf.write("\2\2\u1d7a\u1d7b\3\2\2\2\u1d7b\u1d7d\7\u02da\2\2\u1d7c")
        buf.write("\u1d7e\5\u033c\u019f\2\u1d7d\u1d7c\3\2\2\2\u1d7d\u1d7e")
        buf.write("\3\2\2\2\u1d7e\u1d7f\3\2\2\2\u1d7f\u1d80\7\u02db\2\2\u1d80")
        buf.write("\u03ad\3\2\2\2\u1d81\u1d83\7\30\2\2\u1d82\u1d81\3\2\2")
        buf.write("\2\u1d82\u1d83\3\2\2\2\u1d83\u1d86\3\2\2\2\u1d84\u1d87")
        buf.write("\5\u0432\u021a\2\u1d85\u1d87\5\u0430\u0219\2\u1d86\u1d84")
        buf.write("\3\2\2\2\u1d86\u1d85\3\2\2\2\u1d87\u1d8a\3\2\2\2\u1d88")
        buf.write("\u1d8a\7\30\2\2\u1d89\u1d82\3\2\2\2\u1d89\u1d88\3\2\2")
        buf.write("\2\u1d8a\u03af\3\2\2\2\u1d8b\u1d8e\5\u0432\u021a\2\u1d8c")
        buf.write("\u1d8e\5\u0430\u0219\2\u1d8d\u1d8b\3\2\2\2\u1d8d\u1d8c")
        buf.write("\3\2\2\2\u1d8e\u03b1\3\2\2\2\u1d8f\u1d94\7\u028d\2\2\u1d90")
        buf.write("\u1d91\7x\2\2\u1d91\u1d92\7\u0186\2\2\u1d92\u1d95\5\u03ee")
        buf.write("\u01f8\2\u1d93\u1d95\5\u033e\u01a0\2\u1d94\u1d90\3\2\2")
        buf.write("\2\u1d94\u1d93\3\2\2\2\u1d95\u03b3\3\2\2\2\u1d96\u1d97")
        buf.write("\7>\2\2\u1d97\u1d99\7V\2\2\u1d98\u1d96\3\2\2\2\u1d98\u1d99")
        buf.write("\3\2\2\2\u1d99\u1d9a\3\2\2\2\u1d9a\u1d9f\7\u0112\2\2\u1d9b")
        buf.write("\u1d9d\7\u02e0\2\2\u1d9c\u1d9b\3\2\2\2\u1d9c\u1d9d\3\2")
        buf.write("\2\2\u1d9d\u1d9e\3\2\2\2\u1d9e\u1da0\5\u03ea\u01f6\2\u1d9f")
        buf.write("\u1d9c\3\2\2\2\u1da0\u1da1\3\2\2\2\u1da1\u1d9f\3\2\2\2")
        buf.write("\u1da1\u1da2\3\2\2\2\u1da2\u03b5\3\2\2\2\u1da3\u1da6\5")
        buf.write("\u0432\u021a\2\u1da4\u1da6\5\u0430\u0219\2\u1da5\u1da3")
        buf.write("\3\2\2\2\u1da5\u1da4\3\2\2\2\u1da6\u03b7\3\2\2\2\u1da7")
        buf.write("\u1da8\5\u0432\u021a\2\u1da8\u03b9\3\2\2\2\u1da9\u1daa")
        buf.write("\5\u0432\u021a\2\u1daa\u03bb\3\2\2\2\u1dab\u1dac\5\u0432")
        buf.write("\u021a\2\u1dac\u03bd\3\2\2\2\u1dad\u1dae\5\u0432\u021a")
        buf.write("\2\u1dae\u03bf\3\2\2\2\u1daf\u1db0\5\u0432\u021a\2\u1db0")
        buf.write("\u03c1\3\2\2\2\u1db1\u1db2\5\u0432\u021a\2\u1db2\u03c3")
        buf.write("\3\2\2\2\u1db3\u1db8\5\u0432\u021a\2\u1db4\u1db5\7\u02d3")
        buf.write("\2\2\u1db5\u1db7\5\u0434\u021b\2\u1db6\u1db4\3\2\2\2\u1db7")
        buf.write("\u1dba\3\2\2\2\u1db8\u1db6\3\2\2\2\u1db8\u1db9\3\2\2\2")
        buf.write("\u1db9\u1dbd\3\2\2\2\u1dba\u1db8\3\2\2\2\u1dbb\u1dbc\7")
        buf.write("\u02e2\2\2\u1dbc\u1dbe\5\u03f4\u01fb\2\u1dbd\u1dbb\3\2")
        buf.write("\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u03c5\3\2\2\2\u1dbf\u1dc0")
        buf.write("\5\u0432\u021a\2\u1dc0\u03c7\3\2\2\2\u1dc1\u1dc4\5\u0432")
        buf.write("\u021a\2\u1dc2\u1dc3\7\u02d3\2\2\u1dc3\u1dc5\5\u0434\u021b")
        buf.write("\2\u1dc4\u1dc2\3\2\2\2\u1dc4\u1dc5\3\2\2\2\u1dc5\u03c9")
        buf.write("\3\2\2\2\u1dc6\u1dc7\5\u0432\u021a\2\u1dc7\u03cb\3\2\2")
        buf.write("\2\u1dc8\u1dc9\5\u0432\u021a\2\u1dc9\u03cd\3\2\2\2\u1dca")
        buf.write("\u1dcb\5\u0432\u021a\2\u1dcb\u03cf\3\2\2\2\u1dcc\u1dcf")
        buf.write("\5\u0432\u021a\2\u1dcd\u1dce\7\u02d3\2\2\u1dce\u1dd0\5")
        buf.write("\u0434\u021b\2\u1dcf\u1dcd\3\2\2\2\u1dcf\u1dd0\3\2\2\2")
        buf.write("\u1dd0\u03d1\3\2\2\2\u1dd1\u1dd6\5\u0432\u021a\2\u1dd2")
        buf.write("\u1dd3\7\u02d3\2\2\u1dd3\u1dd5\5\u0434\u021b\2\u1dd4\u1dd2")
        buf.write("\3\2\2\2\u1dd5\u1dd8\3\2\2\2\u1dd6\u1dd4\3\2\2\2\u1dd6")
        buf.write("\u1dd7\3\2\2\2\u1dd7\u03d3\3\2\2\2\u1dd8\u1dd6\3\2\2\2")
        buf.write("\u1dd9\u1dda\5\u0432\u021a\2\u1dda\u03d5\3\2\2\2\u1ddb")
        buf.write("\u1ddd\5\u0434\u021b\2\u1ddc\u1dde\5\u00b6\\\2\u1ddd\u1ddc")
        buf.write("\3\2\2\2\u1ddd\u1dde\3\2\2\2\u1dde\u03d7\3\2\2\2\u1ddf")
        buf.write("\u1de2\5\u0434\u021b\2\u1de0\u1de2\7e\2\2\u1de1\u1ddf")
        buf.write("\3\2\2\2\u1de1\u1de0\3\2\2\2\u1de2\u03d9\3\2\2\2\u1de3")
        buf.write("\u1de8\5\u0432\u021a\2\u1de4\u1de5\7\u02d3\2\2\u1de5\u1de7")
        buf.write("\5\u0434\u021b\2\u1de6\u1de4\3\2\2\2\u1de7\u1dea\3\2\2")
        buf.write("\2\u1de8\u1de6\3\2\2\2\u1de8\u1de9\3\2\2\2\u1de9\u1ded")
        buf.write("\3\2\2\2\u1dea\u1de8\3\2\2\2\u1deb\u1dec\7\u02e2\2\2\u1dec")
        buf.write("\u1dee\5\u03f4\u01fb\2\u1ded\u1deb\3\2\2\2\u1ded\u1dee")
        buf.write("\3\2\2\2\u1dee\u03db\3\2\2\2\u1def\u1df0\5\u0434\u021b")
        buf.write("\2\u1df0\u03dd\3\2\2\2\u1df1\u1df6\5\u0434\u021b\2\u1df2")
        buf.write("\u1df3\7\u02d3\2\2\u1df3\u1df5\5\u0434\u021b\2\u1df4\u1df2")
        buf.write("\3\2\2\2\u1df5\u1df8\3\2\2\2\u1df6\u1df4\3\2\2\2\u1df6")
        buf.write("\u1df7\3\2\2\2\u1df7\u03df\3\2\2\2\u1df8\u1df6\3\2\2\2")
        buf.write("\u1df9\u1dfe\5\u0434\u021b\2\u1dfa\u1dfb\7\u02d3\2\2\u1dfb")
        buf.write("\u1dfd\5\u0434\u021b\2\u1dfc\u1dfa\3\2\2\2\u1dfd\u1e00")
        buf.write("\3\2\2\2\u1dfe\u1dfc\3\2\2\2\u1dfe\u1dff\3\2\2\2\u1dff")
        buf.write("\u03e1\3\2\2\2\u1e00\u1dfe\3\2\2\2\u1e01\u1e06\5\u0432")
        buf.write("\u021a\2\u1e02\u1e03\7\u02d3\2\2\u1e03\u1e05\5\u0434\u021b")
        buf.write("\2\u1e04\u1e02\3\2\2\2\u1e05\u1e08\3\2\2\2\u1e06\u1e04")
        buf.write("\3\2\2\2\u1e06\u1e07\3\2\2\2\u1e07\u03e3\3\2\2\2\u1e08")
        buf.write("\u1e06\3\2\2\2\u1e09\u1e0c\5\u0432\u021a\2\u1e0a\u1e0b")
        buf.write("\7\u02d3\2\2\u1e0b\u1e0d\5\u0434\u021b\2\u1e0c\u1e0a\3")
        buf.write("\2\2\2\u1e0c\u1e0d\3\2\2\2\u1e0d\u03e5\3\2\2\2\u1e0e\u1e11")
        buf.write("\5\u0432\u021a\2\u1e0f\u1e10\7\u02d3\2\2\u1e10\u1e12\5")
        buf.write("\u0434\u021b\2\u1e11\u1e0f\3\2\2\2\u1e11\u1e12\3\2\2\2")
        buf.write("\u1e12\u03e7\3\2\2\2\u1e13\u1e16\5\u0432\u021a\2\u1e14")
        buf.write("\u1e15\7\u02d3\2\2\u1e15\u1e17\5\u0434\u021b\2\u1e16\u1e14")
        buf.write("\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17\u03e9\3\2\2\2\u1e18")
        buf.write("\u1e19\7\u02f1\2\2\u1e19\u1e1b\5\u03fa\u01fe\2\u1e1a\u1e18")
        buf.write("\3\2\2\2\u1e1a\u1e1b\3\2\2\2\u1e1b\u1e1c\3\2\2\2\u1e1c")
        buf.write("\u1e1f\5\u0434\u021b\2\u1e1d\u1e1e\7\u02d3\2\2\u1e1e\u1e20")
        buf.write("\5\u0434\u021b\2\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e20\3\2\2")
        buf.write("\2\u1e20\u1e23\3\2\2\2\u1e21\u1e23\5\u041e\u0210\2\u1e22")
        buf.write("\u1e1a\3\2\2\2\u1e22\u1e21\3\2\2\2\u1e23\u03eb\3\2\2\2")
        buf.write("\u1e24\u1e27\5\u0432\u021a\2\u1e25\u1e26\7\u02d3\2\2\u1e26")
        buf.write("\u1e28\5\u0434\u021b\2\u1e27\u1e25\3\2\2\2\u1e27\u1e28")
        buf.write("\3\2\2\2\u1e28\u03ed\3\2\2\2\u1e29\u1e2c\5\u0420\u0211")
        buf.write("\2\u1e2a\u1e2c\5\u041e\u0210\2\u1e2b\u1e29\3\2\2\2\u1e2b")
        buf.write("\u1e2a\3\2\2\2\u1e2c\u03ef\3\2\2\2\u1e2d\u1e30\5\u0432")
        buf.write("\u021a\2\u1e2e\u1e30\5\u041e\u0210\2\u1e2f\u1e2d\3\2\2")
        buf.write("\2\u1e2f\u1e2e\3\2\2\2\u1e30\u03f1\3\2\2\2\u1e31\u1e34")
        buf.write("\5\u0432\u021a\2\u1e32\u1e33\7\u02d3\2\2\u1e33\u1e35\5")
        buf.write("\u0434\u021b\2\u1e34\u1e32\3\2\2\2\u1e34\u1e35\3\2\2\2")
        buf.write("\u1e35\u03f3\3\2\2\2\u1e36\u1e37\5\u0432\u021a\2\u1e37")
        buf.write("\u03f5\3\2\2\2\u1e38\u1e3d\5\u0432\u021a\2\u1e39\u1e3a")
        buf.write("\7\u02d3\2\2\u1e3a\u1e3c\5\u0434\u021b\2\u1e3b\u1e39\3")
        buf.write("\2\2\2\u1e3c\u1e3f\3\2\2\2\u1e3d\u1e3b\3\2\2\2\u1e3d\u1e3e")
        buf.write("\3\2\2\2\u1e3e\u03f7\3\2\2\2\u1e3f\u1e3d\3\2\2\2\u1e40")
        buf.write("\u1e43\5\u0432\u021a\2\u1e41\u1e42\7\u02d3\2\2\u1e42\u1e44")
        buf.write("\5\u0434\u021b\2\u1e43\u1e41\3\2\2\2\u1e43\u1e44\3\2\2")
        buf.write("\2\u1e44\u1e48\3\2\2\2\u1e45\u1e46\7\u02e2\2\2\u1e46\u1e49")
        buf.write("\5\u03f4\u01fb\2\u1e47\u1e49\5\u03ac\u01d7\2\u1e48\u1e45")
        buf.write("\3\2\2\2\u1e48\u1e47\3\2\2\2\u1e48\u1e49\3\2\2\2\u1e49")
        buf.write("\u03f9\3\2\2\2\u1e4a\u1e4f\5\u0434\u021b\2\u1e4b\u1e4c")
        buf.write("\7\u02d3\2\2\u1e4c\u1e4e\5\u0434\u021b\2\u1e4d\u1e4b\3")
        buf.write("\2\2\2\u1e4e\u1e51\3\2\2\2\u1e4f\u1e4d\3\2\2\2\u1e4f\u1e50")
        buf.write("\3\2\2\2\u1e50\u03fb\3\2\2\2\u1e51\u1e4f\3\2\2\2\u1e52")
        buf.write("\u1e53\5\u0432\u021a\2\u1e53\u03fd\3\2\2\2\u1e54\u1e55")
        buf.write("\5\u0434\u021b\2\u1e55\u03ff\3\2\2\2\u1e56\u1e57\5\u0434")
        buf.write("\u021b\2\u1e57\u0401\3\2\2\2\u1e58\u1e59\5\u0434\u021b")
        buf.write("\2\u1e59\u0403\3\2\2\2\u1e5a\u1e73\5\u03f8\u01fd\2\u1e5b")
        buf.write("\u1e60\7\u0278\2\2\u1e5c\u1e5e\7\u02e0\2\2\u1e5d\u1e5c")
        buf.write("\3\2\2\2\u1e5d\u1e5e\3\2\2\2\u1e5e\u1e5f\3\2\2\2\u1e5f")
        buf.write("\u1e61\5\u0402\u0202\2\u1e60\u1e5d\3\2\2\2\u1e61\u1e62")
        buf.write("\3\2\2\2\u1e62\u1e60\3\2\2\2\u1e62\u1e63\3\2\2\2\u1e63")
        buf.write("\u1e73\3\2\2\2\u1e64\u1e65\7\u009c\2\2\u1e65\u1e73\5\u0400")
        buf.write("\u0201\2\u1e66\u1e67\7\u00a7\2\2\u1e67\u1e73\5\u03fe\u0200")
        buf.write("\2\u1e68\u1e69\7\u014e\2\2\u1e69\u1e6a\7\u0153\2\2\u1e6a")
        buf.write("\u1e73\5\u03fe\u0200\2\u1e6b\u1e6c\7\u0117\2\2\u1e6c\u1e6d")
        buf.write("\tw\2\2\u1e6d\u1e73\5\u03fe\u0200\2\u1e6e\u1e6f\7\u022c")
        buf.write("\2\2\u1e6f\u1e70\7\u025e\2\2\u1e70\u1e71\7\u01c6\2\2\u1e71")
        buf.write("\u1e73\5\u03fe\u0200\2\u1e72\u1e5a\3\2\2\2\u1e72\u1e5b")
        buf.write("\3\2\2\2\u1e72\u1e64\3\2\2\2\u1e72\u1e66\3\2\2\2\u1e72")
        buf.write("\u1e68\3\2\2\2\u1e72\u1e6b\3\2\2\2\u1e72\u1e6e\3\2\2\2")
        buf.write("\u1e73\u0405\3\2\2\2\u1e74\u1e76\7\u02e0\2\2\u1e75\u1e74")
        buf.write("\3\2\2\2\u1e75\u1e76\3\2\2\2\u1e76\u1e77\3\2\2\2\u1e77")
        buf.write("\u1e79\5\u03f6\u01fc\2\u1e78\u1e75\3\2\2\2\u1e79\u1e7a")
        buf.write("\3\2\2\2\u1e7a\u1e78\3\2\2\2\u1e7a\u1e7b\3\2\2\2\u1e7b")
        buf.write("\u0407\3\2\2\2\u1e7c\u1e7d\7\u02da\2\2\u1e7d\u1e7e\5\u0406")
        buf.write("\u0204\2\u1e7e\u1e7f\7\u02db\2\2\u1e7f\u0409\3\2\2\2\u1e80")
        buf.write("\u1e81\7\u011b\2\2\u1e81\u1e82\7\u02da\2\2\u1e82\u1e83")
        buf.write("\7\u02b0\2\2\u1e83\u1e84\tT\2\2\u1e84\u1e85\5\u02ee\u0178")
        buf.write("\2\u1e85\u1e87\7\u02db\2\2\u1e86\u1e88\5\u037e\u01c0\2")
        buf.write("\u1e87\u1e86\3\2\2\2\u1e87\u1e88\3\2\2\2\u1e88\u040b\3")
        buf.write("\2\2\2\u1e89\u1e90\7\u02da\2\2\u1e8a\u1e8c\7\u02e0\2\2")
        buf.write("\u1e8b\u1e8a\3\2\2\2\u1e8b\u1e8c\3\2\2\2\u1e8c\u1e8d\3")
        buf.write("\2\2\2\u1e8d\u1e8f\5\u0414\u020b\2\u1e8e\u1e8b\3\2\2\2")
        buf.write("\u1e8f\u1e92\3\2\2\2\u1e90\u1e8e\3\2\2\2\u1e90\u1e91\3")
        buf.write("\2\2\2\u1e91\u1e93\3\2\2\2\u1e92\u1e90\3\2\2\2\u1e93\u1e95")
        buf.write("\7\u02db\2\2\u1e94\u1e96\5\u040a\u0206\2\u1e95\u1e94\3")
        buf.write("\2\2\2\u1e95\u1e96\3\2\2\2\u1e96\u040d\3\2\2\2\u1e97\u1ea1")
        buf.write("\7\u02da\2\2\u1e98\u1e9a\7\u02e0\2\2\u1e99\u1e98\3\2\2")
        buf.write("\2\u1e99\u1e9a\3\2\2\2\u1e9a\u1e9b\3\2\2\2\u1e9b\u1e9d")
        buf.write("\5\u0414\u020b\2\u1e9c\u1e9e\5\u0412\u020a\2\u1e9d\u1e9c")
        buf.write("\3\2\2\2\u1e9d\u1e9e\3\2\2\2\u1e9e\u1ea0\3\2\2\2\u1e9f")
        buf.write("\u1e99\3\2\2\2\u1ea0\u1ea3\3\2\2\2\u1ea1\u1e9f\3\2\2\2")
        buf.write("\u1ea1\u1ea2\3\2\2\2\u1ea2\u1ea4\3\2\2\2\u1ea3\u1ea1\3")
        buf.write("\2\2\2\u1ea4\u1ea6\7\u02db\2\2\u1ea5\u1ea7\5\u040a\u0206")
        buf.write("\2\u1ea6\u1ea5\3\2\2\2\u1ea6\u1ea7\3\2\2\2\u1ea7\u040f")
        buf.write("\3\2\2\2\u1ea8\u1ea9\7\u02da\2\2\u1ea9\u1eb6\5\u03f6\u01fc")
        buf.write("\2\u1eaa\u1ead\7\u02e0\2\2\u1eab\u1eae\5\u042c\u0217\2")
        buf.write("\u1eac\u1eae\7\u017e\2\2\u1ead\u1eab\3\2\2\2\u1ead\u1eac")
        buf.write("\3\2\2\2\u1eae\u1eb4\3\2\2\2\u1eaf\u1eb2\7\u02e0\2\2\u1eb0")
        buf.write("\u1eb3\5\u042c\u0217\2\u1eb1\u1eb3\7\u017e\2\2\u1eb2\u1eb0")
        buf.write("\3\2\2\2\u1eb2\u1eb1\3\2\2\2\u1eb3\u1eb5\3\2\2\2\u1eb4")
        buf.write("\u1eaf\3\2\2\2\u1eb4\u1eb5\3\2\2\2\u1eb5\u1eb7\3\2\2\2")
        buf.write("\u1eb6\u1eaa\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u1eb8\3")
        buf.write("\2\2\2\u1eb8\u1ec9\7\u027a\2\2\u1eb9\u1eba\5\u03f8\u01fd")
        buf.write("\2\u1eba\u1ebb\7\u02d3\2\2\u1ebb\u1ebc\7\u02dd\2\2\u1ebc")
        buf.write("\u1eca\3\2\2\2\u1ebd\u1eca\7\u02dd\2\2\u1ebe\u1ec0\7\u02e0")
        buf.write("\2\2\u1ebf\u1ebe\3\2\2\2\u1ebf\u1ec0\3\2\2\2\u1ec0\u1ec1")
        buf.write("\3\2\2\2\u1ec1\u1ec3\5\u033e\u01a0\2\u1ec2\u1ec4\5\u03ae")
        buf.write("\u01d8\2\u1ec3\u1ec2\3\2\2\2\u1ec3\u1ec4\3\2\2\2\u1ec4")
        buf.write("\u1ec6\3\2\2\2\u1ec5\u1ebf\3\2\2\2\u1ec6\u1ec7\3\2\2\2")
        buf.write("\u1ec7\u1ec5\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u1eca\3")
        buf.write("\2\2\2\u1ec9\u1eb9\3\2\2\2\u1ec9\u1ebd\3\2\2\2\u1ec9\u1ec5")
        buf.write("\3\2\2\2\u1eca\u1ecb\3\2\2\2\u1ecb\u1ecd\7\u02db\2\2\u1ecc")
        buf.write("\u1ece\5\u040a\u0206\2\u1ecd\u1ecc\3\2\2\2\u1ecd\u1ece")
        buf.write("\3\2\2\2\u1ece\u0411\3\2\2\2\u1ecf\u1ed0\tx\2\2\u1ed0")
        buf.write("\u1ed1\7\u017f\2\2\u1ed1\u0413\3\2\2\2\u1ed2\u1ed3\5\u0432")
        buf.write("\u021a\2\u1ed3\u1ed4\7\u02ee\2\2\u1ed4\u1ed5\7\u02e9\2")
        buf.write("\2\u1ed5\u1ed7\3\2\2\2\u1ed6\u1ed2\3\2\2\2\u1ed6\u1ed7")
        buf.write("\3\2\2\2\u1ed7\u1ed8\3\2\2\2\u1ed8\u1ed9\5\u033e\u01a0")
        buf.write("\2\u1ed9\u0415\3\2\2\2\u1eda\u1ee3\5\u0418\u020d\2\u1edb")
        buf.write("\u1edd\7\u01db\2\2\u1edc\u1edb\3\2\2\2\u1edc\u1edd\3\2")
        buf.write("\2\2\u1edd\u1ede\3\2\2\2\u1ede\u1ee0\5\u03de\u01f0\2\u1edf")
        buf.write("\u1ee1\ty\2\2\u1ee0\u1edf\3\2\2\2\u1ee0\u1ee1\3\2\2\2")
        buf.write("\u1ee1\u1ee3\3\2\2\2\u1ee2\u1eda\3\2\2\2\u1ee2\u1edc\3")
        buf.write("\2\2\2\u1ee3\u0417\3\2\2\2\u1ee4\u1ee6\5\u041c\u020f\2")
        buf.write("\u1ee5\u1ee7\5\u041a\u020e\2\u1ee6\u1ee5\3\2\2\2\u1ee6")
        buf.write("\u1ee7\3\2\2\2\u1ee7\u1ef1\3\2\2\2\u1ee8\u1eea\7\u0291")
        buf.write("\2\2\u1ee9\u1eeb\7\u012f\2\2\u1eea\u1ee9\3\2\2\2\u1eea")
        buf.write("\u1eeb\3\2\2\2\u1eeb\u1eec\3\2\2\2\u1eec\u1eed\7\u0255")
        buf.write("\2\2\u1eed\u1ef2\7\u02a8\2\2\u1eee\u1eef\7I\2\2\u1eef")
        buf.write("\u1ef0\7\u0215\2\2\u1ef0\u1ef2\5\u03fa\u01fe\2\u1ef1\u1ee8")
        buf.write("\3\2\2\2\u1ef1\u1eee\3\2\2\2\u1ef1\u1ef2\3\2\2\2\u1ef2")
        buf.write("\u1f04\3\2\2\2\u1ef3\u1ef4\7\u0110\2\2\u1ef4\u1ef9\tz")
        buf.write("\2\2\u1ef5\u1ef6\7\u02da\2\2\u1ef6\u1ef7\5\u033e\u01a0")
        buf.write("\2\u1ef7\u1ef8\7\u02db\2\2\u1ef8\u1efa\3\2\2\2\u1ef9\u1ef5")
        buf.write("\3\2\2\2\u1ef9\u1efa\3\2\2\2\u1efa\u1efb\3\2\2\2\u1efb")
        buf.write("\u1efc\7\u025a\2\2\u1efc\u1f01\t{\2\2\u1efd\u1efe\7\u02da")
        buf.write("\2\2\u1efe\u1eff\5\u033e\u01a0\2\u1eff\u1f00\7\u02db\2")
        buf.write("\2\u1f00\u1f02\3\2\2\2\u1f01\u1efd\3\2\2\2\u1f01\u1f02")
        buf.write("\3\2\2\2\u1f02\u1f04\3\2\2\2\u1f03\u1ee4\3\2\2\2\u1f03")
        buf.write("\u1ef3\3\2\2\2\u1f04\u0419\3\2\2\2\u1f05\u1f06\7\u02da")
        buf.write("\2\2\u1f06\u1f09\5\u042c\u0217\2\u1f07\u1f08\7\u02e0\2")
        buf.write("\2\u1f08\u1f0a\5\u042c\u0217\2\u1f09\u1f07\3\2\2\2\u1f09")
        buf.write("\u1f0a\3\2\2\2\u1f0a\u1f0c\3\2\2\2\u1f0b\u1f0d\t|\2\2")
        buf.write("\u1f0c\u1f0b\3\2\2\2\u1f0c\u1f0d\3\2\2\2\u1f0d\u1f0e\3")
        buf.write("\2\2\2\u1f0e\u1f0f\7\u02db\2\2\u1f0f\u041b\3\2\2\2\u1f10")
        buf.write("\u1f4d\7\64\2\2\u1f11\u1f4d\7\u01b5\2\2\u1f12\u1f4d\7")
        buf.write("\u015c\2\2\u1f13\u1f4d\7\63\2\2\u1f14\u1f4d\7\62\2\2\u1f15")
        buf.write("\u1f4d\7\u015d\2\2\u1f16\u1f4d\7\u01b9\2\2\u1f17\u1f4d")
        buf.write("\7\u01b8\2\2\u1f18\u1f4d\7\u021d\2\2\u1f19\u1f4d\7\u021e")
        buf.write("\2\2\u1f1a\u1f4d\7\u0182\2\2\u1f1b\u1f4d\7\u0088\2\2\u1f1c")
        buf.write("\u1f4d\7\u010e\2\2\u1f1d\u1f4d\7\u0111\2\2\u1f1e\u1f4d")
        buf.write("\7\u0181\2\2\u1f1f\u1f4d\7\u0223\2\2\u1f20\u1f4d\7\u0180")
        buf.write("\2\2\u1f21\u1f4d\7\u0089\2\2\u1f22\u1f24\7\u00a3\2\2\u1f23")
        buf.write("\u1f25\7\u01bd\2\2\u1f24\u1f23\3\2\2\2\u1f24\u1f25\3\2")
        buf.write("\2\2\u1f25\u1f4d\3\2\2\2\u1f26\u1f4d\7\u00d5\2\2\u1f27")
        buf.write("\u1f4d\7\u01d1\2\2\u1f28\u1f4d\7\u0160\2\2\u1f29\u1f2b")
        buf.write("\7\u0138\2\2\u1f2a\u1f2c\7\u01ce\2\2\u1f2b\u1f2a\3\2\2")
        buf.write("\2\u1f2b\u1f2c\3\2\2\2\u1f2c\u1f4d\3\2\2\2\u1f2d\u1f4d")
        buf.write("\7J\2\2\u1f2e\u1f4d\7I\2\2\u1f2f\u1f4d\7\u027e\2\2\u1f30")
        buf.write("\u1f4d\7\u027f\2\2\u1f31\u1f4d\7\u0236\2\2\u1f32\u1f4d")
        buf.write("\7\u01ce\2\2\u1f33\u1f4d\79\2\2\u1f34\u1f4d\7\u0080\2")
        buf.write("\2\u1f35\u1f4d\7\u01fa\2\2\u1f36\u1f4d\7\u0276\2\2\u1f37")
        buf.write("\u1f4d\7\u02a5\2\2\u1f38\u1f4d\7\u0156\2\2\u1f39\u1f4d")
        buf.write("\7\u0081\2\2\u1f3a\u1f4d\7\u00f1\2\2\u1f3b\u1f4d\7\u0150")
        buf.write("\2\2\u1f3c\u1f4d\7\u0208\2\2\u1f3d\u1f4d\7\u0257\2\2\u1f3e")
        buf.write("\u1f4d\7\u0258\2\2\u1f3f\u1f4d\7\u0259\2\2\u1f40\u1f4d")
        buf.write("\7\u0256\2\2\u1f41\u1f4d\7\u0252\2\2\u1f42\u1f4d\7\u0254")
        buf.write("\2\2\u1f43\u1f4d\7\u0253\2\2\u1f44\u1f4d\7\u0251\2\2\u1f45")
        buf.write("\u1f4d\7\u02a7\2\2\u1f46\u1f4d\7\u00a5\2\2\u1f47\u1f4d")
        buf.write("\7/\2\2\u1f48\u1f4d\7\65\2\2\u1f49\u1f4d\7R\2\2\u1f4a")
        buf.write("\u1f4d\7\u0161\2\2\u1f4b\u1f4d\7\u0152\2\2\u1f4c\u1f10")
        buf.write("\3\2\2\2\u1f4c\u1f11\3\2\2\2\u1f4c\u1f12\3\2\2\2\u1f4c")
        buf.write("\u1f13\3\2\2\2\u1f4c\u1f14\3\2\2\2\u1f4c\u1f15\3\2\2\2")
        buf.write("\u1f4c\u1f16\3\2\2\2\u1f4c\u1f17\3\2\2\2\u1f4c\u1f18\3")
        buf.write("\2\2\2\u1f4c\u1f19\3\2\2\2\u1f4c\u1f1a\3\2\2\2\u1f4c\u1f1b")
        buf.write("\3\2\2\2\u1f4c\u1f1c\3\2\2\2\u1f4c\u1f1d\3\2\2\2\u1f4c")
        buf.write("\u1f1e\3\2\2\2\u1f4c\u1f1f\3\2\2\2\u1f4c\u1f20\3\2\2\2")
        buf.write("\u1f4c\u1f21\3\2\2\2\u1f4c\u1f22\3\2\2\2\u1f4c\u1f26\3")
        buf.write("\2\2\2\u1f4c\u1f27\3\2\2\2\u1f4c\u1f28\3\2\2\2\u1f4c\u1f29")
        buf.write("\3\2\2\2\u1f4c\u1f2d\3\2\2\2\u1f4c\u1f2e\3\2\2\2\u1f4c")
        buf.write("\u1f2f\3\2\2\2\u1f4c\u1f30\3\2\2\2\u1f4c\u1f31\3\2\2\2")
        buf.write("\u1f4c\u1f32\3\2\2\2\u1f4c\u1f33\3\2\2\2\u1f4c\u1f34\3")
        buf.write("\2\2\2\u1f4c\u1f35\3\2\2\2\u1f4c\u1f36\3\2\2\2\u1f4c\u1f37")
        buf.write("\3\2\2\2\u1f4c\u1f38\3\2\2\2\u1f4c\u1f39\3\2\2\2\u1f4c")
        buf.write("\u1f3a\3\2\2\2\u1f4c\u1f3b\3\2\2\2\u1f4c\u1f3c\3\2\2\2")
        buf.write("\u1f4c\u1f3d\3\2\2\2\u1f4c\u1f3e\3\2\2\2\u1f4c\u1f3f\3")
        buf.write("\2\2\2\u1f4c\u1f40\3\2\2\2\u1f4c\u1f41\3\2\2\2\u1f4c\u1f42")
        buf.write("\3\2\2\2\u1f4c\u1f43\3\2\2\2\u1f4c\u1f44\3\2\2\2\u1f4c")
        buf.write("\u1f45\3\2\2\2\u1f4c\u1f46\3\2\2\2\u1f4c\u1f47\3\2\2\2")
        buf.write("\u1f4c\u1f48\3\2\2\2\u1f4c\u1f49\3\2\2\2\u1f4c\u1f4a\3")
        buf.write("\2\2\2\u1f4c\u1f4b\3\2\2\2\u1f4d\u041d\3\2\2\2\u1f4e\u1f52")
        buf.write("\7\u02e4\2\2\u1f4f\u1f50\7\u02eb\2\2\u1f50\u1f52\7\u02d4")
        buf.write("\2\2\u1f51\u1f4e\3\2\2\2\u1f51\u1f4f\3\2\2\2\u1f52\u1f5b")
        buf.write("\3\2\2\2\u1f53\u1f55\7\u00ff\2\2\u1f54\u1f53\3\2\2\2\u1f54")
        buf.write("\u1f55\3\2\2\2\u1f55\u1f59\3\2\2\2\u1f56\u1f5a\7\u02e4")
        buf.write("\2\2\u1f57\u1f58\7\u02eb\2\2\u1f58\u1f5a\7\u02d4\2\2\u1f59")
        buf.write("\u1f56\3\2\2\2\u1f59\u1f57\3\2\2\2\u1f5a\u1f5c\3\2\2\2")
        buf.write("\u1f5b\u1f54\3\2\2\2\u1f5b\u1f5c\3\2\2\2\u1f5c\u1f61\3")
        buf.write("\2\2\2\u1f5d\u1f5e\7\u02d3\2\2\u1f5e\u1f60\5\u0422\u0212")
        buf.write("\2\u1f5f\u1f5d\3\2\2\2\u1f60\u1f63\3\2\2\2\u1f61\u1f5f")
        buf.write("\3\2\2\2\u1f61\u1f62\3\2\2\2\u1f62\u041f\3\2\2\2\u1f63")
        buf.write("\u1f61\3\2\2\2\u1f64\u1f69\5\u0422\u0212\2\u1f65\u1f66")
        buf.write("\7\u02d3\2\2\u1f66\u1f68\5\u0422\u0212\2\u1f67\u1f65\3")
        buf.write("\2\2\2\u1f68\u1f6b\3\2\2\2\u1f69\u1f67\3\2\2\2\u1f69\u1f6a")
        buf.write("\3\2\2\2\u1f6a\u0421\3\2\2\2\u1f6b\u1f69\3\2\2\2\u1f6c")
        buf.write("\u1f6d\7\u02f1\2\2\u1f6d\u1f6f\5\u03fa\u01fe\2\u1f6e\u1f6c")
        buf.write("\3\2\2\2\u1f6e\u1f6f\3\2\2\2\u1f6f\u1f70\3\2\2\2\u1f70")
        buf.write("\u1f75\5\u0434\u021b\2\u1f71\u1f72\7\u02d3\2\2\u1f72\u1f74")
        buf.write("\5\u0434\u021b\2\u1f73\u1f71\3\2\2\2\u1f74\u1f77\3\2\2")
        buf.write("\2\u1f75\u1f73\3\2\2\2\u1f75\u1f76\3\2\2\2\u1f76\u1f7a")
        buf.write("\3\2\2\2\u1f77\u1f75\3\2\2\2\u1f78\u1f79\7\u02e2\2\2\u1f79")
        buf.write("\u1f7b\5\u03f4\u01fb\2\u1f7a\u1f78\3\2\2\2\u1f7a\u1f7b")
        buf.write("\3\2\2\2\u1f7b\u1f7d\3\2\2\2\u1f7c\u1f7e\5\u040c\u0207")
        buf.write("\2\u1f7d\u1f7c\3\2\2\2\u1f7d\u1f7e\3\2\2\2\u1f7e\u0423")
        buf.write("\3\2\2\2\u1f7f\u1f80\7\u02f1\2\2\u1f80\u1f82\5\u03fa\u01fe")
        buf.write("\2\u1f81\u1f7f\3\2\2\2\u1f81\u1f82\3\2\2\2\u1f82\u1f83")
        buf.write("\3\2\2\2\u1f83\u1f88\5\u0434\u021b\2\u1f84\u1f85\7\u02d3")
        buf.write("\2\2\u1f85\u1f87\5\u0434\u021b\2\u1f86\u1f84\3\2\2\2\u1f87")
        buf.write("\u1f8a\3\2\2\2\u1f88\u1f86\3\2\2\2\u1f88\u1f89\3\2\2\2")
        buf.write("\u1f89\u0425\3\2\2\2\u1f8a\u1f88\3\2\2\2\u1f8b\u1f8d\7")
        buf.write("\r\2\2\u1f8c\u1f8e\7\u01c3\2\2\u1f8d\u1f8c\3\2\2\2\u1f8d")
        buf.write("\u1f8e\3\2\2\2\u1f8e\u1fac\3\2\2\2\u1f8f\u1fac\7\20\2")
        buf.write("\2\u1f90\u1fac\7\u0087\2\2\u1f91\u1fac\7\u0095\2\2\u1f92")
        buf.write("\u1fac\7\u00c1\2\2\u1f93\u1f94\7\u00d3\2\2\u1f94\u1fac")
        buf.write("\7\26\2\2\u1f95\u1fac\7\u00fd\2\2\u1f96\u1f97\7\u0102")
        buf.write("\2\2\u1f97\u1fac\7\u01c3\2\2\u1f98\u1fac\7\u010a\2\2\u1f99")
        buf.write("\u1f9a\7\u011b\2\2\u1f9a\u1fac\7\u020e\2\2\u1f9b\u1f9c")
        buf.write("\7\u014a\2\2\u1f9c\u1fac\7\u0286\2\2\u1f9d\u1f9e\7\u018d")
        buf.write("\2\2\u1f9e\u1f9f\7[\2\2\u1f9f\u1fac\7\u01dc\2\2\u1fa0")
        buf.write("\u1fa1\7\u01ca\2\2\u1fa1\u1fac\7\u01f3\2\2\u1fa2\u1fac")
        buf.write("\7\u01cf\2\2\u1fa3\u1fac\7\u01d9\2\2\u1fa4\u1fac\7\u020c")
        buf.write("\2\2\u1fa5\u1fa6\7\u025d\2\2\u1fa6\u1fac\7\u022c\2\2\u1fa7")
        buf.write("\u1fac\7\u0268\2\2\u1fa8\u1fac\7\u0273\2\2\u1fa9\u1fac")
        buf.write("\7\u0279\2\2\u1faa\u1fac\7\u0293\2\2\u1fab\u1f8b\3\2\2")
        buf.write("\2\u1fab\u1f8f\3\2\2\2\u1fab\u1f90\3\2\2\2\u1fab\u1f91")
        buf.write("\3\2\2\2\u1fab\u1f92\3\2\2\2\u1fab\u1f93\3\2\2\2\u1fab")
        buf.write("\u1f95\3\2\2\2\u1fab\u1f96\3\2\2\2\u1fab\u1f98\3\2\2\2")
        buf.write("\u1fab\u1f99\3\2\2\2\u1fab\u1f9b\3\2\2\2\u1fab\u1f9d\3")
        buf.write("\2\2\2\u1fab\u1fa0\3\2\2\2\u1fab\u1fa2\3\2\2\2\u1fab\u1fa3")
        buf.write("\3\2\2\2\u1fab\u1fa4\3\2\2\2\u1fab\u1fa5\3\2\2\2\u1fab")
        buf.write("\u1fa7\3\2\2\2\u1fab\u1fa8\3\2\2\2\u1fab\u1fa9\3\2\2\2")
        buf.write("\u1fab\u1faa\3\2\2\2\u1fac\u0427\3\2\2\2\u1fad\u1fae\7")
        buf.write("\r\2\2\u1fae\u20f4\7\u01c3\2\2\u1faf\u20f4\7\b\2\2\u1fb0")
        buf.write("\u1fb2\7\7\2\2\u1fb1\u1fb3\7\24\2\2\u1fb2\u1fb1\3\2\2")
        buf.write("\2\u1fb2\u1fb3\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u1fb5")
        buf.write("\7\u022c\2\2\u1fb5\u1fb6\7\u0265\2\2\u1fb6\u20f4\7\u0215")
        buf.write("\2\2\u1fb7\u1fb8\t}\2\2\u1fb8\u1fb9\7\24\2\2\u1fb9\u1fba")
        buf.write("\7\u022c\2\2\u1fba\u20f4\7\u01c6\2\2\u1fbb\u1fbc\7\7\2")
        buf.write("\2\u1fbc\u1fbd\7\u022c\2\2\u1fbd\u1fbe\7\u013d\2\2\u1fbe")
        buf.write("\u20f4\7\u0183\2\2\u1fbf\u1fc1\7t\2\2\u1fc0\u1fc2\7\24")
        buf.write("\2\2\u1fc1\u1fc0\3\2\2\2\u1fc1\u1fc2\3\2\2\2\u1fc2\u1fc3")
        buf.write("\3\2\2\2\u1fc3\u20f4\7T\2\2\u1fc4\u1fc5\t~\2\2\u1fc5\u1fc6")
        buf.write("\7\24\2\2\u1fc6\u20f4\7T\2\2\u1fc7\u1fc8\t\177\2\2\u1fc8")
        buf.write("\u1fc9\7\24\2\2\u1fc9\u20f4\7m\2\2\u1fca\u1fcb\7\u00c2")
        buf.write("\2\2\u1fcb\u1fcc\7\u01d6\2\2\u1fcc\u20f4\7\u01b7\2\2\u1fcd")
        buf.write("\u1fce\7\20\2\2\u1fce\u20f4\7}\2\2\u1fcf\u1fd1\t\u0080")
        buf.write("\2\2\u1fd0\u1fd2\7\u01c8\2\2\u1fd1\u1fd0\3\2\2\2\u1fd1")
        buf.write("\u1fd2\3\2\2\2\u1fd2\u1fd3\3\2\2\2\u1fd3\u1fd4\7}\2\2")
        buf.write("\u1fd4\u20f4\7\u012b\2\2\u1fd5\u1fd6\7\u00a4\2\2\u1fd6")
        buf.write("\u1fd7\7\u01c8\2\2\u1fd7\u1fd8\7}\2\2\u1fd8\u20f4\7\u012b")
        buf.write("\2\2\u1fd9\u1fda\7\u0087\2\2\u1fda\u1fdb\7e\2\2\u1fdb")
        buf.write("\u20f4\7\u0213\2\2\u1fdc\u1fdd\7\u0087\2\2\u1fdd\u1fde")
        buf.write("\7\24\2\2\u1fde\u20f4\7\u01c4\2\2\u1fdf\u1fe0\7\22\2\2")
        buf.write("\u1fe0\u1fe1\7\24\2\2\u1fe1\u20f4\7\u009a\2\2\u1fe2\u1fe4")
        buf.write("\7t\2\2\u1fe3\u1fe5\7\24\2\2\u1fe4\u1fe3\3\2\2\2\u1fe4")
        buf.write("\u1fe5\3\2\2\2\u1fe5\u1fe6\3\2\2\2\u1fe6\u20f4\7\u009b")
        buf.write("\2\2\u1fe7\u1fe8\t~\2\2\u1fe8\u1fe9\7\24\2\2\u1fe9\u20f4")
        buf.write("\7\u009b\2\2\u1fea\u1feb\t\177\2\2\u1feb\u1fec\7\24\2")
        buf.write("\2\u1fec\u20f4\7\u009c\2\2\u1fed\u1fee\t\177\2\2\u1fee")
        buf.write("\u1fef\7\24\2\2\u1fef\u20f4\7\u00a7\2\2\u1ff0\u1ff5\7")
        buf.write("\u00d3\2\2\u1ff1\u1ff2\7\26\2\2\u1ff2\u1ff6\7\7\2\2\u1ff3")
        buf.write("\u1ff4\7\24\2\2\u1ff4\u1ff6\7\u024a\2\2\u1ff5\u1ff1\3")
        buf.write("\2\2\2\u1ff5\u1ff3\3\2\2\2\u1ff6\u20f4\3\2\2\2\u1ff7\u1ff8")
        buf.write("\t}\2\2\u1ff8\u1ff9\7\24\2\2\u1ff9\u20f4\7\u00fd\2\2\u1ffa")
        buf.write("\u1ffc\7t\2\2\u1ffb\u1ffd\7\24\2\2\u1ffc\u1ffb\3\2\2\2")
        buf.write("\u1ffc\u1ffd\3\2\2\2\u1ffd\u1ffe\3\2\2\2\u1ffe\u20f4\7")
        buf.write("\u00fe\2\2\u1fff\u2000\t\u0081\2\2\u2000\u2001\7\24\2")
        buf.write("\2\u2001\u20f4\7\u00fe\2\2\u2002\u2004\7t\2\2\u2003\u2005")
        buf.write("\t\u0082\2\2\u2004\u2003\3\2\2\2\u2004\u2005\3\2\2\2\u2005")
        buf.write("\u2006\3\2\2\2\u2006\u20f4\7\u0118\2\2\u2007\u2008\7\u00c1")
        buf.write("\2\2\u2008\u2009\7\24\2\2\u2009\u20f4\t\u0083\2\2\u200a")
        buf.write("\u200b\7\u013c\2\2\u200b\u20f4\7\u0202\2\2\u200c\u200d")
        buf.write("\7\7\2\2\u200d\u200e\7\u011c\2\2\u200e\u20f4\7\u013d\2")
        buf.write("\2\u200f\u2011\7t\2\2\u2010\u2012\7\24\2\2\u2011\u2010")
        buf.write("\3\2\2\2\u2011\u2012\3\2\2\2\u2012\u2013\3\2\2\2\u2013")
        buf.write("\u20f4\7\u0125\2\2\u2014\u2015\t\u0081\2\2\u2015\u2016")
        buf.write("\7\24\2\2\u2016\u20f4\7\u0125\2\2\u2017\u20f4\7\u0135")
        buf.write("\2\2\u2018\u201a\7t\2\2\u2019\u201b\7\24\2\2\u201a\u2019")
        buf.write("\3\2\2\2\u201a\u201b\3\2\2\2\u201b\u201c\3\2\2\2\u201c")
        buf.write("\u201d\7\u0143\2\2\u201d\u20f4\7\u0286\2\2\u201e\u201f")
        buf.write("\t~\2\2\u201f\u2020\7\24\2\2\u2020\u2021\7\u0143\2\2\u2021")
        buf.write("\u20f4\7\u0286\2\2\u2022\u2024\7\u00e4\2\2\u2023\u2022")
        buf.write("\3\2\2\2\u2023\u2024\3\2\2\2\u2024\u2025\3\2\2\2\u2025")
        buf.write("\u2026\7\u01ca\2\2\u2026\u20f4\7\u01f3\2\2\u2027\u2028")
        buf.write("\7\u018d\2\2\u2028\u2029\7[\2\2\u2029\u20f4\7\u01dc\2")
        buf.write("\2\u202a\u202c\7t\2\2\u202b\u202d\7\24\2\2\u202c\u202b")
        buf.write("\3\2\2\2\u202c\u202d\3\2\2\2\u202d\u202e\3\2\2\2\u202e")
        buf.write("\u202f\7\u014e\2\2\u202f\u20f4\7\u0153\2\2\u2030\u2031")
        buf.write("\t\u0084\2\2\u2031\u2032\7\24\2\2\u2032\u2033\7\u014e")
        buf.write("\2\2\u2033\u20f4\7\u0153\2\2\u2034\u2036\7t\2\2\u2035")
        buf.write("\u2037\7\24\2\2\u2036\u2035\3\2\2\2\u2036\u2037\3\2\2")
        buf.write("\2\u2037\u2038\3\2\2\2\u2038\u20f4\7w\2\2\u2039\u203a")
        buf.write("\t\u0085\2\2\u203a\u203b\7\24\2\2\u203b\u20f4\7w\2\2\u203c")
        buf.write("\u203e\7t\2\2\u203d\u203f\7\24\2\2\u203e\u203d\3\2\2\2")
        buf.write("\u203e\u203f\3\2\2\2\u203f\u2040\3\2\2\2\u2040\u2041\7")
        buf.write("\u0146\2\2\u2041\u20f4\7\u00d6\2\2\u2042\u2043\t\u0086")
        buf.write("\2\2\u2043\u2044\7\24\2\2\u2044\u2045\7\u0146\2\2\u2045")
        buf.write("\u20f4\7\u00d6\2\2\u2046\u2048\7t\2\2\u2047\u2049\7\24")
        buf.write("\2\2\u2048\u2047\3\2\2\2\u2048\u2049\3\2\2\2\u2049\u204a")
        buf.write("\3\2\2\2\u204a\u204b\7w\2\2\u204b\u20f4\7\u009b\2\2\u204c")
        buf.write("\u204d\t\u0087\2\2\u204d\u204e\7\24\2\2\u204e\u204f\7")
        buf.write("w\2\2\u204f\u20f4\7\u009b\2\2\u2050\u2052\7t\2\2\u2051")
        buf.write("\u2053\7\24\2\2\u2052\u2051\3\2\2\2\u2052\u2053\3\2\2")
        buf.write("\2\u2053\u2054\3\2\2\2\u2054\u2055\7w\2\2\u2055\u2056")
        buf.write("\7=\2\2\u2056\u20f4\7\u01c5\2\2\u2057\u2058\t\u0088\2")
        buf.write("\2\u2058\u2059\7\24\2\2\u2059\u205a\7w\2\2\u205a\u205b")
        buf.write("\7=\2\2\u205b\u20f4\7\u01c5\2\2\u205c\u205e\7t\2\2\u205d")
        buf.write("\u205f\7\24\2\2\u205e\u205d\3\2\2\2\u205e\u205f\3\2\2")
        buf.write("\2\u205f\u2060\3\2\2\2\u2060\u20f4\7\u018f\2\2\u2061\u2062")
        buf.write("\t\u0081\2\2\u2062\u2063\7\24\2\2\u2063\u20f4\7\u018f")
        buf.write("\2\2\u2064\u2065\t}\2\2\u2065\u2066\7\24\2\2\u2066\u20f4")
        buf.write("\7\u0198\2\2\u2067\u2068\7t\2\2\u2068\u2069\7\u01b6\2")
        buf.write("\2\u2069\u20f4\7}\2\2\u206a\u206b\7\u0215\2\2\u206b\u20f4")
        buf.write("\7j\2\2\u206c\u206e\7t\2\2\u206d\u206f\7\24\2\2\u206e")
        buf.write("\u206d\3\2\2\2\u206e\u206f\3\2\2\2\u206f\u2070\3\2\2\2")
        buf.write("\u2070\u20f4\7\u01c4\2\2\u2071\u2072\t\u0081\2\2\u2072")
        buf.write("\u2073\7\24\2\2\u2073\u20f4\7\u01c4\2\2\u2074\u2075\t")
        buf.write("}\2\2\u2075\u20f4\7\u01c6\2\2\u2076\u2077\7t\2\2\u2077")
        buf.write("\u20f4\7\u01f5\2\2\u2078\u2079\t\u0089\2\2\u2079\u207a")
        buf.write("\7\24\2\2\u207a\u20f4\7\u01f5\2\2\u207b\u207c\t}\2\2\u207c")
        buf.write("\u207d\7\u01f7\2\2\u207d\u20f4\7\u020b\2\2\u207e\u2080")
        buf.write("\7t\2\2\u207f\u2081\7\24\2\2\u2080\u207f\3\2\2\2\u2080")
        buf.write("\u2081\3\2\2\2\u2081\u2082\3\2\2\2\u2082\u20f4\7\u020e")
        buf.write("\2\2\u2083\u2084\t\u008a\2\2\u2084\u2085\7\24\2\2\u2085")
        buf.write("\u20f4\7\u020e\2\2\u2086\u2087\t\u008b\2\2\u2087\u20f4")
        buf.write("\7\u0213\2\2\u2088\u2089\7\20\2\2\u2089\u208a\7\u01e6")
        buf.write("\2\2\u208a\u20f4\7r\2\2\u208b\u208d\7t\2\2\u208c\u208e")
        buf.write("\7\24\2\2\u208d\u208c\3\2\2\2\u208d\u208e\3\2\2\2\u208e")
        buf.write("\u208f\3\2\2\2\u208f\u2090\7\u022c\2\2\u2090\u2091\7\u025e")
        buf.write("\2\2\u2091\u20f4\7\u01c6\2\2\u2092\u2093\t\u008c\2\2\u2093")
        buf.write("\u2094\7\24\2\2\u2094\u2095\7\u022c\2\2\u2095\u2096\7")
        buf.write("\u025e\2\2\u2096\u20f4\7\u01c6\2\2\u2097\u2098\7\u025d")
        buf.write("\2\2\u2098\u2099\7\24\2\2\u2099\u20f4\7\u022c\2\2\u209a")
        buf.write("\u209c\7t\2\2\u209b\u209d\7\24\2\2\u209c\u209b\3\2\2\2")
        buf.write("\u209c\u209d\3\2\2\2\u209d\u209e\3\2\2\2\u209e\u20f4\7")
        buf.write("\u023f\2\2\u209f\u20a0\7\u00a4\2\2\u20a0\u20a1\7\24\2")
        buf.write("\2\u20a1\u20f4\7\u023f\2\2\u20a2\u20a3\t\177\2\2\u20a3")
        buf.write("\u20a4\7\u01c8\2\2\u20a4\u20f4\7\u023f\2\2\u20a5\u20a7")
        buf.write("\7t\2\2\u20a6\u20a8\7\24\2\2\u20a7\u20a6\3\2\2\2\u20a7")
        buf.write("\u20a8\3\2\2\2\u20a8\u20a9\3\2\2\2\u20a9\u20f4\7\u024a")
        buf.write("\2\2\u20aa\u20ab\t\u008d\2\2\u20ab\u20ac\7\24\2\2\u20ac")
        buf.write("\u20f4\7\u024a\2\2\u20ad\u20ae\t\u008e\2\2\u20ae\u20f4")
        buf.write("\7\u0248\2\2\u20af\u20b1\7t\2\2\u20b0\u20b2\7\24\2\2\u20b1")
        buf.write("\u20b0\3\2\2\2\u20b1\u20b2\3\2\2\2\u20b2\u20b3\3\2\2\2")
        buf.write("\u20b3\u20f4\7\u0261\2\2\u20b4\u20b5\t~\2\2\u20b5\u20b6")
        buf.write("\7\24\2\2\u20b6\u20f4\7\u0261\2\2\u20b7\u20b8\7\7\2\2")
        buf.write("\u20b8\u20b9\7}\2\2\u20b9\u20f4\7\u0261\2\2\u20ba\u20bc")
        buf.write("\7t\2\2\u20bb\u20bd\7\24\2\2\u20bc\u20bb\3\2\2\2\u20bc")
        buf.write("\u20bd\3\2\2\2\u20bd\u20be\3\2\2\2\u20be\u20f4\7\u0266")
        buf.write("\2\2\u20bf\u20c0\t\u008f\2\2\u20c0\u20c1\7\24\2\2\u20c1")
        buf.write("\u20f4\7\u0266\2\2\u20c2\u20c3\t}\2\2\u20c3\u20f4\7\u0278")
        buf.write("\2\2\u20c4\u20c6\7t\2\2\u20c5\u20c7\7\24\2\2\u20c6\u20c5")
        buf.write("\3\2\2\2\u20c6\u20c7\3\2\2\2\u20c7\u20c8\3\2\2\2\u20c8")
        buf.write("\u20f4\7\u0286\2\2\u20c9\u20ca\t\u0090\2\2\u20ca\u20cb")
        buf.write("\7\24\2\2\u20cb\u20f4\7\u0286\2\2\u20cc\u20cd\t\u0091")
        buf.write("\2\2\u20cd\u20f4\7\24\2\2\u20ce\u20cf\7+\2\2\u20cf\u20f4")
        buf.write("\7\u0278\2\2\u20d0\u20d1\7H\2\2\u20d1\u20f4\7\u017a\2")
        buf.write("\2\u20d2\u20d3\7\u00c2\2\2\u20d3\u20d4\7\3\2\2\u20d4\u20f4")
        buf.write("\7\u01b7\2\2\u20d5\u20d7\7\u00da\2\2\u20d6\u20d8\7\24")
        buf.write("\2\2\u20d7\u20d6\3\2\2\2\u20d7\u20d8\3\2\2\2\u20d8\u20d9")
        buf.write("\3\2\2\2\u20d9\u20f4\7\u025c\2\2\u20da\u20db\7\u00e7\2")
        buf.write("\2\u20db\u20dd\7\24\2\2\u20dc\u20de\7\u0183\2\2\u20dd")
        buf.write("\u20dc\3\2\2\2\u20dd\u20de\3\2\2\2\u20de\u20df\3\2\2\2")
        buf.write("\u20df\u20f4\7\u01c2\2\2\u20e0\u20e1\7\u0102\2\2\u20e1")
        buf.write("\u20e2\7\24\2\2\u20e2\u20f4\7\u01c3\2\2\u20e3\u20e4\7")
        buf.write("\u011b\2\2\u20e4\u20e5\7\u0080\2\2\u20e5\u20f4\7\u0255")
        buf.write("\2\2\u20e6\u20e7\7\u011b\2\2\u20e7\u20f4\7\u0244\2\2\u20e8")
        buf.write("\u20e9\7\u01c9\2\2\u20e9\u20f4\7\u0082\2\2\u20ea\u20f4")
        buf.write("\7\u01ec\2\2\u20eb\u20ec\7\u020c\2\2\u20ec\u20ed\7\24")
        buf.write("\2\2\u20ed\u20f4\t\u0092\2\2\u20ee\u20f4\7\u0240\2\2\u20ef")
        buf.write("\u20f4\7\u0242\2\2\u20f0\u20f4\7\u0243\2\2\u20f1\u20f4")
        buf.write("\7\u0245\2\2\u20f2\u20f4\7\u0246\2\2\u20f3\u1fad\3\2\2")
        buf.write("\2\u20f3\u1faf\3\2\2\2\u20f3\u1fb0\3\2\2\2\u20f3\u1fb7")
        buf.write("\3\2\2\2\u20f3\u1fbb\3\2\2\2\u20f3\u1fbf\3\2\2\2\u20f3")
        buf.write("\u1fc4\3\2\2\2\u20f3\u1fc7\3\2\2\2\u20f3\u1fca\3\2\2\2")
        buf.write("\u20f3\u1fcd\3\2\2\2\u20f3\u1fcf\3\2\2\2\u20f3\u1fd5\3")
        buf.write("\2\2\2\u20f3\u1fd9\3\2\2\2\u20f3\u1fdc\3\2\2\2\u20f3\u1fdf")
        buf.write("\3\2\2\2\u20f3\u1fe2\3\2\2\2\u20f3\u1fe7\3\2\2\2\u20f3")
        buf.write("\u1fea\3\2\2\2\u20f3\u1fed\3\2\2\2\u20f3\u1ff0\3\2\2\2")
        buf.write("\u20f3\u1ff7\3\2\2\2\u20f3\u1ffa\3\2\2\2\u20f3\u1fff\3")
        buf.write("\2\2\2\u20f3\u2002\3\2\2\2\u20f3\u2007\3\2\2\2\u20f3\u200a")
        buf.write("\3\2\2\2\u20f3\u200c\3\2\2\2\u20f3\u200f\3\2\2\2\u20f3")
        buf.write("\u2014\3\2\2\2\u20f3\u2017\3\2\2\2\u20f3\u2018\3\2\2\2")
        buf.write("\u20f3\u201e\3\2\2\2\u20f3\u2023\3\2\2\2\u20f3\u2027\3")
        buf.write("\2\2\2\u20f3\u202a\3\2\2\2\u20f3\u2030\3\2\2\2\u20f3\u2034")
        buf.write("\3\2\2\2\u20f3\u2039\3\2\2\2\u20f3\u203c\3\2\2\2\u20f3")
        buf.write("\u2042\3\2\2\2\u20f3\u2046\3\2\2\2\u20f3\u204c\3\2\2\2")
        buf.write("\u20f3\u2050\3\2\2\2\u20f3\u2057\3\2\2\2\u20f3\u205c\3")
        buf.write("\2\2\2\u20f3\u2061\3\2\2\2\u20f3\u2064\3\2\2\2\u20f3\u2067")
        buf.write("\3\2\2\2\u20f3\u206a\3\2\2\2\u20f3\u206c\3\2\2\2\u20f3")
        buf.write("\u2071\3\2\2\2\u20f3\u2074\3\2\2\2\u20f3\u2076\3\2\2\2")
        buf.write("\u20f3\u2078\3\2\2\2\u20f3\u207b\3\2\2\2\u20f3\u207e\3")
        buf.write("\2\2\2\u20f3\u2083\3\2\2\2\u20f3\u2086\3\2\2\2\u20f3\u2088")
        buf.write("\3\2\2\2\u20f3\u208b\3\2\2\2\u20f3\u2092\3\2\2\2\u20f3")
        buf.write("\u2097\3\2\2\2\u20f3\u209a\3\2\2\2\u20f3\u209f\3\2\2\2")
        buf.write("\u20f3\u20a2\3\2\2\2\u20f3\u20a5\3\2\2\2\u20f3\u20aa\3")
        buf.write("\2\2\2\u20f3\u20ad\3\2\2\2\u20f3\u20af\3\2\2\2\u20f3\u20b4")
        buf.write("\3\2\2\2\u20f3\u20b7\3\2\2\2\u20f3\u20ba\3\2\2\2\u20f3")
        buf.write("\u20bf\3\2\2\2\u20f3\u20c2\3\2\2\2\u20f3\u20c4\3\2\2\2")
        buf.write("\u20f3\u20c9\3\2\2\2\u20f3\u20cc\3\2\2\2\u20f3\u20ce\3")
        buf.write("\2\2\2\u20f3\u20d0\3\2\2\2\u20f3\u20d2\3\2\2\2\u20f3\u20d5")
        buf.write("\3\2\2\2\u20f3\u20da\3\2\2\2\u20f3\u20e0\3\2\2\2\u20f3")
        buf.write("\u20e3\3\2\2\2\u20f3\u20e6\3\2\2\2\u20f3\u20e8\3\2\2\2")
        buf.write("\u20f3\u20ea\3\2\2\2\u20f3\u20eb\3\2\2\2\u20f3\u20ee\3")
        buf.write("\2\2\2\u20f3\u20ef\3\2\2\2\u20f3\u20f0\3\2\2\2\u20f3\u20f1")
        buf.write("\3\2\2\2\u20f3\u20f2\3\2\2\2\u20f4\u0429\3\2\2\2\u20f5")
        buf.write("\u20f8\7\u0252\2\2\u20f6\u20f9\5\u0430\u0219\2\u20f7\u20f9")
        buf.write("\5\u041e\u0210\2\u20f8\u20f6\3\2\2\2\u20f8\u20f7\3\2\2")
        buf.write("\2\u20f9\u20fe\3\2\2\2\u20fa\u20fb\7\34\2\2\u20fb\u20fc")
        buf.write("\7\u0255\2\2\u20fc\u20fd\7\u02a8\2\2\u20fd\u20ff\5\u0430")
        buf.write("\u0219\2\u20fe\u20fa\3\2\2\2\u20fe\u20ff\3\2\2\2\u20ff")
        buf.write("\u2134\3\2\2\2\u2100\u2104\7\u0110\2\2\u2101\u2105\5\u0430")
        buf.write("\u0219\2\u2102\u2105\5\u041e\u0210\2\u2103\u2105\5\u0422")
        buf.write("\u0212\2\u2104\u2101\3\2\2\2\u2104\u2102\3\2\2\2\u2104")
        buf.write("\u2103\3\2\2\2\u2105\u2106\3\2\2\2\u2106\u2114\t\u0093")
        buf.write("\2\2\u2107\u210a\7\u02da\2\2\u2108\u210b\7\u02d4\2\2\u2109")
        buf.write("\u210b\5\u041e\u0210\2\u210a\u2108\3\2\2\2\u210a\u2109")
        buf.write("\3\2\2\2\u210b\u2111\3\2\2\2\u210c\u210f\7\u02e0\2\2\u210d")
        buf.write("\u2110\7\u02d4\2\2\u210e\u2110\5\u041e\u0210\2\u210f\u210d")
        buf.write("\3\2\2\2\u210f\u210e\3\2\2\2\u2110\u2112\3\2\2\2\u2111")
        buf.write("\u210c\3\2\2\2\u2111\u2112\3\2\2\2\u2112\u2113\3\2\2\2")
        buf.write("\u2113\u2115\7\u02db\2\2\u2114\u2107\3\2\2\2\u2114\u2115")
        buf.write("\3\2\2\2\u2115\u2125\3\2\2\2\u2116\u2123\7\u025a\2\2\u2117")
        buf.write("\u2124\7\u0081\2\2\u2118\u2124\7\u00f1\2\2\u2119\u2124")
        buf.write("\7\u0150\2\2\u211a\u2121\7\u0208\2\2\u211b\u211e\7\u02da")
        buf.write("\2\2\u211c\u211f\7\u02d4\2\2\u211d\u211f\5\u041e\u0210")
        buf.write("\2\u211e\u211c\3\2\2\2\u211e\u211d\3\2\2\2\u211f\u2120")
        buf.write("\3\2\2\2\u2120\u2122\7\u02db\2\2\u2121\u211b\3\2\2\2\u2121")
        buf.write("\u2122\3\2\2\2\u2122\u2124\3\2\2\2\u2123\u2117\3\2\2\2")
        buf.write("\u2123\u2118\3\2\2\2\u2123\u2119\3\2\2\2\u2123\u211a\3")
        buf.write("\2\2\2\u2124\u2126\3\2\2\2\u2125\u2116\3\2\2\2\u2125\u2126")
        buf.write("\3\2\2\2\u2126\u2134\3\2\2\2\u2127\u2134\5\u042c\u0217")
        buf.write("\2\u2128\u2129\7\u0080\2\2\u2129\u2134\5\u0430\u0219\2")
        buf.write("\u212a\u2134\5\u0430\u0219\2\u212b\u2134\7\u017e\2\2\u212c")
        buf.write("\u2134\7\u0262\2\2\u212d\u2134\7\u00cc\2\2\u212e\u2134")
        buf.write("\7\u0084\2\2\u212f\u2134\7\u0214\2\2\u2130\u2134\7\u0151")
        buf.write("\2\2\u2131\u2134\7\u0145\2\2\u2132\u2134\7\u008f\2\2\u2133")
        buf.write("\u20f5\3\2\2\2\u2133\u2100\3\2\2\2\u2133\u2127\3\2\2\2")
        buf.write("\u2133\u2128\3\2\2\2\u2133\u212a\3\2\2\2\u2133\u212b\3")
        buf.write("\2\2\2\u2133\u212c\3\2\2\2\u2133\u212d\3\2\2\2\u2133\u212e")
        buf.write("\3\2\2\2\u2133\u212f\3\2\2\2\u2133\u2130\3\2\2\2\u2133")
        buf.write("\u2131\3\2\2\2\u2133\u2132\3\2\2\2\u2134\u042b\3\2\2\2")
        buf.write("\u2135\u2136\t\u0094\2\2\u2136\u042d\3\2\2\2\u2137\u2138")
        buf.write("\7\u02df\2\2\u2138\u2139\5\u042c\u0217\2\u2139\u042f\3")
        buf.write("\2\2\2\u213a\u213b\t\u0095\2\2\u213b\u0431\3\2\2\2\u213c")
        buf.write("\u213d\7\u02f1\2\2\u213d\u213f\5\u03fa\u01fe\2\u213e\u213c")
        buf.write("\3\2\2\2\u213e\u213f\3\2\2\2\u213f\u2140\3\2\2\2\u2140")
        buf.write("\u2141\5\u0434\u021b\2\u2141\u0433\3\2\2\2\u2142\u2145")
        buf.write("\5\u0438\u021d\2\u2143\u2145\7\u02d7\2\2\u2144\u2142\3")
        buf.write("\2\2\2\u2144\u2143\3\2\2\2\u2145\u0435\3\2\2\2\u2146\u2147")
        buf.write("\7\u02da\2\2\u2147\u2148\7\u02de\2\2\u2148\u2149\7\u02db")
        buf.write("\2\2\u2149\u0437\3\2\2\2\u214a\u214b\t\u0096\2\2\u214b")
        buf.write("\u0439\3\2\2\2\u214c\u214d\t\u0097\2\2\u214d\u043b\3\2")
        buf.write("\2\2\u214e\u214f\t\u0098\2\2\u214f\u043d\3\2\2\2\u04e1")
        buf.write("\u0440\u0443\u0447\u0472\u047e\u0483\u0488\u048f\u0495")
        buf.write("\u049a\u049e\u04a6\u04a8\u04ac\u04b0\u04b3\u04b7\u04bc")
        buf.write("\u04c2\u04cb\u04ce\u04d4\u04dd\u04ea\u04ef\u04f9\u04fc")
        buf.write("\u0501\u0506\u050d\u0513\u0517\u051d\u0522\u0529\u0530")
        buf.write("\u0537\u053c\u0540\u054c\u0556\u055b\u0567\u056c\u0571")
        buf.write("\u0574\u0581\u058d\u0592\u0597\u05a3\u05a8\u05b0\u05b2")
        buf.write("\u05b6\u05ba\u05bd\u05c1\u05c6\u05d2\u05d7\u05db\u05de")
        buf.write("\u05e3\u05ea\u05f4\u05f9\u05fc\u0600\u0603\u0608\u061a")
        buf.write("\u061f\u0624\u0626\u062d\u0634\u0637\u063a\u063d\u0648")
        buf.write("\u0654\u0658\u065b\u0664\u066c\u0674\u0677\u067e\u0682")
        buf.write("\u0687\u068c\u06b5\u06d1\u06d8\u06dd\u06e4\u06ef\u06f7")
        buf.write("\u06fb\u0707\u070a\u0710\u0713\u0718\u071d\u0721\u072b")
        buf.write("\u0735\u073b\u0746\u074b\u074f\u0757\u075f\u0764\u0767")
        buf.write("\u0769\u076c\u0775\u077a\u0781\u0784\u0787\u078b\u078e")
        buf.write("\u0796\u079b\u07a0\u07a7\u07b1\u07c1\u07c7\u07d1\u07db")
        buf.write("\u07e2\u07e5\u07ea\u07f4\u07f9\u0800\u0803\u0808\u080b")
        buf.write("\u080e\u081f\u0824\u082d\u0830\u0835\u0838\u083f\u0842")
        buf.write("\u0849\u084e\u0852\u0857\u085c\u0866\u086c\u0876\u087b")
        buf.write("\u0882\u0888\u088c\u088f\u0892\u08a3\u08a8\u08b0\u08be")
        buf.write("\u08c5\u08d5\u08de\u08e0\u08f5\u08fd\u0906\u090a\u0922")
        buf.write("\u0924\u0936\u0938\u093d\u0942\u0947\u094c\u0956\u095f")
        buf.write("\u0968\u096d\u0972\u0977\u097b\u097e\u0984\u0992\u0997")
        buf.write("\u0999\u099c\u09a4\u09b1\u09b3\u09b7\u09bf\u09c1\u09c3")
        buf.write("\u09c5\u09c9\u09ce\u09d8\u09e3\u09e5\u09ee\u09f4\u09f6")
        buf.write("\u09fa\u09fe\u0a02\u0a06\u0a08\u0a0d\u0a12\u0a17\u0a1a")
        buf.write("\u0a25\u0a28\u0a2b\u0a2e\u0a33\u0a38\u0a3c\u0a40\u0a46")
        buf.write("\u0a4a\u0a4e\u0a5a\u0a5f\u0a62\u0a66\u0a6a\u0a6f\u0a73")
        buf.write("\u0a79\u0a7e\u0a81\u0a89\u0a8c\u0a95\u0a99\u0a9b\u0aae")
        buf.write("\u0ab4\u0ab9\u0abe\u0ac0\u0ac4\u0ac9\u0ace\u0ad6\u0adb")
        buf.write("\u0ae5\u0ae8\u0aeb\u0af3\u0af5\u0af9\u0afe\u0b05\u0b16")
        buf.write("\u0b18\u0b27\u0b29\u0b37\u0b3a\u0b3d\u0b47\u0b4a\u0b4d")
        buf.write("\u0b54\u0b5a\u0b5f\u0b63\u0b66\u0b69\u0b6f\u0b74\u0b77")
        buf.write("\u0b7b\u0b7f\u0b82\u0b89\u0b8c\u0b8e\u0b93\u0b9b\u0b9d")
        buf.write("\u0baa\u0bac\u0bae\u0bb1\u0bb5\u0bbf\u0bc3\u0bc8\u0bcd")
        buf.write("\u0bd1\u0bd3\u0bd6\u0bda\u0be4\u0bec\u0bf4\u0bf7\u0bfa")
        buf.write("\u0bfd\u0c00\u0c02\u0c09\u0c0b\u0c0f\u0c15\u0c18\u0c1c")
        buf.write("\u0c21\u0c30\u0c36\u0c3b\u0c40\u0c45\u0c4a\u0c4c\u0c4e")
        buf.write("\u0c53\u0c5a\u0c5e\u0c68\u0c6c\u0c6f\u0c72\u0c78\u0c7b")
        buf.write("\u0c7e\u0c81\u0c84\u0c87\u0c8a\u0c91\u0c94\u0c97\u0c9c")
        buf.write("\u0c9e\u0ca1\u0ca4\u0caa\u0cb4\u0cba\u0cbe\u0cc1\u0cc8")
        buf.write("\u0ccd\u0cd4\u0cda\u0cdc\u0ce2\u0ce6\u0ced\u0cf2\u0cf7")
        buf.write("\u0cfb\u0d00\u0d04\u0d0a\u0d0d\u0d10\u0d13\u0d16\u0d19")
        buf.write("\u0d1c\u0d23\u0d26\u0d29\u0d2e\u0d30\u0d33\u0d36\u0d3a")
        buf.write("\u0d40\u0d42\u0d4d\u0d51\u0d55\u0d58\u0d5d\u0d60\u0d65")
        buf.write("\u0d68\u0d73\u0d79\u0d7c\u0d7f\u0d82\u0d85\u0d8c\u0d8f")
        buf.write("\u0d92\u0d97\u0d99\u0d9c\u0d9f\u0da2\u0da9\u0dad\u0dbd")
        buf.write("\u0dc2\u0dc5\u0dc7\u0dcb\u0dd4\u0dd8\u0ddc\u0de0\u0de3")
        buf.write("\u0de5\u0dea\u0df0\u0df3\u0df6\u0dfa\u0e01\u0e05\u0e0a")
        buf.write("\u0e0f\u0e12\u0e15\u0e18\u0e1a\u0e1e\u0e21\u0e25\u0e2d")
        buf.write("\u0e2f\u0e31\u0e34\u0e3d\u0e3f\u0e53\u0e5a\u0e5c\u0e68")
        buf.write("\u0e6a\u0e6d\u0e71\u0e74\u0e7f\u0e85\u0e8b\u0e8f\u0e94")
        buf.write("\u0e9b\u0e9f\u0ea2\u0ea8\u0ead\u0eb1\u0eb5\u0eba\u0ec2")
        buf.write("\u0ec6\u0ed4\u0ed6\u0ed9\u0edf\u0ee4\u0ee7\u0eea\u0ef0")
        buf.write("\u0f0c\u0f15\u0f1a\u0f1f\u0f25\u0f2c\u0f31\u0f33\u0f44")
        buf.write("\u0f4c\u0f4e\u0f50\u0f52\u0f61\u0f74\u0f76\u0f79\u0f7f")
        buf.write("\u0f85\u0f8d\u0f8f\u0f91\u0f96\u0f9a\u0f9e\u0fa2\u0fa5")
        buf.write("\u0fa9\u0fae\u0fb3\u0fbb\u0fbe\u0fc1\u0fc4\u0fc8\u0fd1")
        buf.write("\u0fd9\u0fdc\u0fdf\u0fe2\u0fe6\u0fe8\u0fea\u0fed\u0ff3")
        buf.write("\u0ff6\u0ffb\u1000\u1004\u1008\u100e\u1027\u1029\u1031")
        buf.write("\u1036\u103a\u103f\u1041\u1049\u104e\u1052\u1057\u1059")
        buf.write("\u105e\u1065\u1069\u106e\u1073\u1078\u107c\u1080\u1085")
        buf.write("\u108a\u108e\u1093\u109a\u109f\u10a3\u10a6\u10a8\u10ac")
        buf.write("\u10b8\u10bc\u10c1\u10c5\u10cc\u10d6\u10d9\u10de\u10e3")
        buf.write("\u10ed\u10ef\u10fc\u10fe\u1100\u111b\u111e\u1123\u1125")
        buf.write("\u113b\u113e\u1140\u1142\u1149\u114b\u1153\u1157\u115c")
        buf.write("\u115f\u1162\u1165\u116c\u1171\u1179\u117c\u1181\u1184")
        buf.write("\u1188\u118d\u1192\u1195\u1198\u119b\u119d\u11a2\u11a6")
        buf.write("\u11aa\u11ae\u11b5\u11ba\u11c4\u11c7\u11ca\u11d6\u11d8")
        buf.write("\u11dc\u11e0\u11e3\u11e8\u11ed\u11f4\u11fa\u1202\u120e")
        buf.write("\u1212\u121c\u1221\u1225\u1229\u1234\u1236\u1244\u1249")
        buf.write("\u124d\u1250\u1253\u1258\u125a\u125e\u1262\u1268\u126c")
        buf.write("\u1273\u1286\u1291\u1296\u129c\u12a0\u12a8\u12aa\u12b9")
        buf.write("\u12c2\u12c7\u12cb\u12ce\u12dc\u12e4\u12e8\u12eb\u12f3")
        buf.write("\u12ff\u1303\u1308\u130b\u1318\u131c\u1324\u1329\u132d")
        buf.write("\u1331\u1335\u133b\u133e\u1341\u135c\u1362\u1366\u136d")
        buf.write("\u1372\u1378\u137c\u137f\u1385\u138e\u1396\u139a\u139e")
        buf.write("\u13a6\u13af\u13b5\u13b7\u13d3\u13d8\u13dc\u13e3\u13e7")
        buf.write("\u13eb\u13ef\u13fb\u13ff\u140d\u1413\u141a\u141f\u142a")
        buf.write("\u142d\u1433\u1435\u143e\u1448\u144d\u145c\u1460\u1463")
        buf.write("\u1467\u1475\u1477\u147b\u1483\u148a\u148f\u1491\u1496")
        buf.write("\u149b\u14a3\u14aa\u14ae\u14b1\u14bd\u14c3\u14cc\u14cf")
        buf.write("\u14d5\u14da\u14e0\u14e5\u14e7\u14ee\u14f1\u14f8\u1503")
        buf.write("\u1509\u150d\u1513\u1518\u151a\u1520\u152b\u152d\u152f")
        buf.write("\u1532\u1536\u1539\u153d\u1541\u1546\u1551\u1555\u155d")
        buf.write("\u1560\u1565\u1567\u156c\u1571\u1575\u157b\u157f\u1582")
        buf.write("\u158a\u158d\u1591\u1595\u159a\u159d\u15a1\u15a5\u15a9")
        buf.write("\u15bc\u15c4\u15c8\u15cc\u15d2\u15d6\u15db\u15dd\u15e0")
        buf.write("\u15e4\u15e7\u15ea\u15ed\u15f1\u15fd\u1600\u1603\u1608")
        buf.write("\u160e\u1613\u1619\u161d\u1622\u1629\u162f\u1636\u1639")
        buf.write("\u163c\u1640\u1645\u1649\u164b\u1656\u165d\u1661\u166b")
        buf.write("\u166f\u1673\u1678\u1683\u1688\u168e\u1693\u1696\u169b")
        buf.write("\u169d\u16a3\u16a8\u16ab\u16b0\u16b5\u16be\u16c3\u16c9")
        buf.write("\u16cf\u16d4\u16d8\u16da\u16df\u16e3\u16e9\u16ed\u16f6")
        buf.write("\u16fb\u16fe\u1704\u1709\u170b\u170d\u1712\u1717\u171c")
        buf.write("\u1724\u1729\u1730\u1734\u173d\u1741\u1746\u1751\u1753")
        buf.write("\u1763\u1768\u176e\u1774\u1782\u1787\u178d\u1790\u1793")
        buf.write("\u1797\u179c\u17a5\u17a7\u17ab\u17ae\u17b3\u17b5\u17b9")
        buf.write("\u17c5\u17ce\u17d2\u17d7\u17db\u17df\u17e4\u17e7\u17f1")
        buf.write("\u17f7\u17fa\u17fd\u1801\u1806\u180f\u1819\u181d\u1821")
        buf.write("\u1824\u1827\u182c\u1831\u1834\u1837\u183d\u1840\u1846")
        buf.write("\u1849\u184c\u1851\u1854\u185c\u1862\u1867\u186c\u1874")
        buf.write("\u187e\u1882\u1884\u1887\u1893\u1897\u189a\u18a9\u18ae")
        buf.write("\u18b2\u18b9\u18bc\u18c5\u18cc\u18d1\u18d5\u18dd\u18e3")
        buf.write("\u18eb\u18ee\u18f7\u18fa\u18fd\u1906\u190c\u1912\u1914")
        buf.write("\u1921\u1923\u192c\u192e\u1932\u1938\u193c\u194a\u194f")
        buf.write("\u195a\u1965\u1969\u1970\u1975\u1979\u197e\u1986\u1988")
        buf.write("\u198e\u1991\u199c\u19a1\u19ab\u19ad\u19af\u19b9\u19bd")
        buf.write("\u19bf\u19cb\u19d3\u19e0\u19e3\u19ef\u19f1\u19f9\u1a01")
        buf.write("\u1a08\u1a0c\u1a13\u1a17\u1a1c\u1a20\u1a28\u1a2c\u1a33")
        buf.write("\u1a38\u1a41\u1a4a\u1a4d\u1a61\u1a65\u1a68\u1a6f\u1a72")
        buf.write("\u1a76\u1a79\u1a80\u1a83\u1a89\u1a8c\u1a90\u1a93\u1a9a")
        buf.write("\u1a9f\u1aad\u1ab4\u1abf\u1ac8\u1ad1\u1ad5\u1ad9\u1af3")
        buf.write("\u1af6\u1af9\u1b03\u1b07\u1b0c\u1b11\u1b16\u1b1f\u1b22")
        buf.write("\u1b24\u1b28\u1b2f\u1b36\u1b3e\u1b4d\u1b52\u1b57\u1b5d")
        buf.write("\u1b60\u1b64\u1b6e\u1b7a\u1b7c\u1b83\u1b87\u1b90\u1b99")
        buf.write("\u1ba7\u1baf\u1bb2\u1bbb\u1bc1\u1bcb\u1bd3\u1bd6\u1bd9")
        buf.write("\u1be2\u1be7\u1bec\u1bf1\u1bf6\u1bfb\u1bfe\u1c03\u1c08")
        buf.write("\u1c0c\u1c12\u1c18\u1c21\u1c26\u1c2e\u1c32\u1c37\u1c3d")
        buf.write("\u1c44\u1c49\u1c50\u1c54\u1c59\u1c61\u1c64\u1c67\u1c6a")
        buf.write("\u1c6e\u1c73\u1c78\u1c7c\u1c83\u1c88\u1c8a\u1c95\u1c99")
        buf.write("\u1c9b\u1ca6\u1cb1\u1cb6\u1cbb\u1cbd\u1cc1\u1cc4\u1cc8")
        buf.write("\u1cd5\u1cda\u1cde\u1ce3\u1ce9\u1ced\u1cf2\u1cf6\u1cfb")
        buf.write("\u1d00\u1d03\u1d06\u1d0b\u1d14\u1d1c\u1d20\u1d2a\u1d2d")
        buf.write("\u1d2f\u1d39\u1d3b\u1d41\u1d47\u1d49\u1d57\u1d59\u1d63")
        buf.write("\u1d6c\u1d75\u1d79\u1d7d\u1d82\u1d86\u1d89\u1d8d\u1d94")
        buf.write("\u1d98\u1d9c\u1da1\u1da5\u1db8\u1dbd\u1dc4\u1dcf\u1dd6")
        buf.write("\u1ddd\u1de1\u1de8\u1ded\u1df6\u1dfe\u1e06\u1e0c\u1e11")
        buf.write("\u1e16\u1e1a\u1e1f\u1e22\u1e27\u1e2b\u1e2f\u1e34\u1e3d")
        buf.write("\u1e43\u1e48\u1e4f\u1e5d\u1e62\u1e72\u1e75\u1e7a\u1e87")
        buf.write("\u1e8b\u1e90\u1e95\u1e99\u1e9d\u1ea1\u1ea6\u1ead\u1eb2")
        buf.write("\u1eb4\u1eb6\u1ebf\u1ec3\u1ec7\u1ec9\u1ecd\u1ed6\u1edc")
        buf.write("\u1ee0\u1ee2\u1ee6\u1eea\u1ef1\u1ef9\u1f01\u1f03\u1f09")
        buf.write("\u1f0c\u1f24\u1f2b\u1f4c\u1f51\u1f54\u1f59\u1f5b\u1f61")
        buf.write("\u1f69\u1f6e\u1f75\u1f7a\u1f7d\u1f81\u1f88\u1f8d\u1fab")
        buf.write("\u1fb2\u1fc1\u1fd1\u1fe4\u1ff5\u1ffc\u2004\u2011\u201a")
        buf.write("\u2023\u202c\u2036\u203e\u2048\u2052\u205e\u206e\u2080")
        buf.write("\u208d\u209c\u20a7\u20b1\u20bc\u20c6\u20d7\u20dd\u20f3")
        buf.write("\u20f8\u20fe\u2104\u210a\u210f\u2111\u2114\u211e\u2121")
        buf.write("\u2123\u2125\u2133\u213e\u2144")
        return buf.getvalue()


class PlSqlParser ( Parser ):

    grammarFileName = "PlSqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ACCESS'", "'ACCOUNT'", "'ADD'", "'ADMIN'", 
                     "'ADMINISTER'", "'ADVISOR'", "'AFTER'", "'AGENT'", 
                     "'AGGREGATE'", "'A'", "'ALL'", "'ALLOCATE'", "'ALLOW'", 
                     "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANY'", 
                     "'ANYSCHEMA'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
                     "'ASSOCIATE'", "'ASYNCHRONOUS'", "'AT'", "'ATTRIBUTE'", 
                     "'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", "'AUTHID'", 
                     "'AUTOALLOCATE'", "'AUTO'", "'AUTOEXTEND'", "'AUTOMATIC'", 
                     "'AUTONOMOUS_TRANSACTION'", "'BACKUP'", "'BASIC'", 
                     "'BASICFILE'", "'BATCH'", "'BECOME'", "'BEFORE'", "'BEGIN'", 
                     "'BETWEEN'", "'BFILE'", "'BIGFILE'", "'BINARY'", "'BINARY_DOUBLE'", 
                     "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", 
                     "'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", "'BOTH'", "'BREADTH'", 
                     "'BUFFER_POOL'", "'BUILD'", "'BULK'", "'BY'", "'BYTE'", 
                     "'CACHE'", "'CALL'", "'CANONICAL'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CERTIFICATE'", "'CHANGE'", "'CHARACTER'", 
                     "'CHAR'", "'CHAR_CS'", "'CHECK'", "'CHECKPOINT'", "'CHR'", 
                     "'CHUNK'", "'CLASS'", "'C'", "'CLOB'", "'CLOSE'", "'CLUSTER'", 
                     "'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", 
                     "'COLUMN_VALUE'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
                     "'COMPACT'", "'COMPATIBILITY'", "'COMPILE'", "'COMPLETE'", 
                     "'COMPOUND'", "'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", 
                     "'CONNECT'", "'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", 
                     "'CONSTRUCTOR'", "'CONTAINER'", "'CONTAINER_DATA'", 
                     "'CONTENT'", "'CONTEXT'", "'CONTINUE'", "'CONVERT'", 
                     "'CORRUPT_XID_ALL'", "'CORRUPT_XID'", "'COST'", "'COUNT'", 
                     "'CREATE'", "'CREATION'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_USER'", "'CURSOR'", "'CUSTOMDATUM'", "'CYCLE'", 
                     "'DATABASE'", "'DATA'", "'DATAFILE'", "'DATE'", "'DAY'", 
                     "'DBA_RECYCLEBIN'", "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", 
                     "'DDL'", "'DEALLOCATE'", "'DEBUG'", "'DEC'", "'DECIMAL'", 
                     "'DECLARE'", "'DECOMPOSE'", "'DECREMENT'", "'DECRYPT'", 
                     "'DEDUPLICATE'", "'DEFAULT'", "'DEFAULTS'", "'DEFERRABLE'", 
                     "'DEFERRED'", "'DEFINER'", "'DELEGATE'", "'DELETE'", 
                     "'DEMAND'", "'DEPTH'", "'DESC'", "'DETERMINISTIC'", 
                     "'DICTIONARY'", "'DIMENSION'", "'DIRECTORY'", "'DISABLE'", 
                     "'DISALLOW'", "'DISASSOCIATE'", "'DISTINCT'", "'DISTINGUISHED'", 
                     "'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", 
                     "'EACH'", "'EDITION'", "'EDITIONING'", "'EDITIONS'", 
                     "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", 
                     "'ENCODING'", "'ENCRYPT'", "'ENCRYPTION'", "'END'", 
                     "'ENFORCED'", "'ENTERPRISE'", "'ENTITYESCAPING'", "'ERR'", 
                     "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPT'", "'EXCEPTION'", 
                     "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUDING'", 
                     "'EXCLUSIVE'", "'EXECUTE'", "'EXEMPT'", "'EXISTS'", 
                     "'EXIT'", "'EXPIRE'", "'EXPLAIN'", "'EXTENT'", "'EXTERNAL'", 
                     "'EXTERNALLY'", "'EXTRACT'", "'FAILURE'", "'FALSE'", 
                     "'FAST'", "'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", 
                     "'FIRST'", "'FIRST_VALUE'", "'FLASHBACK'", "'FLASH_CACHE'", 
                     "'FLOAT'", "'FOLDER'", "'FOLLOWING'", "'FOLLOWS'", 
                     "'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", 
                     "'FREELISTS'", "'FREEPOOLS'", "'FROM'", "'FULL'", "'FUNCTION'", 
                     "'GENERATED'", "'GLOBAL'", "'GLOBALLY'", "'GOTO'", 
                     "'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'GUARANTEE'", 
                     "'HASH'", "'HAVING'", "'HIDE'", "'HIERARCHY'", "'HIGH'", 
                     "'HOUR'", "'IDENTIFIED'", "'IDENTIFIER'", "'ID'", "'IF'", 
                     "'IGNORE'", "'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", 
                     "'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", 
                     "'INDEXTYPE'", "'INDICATOR'", "'INDICES'", "'INFINITE'", 
                     "'INHERIT'", "'IN'", "'INITIAL'", "'INITIALLY'", "'INITRANS'", 
                     "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", "'INSTANCE'", 
                     "'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", "'INTERSECT'", 
                     "'INTERVAL'", "'INT'", "'INTO'", "'INVALIDATE'", "'IS'", 
                     "'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOB'", "'JOIN'", 
                     "'KEEP_DUPLICATES'", "'KEEP'", "'KEY'", "'LANGUAGE'", 
                     "'LAST'", "'LAST_VALUE'", "'LEADING'", "'LEFT'", "'LESS'", 
                     "'LEVEL'", "'LEVELS'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", 
                     "'LIKEC'", "'LIKE'", "'LIMIT'", "'LINK'", "'LIST'", 
                     "'LOB'", "'LOBS'", "'LOCAL'", "'LOCATOR'", "'LOCKED'", 
                     "'LOCK'", "'LOGGING'", "'LOG'", "'LOGMINING'", "'LOGOFF'", 
                     "'LOGON'", "'LONG'", "'LOOP'", "'LOW'", "'MAIN'", "'MANAGE'", 
                     "'MANAGEMENT'", "'MANUAL'", "'MAP'", "'MAPPING'", "'MASTER'", 
                     "'MATCHED'", "'MATERIALIZED'", "'MAXSIZE'", "'MAXVALUE'", 
                     "'MEASURE'", "'MEASURES'", "'MEDIUM'", "'MEMBER'", 
                     "'MERGE'", "'MINEXTENTS'", "'MINIMIZE'", "'MINIMUM'", 
                     "'MINING'", "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
                     "'MODEL'", "'MODE'", "'MODIFY'", "'MONTH'", "'MOVEMENT'", 
                     "'MOVE'", "'MULTISET'", "'NAME'", "'NAN'", "'NATURAL'", 
                     "'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCLOB'", 
                     "'NESTED'", "'NEVER'", "'NEW'", "'NEXT'", "'NOAUDIT'", 
                     "'NOCACHE'", "'NOCOMPRESS'", "'NOCOPY'", "'NOCYCLE'", 
                     "'NOENTITYESCAPING'", "'NOGUARANTEE'", "'NOLOGGING'", 
                     "'NOMAPPING'", "'NOMAXVALUE'", "'NOMINIMIZE'", "'NOMINVALUE'", 
                     "'NONE'", "'NO'", "'NONSCHEMA'", "'NOORDER'", "'NOPARALLEL'", 
                     "'NORELY'", "'NOROWDEPENDENCIES'", "'NOSCHEMACHECK'", 
                     "'NOTIFICATION'", "'NOT'", "'NOVALIDATE'", "'NOWAIT'", 
                     "'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NVARCHAR2'", 
                     "'OBJECT'", "'OFFLINE'", "'OFF'", "'OF'", "'OIDINDEX'", 
                     "'OID'", "'OLD'", "'OLTP'", "'ONLINE'", "'ONLY'", "'ON'", 
                     "'OPEN'", "'OPERATOR'", "'OPTIMAL'", "'OPTION'", "'ORADATA'", 
                     "'ORDER'", "'ORDINALITY'", "'OR'", "'OSERROR'", "'OUTER'", 
                     "'OUTLINE'", "'OUT'", "'OVERFLOW'", "'OVER'", "'OVERRIDING'", 
                     "'PACKAGE'", "'PARALLEL_ENABLE'", "'PARALLEL'", "'PARAMETERS'", 
                     "'PARENT'", "'PARTITION'", "'PASSING'", "'PASSWORD'", 
                     "'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTTHRESHOLD'", 
                     "'PCTUSED'", "'PCTVERSION'", "'%FOUND'", "'%ISOPEN'", 
                     "'%NOTFOUND'", "'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", 
                     "'PIPELINED'", "'PIPE'", "'PIVOT'", "'PLAN'", "'PLS_INTEGER'", 
                     "'PLUGGABLE'", "'POLICY'", "'POSITIVEN'", "'POSITIVE'", 
                     "'PRAGMA'", "'PREBUILT'", "'PRECEDING'", "'PRECISION'", 
                     "'PRESENT'", "'PRESERVE'", "'PRIMARY'", "'PRIOR'", 
                     "'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURE'", "'PROCESS'", 
                     "'PROFILE'", "'PROGRAM'", "'PUBLIC'", "'PURGE'", "'QUERY'", 
                     "'QUOTA'", "'RAISE'", "'RANGE'", "'RAW'", "'READ'", 
                     "'READS'", "'REAL'", "'REBUILD'", "'RECORD'", "'RECORDS_PER_BLOCK'", 
                     "'RECYCLE'", "'REDACTION'", "'REDUCED'", "'REFERENCE'", 
                     "'REFERENCES'", "'REFERENCING'", "'REF'", "'REFRESH'", 
                     "'REJECT'", "'REKEY'", "'RELATIONAL'", "'RELIES_ON'", 
                     "'RELY'", "'REMOVE'", "'RENAME'", "'REPLACE'", "'REQUIRED'", 
                     "'RESOURCE'", "'RESPECT'", "'RESTRICTED'", "'RESTRICT_REFERENCES'", 
                     "'RESULT_CACHE'", "'RESULT'", "'RESUMABLE'", "'RETENTION'", 
                     "'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", 
                     "'REVOKE'", "'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROWDEPENDENCIES'", "'ROWID'", 
                     "'ROW'", "'ROWS'", "'RULES'", "'SALT'", "'SAMPLE'", 
                     "'SAVEPOINT'", "'SAVE'", "'SCHEDULER'", "'SCHEMACHECK'", 
                     "'SCHEMA'", "'SCN'", "'SCOPE'", "'SEARCH'", "'SECOND'", 
                     "'SECUREFILE'", "'SEED'", "'SEGMENT'", "'SELECT'", 
                     "'SELF'", "'SEQUENCE'", "'SEQUENTIAL'", "'SERIALIZABLE'", 
                     "'SERIALLY_REUSABLE'", "'SERVERERROR'", "'SESSION'", 
                     "'SESSIONTIMEZONE'", "'SET'", "'SETS'", "'SETTINGS'", 
                     "'SHARE'", "'SHOW'", "'SHRINK'", "'SHUTDOWN'", "'SIBLINGS'", 
                     "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SIZE'", 
                     "'SKIP'", "'SMALLFILE'", "'SMALLINT'", "'SNAPSHOT'", 
                     "'SOME'", "'SORT'", "'SOURCE'", "'SPACE'", "'SPECIFICATION'", 
                     "'SQLDATA'", "'SQLERROR'", "'SQL'", "'STANDALONE'", 
                     "'START'", "'STARTUP'", "'STATEMENT_ID'", "'STATEMENT'", 
                     "'STATIC'", "'STATISTICS'", "'STORAGE'", "'STORE'", 
                     "'STRING'", "'SUBMULTISET'", "'SUBPARTITION'", "'SUBSTITUTABLE'", 
                     "'SUBTYPE'", "'SUCCESS'", "'SUPPLEMENTAL'", "'SUSPEND'", 
                     "'SYNCHRONOUS'", "'SYNONYM'", "'SYSBACKUP'", "'SYSDATE'", 
                     "'SYSDBA'", "'SYSDG'", "'SYSGUID'", "'SYSKM'", "'SYSOPER'", 
                     "'SYSTEM'", "'TABLESPACE'", "'TABLES'", "'TABLE'", 
                     "'TEMPFILE'", "'TEMPORARY'", "'THAN'", "'THEN'", "'THE'", 
                     "'THROUGH'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", 
                     "'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", 
                     "'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", 
                     "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRANSLATE'", "'TRANSLATION'", "'TREAT'", "'TRIGGERS'", 
                     "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TRUSTED'", "'TUNING'", 
                     "'TYPE'", "'UNBOUNDED'", "'UNDER'", "'UNDO'", "'UNIFORM'", 
                     "'UNION'", "'UNIQUE'", "'UNLIMITED'", "'UNLOCK'", "'UNPIVOT'", 
                     "'UNTIL'", "'UNUSED'", "'UPDATED'", "'UPDATE'", "'UPGRADE'", 
                     "'UPSERT'", "'UROWID'", "'USERS'", "'USER'", "'USE'", 
                     "'USING'", "'VALIDATE'", "'VALUES'", "'VALUE'", "'VARCHAR2'", 
                     "'VARCHAR'", "'VARIABLE'", "'VARRAYS'", "'VARRAY'", 
                     "'VARYING'", "'VERSIONS'", "'VERSION'", "'VIEW'", "'VIRTUAL'", 
                     "'WAIT'", "'WARNING'", "'WELLFORMED'", "'WHENEVER'", 
                     "'WHEN'", "'WHERE'", "'WHILE'", "'WITHIN'", "'WITHOUT'", 
                     "'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", 
                     "'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", 
                     "'XMLFOREST'", "'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", 
                     "'XMLQUERY'", "'XMLROOT'", "'XMLSCHEMA'", "'XMLSERIALIZE'", 
                     "'XMLTABLE'", "'XMLTYPE'", "'XML'", "'YEAR'", "'YES'", 
                     "'YMINTERVAL_UNCONSTRAINED'", "'ZONE'", "'PREDICTION'", 
                     "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", "'PREDICTION_DETAILS'", 
                     "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", "'CUME_DIST'", 
                     "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", 
                     "'DECODE'", "'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", 
                     "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", "'REGR_'", 
                     "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", 
                     "'TRIM'", "'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", 
                     "'LEAST'", "'GREATEST'", "'TO_DATE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'..'", "'.'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'%'", "'&'", 
                     "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
                     "'@'", "':='", "<INVALID>", "<INVALID>", "'^'", "'~'", 
                     "'!'", "'>'", "'<'", "':'", "';'", "'|'", "'='", "'['", 
                     "']'", "'_'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'@!'" ]

    symbolicNames = [ "<INVALID>", "ACCESS", "ACCOUNT", "ADD", "ADMIN", 
                      "ADMINISTER", "ADVISOR", "AFTER", "AGENT", "AGGREGATE", 
                      "A_LETTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", "ALWAYS", 
                      "ANALYZE", "AND", "ANY", "ANYSCHEMA", "ARCHIVE", "ARRAY", 
                      "AS", "ASC", "ASSOCIATE", "ASYNCHRONOUS", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHENTICATED", "AUTHENTICATION", "AUTHID", 
                      "AUTOALLOCATE", "AUTO", "AUTOEXTEND", "AUTOMATIC", 
                      "AUTONOMOUS_TRANSACTION", "BACKUP", "BASIC", "BASICFILE", 
                      "BATCH", "BECOME", "BEFORE", "BEGIN", "BETWEEN", "BFILE", 
                      "BIGFILE", "BINARY", "BINARY_DOUBLE", "BINARY_FLOAT", 
                      "BINARY_INTEGER", "BLOB", "BLOCK", "BLOCKSIZE", "BODY", 
                      "BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BUILD", 
                      "BULK", "BY", "BYTE", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CERTIFICATE", "CHANGE", 
                      "CHARACTER", "CHAR", "CHAR_CS", "CHECK", "CHECKPOINT", 
                      "CHR", "CHUNK", "CLASS", "C_LETTER", "CLOB", "CLOSE", 
                      "CLUSTER", "COALESCE", "COLLECT", "COLUMN", "COLUMNS", 
                      "COLUMN_VALUE", "COMMENT", "COMMIT", "COMMITTED", 
                      "COMPACT", "COMPATIBILITY", "COMPILE", "COMPLETE", 
                      "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", 
                      "CONNECT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
                      "CONSTRUCTOR", "CONTAINER", "CONTAINER_DATA", "CONTENT", 
                      "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID_ALL", 
                      "CORRUPT_XID", "COST", "COUNT", "CREATE", "CREATION", 
                      "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", 
                      "CUSTOMDATUM", "CYCLE", "DATABASE", "DATA", "DATAFILE", 
                      "DATE", "DAY", "DBA_RECYCLEBIN", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEALLOCATE", "DEBUG", "DEC", 
                      "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", "DECRYPT", 
                      "DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRABLE", 
                      "DEFERRED", "DEFINER", "DELEGATE", "DELETE", "DEMAND", 
                      "DEPTH", "DESC", "DETERMINISTIC", "DICTIONARY", "DIMENSION", 
                      "DIRECTORY", "DISABLE", "DISALLOW", "DISASSOCIATE", 
                      "DISTINCT", "DISTINGUISHED", "DOCUMENT", "DOUBLE", 
                      "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "EDITION", 
                      "EDITIONING", "EDITIONS", "ELEMENT", "ELSE", "ELSIF", 
                      "EMPTY", "ENABLE", "ENCODING", "ENCRYPT", "ENCRYPTION", 
                      "END", "ENFORCED", "ENTERPRISE", "ENTITYESCAPING", 
                      "ERR", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", 
                      "EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUDING", 
                      "EXCLUSIVE", "EXECUTE", "EXEMPT", "EXISTS", "EXIT", 
                      "EXPIRE", "EXPLAIN", "EXTENT", "EXTERNAL", "EXTERNALLY", 
                      "EXTRACT", "FAILURE", "FALSE", "FAST", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
                      "FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", 
                      "FLOAT", "FOLDER", "FOLLOWING", "FOLLOWS", "FORALL", 
                      "FORCE", "FOREIGN", "FOR", "FREELIST", "FREELISTS", 
                      "FREEPOOLS", "FROM", "FULL", "FUNCTION", "GENERATED", 
                      "GLOBAL", "GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", 
                      "GROUPS", "GUARANTEE", "HASH", "HAVING", "HIDE", "HIERARCHY", 
                      "HIGH", "HOUR", "IDENTIFIED", "IDENTIFIER", "ID", 
                      "IF", "IGNORE", "IMMEDIATE", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXTYPE", 
                      "INDICATOR", "INDICES", "INFINITE", "INHERIT", "IN", 
                      "INITIAL", "INITIALLY", "INITRANS", "INLINE", "INNER", 
                      "INOUT", "INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD", 
                      "INTEGER", "INTERSECT", "INTERVAL", "INT", "INTO", 
                      "INVALIDATE", "IS", "ISOLATION", "ITERATE", "JAVA", 
                      "JOB", "JOIN", "KEEP_DUPLICATES", "KEEP", "KEY", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LESS", "LEVEL", 
                      "LEVELS", "LIBRARY", "LIKE2", "LIKE4", "LIKEC", "LIKE", 
                      "LIMIT", "LINK", "LIST", "LOB", "LOBS", "LOCAL", "LOCATOR", 
                      "LOCKED", "LOCK", "LOGGING", "LOG", "LOGMINING", "LOGOFF", 
                      "LOGON", "LONG", "LOOP", "LOW", "MAIN", "MANAGE", 
                      "MANAGEMENT", "MANUAL", "MAP", "MAPPING", "MASTER", 
                      "MATCHED", "MATERIALIZED", "MAXSIZE", "MAXVALUE", 
                      "MEASURE", "MEASURES", "MEDIUM", "MEMBER", "MERGE", 
                      "MINEXTENTS", "MINIMIZE", "MINIMUM", "MINING", "MINUS", 
                      "MINUTE", "MINVALUE", "MLSLABEL", "MODEL", "MODE", 
                      "MODIFY", "MONTH", "MOVEMENT", "MOVE", "MULTISET", 
                      "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", 
                      "NCHAR", "NCLOB", "NESTED", "NEVER", "NEW", "NEXT", 
                      "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", 
                      "NOENTITYESCAPING", "NOGUARANTEE", "NOLOGGING", "NOMAPPING", 
                      "NOMAXVALUE", "NOMINIMIZE", "NOMINVALUE", "NONE", 
                      "NO", "NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", 
                      "NOROWDEPENDENCIES", "NOSCHEMACHECK", "NOTIFICATION", 
                      "NOT", "NOVALIDATE", "NOWAIT", "NULL", "NULLS", "NUMBER", 
                      "NUMERIC", "NVARCHAR2", "OBJECT", "OFFLINE", "OFF", 
                      "OF", "OIDINDEX", "OID", "OLD", "OLTP", "ONLINE", 
                      "ONLY", "ON", "OPEN", "OPERATOR", "OPTIMAL", "OPTION", 
                      "ORADATA", "ORDER", "ORDINALITY", "OR", "OSERROR", 
                      "OUTER", "OUTLINE", "OUT", "OVERFLOW", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARALLEL", "PARAMETERS", 
                      "PARENT", "PARTITION", "PASSING", "PASSWORD", "PATH", 
                      "PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", 
                      "PCTVERSION", "PERCENT_FOUND", "PERCENT_ISOPEN", "PERCENT_NOTFOUND", 
                      "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
                      "PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "PLUGGABLE", "POLICY", "POSITIVEN", "POSITIVE", "PRAGMA", 
                      "PREBUILT", "PRECEDING", "PRECISION", "PRESENT", "PRESERVE", 
                      "PRIMARY", "PRIOR", "PRIVILEGE", "PRIVILEGES", "PROCEDURE", 
                      "PROCESS", "PROFILE", "PROGRAM", "PUBLIC", "PURGE", 
                      "QUERY", "QUOTA", "RAISE", "RANGE", "RAW", "READ", 
                      "READS", "REAL", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", 
                      "RECYCLE", "REDACTION", "REDUCED", "REFERENCE", "REFERENCES", 
                      "REFERENCING", "REF", "REFRESH", "REJECT", "REKEY", 
                      "RELATIONAL", "RELIES_ON", "RELY", "REMOVE", "RENAME", 
                      "REPLACE", "REQUIRED", "RESOURCE", "RESPECT", "RESTRICTED", 
                      "RESTRICT_REFERENCES", "RESULT_CACHE", "RESULT", "RESUMABLE", 
                      "RETENTION", "RETURNING", "RETURN", "REUSE", "REVERSE", 
                      "REVOKE", "REWRITE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
                      "ROLLUP", "ROWDEPENDENCIES", "ROWID", "ROW", "ROWS", 
                      "RULES", "SALT", "SAMPLE", "SAVEPOINT", "SAVE", "SCHEDULER", 
                      "SCHEMACHECK", "SCHEMA", "SCN", "SCOPE", "SEARCH", 
                      "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
                      "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
                      "SERIALLY_REUSABLE", "SERVERERROR", "SESSION", "SESSIONTIMEZONE", 
                      "SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHRINK", 
                      "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLFILE", "SMALLINT", 
                      "SNAPSHOT", "SOME", "SORT", "SOURCE", "SPACE_KEYWORD", 
                      "SPECIFICATION", "SQLDATA", "SQLERROR", "SQL", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT_ID", "STATEMENT", "STATIC", 
                      "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", 
                      "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
                      "SUPPLEMENTAL", "SUSPEND", "SYNCHRONOUS", "SYNONYM", 
                      "SYSBACKUP", "SYSDATE", "SYSDBA", "SYSDG", "SYSGUID", 
                      "SYSKM", "SYSOPER", "SYSTEM", "TABLESPACE", "TABLES", 
                      "TABLE", "TEMPFILE", "TEMPORARY", "THAN", "THEN", 
                      "THE", "THROUGH", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGERS", "TRIGGER", 
                      "TRUE", "TRUNCATE", "TRUSTED", "TUNING", "TYPE", "UNBOUNDED", 
                      "UNDER", "UNDO", "UNIFORM", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNLOCK", "UNPIVOT", "UNTIL", "UNUSED", "UPDATED", 
                      "UPDATE", "UPGRADE", "UPSERT", "UROWID", "USERS", 
                      "USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", 
                      "VARCHAR2", "VARCHAR", "VARIABLE", "VARRAYS", "VARRAY", 
                      "VARYING", "VERSIONS", "VERSION", "VIEW", "VIRTUAL", 
                      "WAIT", "WARNING", "WELLFORMED", "WHENEVER", "WHEN", 
                      "WHERE", "WHILE", "WITHIN", "WITHOUT", "WITH", "WORK", 
                      "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
                      "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
                      "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSCHEMA", 
                      "XMLSERIALIZE", "XMLTABLE", "XMLTYPE", "XML", "YEAR", 
                      "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", 
                      "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
                      "PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", 
                      "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
                      "PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", 
                      "DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", "ROW_NUMBER", 
                      "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", 
                      "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
                      "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", 
                      "BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
                      "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "START_CMD", "REGULAR_ID", "ZV" ]

    RULE_sql_script = 0
    RULE_unit_statement = 1
    RULE_drop_function = 2
    RULE_alter_function = 3
    RULE_create_function_body = 4
    RULE_parallel_enable_clause = 5
    RULE_partition_by_clause = 6
    RULE_result_cache_clause = 7
    RULE_relies_on_part = 8
    RULE_streaming_clause = 9
    RULE_drop_package = 10
    RULE_alter_package = 11
    RULE_create_package = 12
    RULE_create_package_body = 13
    RULE_package_obj_spec = 14
    RULE_procedure_spec = 15
    RULE_function_spec = 16
    RULE_package_obj_body = 17
    RULE_drop_procedure = 18
    RULE_alter_procedure = 19
    RULE_function_body = 20
    RULE_procedure_body = 21
    RULE_create_procedure_body = 22
    RULE_drop_trigger = 23
    RULE_alter_trigger = 24
    RULE_create_trigger = 25
    RULE_trigger_follows_clause = 26
    RULE_trigger_when_clause = 27
    RULE_simple_dml_trigger = 28
    RULE_for_each_row = 29
    RULE_compound_dml_trigger = 30
    RULE_non_dml_trigger = 31
    RULE_trigger_body = 32
    RULE_routine_clause = 33
    RULE_compound_trigger_block = 34
    RULE_timing_point_section = 35
    RULE_non_dml_event = 36
    RULE_dml_event_clause = 37
    RULE_dml_event_element = 38
    RULE_dml_event_nested_clause = 39
    RULE_referencing_clause = 40
    RULE_referencing_element = 41
    RULE_drop_type = 42
    RULE_alter_type = 43
    RULE_compile_type_clause = 44
    RULE_replace_type_clause = 45
    RULE_alter_method_spec = 46
    RULE_alter_method_element = 47
    RULE_alter_attribute_definition = 48
    RULE_attribute_definition = 49
    RULE_alter_collection_clauses = 50
    RULE_dependent_handling_clause = 51
    RULE_dependent_exceptions_part = 52
    RULE_create_type = 53
    RULE_type_definition = 54
    RULE_object_type_def = 55
    RULE_object_as_part = 56
    RULE_object_under_part = 57
    RULE_nested_table_type_def = 58
    RULE_sqlj_object_type = 59
    RULE_type_body = 60
    RULE_type_body_elements = 61
    RULE_map_order_func_declaration = 62
    RULE_subprog_decl_in_type = 63
    RULE_proc_decl_in_type = 64
    RULE_func_decl_in_type = 65
    RULE_constructor_declaration = 66
    RULE_modifier_clause = 67
    RULE_object_member_spec = 68
    RULE_sqlj_object_type_attr = 69
    RULE_element_spec = 70
    RULE_element_spec_options = 71
    RULE_subprogram_spec = 72
    RULE_type_procedure_spec = 73
    RULE_type_function_spec = 74
    RULE_constructor_spec = 75
    RULE_map_order_function_spec = 76
    RULE_pragma_clause = 77
    RULE_pragma_elements = 78
    RULE_type_elements_parameter = 79
    RULE_drop_sequence = 80
    RULE_alter_sequence = 81
    RULE_create_sequence = 82
    RULE_sequence_spec = 83
    RULE_sequence_start_clause = 84
    RULE_create_index = 85
    RULE_alter_index = 86
    RULE_create_user = 87
    RULE_alter_user = 88
    RULE_alter_identified_by = 89
    RULE_identified_by = 90
    RULE_identified_other_clause = 91
    RULE_user_tablespace_clause = 92
    RULE_quota_clause = 93
    RULE_profile_clause = 94
    RULE_role_clause = 95
    RULE_user_default_role_clause = 96
    RULE_password_expire_clause = 97
    RULE_user_lock_clause = 98
    RULE_user_editions_clause = 99
    RULE_alter_user_editions_clause = 100
    RULE_proxy_clause = 101
    RULE_container_names = 102
    RULE_set_container_data = 103
    RULE_add_rem_container_data = 104
    RULE_container_data_clause = 105
    RULE_drop_index = 106
    RULE_grant_statement = 107
    RULE_container_clause = 108
    RULE_create_view = 109
    RULE_view_options = 110
    RULE_view_alias_constraint = 111
    RULE_object_view_clause = 112
    RULE_inline_constraint = 113
    RULE_inline_ref_constraint = 114
    RULE_out_of_line_ref_constraint = 115
    RULE_out_of_line_constraint = 116
    RULE_constraint_state = 117
    RULE_create_tablespace = 118
    RULE_permanent_tablespace_clause = 119
    RULE_tablespace_encryption_spec = 120
    RULE_logging_clause = 121
    RULE_extent_management_clause = 122
    RULE_segment_management_clause = 123
    RULE_flashback_mode_clause = 124
    RULE_temporary_tablespace_clause = 125
    RULE_tablespace_group_clause = 126
    RULE_undo_tablespace_clause = 127
    RULE_tablespace_retention_clause = 128
    RULE_datafile_specification = 129
    RULE_tempfile_specification = 130
    RULE_datafile_tempfile_spec = 131
    RULE_redo_log_file_spec = 132
    RULE_autoextend_clause = 133
    RULE_maxsize_clause = 134
    RULE_build_clause = 135
    RULE_parallel_clause = 136
    RULE_create_materialized_view_log = 137
    RULE_new_values_clause = 138
    RULE_mv_log_purge_clause = 139
    RULE_create_materialized_view = 140
    RULE_create_mv_refresh = 141
    RULE_create_table = 142
    RULE_xmltype_table = 143
    RULE_xmltype_virtual_columns = 144
    RULE_xmltype_column_properties = 145
    RULE_xmltype_storage = 146
    RULE_xmlschema_spec = 147
    RULE_object_table = 148
    RULE_oid_index_clause = 149
    RULE_oid_clause = 150
    RULE_object_properties = 151
    RULE_object_table_substitution = 152
    RULE_relational_table = 153
    RULE_relational_properties = 154
    RULE_table_partitioning_clauses = 155
    RULE_table_range_partition_by_clause = 156
    RULE_datatype_null_enable = 157
    RULE_size_clause = 158
    RULE_table_compression = 159
    RULE_physical_attributes_clause = 160
    RULE_storage_clause = 161
    RULE_deferred_segment_creation = 162
    RULE_segment_attributes_clause = 163
    RULE_physical_properties = 164
    RULE_row_movement_clause = 165
    RULE_flashback_archive_clause = 166
    RULE_log_grp = 167
    RULE_supplemental_table_logging = 168
    RULE_supplemental_log_grp_clause = 169
    RULE_supplemental_id_key_clause = 170
    RULE_allocate_extent_clause = 171
    RULE_deallocate_unused_clause = 172
    RULE_shrink_clause = 173
    RULE_records_per_block_clause = 174
    RULE_upgrade_table_clause = 175
    RULE_drop_table = 176
    RULE_comment_on_column = 177
    RULE_enable_or_disable = 178
    RULE_allow_or_disallow = 179
    RULE_create_synonym = 180
    RULE_comment_on_table = 181
    RULE_alter_table = 182
    RULE_alter_table_properties = 183
    RULE_alter_table_properties_1 = 184
    RULE_alter_iot_clauses = 185
    RULE_alter_mapping_table_clause = 186
    RULE_alter_overflow_clause = 187
    RULE_add_overflow_clause = 188
    RULE_enable_disable_clause = 189
    RULE_using_index_clause = 190
    RULE_exceptions_clause = 191
    RULE_move_table_clause = 192
    RULE_index_org_table_clause = 193
    RULE_mapping_table_clause = 194
    RULE_key_compression = 195
    RULE_index_org_overflow_clause = 196
    RULE_column_clauses = 197
    RULE_modify_collection_retrieval = 198
    RULE_collection_item = 199
    RULE_rename_column_clause = 200
    RULE_old_column_name = 201
    RULE_new_column_name = 202
    RULE_add_modify_drop_column_clauses = 203
    RULE_drop_column_clause = 204
    RULE_modify_column_clauses = 205
    RULE_modify_col_properties = 206
    RULE_modify_col_substitutable = 207
    RULE_add_column_clause = 208
    RULE_alter_varray_col_properties = 209
    RULE_varray_col_properties = 210
    RULE_varray_storage_clause = 211
    RULE_lob_segname = 212
    RULE_lob_item = 213
    RULE_lob_storage_parameters = 214
    RULE_lob_storage_clause = 215
    RULE_modify_lob_storage_clause = 216
    RULE_modify_lob_parameters = 217
    RULE_lob_parameters = 218
    RULE_lob_deduplicate_clause = 219
    RULE_lob_compression_clause = 220
    RULE_lob_retention_clause = 221
    RULE_encryption_spec = 222
    RULE_tablespace = 223
    RULE_varray_item = 224
    RULE_column_properties = 225
    RULE_column_definition = 226
    RULE_virtual_column_definition = 227
    RULE_out_of_line_part_storage = 228
    RULE_nested_table_col_properties = 229
    RULE_nested_item = 230
    RULE_substitutable_column_clause = 231
    RULE_partition_name = 232
    RULE_supplemental_logging_props = 233
    RULE_column_or_attribute = 234
    RULE_object_type_col_properties = 235
    RULE_constraint_clauses = 236
    RULE_old_constraint_name = 237
    RULE_new_constraint_name = 238
    RULE_drop_constraint_clause = 239
    RULE_drop_primary_key_or_unique_or_generic_clause = 240
    RULE_add_constraint = 241
    RULE_check_constraint = 242
    RULE_drop_constraint = 243
    RULE_enable_constraint = 244
    RULE_disable_constraint = 245
    RULE_foreign_key_clause = 246
    RULE_references_clause = 247
    RULE_on_delete_clause = 248
    RULE_unique_key_clause = 249
    RULE_primary_key_clause = 250
    RULE_anonymous_block = 251
    RULE_invoker_rights_clause = 252
    RULE_compiler_parameters_clause = 253
    RULE_call_spec = 254
    RULE_java_spec = 255
    RULE_c_spec = 256
    RULE_c_agent_in_clause = 257
    RULE_c_parameters_clause = 258
    RULE_parameter = 259
    RULE_default_value_part = 260
    RULE_seq_of_declare_specs = 261
    RULE_declare_spec = 262
    RULE_variable_declaration = 263
    RULE_subtype_declaration = 264
    RULE_cursor_declaration = 265
    RULE_parameter_spec = 266
    RULE_exception_declaration = 267
    RULE_pragma_declaration = 268
    RULE_record_type_def = 269
    RULE_field_spec = 270
    RULE_ref_cursor_type_def = 271
    RULE_type_declaration = 272
    RULE_table_type_def = 273
    RULE_table_indexed_by_part = 274
    RULE_varray_type_def = 275
    RULE_seq_of_statements = 276
    RULE_label_declaration = 277
    RULE_statement = 278
    RULE_swallow_to_semi = 279
    RULE_assignment_statement = 280
    RULE_continue_statement = 281
    RULE_exit_statement = 282
    RULE_goto_statement = 283
    RULE_if_statement = 284
    RULE_elsif_part = 285
    RULE_else_part = 286
    RULE_loop_statement = 287
    RULE_cursor_loop_param = 288
    RULE_forall_statement = 289
    RULE_bounds_clause = 290
    RULE_between_bound = 291
    RULE_lower_bound = 292
    RULE_upper_bound = 293
    RULE_null_statement = 294
    RULE_raise_statement = 295
    RULE_return_statement = 296
    RULE_function_call = 297
    RULE_pipe_row_statement = 298
    RULE_body = 299
    RULE_exception_handler = 300
    RULE_trigger_block = 301
    RULE_block = 302
    RULE_sql_statement = 303
    RULE_execute_immediate = 304
    RULE_dynamic_returning_clause = 305
    RULE_data_manipulation_language_statements = 306
    RULE_cursor_manipulation_statements = 307
    RULE_close_statement = 308
    RULE_open_statement = 309
    RULE_fetch_statement = 310
    RULE_open_for_statement = 311
    RULE_transaction_control_statements = 312
    RULE_set_transaction_command = 313
    RULE_set_constraint_command = 314
    RULE_commit_statement = 315
    RULE_write_clause = 316
    RULE_rollback_statement = 317
    RULE_savepoint_statement = 318
    RULE_explain_statement = 319
    RULE_select_statement = 320
    RULE_subquery_factoring_clause = 321
    RULE_factoring_element = 322
    RULE_search_clause = 323
    RULE_cycle_clause = 324
    RULE_subquery = 325
    RULE_subquery_basic_elements = 326
    RULE_subquery_operation_part = 327
    RULE_query_block = 328
    RULE_selected_element = 329
    RULE_from_clause = 330
    RULE_select_list_elements = 331
    RULE_table_ref_list = 332
    RULE_table_ref = 333
    RULE_table_ref_aux = 334
    RULE_table_ref_aux_internal = 335
    RULE_join_clause = 336
    RULE_join_on_part = 337
    RULE_join_using_part = 338
    RULE_outer_join_type = 339
    RULE_query_partition_clause = 340
    RULE_flashback_query_clause = 341
    RULE_pivot_clause = 342
    RULE_pivot_element = 343
    RULE_pivot_for_clause = 344
    RULE_pivot_in_clause = 345
    RULE_pivot_in_clause_element = 346
    RULE_pivot_in_clause_elements = 347
    RULE_unpivot_clause = 348
    RULE_unpivot_in_clause = 349
    RULE_unpivot_in_elements = 350
    RULE_hierarchical_query_clause = 351
    RULE_start_part = 352
    RULE_group_by_clause = 353
    RULE_group_by_elements = 354
    RULE_rollup_cube_clause = 355
    RULE_grouping_sets_clause = 356
    RULE_grouping_sets_elements = 357
    RULE_having_clause = 358
    RULE_model_clause = 359
    RULE_cell_reference_options = 360
    RULE_return_rows_clause = 361
    RULE_reference_model = 362
    RULE_main_model = 363
    RULE_model_column_clauses = 364
    RULE_model_column_partition_part = 365
    RULE_model_column_list = 366
    RULE_model_column = 367
    RULE_model_rules_clause = 368
    RULE_model_rules_part = 369
    RULE_model_rules_element = 370
    RULE_cell_assignment = 371
    RULE_model_iterate_clause = 372
    RULE_until_part = 373
    RULE_order_by_clause = 374
    RULE_order_by_elements = 375
    RULE_for_update_clause = 376
    RULE_for_update_of_part = 377
    RULE_for_update_options = 378
    RULE_update_statement = 379
    RULE_update_set_clause = 380
    RULE_column_based_update_set_clause = 381
    RULE_delete_statement = 382
    RULE_insert_statement = 383
    RULE_single_table_insert = 384
    RULE_multi_table_insert = 385
    RULE_multi_table_element = 386
    RULE_conditional_insert_clause = 387
    RULE_conditional_insert_when_part = 388
    RULE_conditional_insert_else_part = 389
    RULE_insert_into_clause = 390
    RULE_values_clause = 391
    RULE_merge_statement = 392
    RULE_merge_update_clause = 393
    RULE_merge_element = 394
    RULE_merge_update_delete_part = 395
    RULE_merge_insert_clause = 396
    RULE_selected_tableview = 397
    RULE_lock_table_statement = 398
    RULE_wait_nowait_part = 399
    RULE_lock_table_element = 400
    RULE_lock_mode = 401
    RULE_general_table_ref = 402
    RULE_static_returning_clause = 403
    RULE_error_logging_clause = 404
    RULE_error_logging_into_part = 405
    RULE_error_logging_reject_part = 406
    RULE_dml_table_expression_clause = 407
    RULE_table_collection_expression = 408
    RULE_subquery_restriction_clause = 409
    RULE_sample_clause = 410
    RULE_seed_part = 411
    RULE_condition = 412
    RULE_expressions = 413
    RULE_expression = 414
    RULE_cursor_expression = 415
    RULE_logical_expression = 416
    RULE_multiset_expression = 417
    RULE_relational_expression = 418
    RULE_compound_expression = 419
    RULE_relational_operator = 420
    RULE_in_elements = 421
    RULE_between_elements = 422
    RULE_concatenation = 423
    RULE_interval_expression = 424
    RULE_model_expression = 425
    RULE_model_expression_element = 426
    RULE_single_column_for_loop = 427
    RULE_multi_column_for_loop = 428
    RULE_unary_expression = 429
    RULE_case_statement = 430
    RULE_simple_case_statement = 431
    RULE_simple_case_when_part = 432
    RULE_searched_case_statement = 433
    RULE_searched_case_when_part = 434
    RULE_case_else_part = 435
    RULE_atom = 436
    RULE_quantified_expression = 437
    RULE_string_function = 438
    RULE_standard_function = 439
    RULE_numeric_function_wrapper = 440
    RULE_numeric_function = 441
    RULE_other_function = 442
    RULE_over_clause_keyword = 443
    RULE_within_or_over_clause_keyword = 444
    RULE_standard_prediction_function_keyword = 445
    RULE_over_clause = 446
    RULE_windowing_clause = 447
    RULE_windowing_type = 448
    RULE_windowing_elements = 449
    RULE_using_clause = 450
    RULE_using_element = 451
    RULE_collect_order_by_part = 452
    RULE_within_or_over_part = 453
    RULE_cost_matrix_clause = 454
    RULE_xml_passing_clause = 455
    RULE_xml_attributes_clause = 456
    RULE_xml_namespaces_clause = 457
    RULE_xml_table_column = 458
    RULE_xml_general_default_part = 459
    RULE_xml_multiuse_expression_element = 460
    RULE_xmlroot_param_version_part = 461
    RULE_xmlroot_param_standalone_part = 462
    RULE_xmlserialize_param_enconding_part = 463
    RULE_xmlserialize_param_version_part = 464
    RULE_xmlserialize_param_ident_part = 465
    RULE_sql_plus_command = 466
    RULE_whenever_command = 467
    RULE_set_command = 468
    RULE_partition_extension_clause = 469
    RULE_column_alias = 470
    RULE_table_alias = 471
    RULE_where_clause = 472
    RULE_into_clause = 473
    RULE_xml_column_name = 474
    RULE_cost_class_name = 475
    RULE_attribute_name = 476
    RULE_savepoint_name = 477
    RULE_rollback_segment_name = 478
    RULE_table_var_name = 479
    RULE_schema_name = 480
    RULE_routine_name = 481
    RULE_package_name = 482
    RULE_implementation_type_name = 483
    RULE_parameter_name = 484
    RULE_reference_model_name = 485
    RULE_main_model_name = 486
    RULE_container_tableview_name = 487
    RULE_aggregate_function_name = 488
    RULE_query_name = 489
    RULE_grantee_name = 490
    RULE_role_name = 491
    RULE_constraint_name = 492
    RULE_label_name = 493
    RULE_type_name = 494
    RULE_sequence_name = 495
    RULE_exception_name = 496
    RULE_function_name = 497
    RULE_procedure_name = 498
    RULE_trigger_name = 499
    RULE_variable_name = 500
    RULE_index_name = 501
    RULE_cursor_name = 502
    RULE_record_name = 503
    RULE_collection_name = 504
    RULE_link_name = 505
    RULE_column_name = 506
    RULE_tableview_name = 507
    RULE_char_set_name = 508
    RULE_synonym_name = 509
    RULE_schema_object_name = 510
    RULE_dir_object_name = 511
    RULE_user_object_name = 512
    RULE_grant_object_name = 513
    RULE_column_list = 514
    RULE_paren_column_list = 515
    RULE_keep_clause = 516
    RULE_function_argument = 517
    RULE_function_argument_analytic = 518
    RULE_function_argument_modeling = 519
    RULE_respect_or_ignore_nulls = 520
    RULE_argument = 521
    RULE_type_spec = 522
    RULE_datatype = 523
    RULE_precision_part = 524
    RULE_native_datatype_element = 525
    RULE_bind_variable = 526
    RULE_general_element = 527
    RULE_general_element_part = 528
    RULE_table_element = 529
    RULE_object_privilege = 530
    RULE_system_privilege = 531
    RULE_constant = 532
    RULE_numeric = 533
    RULE_numeric_negative = 534
    RULE_quoted_string = 535
    RULE_identifier = 536
    RULE_id_expression = 537
    RULE_outer_join_sign = 538
    RULE_regular_id = 539
    RULE_string_function_name = 540
    RULE_numeric_function_name = 541

    ruleNames =  [ "sql_script", "unit_statement", "drop_function", "alter_function", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "result_cache_clause", "relies_on_part", "streaming_clause", 
                   "drop_package", "alter_package", "create_package", "create_package_body", 
                   "package_obj_spec", "procedure_spec", "function_spec", 
                   "package_obj_body", "drop_procedure", "alter_procedure", 
                   "function_body", "procedure_body", "create_procedure_body", 
                   "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "create_index", "alter_index", "create_user", "alter_user", 
                   "alter_identified_by", "identified_by", "identified_other_clause", 
                   "user_tablespace_clause", "quota_clause", "profile_clause", 
                   "role_clause", "user_default_role_clause", "password_expire_clause", 
                   "user_lock_clause", "user_editions_clause", "alter_user_editions_clause", 
                   "proxy_clause", "container_names", "set_container_data", 
                   "add_rem_container_data", "container_data_clause", "drop_index", 
                   "grant_statement", "container_clause", "create_view", 
                   "view_options", "view_alias_constraint", "object_view_clause", 
                   "inline_constraint", "inline_ref_constraint", "out_of_line_ref_constraint", 
                   "out_of_line_constraint", "constraint_state", "create_tablespace", 
                   "permanent_tablespace_clause", "tablespace_encryption_spec", 
                   "logging_clause", "extent_management_clause", "segment_management_clause", 
                   "flashback_mode_clause", "temporary_tablespace_clause", 
                   "tablespace_group_clause", "undo_tablespace_clause", 
                   "tablespace_retention_clause", "datafile_specification", 
                   "tempfile_specification", "datafile_tempfile_spec", "redo_log_file_spec", 
                   "autoextend_clause", "maxsize_clause", "build_clause", 
                   "parallel_clause", "create_materialized_view_log", "new_values_clause", 
                   "mv_log_purge_clause", "create_materialized_view", "create_mv_refresh", 
                   "create_table", "xmltype_table", "xmltype_virtual_columns", 
                   "xmltype_column_properties", "xmltype_storage", "xmlschema_spec", 
                   "object_table", "oid_index_clause", "oid_clause", "object_properties", 
                   "object_table_substitution", "relational_table", "relational_properties", 
                   "table_partitioning_clauses", "table_range_partition_by_clause", 
                   "datatype_null_enable", "size_clause", "table_compression", 
                   "physical_attributes_clause", "storage_clause", "deferred_segment_creation", 
                   "segment_attributes_clause", "physical_properties", "row_movement_clause", 
                   "flashback_archive_clause", "log_grp", "supplemental_table_logging", 
                   "supplemental_log_grp_clause", "supplemental_id_key_clause", 
                   "allocate_extent_clause", "deallocate_unused_clause", 
                   "shrink_clause", "records_per_block_clause", "upgrade_table_clause", 
                   "drop_table", "comment_on_column", "enable_or_disable", 
                   "allow_or_disallow", "create_synonym", "comment_on_table", 
                   "alter_table", "alter_table_properties", "alter_table_properties_1", 
                   "alter_iot_clauses", "alter_mapping_table_clause", "alter_overflow_clause", 
                   "add_overflow_clause", "enable_disable_clause", "using_index_clause", 
                   "exceptions_clause", "move_table_clause", "index_org_table_clause", 
                   "mapping_table_clause", "key_compression", "index_org_overflow_clause", 
                   "column_clauses", "modify_collection_retrieval", "collection_item", 
                   "rename_column_clause", "old_column_name", "new_column_name", 
                   "add_modify_drop_column_clauses", "drop_column_clause", 
                   "modify_column_clauses", "modify_col_properties", "modify_col_substitutable", 
                   "add_column_clause", "alter_varray_col_properties", "varray_col_properties", 
                   "varray_storage_clause", "lob_segname", "lob_item", "lob_storage_parameters", 
                   "lob_storage_clause", "modify_lob_storage_clause", "modify_lob_parameters", 
                   "lob_parameters", "lob_deduplicate_clause", "lob_compression_clause", 
                   "lob_retention_clause", "encryption_spec", "tablespace", 
                   "varray_item", "column_properties", "column_definition", 
                   "virtual_column_definition", "out_of_line_part_storage", 
                   "nested_table_col_properties", "nested_item", "substitutable_column_clause", 
                   "partition_name", "supplemental_logging_props", "column_or_attribute", 
                   "object_type_col_properties", "constraint_clauses", "old_constraint_name", 
                   "new_constraint_name", "drop_constraint_clause", "drop_primary_key_or_unique_or_generic_clause", 
                   "add_constraint", "check_constraint", "drop_constraint", 
                   "enable_constraint", "disable_constraint", "foreign_key_clause", 
                   "references_clause", "on_delete_clause", "unique_key_clause", 
                   "primary_key_clause", "anonymous_block", "invoker_rights_clause", 
                   "compiler_parameters_clause", "call_spec", "java_spec", 
                   "c_spec", "c_agent_in_clause", "c_parameters_clause", 
                   "parameter", "default_value_part", "seq_of_declare_specs", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_type_def", "field_spec", 
                   "ref_cursor_type_def", "type_declaration", "table_type_def", 
                   "table_indexed_by_part", "varray_type_def", "seq_of_statements", 
                   "label_declaration", "statement", "swallow_to_semi", 
                   "assignment_statement", "continue_statement", "exit_statement", 
                   "goto_statement", "if_statement", "elsif_part", "else_part", 
                   "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "pipe_row_statement", "body", "exception_handler", 
                   "trigger_block", "block", "sql_statement", "execute_immediate", 
                   "dynamic_returning_clause", "data_manipulation_language_statements", 
                   "cursor_manipulation_statements", "close_statement", 
                   "open_statement", "fetch_statement", "open_for_statement", 
                   "transaction_control_statements", "set_transaction_command", 
                   "set_constraint_command", "commit_statement", "write_clause", 
                   "rollback_statement", "savepoint_statement", "explain_statement", 
                   "select_statement", "subquery_factoring_clause", "factoring_element", 
                   "search_clause", "cycle_clause", "subquery", "subquery_basic_elements", 
                   "subquery_operation_part", "query_block", "selected_element", 
                   "from_clause", "select_list_elements", "table_ref_list", 
                   "table_ref", "table_ref_aux", "table_ref_aux_internal", 
                   "join_clause", "join_on_part", "join_using_part", "outer_join_type", 
                   "query_partition_clause", "flashback_query_clause", "pivot_clause", 
                   "pivot_element", "pivot_for_clause", "pivot_in_clause", 
                   "pivot_in_clause_element", "pivot_in_clause_elements", 
                   "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", 
                   "hierarchical_query_clause", "start_part", "group_by_clause", 
                   "group_by_elements", "rollup_cube_clause", "grouping_sets_clause", 
                   "grouping_sets_elements", "having_clause", "model_clause", 
                   "cell_reference_options", "return_rows_clause", "reference_model", 
                   "main_model", "model_column_clauses", "model_column_partition_part", 
                   "model_column_list", "model_column", "model_rules_clause", 
                   "model_rules_part", "model_rules_element", "cell_assignment", 
                   "model_iterate_clause", "until_part", "order_by_clause", 
                   "order_by_elements", "for_update_clause", "for_update_of_part", 
                   "for_update_options", "update_statement", "update_set_clause", 
                   "column_based_update_set_clause", "delete_statement", 
                   "insert_statement", "single_table_insert", "multi_table_insert", 
                   "multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
                   "conditional_insert_else_part", "insert_into_clause", 
                   "values_clause", "merge_statement", "merge_update_clause", 
                   "merge_element", "merge_update_delete_part", "merge_insert_clause", 
                   "selected_tableview", "lock_table_statement", "wait_nowait_part", 
                   "lock_table_element", "lock_mode", "general_table_ref", 
                   "static_returning_clause", "error_logging_clause", "error_logging_into_part", 
                   "error_logging_reject_part", "dml_table_expression_clause", 
                   "table_collection_expression", "subquery_restriction_clause", 
                   "sample_clause", "seed_part", "condition", "expressions", 
                   "expression", "cursor_expression", "logical_expression", 
                   "multiset_expression", "relational_expression", "compound_expression", 
                   "relational_operator", "in_elements", "between_elements", 
                   "concatenation", "interval_expression", "model_expression", 
                   "model_expression_element", "single_column_for_loop", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "quantified_expression", "string_function", "standard_function", 
                   "numeric_function_wrapper", "numeric_function", "other_function", 
                   "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "where_clause", "into_clause", 
                   "xml_column_name", "cost_class_name", "attribute_name", 
                   "savepoint_name", "rollback_segment_name", "table_var_name", 
                   "schema_name", "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "container_tableview_name", "aggregate_function_name", 
                   "query_name", "grantee_name", "role_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "char_set_name", 
                   "synonym_name", "schema_object_name", "dir_object_name", 
                   "user_object_name", "grant_object_name", "column_list", 
                   "paren_column_list", "keep_clause", "function_argument", 
                   "function_argument_analytic", "function_argument_modeling", 
                   "respect_or_ignore_nulls", "argument", "type_spec", "datatype", 
                   "precision_part", "native_datatype_element", "bind_variable", 
                   "general_element", "general_element_part", "table_element", 
                   "object_privilege", "system_privilege", "constant", "numeric", 
                   "numeric_negative", "quoted_string", "identifier", "id_expression", 
                   "outer_join_sign", "regular_id", "string_function_name", 
                   "numeric_function_name" ]

    EOF = Token.EOF
    ACCESS=1
    ACCOUNT=2
    ADD=3
    ADMIN=4
    ADMINISTER=5
    ADVISOR=6
    AFTER=7
    AGENT=8
    AGGREGATE=9
    A_LETTER=10
    ALL=11
    ALLOCATE=12
    ALLOW=13
    ALTER=14
    ALWAYS=15
    ANALYZE=16
    AND=17
    ANY=18
    ANYSCHEMA=19
    ARCHIVE=20
    ARRAY=21
    AS=22
    ASC=23
    ASSOCIATE=24
    ASYNCHRONOUS=25
    AT=26
    ATTRIBUTE=27
    AUDIT=28
    AUTHENTICATED=29
    AUTHENTICATION=30
    AUTHID=31
    AUTOALLOCATE=32
    AUTO=33
    AUTOEXTEND=34
    AUTOMATIC=35
    AUTONOMOUS_TRANSACTION=36
    BACKUP=37
    BASIC=38
    BASICFILE=39
    BATCH=40
    BECOME=41
    BEFORE=42
    BEGIN=43
    BETWEEN=44
    BFILE=45
    BIGFILE=46
    BINARY=47
    BINARY_DOUBLE=48
    BINARY_FLOAT=49
    BINARY_INTEGER=50
    BLOB=51
    BLOCK=52
    BLOCKSIZE=53
    BODY=54
    BOOLEAN=55
    BOTH=56
    BREADTH=57
    BUFFER_POOL=58
    BUILD=59
    BULK=60
    BY=61
    BYTE=62
    CACHE=63
    CALL=64
    CANONICAL=65
    CASCADE=66
    CASE=67
    CAST=68
    CERTIFICATE=69
    CHANGE=70
    CHARACTER=71
    CHAR=72
    CHAR_CS=73
    CHECK=74
    CHECKPOINT=75
    CHR=76
    CHUNK=77
    CLASS=78
    C_LETTER=79
    CLOB=80
    CLOSE=81
    CLUSTER=82
    COALESCE=83
    COLLECT=84
    COLUMN=85
    COLUMNS=86
    COLUMN_VALUE=87
    COMMENT=88
    COMMIT=89
    COMMITTED=90
    COMPACT=91
    COMPATIBILITY=92
    COMPILE=93
    COMPLETE=94
    COMPOUND=95
    COMPRESS=96
    COMPUTE=97
    CONNECT_BY_ROOT=98
    CONNECT=99
    CONSTANT=100
    CONSTRAINT=101
    CONSTRAINTS=102
    CONSTRUCTOR=103
    CONTAINER=104
    CONTAINER_DATA=105
    CONTENT=106
    CONTEXT=107
    CONTINUE=108
    CONVERT=109
    CORRUPT_XID_ALL=110
    CORRUPT_XID=111
    COST=112
    COUNT=113
    CREATE=114
    CREATION=115
    CROSS=116
    CUBE=117
    CURRENT=118
    CURRENT_USER=119
    CURSOR=120
    CUSTOMDATUM=121
    CYCLE=122
    DATABASE=123
    DATA=124
    DATAFILE=125
    DATE=126
    DAY=127
    DBA_RECYCLEBIN=128
    DB_ROLE_CHANGE=129
    DBTIMEZONE=130
    DDL=131
    DEALLOCATE=132
    DEBUG=133
    DEC=134
    DECIMAL=135
    DECLARE=136
    DECOMPOSE=137
    DECREMENT=138
    DECRYPT=139
    DEDUPLICATE=140
    DEFAULT=141
    DEFAULTS=142
    DEFERRABLE=143
    DEFERRED=144
    DEFINER=145
    DELEGATE=146
    DELETE=147
    DEMAND=148
    DEPTH=149
    DESC=150
    DETERMINISTIC=151
    DICTIONARY=152
    DIMENSION=153
    DIRECTORY=154
    DISABLE=155
    DISALLOW=156
    DISASSOCIATE=157
    DISTINCT=158
    DISTINGUISHED=159
    DOCUMENT=160
    DOUBLE=161
    DROP=162
    DSINTERVAL_UNCONSTRAINED=163
    EACH=164
    EDITION=165
    EDITIONING=166
    EDITIONS=167
    ELEMENT=168
    ELSE=169
    ELSIF=170
    EMPTY=171
    ENABLE=172
    ENCODING=173
    ENCRYPT=174
    ENCRYPTION=175
    END=176
    ENFORCED=177
    ENTERPRISE=178
    ENTITYESCAPING=179
    ERR=180
    ERRORS=181
    ESCAPE=182
    EVALNAME=183
    EXCEPT=184
    EXCEPTION=185
    EXCEPTION_INIT=186
    EXCEPTIONS=187
    EXCLUDE=188
    EXCLUDING=189
    EXCLUSIVE=190
    EXECUTE=191
    EXEMPT=192
    EXISTS=193
    EXIT=194
    EXPIRE=195
    EXPLAIN=196
    EXTENT=197
    EXTERNAL=198
    EXTERNALLY=199
    EXTRACT=200
    FAILURE=201
    FALSE=202
    FAST=203
    FETCH=204
    FILESYSTEM_LIKE_LOGGING=205
    FINAL=206
    FIRST=207
    FIRST_VALUE=208
    FLASHBACK=209
    FLASH_CACHE=210
    FLOAT=211
    FOLDER=212
    FOLLOWING=213
    FOLLOWS=214
    FORALL=215
    FORCE=216
    FOREIGN=217
    FOR=218
    FREELIST=219
    FREELISTS=220
    FREEPOOLS=221
    FROM=222
    FULL=223
    FUNCTION=224
    GENERATED=225
    GLOBAL=226
    GLOBALLY=227
    GOTO=228
    GRANT=229
    GROUP=230
    GROUPING=231
    GROUPS=232
    GUARANTEE=233
    HASH=234
    HAVING=235
    HIDE=236
    HIERARCHY=237
    HIGH=238
    HOUR=239
    IDENTIFIED=240
    IDENTIFIER=241
    ID=242
    IF=243
    IGNORE=244
    IMMEDIATE=245
    INCLUDE=246
    INCLUDING=247
    INCREMENT=248
    INDENT=249
    INDEXED=250
    INDEX=251
    INDEXTYPE=252
    INDICATOR=253
    INDICES=254
    INFINITE=255
    INHERIT=256
    IN=257
    INITIAL=258
    INITIALLY=259
    INITRANS=260
    INLINE=261
    INNER=262
    INOUT=263
    INSERT=264
    INSTANCE=265
    INSTANTIABLE=266
    INSTEAD=267
    INTEGER=268
    INTERSECT=269
    INTERVAL=270
    INT=271
    INTO=272
    INVALIDATE=273
    IS=274
    ISOLATION=275
    ITERATE=276
    JAVA=277
    JOB=278
    JOIN=279
    KEEP_DUPLICATES=280
    KEEP=281
    KEY=282
    LANGUAGE=283
    LAST=284
    LAST_VALUE=285
    LEADING=286
    LEFT=287
    LESS=288
    LEVEL=289
    LEVELS=290
    LIBRARY=291
    LIKE2=292
    LIKE4=293
    LIKEC=294
    LIKE=295
    LIMIT=296
    LINK=297
    LIST=298
    LOB=299
    LOBS=300
    LOCAL=301
    LOCATOR=302
    LOCKED=303
    LOCK=304
    LOGGING=305
    LOG=306
    LOGMINING=307
    LOGOFF=308
    LOGON=309
    LONG=310
    LOOP=311
    LOW=312
    MAIN=313
    MANAGE=314
    MANAGEMENT=315
    MANUAL=316
    MAP=317
    MAPPING=318
    MASTER=319
    MATCHED=320
    MATERIALIZED=321
    MAXSIZE=322
    MAXVALUE=323
    MEASURE=324
    MEASURES=325
    MEDIUM=326
    MEMBER=327
    MERGE=328
    MINEXTENTS=329
    MINIMIZE=330
    MINIMUM=331
    MINING=332
    MINUS=333
    MINUTE=334
    MINVALUE=335
    MLSLABEL=336
    MODEL=337
    MODE=338
    MODIFY=339
    MONTH=340
    MOVEMENT=341
    MOVE=342
    MULTISET=343
    NAME=344
    NAN=345
    NATURAL=346
    NATURALN=347
    NAV=348
    NCHAR_CS=349
    NCHAR=350
    NCLOB=351
    NESTED=352
    NEVER=353
    NEW=354
    NEXT=355
    NOAUDIT=356
    NOCACHE=357
    NOCOMPRESS=358
    NOCOPY=359
    NOCYCLE=360
    NOENTITYESCAPING=361
    NOGUARANTEE=362
    NOLOGGING=363
    NOMAPPING=364
    NOMAXVALUE=365
    NOMINIMIZE=366
    NOMINVALUE=367
    NONE=368
    NO=369
    NONSCHEMA=370
    NOORDER=371
    NOPARALLEL=372
    NORELY=373
    NOROWDEPENDENCIES=374
    NOSCHEMACHECK=375
    NOTIFICATION=376
    NOT=377
    NOVALIDATE=378
    NOWAIT=379
    NULL=380
    NULLS=381
    NUMBER=382
    NUMERIC=383
    NVARCHAR2=384
    OBJECT=385
    OFFLINE=386
    OFF=387
    OF=388
    OIDINDEX=389
    OID=390
    OLD=391
    OLTP=392
    ONLINE=393
    ONLY=394
    ON=395
    OPEN=396
    OPERATOR=397
    OPTIMAL=398
    OPTION=399
    ORADATA=400
    ORDER=401
    ORDINALITY=402
    OR=403
    OSERROR=404
    OUTER=405
    OUTLINE=406
    OUT=407
    OVERFLOW=408
    OVER=409
    OVERRIDING=410
    PACKAGE=411
    PARALLEL_ENABLE=412
    PARALLEL=413
    PARAMETERS=414
    PARENT=415
    PARTITION=416
    PASSING=417
    PASSWORD=418
    PATH=419
    PCTFREE=420
    PCTINCREASE=421
    PCTTHRESHOLD=422
    PCTUSED=423
    PCTVERSION=424
    PERCENT_FOUND=425
    PERCENT_ISOPEN=426
    PERCENT_NOTFOUND=427
    PERCENT_ROWCOUNT=428
    PERCENT_ROWTYPE=429
    PERCENT_TYPE=430
    PIPELINED=431
    PIPE=432
    PIVOT=433
    PLAN=434
    PLS_INTEGER=435
    PLUGGABLE=436
    POLICY=437
    POSITIVEN=438
    POSITIVE=439
    PRAGMA=440
    PREBUILT=441
    PRECEDING=442
    PRECISION=443
    PRESENT=444
    PRESERVE=445
    PRIMARY=446
    PRIOR=447
    PRIVILEGE=448
    PRIVILEGES=449
    PROCEDURE=450
    PROCESS=451
    PROFILE=452
    PROGRAM=453
    PUBLIC=454
    PURGE=455
    QUERY=456
    QUOTA=457
    RAISE=458
    RANGE=459
    RAW=460
    READ=461
    READS=462
    REAL=463
    REBUILD=464
    RECORD=465
    RECORDS_PER_BLOCK=466
    RECYCLE=467
    REDACTION=468
    REDUCED=469
    REFERENCE=470
    REFERENCES=471
    REFERENCING=472
    REF=473
    REFRESH=474
    REJECT=475
    REKEY=476
    RELATIONAL=477
    RELIES_ON=478
    RELY=479
    REMOVE=480
    RENAME=481
    REPLACE=482
    REQUIRED=483
    RESOURCE=484
    RESPECT=485
    RESTRICTED=486
    RESTRICT_REFERENCES=487
    RESULT_CACHE=488
    RESULT=489
    RESUMABLE=490
    RETENTION=491
    RETURNING=492
    RETURN=493
    REUSE=494
    REVERSE=495
    REVOKE=496
    REWRITE=497
    RIGHT=498
    ROLE=499
    ROLES=500
    ROLLBACK=501
    ROLLUP=502
    ROWDEPENDENCIES=503
    ROWID=504
    ROW=505
    ROWS=506
    RULES=507
    SALT=508
    SAMPLE=509
    SAVEPOINT=510
    SAVE=511
    SCHEDULER=512
    SCHEMACHECK=513
    SCHEMA=514
    SCN=515
    SCOPE=516
    SEARCH=517
    SECOND=518
    SECUREFILE=519
    SEED=520
    SEGMENT=521
    SELECT=522
    SELF=523
    SEQUENCE=524
    SEQUENTIAL=525
    SERIALIZABLE=526
    SERIALLY_REUSABLE=527
    SERVERERROR=528
    SESSION=529
    SESSIONTIMEZONE=530
    SET=531
    SETS=532
    SETTINGS=533
    SHARE=534
    SHOW=535
    SHRINK=536
    SHUTDOWN=537
    SIBLINGS=538
    SIGNTYPE=539
    SIMPLE_INTEGER=540
    SINGLE=541
    SIZE=542
    SKIP_=543
    SMALLFILE=544
    SMALLINT=545
    SNAPSHOT=546
    SOME=547
    SORT=548
    SOURCE=549
    SPACE_KEYWORD=550
    SPECIFICATION=551
    SQLDATA=552
    SQLERROR=553
    SQL=554
    STANDALONE=555
    START=556
    STARTUP=557
    STATEMENT_ID=558
    STATEMENT=559
    STATIC=560
    STATISTICS=561
    STORAGE=562
    STORE=563
    STRING=564
    SUBMULTISET=565
    SUBPARTITION=566
    SUBSTITUTABLE=567
    SUBTYPE=568
    SUCCESS=569
    SUPPLEMENTAL=570
    SUSPEND=571
    SYNCHRONOUS=572
    SYNONYM=573
    SYSBACKUP=574
    SYSDATE=575
    SYSDBA=576
    SYSDG=577
    SYSGUID=578
    SYSKM=579
    SYSOPER=580
    SYSTEM=581
    TABLESPACE=582
    TABLES=583
    TABLE=584
    TEMPFILE=585
    TEMPORARY=586
    THAN=587
    THEN=588
    THE=589
    THROUGH=590
    TIMESTAMP_LTZ_UNCONSTRAINED=591
    TIMESTAMP=592
    TIMESTAMP_TZ_UNCONSTRAINED=593
    TIMESTAMP_UNCONSTRAINED=594
    TIME=595
    TIMEZONE_ABBR=596
    TIMEZONE_HOUR=597
    TIMEZONE_MINUTE=598
    TIMEZONE_REGION=599
    TO=600
    TRAILING=601
    TRANSACTION=602
    TRANSLATE=603
    TRANSLATION=604
    TREAT=605
    TRIGGERS=606
    TRIGGER=607
    TRUE=608
    TRUNCATE=609
    TRUSTED=610
    TUNING=611
    TYPE=612
    UNBOUNDED=613
    UNDER=614
    UNDO=615
    UNIFORM=616
    UNION=617
    UNIQUE=618
    UNLIMITED=619
    UNLOCK=620
    UNPIVOT=621
    UNTIL=622
    UNUSED=623
    UPDATED=624
    UPDATE=625
    UPGRADE=626
    UPSERT=627
    UROWID=628
    USERS=629
    USER=630
    USE=631
    USING=632
    VALIDATE=633
    VALUES=634
    VALUE=635
    VARCHAR2=636
    VARCHAR=637
    VARIABLE=638
    VARRAYS=639
    VARRAY=640
    VARYING=641
    VERSIONS=642
    VERSION=643
    VIEW=644
    VIRTUAL=645
    WAIT=646
    WARNING=647
    WELLFORMED=648
    WHENEVER=649
    WHEN=650
    WHERE=651
    WHILE=652
    WITHIN=653
    WITHOUT=654
    WITH=655
    WORK=656
    WRITE=657
    XMLAGG=658
    XMLATTRIBUTES=659
    XMLCAST=660
    XMLCOLATTVAL=661
    XMLELEMENT=662
    XMLEXISTS=663
    XMLFOREST=664
    XMLNAMESPACES=665
    XMLPARSE=666
    XMLPI=667
    XMLQUERY=668
    XMLROOT=669
    XMLSCHEMA=670
    XMLSERIALIZE=671
    XMLTABLE=672
    XMLTYPE=673
    XML=674
    YEAR=675
    YES=676
    YMINTERVAL_UNCONSTRAINED=677
    ZONE=678
    PREDICTION=679
    PREDICTION_BOUNDS=680
    PREDICTION_COST=681
    PREDICTION_DETAILS=682
    PREDICTION_PROBABILITY=683
    PREDICTION_SET=684
    CUME_DIST=685
    DENSE_RANK=686
    LISTAGG=687
    PERCENT_RANK=688
    PERCENTILE_CONT=689
    PERCENTILE_DISC=690
    RANK=691
    AVG=692
    CORR=693
    COVAR_=694
    DECODE=695
    LAG=696
    LEAD=697
    MAX=698
    MEDIAN=699
    MIN=700
    NTILE=701
    NVL=702
    RATIO_TO_REPORT=703
    REGR_=704
    ROUND=705
    ROW_NUMBER=706
    SUBSTR=707
    TO_CHAR=708
    TRIM=709
    SUM=710
    STDDEV=711
    VAR_=712
    VARIANCE=713
    LEAST=714
    GREATEST=715
    TO_DATE=716
    NATIONAL_CHAR_STRING_LIT=717
    BIT_STRING_LIT=718
    HEX_STRING_LIT=719
    DOUBLE_PERIOD=720
    PERIOD=721
    UNSIGNED_INTEGER=722
    APPROXIMATE_NUM_LIT=723
    CHAR_STRING=724
    DELIMITED_ID=725
    PERCENT=726
    AMPERSAND=727
    LEFT_PAREN=728
    RIGHT_PAREN=729
    DOUBLE_ASTERISK=730
    ASTERISK=731
    PLUS_SIGN=732
    MINUS_SIGN=733
    COMMA=734
    SOLIDUS=735
    AT_SIGN=736
    ASSIGN_OP=737
    BINDVAR=738
    NOT_EQUAL_OP=739
    CARRET_OPERATOR_PART=740
    TILDE_OPERATOR_PART=741
    EXCLAMATION_OPERATOR_PART=742
    GREATER_THAN_OP=743
    LESS_THAN_OP=744
    COLON=745
    SEMICOLON=746
    BAR=747
    EQUALS_OP=748
    LEFT_BRACKET=749
    RIGHT_BRACKET=750
    INTRODUCER=751
    SPACES=752
    SINGLE_LINE_COMMENT=753
    MULTI_LINE_COMMENT=754
    PROMPT=755
    START_CMD=756
    REGULAR_ID=757
    ZV=758

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PlSqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sql_plus_commandContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SEMICOLON)
            else:
                return self.getToken(PlSqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)




    def sql_script(self):

        localctx = PlSqlParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BEGIN) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECLARE - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DROP - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GRANT - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSERT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOCK - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (PlSqlParser.SELECT - 522)) | (1 << (PlSqlParser.SELF - 522)) | (1 << (PlSqlParser.SEQUENTIAL - 522)) | (1 << (PlSqlParser.SERIALIZABLE - 522)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 522)) | (1 << (PlSqlParser.SERVERERROR - 522)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 522)) | (1 << (PlSqlParser.SET - 522)) | (1 << (PlSqlParser.SETS - 522)) | (1 << (PlSqlParser.SETTINGS - 522)) | (1 << (PlSqlParser.SHOW - 522)) | (1 << (PlSqlParser.SHUTDOWN - 522)) | (1 << (PlSqlParser.SIBLINGS - 522)) | (1 << (PlSqlParser.SIGNTYPE - 522)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 522)) | (1 << (PlSqlParser.SINGLE - 522)) | (1 << (PlSqlParser.SKIP_ - 522)) | (1 << (PlSqlParser.SMALLINT - 522)) | (1 << (PlSqlParser.SNAPSHOT - 522)) | (1 << (PlSqlParser.SOME - 522)) | (1 << (PlSqlParser.SPECIFICATION - 522)) | (1 << (PlSqlParser.SQLDATA - 522)) | (1 << (PlSqlParser.SQLERROR - 522)) | (1 << (PlSqlParser.SQL - 522)) | (1 << (PlSqlParser.STANDALONE - 522)) | (1 << (PlSqlParser.STARTUP - 522)) | (1 << (PlSqlParser.STATEMENT_ID - 522)) | (1 << (PlSqlParser.STATEMENT - 522)) | (1 << (PlSqlParser.STATIC - 522)) | (1 << (PlSqlParser.STATISTICS - 522)) | (1 << (PlSqlParser.STORE - 522)) | (1 << (PlSqlParser.STRING - 522)) | (1 << (PlSqlParser.SUBMULTISET - 522)) | (1 << (PlSqlParser.SUBPARTITION - 522)) | (1 << (PlSqlParser.SUBSTITUTABLE - 522)) | (1 << (PlSqlParser.SUBTYPE - 522)) | (1 << (PlSqlParser.SUCCESS - 522)) | (1 << (PlSqlParser.SUSPEND - 522)) | (1 << (PlSqlParser.SYSDATE - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (PlSqlParser.TEMPORARY - 586)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP - 586)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIME - 586)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 586)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 586)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 586)) | (1 << (PlSqlParser.TIMEZONE_REGION - 586)) | (1 << (PlSqlParser.TRAILING - 586)) | (1 << (PlSqlParser.TRANSACTION - 586)) | (1 << (PlSqlParser.TRANSLATE - 586)) | (1 << (PlSqlParser.TREAT - 586)) | (1 << (PlSqlParser.TRIGGER - 586)) | (1 << (PlSqlParser.TRUNCATE - 586)) | (1 << (PlSqlParser.TYPE - 586)) | (1 << (PlSqlParser.UNBOUNDED - 586)) | (1 << (PlSqlParser.UNDER - 586)) | (1 << (PlSqlParser.UNLIMITED - 586)) | (1 << (PlSqlParser.UNTIL - 586)) | (1 << (PlSqlParser.UPDATED - 586)) | (1 << (PlSqlParser.UPDATE - 586)) | (1 << (PlSqlParser.UPSERT - 586)) | (1 << (PlSqlParser.UROWID - 586)) | (1 << (PlSqlParser.USERS - 586)) | (1 << (PlSqlParser.USER - 586)) | (1 << (PlSqlParser.USE - 586)) | (1 << (PlSqlParser.VALIDATE - 586)) | (1 << (PlSqlParser.VALUE - 586)) | (1 << (PlSqlParser.VARCHAR2 - 586)) | (1 << (PlSqlParser.VARCHAR - 586)) | (1 << (PlSqlParser.VARIABLE - 586)) | (1 << (PlSqlParser.VARRAY - 586)) | (1 << (PlSqlParser.VARYING - 586)) | (1 << (PlSqlParser.VERSIONS - 586)) | (1 << (PlSqlParser.VERSION - 586)) | (1 << (PlSqlParser.WAIT - 586)) | (1 << (PlSqlParser.WARNING - 586)) | (1 << (PlSqlParser.WELLFORMED - 586)) | (1 << (PlSqlParser.WHENEVER - 586)))) != 0) or ((((_la - 652)) & ~0x3f) == 0 and ((1 << (_la - 652)) & ((1 << (PlSqlParser.WHILE - 652)) | (1 << (PlSqlParser.WITHIN - 652)) | (1 << (PlSqlParser.WITH - 652)) | (1 << (PlSqlParser.WORK - 652)) | (1 << (PlSqlParser.WRITE - 652)) | (1 << (PlSqlParser.XMLAGG - 652)) | (1 << (PlSqlParser.XMLATTRIBUTES - 652)) | (1 << (PlSqlParser.XMLCAST - 652)) | (1 << (PlSqlParser.XMLCOLATTVAL - 652)) | (1 << (PlSqlParser.XMLELEMENT - 652)) | (1 << (PlSqlParser.XMLEXISTS - 652)) | (1 << (PlSqlParser.XMLFOREST - 652)) | (1 << (PlSqlParser.XMLNAMESPACES - 652)) | (1 << (PlSqlParser.XMLPARSE - 652)) | (1 << (PlSqlParser.XMLPI - 652)) | (1 << (PlSqlParser.XMLQUERY - 652)) | (1 << (PlSqlParser.XMLROOT - 652)) | (1 << (PlSqlParser.XMLSERIALIZE - 652)) | (1 << (PlSqlParser.XMLTABLE - 652)) | (1 << (PlSqlParser.XMLTYPE - 652)) | (1 << (PlSqlParser.XML - 652)) | (1 << (PlSqlParser.YEAR - 652)) | (1 << (PlSqlParser.YES - 652)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 652)) | (1 << (PlSqlParser.ZONE - 652)) | (1 << (PlSqlParser.PREDICTION - 652)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 652)) | (1 << (PlSqlParser.PREDICTION_COST - 652)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 652)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 652)) | (1 << (PlSqlParser.PREDICTION_SET - 652)) | (1 << (PlSqlParser.CUME_DIST - 652)) | (1 << (PlSqlParser.DENSE_RANK - 652)) | (1 << (PlSqlParser.LISTAGG - 652)) | (1 << (PlSqlParser.PERCENT_RANK - 652)) | (1 << (PlSqlParser.PERCENTILE_CONT - 652)) | (1 << (PlSqlParser.PERCENTILE_DISC - 652)) | (1 << (PlSqlParser.RANK - 652)) | (1 << (PlSqlParser.AVG - 652)) | (1 << (PlSqlParser.CORR - 652)) | (1 << (PlSqlParser.COVAR_ - 652)) | (1 << (PlSqlParser.LAG - 652)) | (1 << (PlSqlParser.LEAD - 652)) | (1 << (PlSqlParser.MAX - 652)) | (1 << (PlSqlParser.MEDIAN - 652)) | (1 << (PlSqlParser.MIN - 652)) | (1 << (PlSqlParser.NTILE - 652)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 652)) | (1 << (PlSqlParser.REGR_ - 652)) | (1 << (PlSqlParser.ROW_NUMBER - 652)) | (1 << (PlSqlParser.SUBSTR - 652)) | (1 << (PlSqlParser.TRIM - 652)) | (1 << (PlSqlParser.SUM - 652)) | (1 << (PlSqlParser.STDDEV - 652)) | (1 << (PlSqlParser.VAR_ - 652)) | (1 << (PlSqlParser.VARIANCE - 652)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.LEFT_PAREN - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.SOLIDUS - 725)) | (1 << (PlSqlParser.PROMPT - 725)) | (1 << (PlSqlParser.START_CMD - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 1086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 1084
                    self.unit_statement()
                    pass

                elif la_ == 2:
                    self.state = 1085
                    self.sql_plus_command()
                    pass


                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.SEMICOLON:
                    self.state = 1088
                    self.match(PlSqlParser.SEMICOLON)


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1096
            self.match(PlSqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_control_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Transaction_control_statementsContext,0)


        def alter_function(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_functionContext,0)


        def alter_package(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_packageContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_procedureContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_sequenceContext,0)


        def alter_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_triggerContext,0)


        def alter_type(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_typeContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_tableContext,0)


        def alter_index(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_indexContext,0)


        def alter_user(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_userContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_function_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_procedure_bodyContext,0)


        def create_package(self):
            return self.getTypedRuleContext(PlSqlParser.Create_packageContext,0)


        def create_package_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_package_bodyContext,0)


        def create_index(self):
            return self.getTypedRuleContext(PlSqlParser.Create_indexContext,0)


        def create_table(self):
            return self.getTypedRuleContext(PlSqlParser.Create_tableContext,0)


        def create_tablespace(self):
            return self.getTypedRuleContext(PlSqlParser.Create_tablespaceContext,0)


        def create_view(self):
            return self.getTypedRuleContext(PlSqlParser.Create_viewContext,0)


        def create_materialized_view(self):
            return self.getTypedRuleContext(PlSqlParser.Create_materialized_viewContext,0)


        def create_materialized_view_log(self):
            return self.getTypedRuleContext(PlSqlParser.Create_materialized_view_logContext,0)


        def create_user(self):
            return self.getTypedRuleContext(PlSqlParser.Create_userContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Create_sequenceContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(PlSqlParser.Create_typeContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(PlSqlParser.Create_synonymContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_functionContext,0)


        def drop_package(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_packageContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_procedureContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_sequenceContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_typeContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Data_manipulation_language_statementsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_tableContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_indexContext,0)


        def comment_on_column(self):
            return self.getTypedRuleContext(PlSqlParser.Comment_on_columnContext,0)


        def comment_on_table(self):
            return self.getTypedRuleContext(PlSqlParser.Comment_on_tableContext,0)


        def anonymous_block(self):
            return self.getTypedRuleContext(PlSqlParser.Anonymous_blockContext,0)


        def grant_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Grant_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)




    def unit_statement(self):

        localctx = PlSqlParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unit_statement)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.transaction_control_statements()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.alter_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.alter_package()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1101
                self.alter_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1102
                self.alter_sequence()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1103
                self.alter_trigger()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1104
                self.alter_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1105
                self.alter_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1106
                self.alter_index()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1107
                self.alter_user()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1108
                self.create_function_body()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1109
                self.create_procedure_body()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1110
                self.create_package()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1111
                self.create_package_body()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1112
                self.create_index()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1113
                self.create_table()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1114
                self.create_tablespace()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1115
                self.create_view()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1116
                self.create_materialized_view()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1117
                self.create_materialized_view_log()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1118
                self.create_user()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1119
                self.create_sequence()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1120
                self.create_trigger()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1121
                self.create_type()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1122
                self.create_synonym()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1123
                self.drop_function()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1124
                self.drop_package()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1125
                self.drop_procedure()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1126
                self.drop_sequence()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1127
                self.drop_trigger()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1128
                self.drop_type()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1129
                self.data_manipulation_language_statements()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1130
                self.drop_table()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1131
                self.drop_index()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1132
                self.comment_on_column()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1133
                self.comment_on_table()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1134
                self.anonymous_block()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1135
                self.grant_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)




    def drop_function(self):

        localctx = PlSqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(PlSqlParser.DROP)
            self.state = 1139
            self.match(PlSqlParser.FUNCTION)
            self.state = 1140
            self.function_name()
            self.state = 1141
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function" ):
                listener.enterAlter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function" ):
                listener.exitAlter_function(self)




    def alter_function(self):

        localctx = PlSqlParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(PlSqlParser.ALTER)
            self.state = 1144
            self.match(PlSqlParser.FUNCTION)
            self.state = 1145
            self.function_name()
            self.state = 1146
            self.match(PlSqlParser.COMPILE)
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 1147
                self.match(PlSqlParser.DEBUG)


            self.state = 1153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1150
                    self.compiler_parameters_clause() 
                self.state = 1155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1156
                self.match(PlSqlParser.REUSE)
                self.state = 1157
                self.match(PlSqlParser.SETTINGS)


            self.state = 1160
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Implementation_type_nameContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DETERMINISTIC)
            else:
                return self.getToken(PlSqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(PlSqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(PlSqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function_body" ):
                listener.enterCreate_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function_body" ):
                listener.exitCreate_function_body(self)




    def create_function_body(self):

        localctx = PlSqlParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(PlSqlParser.CREATE)
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1163
                self.match(PlSqlParser.OR)
                self.state = 1164
                self.match(PlSqlParser.REPLACE)


            self.state = 1167
            self.match(PlSqlParser.FUNCTION)
            self.state = 1168
            self.function_name()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1169
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1174 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1171
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 1170
                        self.match(PlSqlParser.COMMA)


                    self.state = 1173
                    self.parameter()
                    self.state = 1176 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 1178
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1182
            self.match(PlSqlParser.RETURN)
            self.state = 1183
            self.type_spec()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.AUTHID or _la==PlSqlParser.DETERMINISTIC or _la==PlSqlParser.PARALLEL_ENABLE or _la==PlSqlParser.RESULT_CACHE:
                self.state = 1188
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.AUTHID]:
                    self.state = 1184
                    self.invoker_rights_clause()
                    pass
                elif token in [PlSqlParser.PARALLEL_ENABLE]:
                    self.state = 1185
                    self.parallel_enable_clause()
                    pass
                elif token in [PlSqlParser.RESULT_CACHE]:
                    self.state = 1186
                    self.result_cache_clause()
                    pass
                elif token in [PlSqlParser.DETERMINISTIC]:
                    self.state = 1187
                    self.match(PlSqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PIPELINED:
                    self.state = 1193
                    self.match(PlSqlParser.PIPELINED)


                self.state = 1196
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 1198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.DECLARE:
                        self.state = 1197
                        self.match(PlSqlParser.DECLARE)


                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                        self.state = 1200
                        self.seq_of_declare_specs()


                    self.state = 1203
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 1204
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 1207
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AGGREGATE or _la==PlSqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1208
                self.match(PlSqlParser.USING)
                self.state = 1209
                self.implementation_type_name()
                pass


            self.state = 1212
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(PlSqlParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_parallel_enable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_enable_clause" ):
                listener.enterParallel_enable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_enable_clause" ):
                listener.exitParallel_enable_clause(self)




    def parallel_enable_clause(self):

        localctx = PlSqlParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(PlSqlParser.PARALLEL_ENABLE)
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1215
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def ANY(self):
            return self.getToken(PlSqlParser.ANY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def HASH(self):
            return self.getToken(PlSqlParser.HASH, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def LIST(self):
            return self.getToken(PlSqlParser.LIST, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Streaming_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)




    def partition_by_clause(self):

        localctx = PlSqlParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1219
            self.match(PlSqlParser.PARTITION)
            self.state = 1220
            self.expression()
            self.state = 1221
            self.match(PlSqlParser.BY)
            self.state = 1225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ANY]:
                self.state = 1222
                self.match(PlSqlParser.ANY)
                pass
            elif token in [PlSqlParser.HASH, PlSqlParser.LIST, PlSqlParser.RANGE]:
                self.state = 1223
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.HASH or _la==PlSqlParser.LIST or _la==PlSqlParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1224
                self.paren_column_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CLUSTER or _la==PlSqlParser.ORDER:
                self.state = 1227
                self.streaming_clause()


            self.state = 1230
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_cache_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def relies_on_part(self):
            return self.getTypedRuleContext(PlSqlParser.Relies_on_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_result_cache_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_cache_clause" ):
                listener.enterResult_cache_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_cache_clause" ):
                listener.exitResult_cache_clause(self)




    def result_cache_clause(self):

        localctx = PlSqlParser.Result_cache_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_result_cache_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(PlSqlParser.RESULT_CACHE)
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RELIES_ON:
                self.state = 1233
                self.relies_on_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relies_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELIES_ON(self):
            return self.getToken(PlSqlParser.RELIES_ON, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relies_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelies_on_part" ):
                listener.enterRelies_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelies_on_part" ):
                listener.exitRelies_on_part(self)




    def relies_on_part(self):

        localctx = PlSqlParser.Relies_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_relies_on_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(PlSqlParser.RELIES_ON)
            self.state = 1237
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1238
            self.tableview_name()
            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1239
                self.match(PlSqlParser.COMMA)
                self.state = 1240
                self.tableview_name()
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1246
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(PlSqlParser.CLUSTER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_streaming_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStreaming_clause" ):
                listener.enterStreaming_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStreaming_clause" ):
                listener.exitStreaming_clause(self)




    def streaming_clause(self):

        localctx = PlSqlParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CLUSTER or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1249
            self.expression()
            self.state = 1250
            self.match(PlSqlParser.BY)
            self.state = 1251
            self.paren_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def package_name(self):
            return self.getTypedRuleContext(PlSqlParser.Package_nameContext,0)


        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_object_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_package" ):
                listener.enterDrop_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_package" ):
                listener.exitDrop_package(self)




    def drop_package(self):

        localctx = PlSqlParser.Drop_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_drop_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(PlSqlParser.DROP)
            self.state = 1254
            self.match(PlSqlParser.PACKAGE)
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1255
                self.match(PlSqlParser.BODY)


            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1258
                self.schema_object_name()
                self.state = 1259
                self.match(PlSqlParser.PERIOD)


            self.state = 1263
            self.package_name()
            self.state = 1264
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def PACKAGE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PACKAGE)
            else:
                return self.getToken(PlSqlParser.PACKAGE, i)

        def package_name(self):
            return self.getTypedRuleContext(PlSqlParser.Package_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_package" ):
                listener.enterAlter_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_package" ):
                listener.exitAlter_package(self)




    def alter_package(self):

        localctx = PlSqlParser.Alter_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alter_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(PlSqlParser.ALTER)
            self.state = 1267
            self.match(PlSqlParser.PACKAGE)
            self.state = 1268
            self.package_name()
            self.state = 1269
            self.match(PlSqlParser.COMPILE)
            self.state = 1271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1270
                self.match(PlSqlParser.DEBUG)


            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 1273
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BODY or _la==PlSqlParser.PACKAGE or _la==PlSqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1276
                    self.compiler_parameters_clause() 
                self.state = 1281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1282
                self.match(PlSqlParser.REUSE)
                self.state = 1283
                self.match(PlSqlParser.SETTINGS)


            self.state = 1286
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_object_nameContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package" ):
                listener.enterCreate_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package" ):
                listener.exitCreate_package(self)




    def create_package(self):

        localctx = PlSqlParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(PlSqlParser.CREATE)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1289
                self.match(PlSqlParser.OR)
                self.state = 1290
                self.match(PlSqlParser.REPLACE)


            self.state = 1293
            self.match(PlSqlParser.PACKAGE)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.schema_object_name()
                self.state = 1295
                self.match(PlSqlParser.PERIOD)


            self.state = 1299
            self.package_name()
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1300
                self.invoker_rights_clause()


            self.state = 1303
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 1304
                self.package_obj_spec()
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1310
            self.match(PlSqlParser.END)
            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 1311
                self.package_name()


            self.state = 1314
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_object_nameContext,0)


        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_obj_bodyContext,i)


        def BEGIN(self):
            return self.getToken(PlSqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_package_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package_body" ):
                listener.enterCreate_package_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package_body" ):
                listener.exitCreate_package_body(self)




    def create_package_body(self):

        localctx = PlSqlParser.Create_package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(PlSqlParser.CREATE)
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1317
                self.match(PlSqlParser.OR)
                self.state = 1318
                self.match(PlSqlParser.REPLACE)


            self.state = 1321
            self.match(PlSqlParser.PACKAGE)
            self.state = 1322
            self.match(PlSqlParser.BODY)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1323
                self.schema_object_name()
                self.state = 1324
                self.match(PlSqlParser.PERIOD)


            self.state = 1328
            self.package_name()
            self.state = 1329
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 1330
                self.package_obj_body()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BEGIN:
                self.state = 1336
                self.match(PlSqlParser.BEGIN)
                self.state = 1337
                self.seq_of_statements()


            self.state = 1340
            self.match(PlSqlParser.END)
            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 1341
                self.package_name()


            self.state = 1344
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Type_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_obj_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_spec" ):
                listener.enterPackage_obj_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_spec" ):
                listener.exitPackage_obj_spec(self)




    def package_obj_spec(self):

        localctx = PlSqlParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_package_obj_spec)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.pragma_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.variable_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.subtype_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1349
                self.cursor_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1350
                self.exception_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1351
                self.type_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1352
                self.procedure_spec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1353
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_spec" ):
                listener.enterProcedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_spec" ):
                listener.exitProcedure_spec(self)




    def procedure_spec(self):

        localctx = PlSqlParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1357
            self.identifier()
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1358
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1359
                self.parameter()
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1360
                    self.match(PlSqlParser.COMMA)
                    self.state = 1361
                    self.parameter()
                    self.state = 1366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1367
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1371
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def DETERMINISTIC(self):
            return self.getToken(PlSqlParser.DETERMINISTIC, 0)

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_spec" ):
                listener.enterFunction_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_spec" ):
                listener.exitFunction_spec(self)




    def function_spec(self):

        localctx = PlSqlParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(PlSqlParser.FUNCTION)
            self.state = 1374
            self.identifier()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1375
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1376
                self.parameter()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1377
                    self.match(PlSqlParser.COMMA)
                    self.state = 1378
                    self.parameter()
                    self.state = 1383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1384
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1388
            self.match(PlSqlParser.RETURN)
            self.state = 1389
            self.type_spec()
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DETERMINISTIC:
                self.state = 1390
                self.match(PlSqlParser.DETERMINISTIC)


            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RESULT_CACHE:
                self.state = 1393
                self.match(PlSqlParser.RESULT_CACHE)


            self.state = 1396
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Type_declarationContext,0)


        def procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_bodyContext,0)


        def function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_obj_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_body" ):
                listener.enterPackage_obj_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_body" ):
                listener.exitPackage_obj_body(self)




    def package_obj_body(self):

        localctx = PlSqlParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_package_obj_body)
        try:
            self.state = 1407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1398
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1399
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1400
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1401
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1402
                self.type_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1403
                self.procedure_body()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1404
                self.function_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1405
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1406
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)




    def drop_procedure(self):

        localctx = PlSqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(PlSqlParser.DROP)
            self.state = 1410
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1411
            self.procedure_name()
            self.state = 1412
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_procedure" ):
                listener.enterAlter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_procedure" ):
                listener.exitAlter_procedure(self)




    def alter_procedure(self):

        localctx = PlSqlParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(PlSqlParser.ALTER)
            self.state = 1415
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1416
            self.procedure_name()
            self.state = 1417
            self.match(PlSqlParser.COMPILE)
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1418
                self.match(PlSqlParser.DEBUG)


            self.state = 1424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1421
                    self.compiler_parameters_clause() 
                self.state = 1426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1427
                self.match(PlSqlParser.REUSE)
                self.state = 1428
                self.match(PlSqlParser.SETTINGS)


            self.state = 1431
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Implementation_type_nameContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DETERMINISTIC)
            else:
                return self.getToken(PlSqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(PlSqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(PlSqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_body" ):
                listener.enterFunction_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_body" ):
                listener.exitFunction_body(self)




    def function_body(self):

        localctx = PlSqlParser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(PlSqlParser.FUNCTION)
            self.state = 1434
            self.identifier()
            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1435
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1436
                self.parameter()
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1437
                    self.match(PlSqlParser.COMMA)
                    self.state = 1438
                    self.parameter()
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1444
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1448
            self.match(PlSqlParser.RETURN)
            self.state = 1449
            self.type_spec()
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.AUTHID or _la==PlSqlParser.DETERMINISTIC or _la==PlSqlParser.PARALLEL_ENABLE or _la==PlSqlParser.RESULT_CACHE:
                self.state = 1454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.AUTHID]:
                    self.state = 1450
                    self.invoker_rights_clause()
                    pass
                elif token in [PlSqlParser.PARALLEL_ENABLE]:
                    self.state = 1451
                    self.parallel_enable_clause()
                    pass
                elif token in [PlSqlParser.RESULT_CACHE]:
                    self.state = 1452
                    self.result_cache_clause()
                    pass
                elif token in [PlSqlParser.DETERMINISTIC]:
                    self.state = 1453
                    self.match(PlSqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PIPELINED:
                    self.state = 1459
                    self.match(PlSqlParser.PIPELINED)


                self.state = 1462
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 1464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.DECLARE:
                        self.state = 1463
                        self.match(PlSqlParser.DECLARE)


                    self.state = 1467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                        self.state = 1466
                        self.seq_of_declare_specs()


                    self.state = 1469
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 1470
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 1473
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AGGREGATE or _la==PlSqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1474
                self.match(PlSqlParser.USING)
                self.state = 1475
                self.implementation_type_name()
                pass


            self.state = 1478
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body" ):
                listener.enterProcedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body" ):
                listener.exitProcedure_body(self)




    def procedure_body(self):

        localctx = PlSqlParser.Procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1481
            self.identifier()
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1482
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1483
                self.parameter()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1484
                    self.match(PlSqlParser.COMMA)
                    self.state = 1485
                    self.parameter()
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1491
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1495
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1496
                    self.match(PlSqlParser.DECLARE)


                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                    self.state = 1499
                    self.seq_of_declare_specs()


                self.state = 1502
                self.body()
                pass

            elif la_ == 2:
                self.state = 1503
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1504
                self.match(PlSqlParser.EXTERNAL)
                pass


            self.state = 1507
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)




    def create_procedure_body(self):

        localctx = PlSqlParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(PlSqlParser.CREATE)
            self.state = 1512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1510
                self.match(PlSqlParser.OR)
                self.state = 1511
                self.match(PlSqlParser.REPLACE)


            self.state = 1514
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1515
            self.procedure_name()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1516
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1517
                self.parameter()
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1518
                    self.match(PlSqlParser.COMMA)
                    self.state = 1519
                    self.parameter()
                    self.state = 1524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1525
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1529
                self.invoker_rights_clause()


            self.state = 1532
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1533
                    self.match(PlSqlParser.DECLARE)


                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                    self.state = 1536
                    self.seq_of_declare_specs()


                self.state = 1539
                self.body()
                pass

            elif la_ == 2:
                self.state = 1540
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1541
                self.match(PlSqlParser.EXTERNAL)
                pass


            self.state = 1544
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)




    def drop_trigger(self):

        localctx = PlSqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_drop_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(PlSqlParser.DROP)
            self.state = 1547
            self.match(PlSqlParser.TRIGGER)
            self.state = 1548
            self.trigger_name()
            self.state = 1549
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alter_trigger_name = None # Trigger_nameContext
            self.rename_trigger_name = None # Trigger_nameContext

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,i)


        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_trigger" ):
                listener.enterAlter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_trigger" ):
                listener.exitAlter_trigger(self)




    def alter_trigger(self):

        localctx = PlSqlParser.Alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_alter_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(PlSqlParser.ALTER)
            self.state = 1552
            self.match(PlSqlParser.TRIGGER)
            self.state = 1553
            localctx.alter_trigger_name = self.trigger_name()
            self.state = 1572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.DISABLE, PlSqlParser.ENABLE]:
                self.state = 1554
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.RENAME]:
                self.state = 1555
                self.match(PlSqlParser.RENAME)
                self.state = 1556
                self.match(PlSqlParser.TO)
                self.state = 1557
                localctx.rename_trigger_name = self.trigger_name()
                pass
            elif token in [PlSqlParser.COMPILE]:
                self.state = 1558
                self.match(PlSqlParser.COMPILE)
                self.state = 1560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 1559
                    self.match(PlSqlParser.DEBUG)


                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1562
                        self.compiler_parameters_clause() 
                    self.state = 1567
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.REUSE:
                    self.state = 1568
                    self.match(PlSqlParser.REUSE)
                    self.state = 1569
                    self.match(PlSqlParser.SETTINGS)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1574
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)




    def create_trigger(self):

        localctx = PlSqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(PlSqlParser.CREATE)
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1577
                self.match(PlSqlParser.OR)
                self.state = 1578
                self.match(PlSqlParser.REPLACE)


            self.state = 1581
            self.match(PlSqlParser.TRIGGER)
            self.state = 1582
            self.trigger_name()
            self.state = 1586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1583
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 1584
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 1585
                self.non_dml_trigger()
                pass


            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1588
                self.trigger_follows_clause()


            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1591
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 1594
                self.trigger_when_clause()


            self.state = 1597
            self.trigger_body()
            self.state = 1598
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_follows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_follows_clause" ):
                listener.enterTrigger_follows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_follows_clause" ):
                listener.exitTrigger_follows_clause(self)




    def trigger_follows_clause(self):

        localctx = PlSqlParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(PlSqlParser.FOLLOWS)
            self.state = 1601
            self.trigger_name()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1602
                self.match(PlSqlParser.COMMA)
                self.state = 1603
                self.trigger_name()
                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_when_clause" ):
                listener.enterTrigger_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_when_clause" ):
                listener.exitTrigger_when_clause(self)




    def trigger_when_clause(self):

        localctx = PlSqlParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.match(PlSqlParser.WHEN)
            self.state = 1610
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1611
            self.condition()
            self.state = 1612
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(PlSqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(PlSqlParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_dml_trigger" ):
                listener.enterSimple_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_dml_trigger" ):
                listener.exitSimple_dml_trigger(self)




    def simple_dml_trigger(self):

        localctx = PlSqlParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BEFORE]:
                self.state = 1614
                self.match(PlSqlParser.BEFORE)
                pass
            elif token in [PlSqlParser.AFTER]:
                self.state = 1615
                self.match(PlSqlParser.AFTER)
                pass
            elif token in [PlSqlParser.INSTEAD]:
                self.state = 1616
                self.match(PlSqlParser.INSTEAD)
                self.state = 1617
                self.match(PlSqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1620
            self.dml_event_clause()
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1621
                self.referencing_clause()


            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 1624
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(PlSqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)




    def for_each_row(self):

        localctx = PlSqlParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(PlSqlParser.FOR)
            self.state = 1628
            self.match(PlSqlParser.EACH)
            self.state = 1629
            self.match(PlSqlParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compound_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_dml_trigger" ):
                listener.enterCompound_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_dml_trigger" ):
                listener.exitCompound_dml_trigger(self)




    def compound_dml_trigger(self):

        localctx = PlSqlParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(PlSqlParser.FOR)
            self.state = 1632
            self.dml_event_clause()
            self.state = 1634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1633
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_non_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_trigger" ):
                listener.enterNon_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_trigger" ):
                listener.exitNon_dml_trigger(self)




    def non_dml_trigger(self):

        localctx = PlSqlParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AFTER or _la==PlSqlParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1637
            self.non_dml_event()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 1638
                self.match(PlSqlParser.OR)
                self.state = 1639
                self.non_dml_event()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1645
            self.match(PlSqlParser.ON)
            self.state = 1653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1646
                self.match(PlSqlParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 1650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1647
                    self.schema_name()
                    self.state = 1648
                    self.match(PlSqlParser.PERIOD)


                self.state = 1652
                self.match(PlSqlParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_body" ):
                listener.enterTrigger_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_body" ):
                listener.exitTrigger_body(self)




    def trigger_body(self):

        localctx = PlSqlParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_trigger_body)
        try:
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.match(PlSqlParser.COMPOUND)
                self.state = 1656
                self.match(PlSqlParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.match(PlSqlParser.CALL)
                self.state = 1658
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1659
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(PlSqlParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_routine_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_clause" ):
                listener.enterRoutine_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_clause" ):
                listener.exitRoutine_clause(self)




    def routine_clause(self):

        localctx = PlSqlParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.routine_name()
            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1663
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compound_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_trigger_block" ):
                listener.enterCompound_trigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_trigger_block" ):
                listener.exitCompound_trigger_block(self)




    def compound_trigger_block(self):

        localctx = PlSqlParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(PlSqlParser.COMPOUND)
            self.state = 1667
            self.match(PlSqlParser.TRIGGER)
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1668
                self.seq_of_declare_specs()


            self.state = 1672 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1671
                self.timing_point_section()
                self.state = 1674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.AFTER or _la==PlSqlParser.BEFORE):
                    break

            self.state = 1676
            self.match(PlSqlParser.END)
            self.state = 1677
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.STATEMENT)
            else:
                return self.getToken(PlSqlParser.STATEMENT, i)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BEFORE)
            else:
                return self.getToken(PlSqlParser.BEFORE, i)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EACH)
            else:
                return self.getToken(PlSqlParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROW)
            else:
                return self.getToken(PlSqlParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AFTER)
            else:
                return self.getToken(PlSqlParser.AFTER, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_timing_point_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTiming_point_section" ):
                listener.enterTiming_point_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTiming_point_section" ):
                listener.exitTiming_point_section(self)




    def timing_point_section(self):

        localctx = PlSqlParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_timing_point_section)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                localctx.bk = self.match(PlSqlParser.BEFORE)
                self.state = 1680
                self.match(PlSqlParser.STATEMENT)
                self.state = 1681
                self.match(PlSqlParser.IS)
                self.state = 1682
                self.trigger_block()
                self.state = 1683
                self.match(PlSqlParser.BEFORE)
                self.state = 1684
                self.match(PlSqlParser.STATEMENT)
                self.state = 1685
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1687
                localctx.bk = self.match(PlSqlParser.BEFORE)
                self.state = 1688
                self.match(PlSqlParser.EACH)
                self.state = 1689
                self.match(PlSqlParser.ROW)
                self.state = 1690
                self.match(PlSqlParser.IS)
                self.state = 1691
                self.trigger_block()
                self.state = 1692
                self.match(PlSqlParser.BEFORE)
                self.state = 1693
                self.match(PlSqlParser.EACH)
                self.state = 1694
                self.match(PlSqlParser.ROW)
                self.state = 1695
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1697
                localctx.ak = self.match(PlSqlParser.AFTER)
                self.state = 1698
                self.match(PlSqlParser.STATEMENT)
                self.state = 1699
                self.match(PlSqlParser.IS)
                self.state = 1700
                self.trigger_block()
                self.state = 1701
                self.match(PlSqlParser.AFTER)
                self.state = 1702
                self.match(PlSqlParser.STATEMENT)
                self.state = 1703
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1705
                localctx.ak = self.match(PlSqlParser.AFTER)
                self.state = 1706
                self.match(PlSqlParser.EACH)
                self.state = 1707
                self.match(PlSqlParser.ROW)
                self.state = 1708
                self.match(PlSqlParser.IS)
                self.state = 1709
                self.trigger_block()
                self.state = 1710
                self.match(PlSqlParser.AFTER)
                self.state = 1711
                self.match(PlSqlParser.EACH)
                self.state = 1712
                self.match(PlSqlParser.ROW)
                self.state = 1713
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(PlSqlParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(PlSqlParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(PlSqlParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(PlSqlParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(PlSqlParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(PlSqlParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(PlSqlParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(PlSqlParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(PlSqlParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(PlSqlParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(PlSqlParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(PlSqlParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(PlSqlParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(PlSqlParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(PlSqlParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(PlSqlParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_non_dml_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_event" ):
                listener.enterNon_dml_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_event" ):
                listener.exitNon_dml_event(self)




    def non_dml_event(self):

        localctx = PlSqlParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_non_dml_event)
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.match(PlSqlParser.ALTER)
                pass
            elif token in [PlSqlParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.match(PlSqlParser.ANALYZE)
                pass
            elif token in [PlSqlParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1719
                self.match(PlSqlParser.ASSOCIATE)
                self.state = 1720
                self.match(PlSqlParser.STATISTICS)
                pass
            elif token in [PlSqlParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1721
                self.match(PlSqlParser.AUDIT)
                pass
            elif token in [PlSqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1722
                self.match(PlSqlParser.COMMENT)
                pass
            elif token in [PlSqlParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1723
                self.match(PlSqlParser.CREATE)
                pass
            elif token in [PlSqlParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1724
                self.match(PlSqlParser.DISASSOCIATE)
                self.state = 1725
                self.match(PlSqlParser.STATISTICS)
                pass
            elif token in [PlSqlParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1726
                self.match(PlSqlParser.DROP)
                pass
            elif token in [PlSqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1727
                self.match(PlSqlParser.GRANT)
                pass
            elif token in [PlSqlParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1728
                self.match(PlSqlParser.NOAUDIT)
                pass
            elif token in [PlSqlParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1729
                self.match(PlSqlParser.RENAME)
                pass
            elif token in [PlSqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1730
                self.match(PlSqlParser.REVOKE)
                pass
            elif token in [PlSqlParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1731
                self.match(PlSqlParser.TRUNCATE)
                pass
            elif token in [PlSqlParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1732
                self.match(PlSqlParser.DDL)
                pass
            elif token in [PlSqlParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1733
                self.match(PlSqlParser.STARTUP)
                pass
            elif token in [PlSqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1734
                self.match(PlSqlParser.SHUTDOWN)
                pass
            elif token in [PlSqlParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1735
                self.match(PlSqlParser.DB_ROLE_CHANGE)
                pass
            elif token in [PlSqlParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1736
                self.match(PlSqlParser.LOGON)
                pass
            elif token in [PlSqlParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1737
                self.match(PlSqlParser.LOGOFF)
                pass
            elif token in [PlSqlParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1738
                self.match(PlSqlParser.SERVERERROR)
                pass
            elif token in [PlSqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1739
                self.match(PlSqlParser.SUSPEND)
                pass
            elif token in [PlSqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1740
                self.match(PlSqlParser.DATABASE)
                pass
            elif token in [PlSqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1741
                self.match(PlSqlParser.SCHEMA)
                pass
            elif token in [PlSqlParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1742
                self.match(PlSqlParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_clause" ):
                listener.enterDml_event_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_clause" ):
                listener.exitDml_event_clause(self)




    def dml_event_clause(self):

        localctx = PlSqlParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.dml_event_element()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 1746
                self.match(PlSqlParser.OR)
                self.state = 1747
                self.dml_event_element()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1753
            self.match(PlSqlParser.ON)
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1754
                self.dml_event_nested_clause()


            self.state = 1757
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_element" ):
                listener.enterDml_event_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_element" ):
                listener.exitDml_event_element(self)




    def dml_event_element(self):

        localctx = PlSqlParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.INSERT or _la==PlSqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OF:
                self.state = 1760
                self.match(PlSqlParser.OF)
                self.state = 1761
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_nested_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_nested_clause" ):
                listener.enterDml_event_nested_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_nested_clause" ):
                listener.exitDml_event_nested_clause(self)




    def dml_event_nested_clause(self):

        localctx = PlSqlParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(PlSqlParser.NESTED)
            self.state = 1765
            self.match(PlSqlParser.TABLE)
            self.state = 1766
            self.tableview_name()
            self.state = 1767
            self.match(PlSqlParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(PlSqlParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_referencing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_clause" ):
                listener.enterReferencing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_clause" ):
                listener.exitReferencing_clause(self)




    def referencing_clause(self):

        localctx = PlSqlParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(PlSqlParser.REFERENCING)
            self.state = 1771 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1770
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 1773 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def OLD(self):
            return self.getToken(PlSqlParser.OLD, 0)

        def PARENT(self):
            return self.getToken(PlSqlParser.PARENT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_referencing_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_element" ):
                listener.enterReferencing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_element" ):
                listener.exitReferencing_element(self)




    def referencing_element(self):

        localctx = PlSqlParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            _la = self._input.LA(1)
            if not(((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & ((1 << (PlSqlParser.NEW - 354)) | (1 << (PlSqlParser.OLD - 354)) | (1 << (PlSqlParser.PARENT - 354)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1776
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def VALIDATE(self):
            return self.getToken(PlSqlParser.VALIDATE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)




    def drop_type(self):

        localctx = PlSqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(PlSqlParser.DROP)
            self.state = 1779
            self.match(PlSqlParser.TYPE)
            self.state = 1781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1780
                self.match(PlSqlParser.BODY)


            self.state = 1783
            self.type_name()
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE or _la==PlSqlParser.VALIDATE:
                self.state = 1784
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FORCE or _la==PlSqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1787
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def compile_type_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Compile_type_clauseContext,0)


        def replace_type_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Replace_type_clauseContext,0)


        def alter_method_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_method_specContext,0)


        def alter_collection_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_collection_clausesContext,0)


        def modifier_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,0)


        def dependent_handling_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dependent_handling_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type" ):
                listener.enterAlter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type" ):
                listener.exitAlter_type(self)




    def alter_type(self):

        localctx = PlSqlParser.Alter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alter_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(PlSqlParser.ALTER)
            self.state = 1790
            self.match(PlSqlParser.TYPE)
            self.state = 1791
            self.type_name()
            self.state = 1797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.COMPILE]:
                self.state = 1792
                self.compile_type_clause()
                pass
            elif token in [PlSqlParser.REPLACE]:
                self.state = 1793
                self.replace_type_clause()
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.DROP]:
                self.state = 1794
                self.alter_method_spec()
                pass
            elif token in [PlSqlParser.MODIFY]:
                self.state = 1795
                self.alter_collection_clauses()
                pass
            elif token in [PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE, PlSqlParser.NOT, PlSqlParser.OVERRIDING]:
                self.state = 1796
                self.modifier_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CASCADE or _la==PlSqlParser.INVALIDATE:
                self.state = 1799
                self.dependent_handling_clause()


            self.state = 1802
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compile_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_compile_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompile_type_clause" ):
                listener.enterCompile_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompile_type_clause" ):
                listener.exitCompile_type_clause(self)




    def compile_type_clause(self):

        localctx = PlSqlParser.Compile_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_compile_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(PlSqlParser.COMPILE)
            self.state = 1806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1805
                self.match(PlSqlParser.DEBUG)


            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1808
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BODY or _la==PlSqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1811
                    self.compiler_parameters_clause() 
                self.state = 1816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1817
                self.match(PlSqlParser.REUSE)
                self.state = 1818
                self.match(PlSqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Replace_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_member_specContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_replace_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_type_clause" ):
                listener.enterReplace_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_type_clause" ):
                listener.exitReplace_type_clause(self)




    def replace_type_clause(self):

        localctx = PlSqlParser.Replace_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_replace_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(PlSqlParser.REPLACE)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1822
                self.invoker_rights_clause()


            self.state = 1825
            self.match(PlSqlParser.AS)
            self.state = 1826
            self.match(PlSqlParser.OBJECT)
            self.state = 1827
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1828
            self.object_member_spec()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1829
                self.match(PlSqlParser.COMMA)
                self.state = 1830
                self.object_member_spec()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1836
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_method_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Alter_method_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Alter_method_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_spec" ):
                listener.enterAlter_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_spec" ):
                listener.exitAlter_method_spec(self)




    def alter_method_spec(self):

        localctx = PlSqlParser.Alter_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alter_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.alter_method_element()
            self.state = 1843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1839
                self.match(PlSqlParser.COMMA)
                self.state = 1840
                self.alter_method_element()
                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def map_order_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_function_specContext,0)


        def subprogram_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Subprogram_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_method_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_element" ):
                listener.enterAlter_method_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_element" ):
                listener.exitAlter_method_element(self)




    def alter_method_element(self):

        localctx = PlSqlParser.Alter_method_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_method_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ADD or _la==PlSqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.state = 1847
                self.map_order_function_spec()
                pass
            elif token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.state = 1848
                self.subprogram_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(PlSqlParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Attribute_definitionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_attribute_definition" ):
                listener.enterAlter_attribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_attribute_definition" ):
                listener.exitAlter_attribute_definition(self)




    def alter_attribute_definition(self):

        localctx = PlSqlParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ADD or _la==PlSqlParser.DROP or _la==PlSqlParser.MODIFY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1852
            self.match(PlSqlParser.ATTRIBUTE)
            self.state = 1865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 1853
                self.attribute_definition()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 1854
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1855
                self.attribute_definition()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1856
                    self.match(PlSqlParser.COMMA)
                    self.state = 1857
                    self.attribute_definition()
                    self.state = 1862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1863
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(PlSqlParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)




    def attribute_definition(self):

        localctx = PlSqlParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.attribute_name()
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 1868
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_collection_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_collection_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_collection_clauses" ):
                listener.enterAlter_collection_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_collection_clauses" ):
                listener.exitAlter_collection_clauses(self)




    def alter_collection_clauses(self):

        localctx = PlSqlParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.match(PlSqlParser.MODIFY)
            self.state = 1877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LIMIT]:
                self.state = 1872
                self.match(PlSqlParser.LIMIT)
                self.state = 1873
                self.expression()
                pass
            elif token in [PlSqlParser.ELEMENT]:
                self.state = 1874
                self.match(PlSqlParser.ELEMENT)
                self.state = 1875
                self.match(PlSqlParser.TYPE)
                self.state = 1876
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_handling_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(PlSqlParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(PlSqlParser.CONVERT, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(PlSqlParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dependent_handling_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_handling_clause" ):
                listener.enterDependent_handling_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_handling_clause" ):
                listener.exitDependent_handling_clause(self)




    def dependent_handling_clause(self):

        localctx = PlSqlParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 1895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INVALIDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1879
                self.match(PlSqlParser.INVALIDATE)
                pass
            elif token in [PlSqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.match(PlSqlParser.CASCADE)
                self.state = 1890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.CONVERT]:
                    self.state = 1881
                    self.match(PlSqlParser.CONVERT)
                    self.state = 1882
                    self.match(PlSqlParser.TO)
                    self.state = 1883
                    self.match(PlSqlParser.SUBSTITUTABLE)
                    pass
                elif token in [PlSqlParser.INCLUDING, PlSqlParser.NOT]:
                    self.state = 1885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NOT:
                        self.state = 1884
                        self.match(PlSqlParser.NOT)


                    self.state = 1887
                    self.match(PlSqlParser.INCLUDING)
                    self.state = 1888
                    self.match(PlSqlParser.TABLE)
                    self.state = 1889
                    self.match(PlSqlParser.DATA)
                    pass
                elif token in [PlSqlParser.EXCEPTIONS, PlSqlParser.FORCE, PlSqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.EXCEPTIONS or _la==PlSqlParser.FORCE:
                    self.state = 1892
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_exceptions_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dependent_exceptions_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_exceptions_part" ):
                listener.enterDependent_exceptions_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_exceptions_part" ):
                listener.exitDependent_exceptions_part(self)




    def dependent_exceptions_part(self):

        localctx = PlSqlParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE:
                self.state = 1897
                self.match(PlSqlParser.FORCE)


            self.state = 1900
            self.match(PlSqlParser.EXCEPTIONS)
            self.state = 1901
            self.match(PlSqlParser.INTO)
            self.state = 1902
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(PlSqlParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(PlSqlParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)




    def create_type(self):

        localctx = PlSqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(PlSqlParser.CREATE)
            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1905
                self.match(PlSqlParser.OR)
                self.state = 1906
                self.match(PlSqlParser.REPLACE)


            self.state = 1909
            self.match(PlSqlParser.TYPE)
            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1910
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 1911
                self.type_body()
                pass


            self.state = 1914
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(PlSqlParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)




    def type_definition(self):

        localctx = PlSqlParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.type_name()
            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OID:
                self.state = 1917
                self.match(PlSqlParser.OID)
                self.state = 1918
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.AUTHID or _la==PlSqlParser.IS or _la==PlSqlParser.UNDER:
                self.state = 1921
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(PlSqlParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(PlSqlParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(PlSqlParser.Sqlj_object_typeContext,0)


        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_member_specContext,i)


        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)




    def object_type_def(self):

        localctx = PlSqlParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1924
                self.invoker_rights_clause()


            self.state = 1929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AS, PlSqlParser.IS]:
                self.state = 1927
                self.object_as_part()
                pass
            elif token in [PlSqlParser.UNDER]:
                self.state = 1928
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXTERNAL:
                self.state = 1931
                self.sqlj_object_type()


            self.state = 1945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1934
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1935
                self.object_member_spec()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1936
                    self.match(PlSqlParser.COMMA)
                    self.state = 1937
                    self.object_member_spec()
                    self.state = 1942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1943
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or _la==PlSqlParser.NOT or _la==PlSqlParser.OVERRIDING:
                self.state = 1947
                self.modifier_clause()
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)




    def object_as_part(self):

        localctx = PlSqlParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.OBJECT]:
                self.state = 1954
                self.match(PlSqlParser.OBJECT)
                pass
            elif token in [PlSqlParser.VARRAY, PlSqlParser.VARYING]:
                self.state = 1955
                self.varray_type_def()
                pass
            elif token in [PlSqlParser.TABLE]:
                self.state = 1956
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)




    def object_under_part(self):

        localctx = PlSqlParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.match(PlSqlParser.UNDER)
            self.state = 1960
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)




    def nested_table_type_def(self):

        localctx = PlSqlParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.match(PlSqlParser.TABLE)
            self.state = 1963
            self.match(PlSqlParser.OF)
            self.state = 1964
            self.type_spec()
            self.state = 1967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1965
                self.match(PlSqlParser.NOT)
                self.state = 1966
                self.match(PlSqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(PlSqlParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(PlSqlParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(PlSqlParser.ORADATA, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)




    def sqlj_object_type(self):

        localctx = PlSqlParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(PlSqlParser.EXTERNAL)
            self.state = 1970
            self.match(PlSqlParser.NAME)
            self.state = 1971
            self.expression()
            self.state = 1972
            self.match(PlSqlParser.LANGUAGE)
            self.state = 1973
            self.match(PlSqlParser.JAVA)
            self.state = 1974
            self.match(PlSqlParser.USING)
            self.state = 1975
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CUSTOMDATUM or _la==PlSqlParser.ORADATA or _la==PlSqlParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)




    def type_body(self):

        localctx = PlSqlParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self.match(PlSqlParser.BODY)
            self.state = 1978
            self.type_name()
            self.state = 1979
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1981 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1980
                self.type_body_elements()
                self.state = 1983 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.MAP or _la==PlSqlParser.MEMBER or _la==PlSqlParser.ORDER or _la==PlSqlParser.STATIC):
                    break

            self.state = 1985
            self.match(PlSqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)




    def type_body_elements(self):

        localctx = PlSqlParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_type_body_elements)
        try:
            self.state = 1989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1987
                self.map_order_func_declaration()
                pass
            elif token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1988
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)




    def map_order_func_declaration(self):

        localctx = PlSqlParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MAP or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1992
            self.match(PlSqlParser.MEMBER)
            self.state = 1993
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)




    def subprog_decl_in_type(self):

        localctx = PlSqlParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PROCEDURE]:
                self.state = 1996
                self.proc_decl_in_type()
                pass
            elif token in [PlSqlParser.FUNCTION]:
                self.state = 1997
                self.func_decl_in_type()
                pass
            elif token in [PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE]:
                self.state = 1998
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)




    def proc_decl_in_type(self):

        localctx = PlSqlParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.match(PlSqlParser.PROCEDURE)
            self.state = 2002
            self.procedure_name()
            self.state = 2003
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2004
            self.type_elements_parameter()
            self.state = 2009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2005
                self.match(PlSqlParser.COMMA)
                self.state = 2006
                self.type_elements_parameter()
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2012
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 2013
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 2014
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 2015
                    self.match(PlSqlParser.DECLARE)


                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                    self.state = 2018
                    self.seq_of_declare_specs()


                self.state = 2021
                self.body()
                self.state = 2022
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)




    def func_decl_in_type(self):

        localctx = PlSqlParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.match(PlSqlParser.FUNCTION)
            self.state = 2027
            self.function_name()
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2028
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2029
                self.type_elements_parameter()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2030
                    self.match(PlSqlParser.COMMA)
                    self.state = 2031
                    self.type_elements_parameter()
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2037
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2041
            self.match(PlSqlParser.RETURN)
            self.state = 2042
            self.type_spec()
            self.state = 2043
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 2044
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 2045
                    self.match(PlSqlParser.DECLARE)


                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                    self.state = 2048
                    self.seq_of_declare_specs()


                self.state = 2051
                self.body()
                self.state = 2052
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SELF)
            else:
                return self.getToken(PlSqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = PlSqlParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FINAL:
                self.state = 2056
                self.match(PlSqlParser.FINAL)


            self.state = 2060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INSTANTIABLE:
                self.state = 2059
                self.match(PlSqlParser.INSTANTIABLE)


            self.state = 2062
            self.match(PlSqlParser.CONSTRUCTOR)
            self.state = 2063
            self.match(PlSqlParser.FUNCTION)
            self.state = 2064
            self.type_spec()
            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2065
                self.match(PlSqlParser.LEFT_PAREN)

                self.state = 2066
                self.match(PlSqlParser.SELF)
                self.state = 2067
                self.match(PlSqlParser.IN)
                self.state = 2068
                self.match(PlSqlParser.OUT)
                self.state = 2069
                self.type_spec()
                self.state = 2070
                self.match(PlSqlParser.COMMA)
                self.state = 2072
                self.type_elements_parameter()
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2073
                    self.match(PlSqlParser.COMMA)
                    self.state = 2074
                    self.type_elements_parameter()
                    self.state = 2079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2080
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2084
            self.match(PlSqlParser.RETURN)
            self.state = 2085
            self.match(PlSqlParser.SELF)
            self.state = 2086
            self.match(PlSqlParser.AS)
            self.state = 2087
            self.match(PlSqlParser.RESULT)
            self.state = 2088
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 2089
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 2090
                    self.match(PlSqlParser.DECLARE)


                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                    self.state = 2093
                    self.seq_of_declare_specs()


                self.state = 2096
                self.body()
                self.state = 2097
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(PlSqlParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)




    def modifier_clause(self):

        localctx = PlSqlParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 2101
                self.match(PlSqlParser.NOT)


            self.state = 2104
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or _la==PlSqlParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(PlSqlParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Element_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)




    def object_member_spec(self):

        localctx = PlSqlParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2106
                self.identifier()
                self.state = 2107
                self.type_spec()
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.EXTERNAL:
                    self.state = 2108
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)




    def sqlj_object_type_attr(self):

        localctx = PlSqlParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(PlSqlParser.EXTERNAL)
            self.state = 2115
            self.match(PlSqlParser.NAME)
            self.state = 2116
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Element_spec_optionsContext,i)


        def pragma_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)




    def element_spec(self):

        localctx = PlSqlParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 2118
                self.modifier_clause()


            self.state = 2122 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2121
                self.element_spec_options()
                self.state = 2124 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.CONSTRUCTOR or _la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or _la==PlSqlParser.MAP or _la==PlSqlParser.MEMBER or _la==PlSqlParser.ORDER or _la==PlSqlParser.STATIC):
                    break

            self.state = 2128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.match(PlSqlParser.COMMA)
                self.state = 2127
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)




    def element_spec_options(self):

        localctx = PlSqlParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_element_spec_options)
        try:
            self.state = 2133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2130
                self.subprogram_spec()
                pass
            elif token in [PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2131
                self.constructor_spec()
                pass
            elif token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2132
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)




    def subprogram_spec(self):

        localctx = PlSqlParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PROCEDURE]:
                self.state = 2136
                self.type_procedure_spec()
                pass
            elif token in [PlSqlParser.FUNCTION]:
                self.state = 2137
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)




    def type_procedure_spec(self):

        localctx = PlSqlParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.match(PlSqlParser.PROCEDURE)
            self.state = 2141
            self.procedure_name()
            self.state = 2142
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2143
            self.type_elements_parameter()
            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2144
                self.match(PlSqlParser.COMMA)
                self.state = 2145
                self.type_elements_parameter()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2151
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.IS:
                self.state = 2152
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2153
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(PlSqlParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def VARIABLE(self):
            return self.getToken(PlSqlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)




    def type_function_spec(self):

        localctx = PlSqlParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.match(PlSqlParser.FUNCTION)
            self.state = 2157
            self.function_name()
            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2158
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2159
                self.type_elements_parameter()
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2160
                    self.match(PlSqlParser.COMMA)
                    self.state = 2161
                    self.type_elements_parameter()
                    self.state = 2166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2167
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2171
            self.match(PlSqlParser.RETURN)
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 2172
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 2173
                self.match(PlSqlParser.SELF)
                self.state = 2174
                self.match(PlSqlParser.AS)
                self.state = 2175
                self.match(PlSqlParser.RESULT)
                pass


            self.state = 2186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AS, PlSqlParser.IS]:
                self.state = 2178
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2179
                self.call_spec()
                pass
            elif token in [PlSqlParser.EXTERNAL]:
                self.state = 2180
                self.match(PlSqlParser.EXTERNAL)
                self.state = 2182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VARIABLE:
                    self.state = 2181
                    self.match(PlSqlParser.VARIABLE)


                self.state = 2184
                self.match(PlSqlParser.NAME)
                self.state = 2185
                self.expression()
                pass
            elif token in [PlSqlParser.CASCADE, PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE, PlSqlParser.INVALIDATE, PlSqlParser.MAP, PlSqlParser.MEMBER, PlSqlParser.ORDER, PlSqlParser.STATIC, PlSqlParser.RIGHT_PAREN, PlSqlParser.COMMA, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SELF)
            else:
                return self.getToken(PlSqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)




    def constructor_spec(self):

        localctx = PlSqlParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FINAL:
                self.state = 2188
                self.match(PlSqlParser.FINAL)


            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INSTANTIABLE:
                self.state = 2191
                self.match(PlSqlParser.INSTANTIABLE)


            self.state = 2194
            self.match(PlSqlParser.CONSTRUCTOR)
            self.state = 2195
            self.match(PlSqlParser.FUNCTION)
            self.state = 2196
            self.type_spec()
            self.state = 2214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2197
                self.match(PlSqlParser.LEFT_PAREN)

                self.state = 2198
                self.match(PlSqlParser.SELF)
                self.state = 2199
                self.match(PlSqlParser.IN)
                self.state = 2200
                self.match(PlSqlParser.OUT)
                self.state = 2201
                self.type_spec()
                self.state = 2202
                self.match(PlSqlParser.COMMA)
                self.state = 2204
                self.type_elements_parameter()
                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2205
                    self.match(PlSqlParser.COMMA)
                    self.state = 2206
                    self.type_elements_parameter()
                    self.state = 2211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2212
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2216
            self.match(PlSqlParser.RETURN)
            self.state = 2217
            self.match(PlSqlParser.SELF)
            self.state = 2218
            self.match(PlSqlParser.AS)
            self.state = 2219
            self.match(PlSqlParser.RESULT)
            self.state = 2222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.IS:
                self.state = 2220
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2221
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)




    def map_order_function_spec(self):

        localctx = PlSqlParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MAP or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2225
            self.match(PlSqlParser.MEMBER)
            self.state = 2226
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pragma_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)




    def pragma_clause(self):

        localctx = PlSqlParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(PlSqlParser.PRAGMA)
            self.state = 2229
            self.match(PlSqlParser.RESTRICT_REFERENCES)
            self.state = 2230
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2231
            self.pragma_elements()
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2232
                self.match(PlSqlParser.COMMA)
                self.state = 2233
                self.pragma_elements()
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2239
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)




    def pragma_elements(self):

        localctx = PlSqlParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pragma_elements)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.identifier()
                pass
            elif token in [PlSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.match(PlSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)




    def type_elements_parameter(self):

        localctx = PlSqlParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.parameter_name()
            self.state = 2246
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)




    def drop_sequence(self):

        localctx = PlSqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_drop_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.match(PlSqlParser.DROP)
            self.state = 2249
            self.match(PlSqlParser.SEQUENCE)
            self.state = 2250
            self.sequence_name()
            self.state = 2251
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)




    def alter_sequence(self):

        localctx = PlSqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.match(PlSqlParser.ALTER)
            self.state = 2254
            self.match(PlSqlParser.SEQUENCE)
            self.state = 2255
            self.sequence_name()
            self.state = 2257 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2256
                self.sequence_spec()
                self.state = 2259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.CACHE or _la==PlSqlParser.CYCLE or _la==PlSqlParser.INCREMENT or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (PlSqlParser.MAXVALUE - 323)) | (1 << (PlSqlParser.MINVALUE - 323)) | (1 << (PlSqlParser.NOCACHE - 323)) | (1 << (PlSqlParser.NOCYCLE - 323)) | (1 << (PlSqlParser.NOMAXVALUE - 323)) | (1 << (PlSqlParser.NOMINVALUE - 323)) | (1 << (PlSqlParser.NOORDER - 323)))) != 0) or _la==PlSqlParser.ORDER):
                    break

            self.state = 2261
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)




    def create_sequence(self):

        localctx = PlSqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(PlSqlParser.CREATE)
            self.state = 2264
            self.match(PlSqlParser.SEQUENCE)
            self.state = 2265
            self.sequence_name()
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.CACHE or _la==PlSqlParser.CYCLE or _la==PlSqlParser.INCREMENT or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (PlSqlParser.MAXVALUE - 323)) | (1 << (PlSqlParser.MINVALUE - 323)) | (1 << (PlSqlParser.NOCACHE - 323)) | (1 << (PlSqlParser.NOCYCLE - 323)) | (1 << (PlSqlParser.NOMAXVALUE - 323)) | (1 << (PlSqlParser.NOMINVALUE - 323)) | (1 << (PlSqlParser.NOORDER - 323)))) != 0) or _la==PlSqlParser.ORDER or _la==PlSqlParser.START:
                self.state = 2268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.START]:
                    self.state = 2266
                    self.sequence_start_clause()
                    pass
                elif token in [PlSqlParser.CACHE, PlSqlParser.CYCLE, PlSqlParser.INCREMENT, PlSqlParser.MAXVALUE, PlSqlParser.MINVALUE, PlSqlParser.NOCACHE, PlSqlParser.NOCYCLE, PlSqlParser.NOMAXVALUE, PlSqlParser.NOMINVALUE, PlSqlParser.NOORDER, PlSqlParser.ORDER]:
                    self.state = 2267
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2273
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(PlSqlParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(PlSqlParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(PlSqlParser.NOORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)




    def sequence_spec(self):

        localctx = PlSqlParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sequence_spec)
        try:
            self.state = 2291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self.match(PlSqlParser.INCREMENT)
                self.state = 2276
                self.match(PlSqlParser.BY)
                self.state = 2277
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278
                self.match(PlSqlParser.MAXVALUE)
                self.state = 2279
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                self.match(PlSqlParser.NOMAXVALUE)
                pass
            elif token in [PlSqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2281
                self.match(PlSqlParser.MINVALUE)
                self.state = 2282
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2283
                self.match(PlSqlParser.NOMINVALUE)
                pass
            elif token in [PlSqlParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2284
                self.match(PlSqlParser.CYCLE)
                pass
            elif token in [PlSqlParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2285
                self.match(PlSqlParser.NOCYCLE)
                pass
            elif token in [PlSqlParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2286
                self.match(PlSqlParser.CACHE)
                self.state = 2287
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2288
                self.match(PlSqlParser.NOCACHE)
                pass
            elif token in [PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2289
                self.match(PlSqlParser.ORDER)
                pass
            elif token in [PlSqlParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2290
                self.match(PlSqlParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(PlSqlParser.START, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)




    def sequence_start_clause(self):

        localctx = PlSqlParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.match(PlSqlParser.START)
            self.state = 2294
            self.match(PlSqlParser.WITH)
            self.state = 2295
            self.match(PlSqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def COMPUTE(self):
            return self.getToken(PlSqlParser.COMPUTE, 0)

        def STATISTICS(self):
            return self.getToken(PlSqlParser.STATISTICS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)




    def create_index(self):

        localctx = PlSqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(PlSqlParser.CREATE)
            self.state = 2299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.UNIQUE:
                self.state = 2298
                self.match(PlSqlParser.UNIQUE)


            self.state = 2301
            self.match(PlSqlParser.INDEX)
            self.state = 2302
            self.index_name()
            self.state = 2303
            self.match(PlSqlParser.ON)
            self.state = 2304
            self.tableview_name()
            self.state = 2305
            self.paren_column_list()
            self.state = 2308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.TABLESPACE:
                self.state = 2306
                self.match(PlSqlParser.TABLESPACE)
                self.state = 2307
                self.id_expression()


            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMPUTE:
                self.state = 2310
                self.match(PlSqlParser.COMPUTE)
                self.state = 2311
                self.match(PlSqlParser.STATISTICS)


            self.state = 2314
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_index_name = None # Index_nameContext
            self.new_index_name = None # Index_nameContext

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Index_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_index" ):
                listener.enterAlter_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_index" ):
                listener.exitAlter_index(self)




    def alter_index(self):

        localctx = PlSqlParser.Alter_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_alter_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self.match(PlSqlParser.ALTER)
            self.state = 2317
            self.match(PlSqlParser.INDEX)
            self.state = 2318
            localctx.old_index_name = self.index_name()
            self.state = 2319
            self.match(PlSqlParser.RENAME)
            self.state = 2320
            self.match(PlSqlParser.TO)
            self.state = 2321
            localctx.new_index_name = self.index_name()
            self.state = 2322
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def USER(self):
            return self.getToken(PlSqlParser.USER, 0)

        def user_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.User_object_nameContext,0)


        def identified_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Identified_byContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Identified_byContext,i)


        def identified_other_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Identified_other_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Identified_other_clauseContext,i)


        def user_tablespace_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_tablespace_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_tablespace_clauseContext,i)


        def quota_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Quota_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Quota_clauseContext,i)


        def profile_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Profile_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Profile_clauseContext,i)


        def password_expire_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Password_expire_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Password_expire_clauseContext,i)


        def user_lock_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_lock_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_lock_clauseContext,i)


        def user_editions_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_editions_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_editions_clauseContext,i)


        def container_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Container_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Container_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user" ):
                listener.enterCreate_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user" ):
                listener.exitCreate_user(self)




    def create_user(self):

        localctx = PlSqlParser.Create_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_create_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.match(PlSqlParser.CREATE)
            self.state = 2325
            self.match(PlSqlParser.USER)
            self.state = 2326
            self.user_object_name()
            self.state = 2336 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 2327
                    self.identified_by()
                    pass

                elif la_ == 2:
                    self.state = 2328
                    self.identified_other_clause()
                    pass

                elif la_ == 3:
                    self.state = 2329
                    self.user_tablespace_clause()
                    pass

                elif la_ == 4:
                    self.state = 2330
                    self.quota_clause()
                    pass

                elif la_ == 5:
                    self.state = 2331
                    self.profile_clause()
                    pass

                elif la_ == 6:
                    self.state = 2332
                    self.password_expire_clause()
                    pass

                elif la_ == 7:
                    self.state = 2333
                    self.user_lock_clause()
                    pass

                elif la_ == 8:
                    self.state = 2334
                    self.user_editions_clause()
                    pass

                elif la_ == 9:
                    self.state = 2335
                    self.container_clause()
                    pass


                self.state = 2338 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.ACCOUNT or _la==PlSqlParser.CONTAINER or _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ENABLE or _la==PlSqlParser.IDENTIFIED or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PlSqlParser.PASSWORD - 418)) | (1 << (PlSqlParser.PROFILE - 418)) | (1 << (PlSqlParser.QUOTA - 418)))) != 0) or _la==PlSqlParser.TEMPORARY):
                    break

            self.state = 2340
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(PlSqlParser.USER, 0)

        def user_object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_object_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_object_nameContext,i)


        def alter_identified_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Alter_identified_byContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Alter_identified_byContext,i)


        def identified_other_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Identified_other_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Identified_other_clauseContext,i)


        def user_tablespace_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_tablespace_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_tablespace_clauseContext,i)


        def quota_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Quota_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Quota_clauseContext,i)


        def profile_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Profile_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Profile_clauseContext,i)


        def user_default_role_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_default_role_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_default_role_clauseContext,i)


        def password_expire_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Password_expire_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Password_expire_clauseContext,i)


        def user_lock_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_lock_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_lock_clauseContext,i)


        def alter_user_editions_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Alter_user_editions_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Alter_user_editions_clauseContext,i)


        def container_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Container_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Container_clauseContext,i)


        def container_data_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Container_data_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Container_data_clauseContext,i)


        def proxy_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Proxy_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user" ):
                listener.enterAlter_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user" ):
                listener.exitAlter_user(self)




    def alter_user(self):

        localctx = PlSqlParser.Alter_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_alter_user)
        self._la = 0 # Token type
        try:
            self.state = 2373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.match(PlSqlParser.ALTER)
                self.state = 2343
                self.match(PlSqlParser.USER)
                self.state = 2344
                self.user_object_name()
                self.state = 2356 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2356
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                    if la_ == 1:
                        self.state = 2345
                        self.alter_identified_by()
                        pass

                    elif la_ == 2:
                        self.state = 2346
                        self.identified_other_clause()
                        pass

                    elif la_ == 3:
                        self.state = 2347
                        self.user_tablespace_clause()
                        pass

                    elif la_ == 4:
                        self.state = 2348
                        self.quota_clause()
                        pass

                    elif la_ == 5:
                        self.state = 2349
                        self.profile_clause()
                        pass

                    elif la_ == 6:
                        self.state = 2350
                        self.user_default_role_clause()
                        pass

                    elif la_ == 7:
                        self.state = 2351
                        self.password_expire_clause()
                        pass

                    elif la_ == 8:
                        self.state = 2352
                        self.user_lock_clause()
                        pass

                    elif la_ == 9:
                        self.state = 2353
                        self.alter_user_editions_clause()
                        pass

                    elif la_ == 10:
                        self.state = 2354
                        self.container_clause()
                        pass

                    elif la_ == 11:
                        self.state = 2355
                        self.container_data_clause()
                        pass


                    self.state = 2358 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.ACCOUNT or _la==PlSqlParser.ADD or _la==PlSqlParser.CONTAINER or _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ENABLE or _la==PlSqlParser.IDENTIFIED or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & ((1 << (PlSqlParser.PASSWORD - 418)) | (1 << (PlSqlParser.PROFILE - 418)) | (1 << (PlSqlParser.QUOTA - 418)) | (1 << (PlSqlParser.REMOVE - 418)))) != 0) or _la==PlSqlParser.SET or _la==PlSqlParser.TEMPORARY):
                        break

                self.state = 2360
                self.match(PlSqlParser.SEMICOLON)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.COMMA, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2366 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2362
                        self.match(PlSqlParser.COMMA)


                    self.state = 2365
                    self.user_object_name()
                    self.state = 2368 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 2370
                self.proxy_clause()
                self.state = 2371
                self.match(PlSqlParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_identified_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identified_by(self):
            return self.getTypedRuleContext(PlSqlParser.Identified_byContext,0)


        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_identified_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_identified_by" ):
                listener.enterAlter_identified_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_identified_by" ):
                listener.exitAlter_identified_by(self)




    def alter_identified_by(self):

        localctx = PlSqlParser.Alter_identified_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_alter_identified_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.identified_by()
            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REPLACE:
                self.state = 2376
                self.match(PlSqlParser.REPLACE)
                self.state = 2377
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identified_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIED(self):
            return self.getToken(PlSqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_identified_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentified_by" ):
                listener.enterIdentified_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentified_by" ):
                listener.exitIdentified_by(self)




    def identified_by(self):

        localctx = PlSqlParser.Identified_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_identified_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.match(PlSqlParser.IDENTIFIED)
            self.state = 2381
            self.match(PlSqlParser.BY)
            self.state = 2382
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identified_other_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIED(self):
            return self.getToken(PlSqlParser.IDENTIFIED, 0)

        def EXTERNALLY(self):
            return self.getToken(PlSqlParser.EXTERNALLY, 0)

        def GLOBALLY(self):
            return self.getToken(PlSqlParser.GLOBALLY, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_identified_other_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentified_other_clause" ):
                listener.enterIdentified_other_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentified_other_clause" ):
                listener.exitIdentified_other_clause(self)




    def identified_other_clause(self):

        localctx = PlSqlParser.Identified_other_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_identified_other_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(PlSqlParser.IDENTIFIED)
            self.state = 2385
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.EXTERNALLY or _la==PlSqlParser.GLOBALLY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 2386
                self.match(PlSqlParser.AS)
                self.state = 2387
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_tablespace_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def TEMPORARY(self):
            return self.getToken(PlSqlParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_user_tablespace_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_tablespace_clause" ):
                listener.enterUser_tablespace_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_tablespace_clause" ):
                listener.exitUser_tablespace_clause(self)




    def user_tablespace_clause(self):

        localctx = PlSqlParser.User_tablespace_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_user_tablespace_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2390
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.TEMPORARY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2391
            self.match(PlSqlParser.TABLESPACE)
            self.state = 2392
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quota_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTA(self):
            return self.getToken(PlSqlParser.QUOTA, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_quota_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuota_clause" ):
                listener.enterQuota_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuota_clause" ):
                listener.exitQuota_clause(self)




    def quota_clause(self):

        localctx = PlSqlParser.Quota_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_quota_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2394
            self.match(PlSqlParser.QUOTA)
            self.state = 2397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UNSIGNED_INTEGER]:
                self.state = 2395
                self.size_clause()
                pass
            elif token in [PlSqlParser.UNLIMITED]:
                self.state = 2396
                self.match(PlSqlParser.UNLIMITED)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2399
            self.match(PlSqlParser.ON)
            self.state = 2400
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Profile_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROFILE(self):
            return self.getToken(PlSqlParser.PROFILE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_profile_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_clause" ):
                listener.enterProfile_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_clause" ):
                listener.exitProfile_clause(self)




    def profile_clause(self):

        localctx = PlSqlParser.Profile_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_profile_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.match(PlSqlParser.PROFILE)
            self.state = 2403
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Role_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Role_nameContext,i)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EXCEPT)
            else:
                return self.getToken(PlSqlParser.EXCEPT, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_role_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_clause" ):
                listener.enterRole_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_clause" ):
                listener.exitRole_clause(self)




    def role_clause(self):

        localctx = PlSqlParser.Role_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_role_clause)
        self._la = 0 # Token type
        try:
            self.state = 2428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.COMMA, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2409 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2406
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 2405
                            self.match(PlSqlParser.COMMA)


                        self.state = 2408
                        self.role_name()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2411 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                pass
            elif token in [PlSqlParser.ALL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.match(PlSqlParser.ALL)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.EXCEPT:
                    self.state = 2414
                    self.match(PlSqlParser.EXCEPT)
                    self.state = 2419 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2416
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.COMMA:
                                self.state = 2415
                                self.match(PlSqlParser.COMMA)


                            self.state = 2418
                            self.role_name()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2421 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                    self.state = 2427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_default_role_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(PlSqlParser.ROLE, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def role_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Role_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_user_default_role_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_default_role_clause" ):
                listener.enterUser_default_role_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_default_role_clause" ):
                listener.exitUser_default_role_clause(self)




    def user_default_role_clause(self):

        localctx = PlSqlParser.User_default_role_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_user_default_role_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.match(PlSqlParser.DEFAULT)
            self.state = 2431
            self.match(PlSqlParser.ROLE)
            self.state = 2434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2432
                self.match(PlSqlParser.NONE)
                pass

            elif la_ == 2:
                self.state = 2433
                self.role_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Password_expire_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(PlSqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(PlSqlParser.EXPIRE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_password_expire_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_expire_clause" ):
                listener.enterPassword_expire_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_expire_clause" ):
                listener.exitPassword_expire_clause(self)




    def password_expire_clause(self):

        localctx = PlSqlParser.Password_expire_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_password_expire_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(PlSqlParser.PASSWORD)
            self.state = 2437
            self.match(PlSqlParser.EXPIRE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_lock_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(PlSqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(PlSqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(PlSqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_user_lock_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_lock_clause" ):
                listener.enterUser_lock_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_lock_clause" ):
                listener.exitUser_lock_clause(self)




    def user_lock_clause(self):

        localctx = PlSqlParser.User_lock_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_user_lock_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(PlSqlParser.ACCOUNT)
            self.state = 2440
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.LOCK or _la==PlSqlParser.UNLOCK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_editions_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def EDITIONS(self):
            return self.getToken(PlSqlParser.EDITIONS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_user_editions_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_editions_clause" ):
                listener.enterUser_editions_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_editions_clause" ):
                listener.exitUser_editions_clause(self)




    def user_editions_clause(self):

        localctx = PlSqlParser.User_editions_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_user_editions_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2442
            self.match(PlSqlParser.ENABLE)
            self.state = 2443
            self.match(PlSqlParser.EDITIONS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_user_editions_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_editions_clause(self):
            return self.getTypedRuleContext(PlSqlParser.User_editions_clauseContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_user_editions_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user_editions_clause" ):
                listener.enterAlter_user_editions_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user_editions_clause" ):
                listener.exitAlter_user_editions_clause(self)




    def alter_user_editions_clause(self):

        localctx = PlSqlParser.Alter_user_editions_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_alter_user_editions_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.user_editions_clause()
            self.state = 2455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 2446
                self.match(PlSqlParser.FOR)
                self.state = 2451 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 2447
                            self.match(PlSqlParser.COMMA)


                        self.state = 2450
                        self.regular_id()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2453 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)



            self.state = 2458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE:
                self.state = 2457
                self.match(PlSqlParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proxy_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(PlSqlParser.REVOKE, 0)

        def CONNECT(self):
            return self.getToken(PlSqlParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(PlSqlParser.THROUGH, 0)

        def ENTERPRISE(self):
            return self.getToken(PlSqlParser.ENTERPRISE, 0)

        def USERS(self):
            return self.getToken(PlSqlParser.USERS, 0)

        def user_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.User_object_nameContext,0)


        def GRANT(self):
            return self.getToken(PlSqlParser.GRANT, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def AUTHENTICATION(self):
            return self.getToken(PlSqlParser.AUTHENTICATION, 0)

        def REQUIRED(self):
            return self.getToken(PlSqlParser.REQUIRED, 0)

        def AUTHENTICATED(self):
            return self.getToken(PlSqlParser.AUTHENTICATED, 0)

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def ROLES(self):
            return self.getToken(PlSqlParser.ROLES, 0)

        def ROLE(self):
            return self.getToken(PlSqlParser.ROLE, 0)

        def role_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Role_clauseContext,0)


        def PASSWORD(self):
            return self.getToken(PlSqlParser.PASSWORD, 0)

        def CERTIFICATE(self):
            return self.getToken(PlSqlParser.CERTIFICATE, 0)

        def DISTINGUISHED(self):
            return self.getToken(PlSqlParser.DISTINGUISHED, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_proxy_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_clause" ):
                listener.enterProxy_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_clause" ):
                listener.exitProxy_clause(self)




    def proxy_clause(self):

        localctx = PlSqlParser.Proxy_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_proxy_clause)
        self._la = 0 # Token type
        try:
            self.state = 2499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2460
                self.match(PlSqlParser.REVOKE)
                self.state = 2461
                self.match(PlSqlParser.CONNECT)
                self.state = 2462
                self.match(PlSqlParser.THROUGH)
                self.state = 2466
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ENTERPRISE]:
                    self.state = 2463
                    self.match(PlSqlParser.ENTERPRISE)
                    self.state = 2464
                    self.match(PlSqlParser.USERS)
                    pass
                elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                    self.state = 2465
                    self.user_object_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PlSqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2468
                self.match(PlSqlParser.GRANT)
                self.state = 2469
                self.match(PlSqlParser.CONNECT)
                self.state = 2470
                self.match(PlSqlParser.THROUGH)
                self.state = 2497
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ENTERPRISE]:
                    self.state = 2471
                    self.match(PlSqlParser.ENTERPRISE)
                    self.state = 2472
                    self.match(PlSqlParser.USERS)
                    pass
                elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                    self.state = 2473
                    self.user_object_name()
                    self.state = 2481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.WITH:
                        self.state = 2474
                        self.match(PlSqlParser.WITH)
                        self.state = 2479
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.NO]:
                            self.state = 2475
                            self.match(PlSqlParser.NO)
                            self.state = 2476
                            self.match(PlSqlParser.ROLES)
                            pass
                        elif token in [PlSqlParser.ROLE]:
                            self.state = 2477
                            self.match(PlSqlParser.ROLE)
                            self.state = 2478
                            self.role_clause()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 2485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.AUTHENTICATION:
                        self.state = 2483
                        self.match(PlSqlParser.AUTHENTICATION)
                        self.state = 2484
                        self.match(PlSqlParser.REQUIRED)


                    self.state = 2495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.AUTHENTICATED:
                        self.state = 2487
                        self.match(PlSqlParser.AUTHENTICATED)
                        self.state = 2488
                        self.match(PlSqlParser.USING)
                        self.state = 2493
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.PASSWORD]:
                            self.state = 2489
                            self.match(PlSqlParser.PASSWORD)
                            pass
                        elif token in [PlSqlParser.CERTIFICATE]:
                            self.state = 2490
                            self.match(PlSqlParser.CERTIFICATE)
                            pass
                        elif token in [PlSqlParser.DISTINGUISHED]:
                            self.state = 2491
                            self.match(PlSqlParser.DISTINGUISHED)
                            self.state = 2492
                            self.match(PlSqlParser.NAME)
                            pass
                        else:
                            raise NoViableAltException(self)



                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Container_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(PlSqlParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(PlSqlParser.RIGHT_PAREN, 0)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_container_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_names" ):
                listener.enterContainer_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_names" ):
                listener.exitContainer_names(self)




    def container_names(self):

        localctx = PlSqlParser.Container_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_container_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2506 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 2502
                    self.match(PlSqlParser.COMMA)


                self.state = 2505
                self.id_expression()
                self.state = 2508 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 2510
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_container_dataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def CONTAINER_DATA(self):
            return self.getToken(PlSqlParser.CONTAINER_DATA, 0)

        def EQUALS_OP(self):
            return self.getToken(PlSqlParser.EQUALS_OP, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def container_names(self):
            return self.getTypedRuleContext(PlSqlParser.Container_namesContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_set_container_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_container_data" ):
                listener.enterSet_container_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_container_data" ):
                listener.exitSet_container_data(self)




    def set_container_data(self):

        localctx = PlSqlParser.Set_container_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_set_container_data)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2512
            self.match(PlSqlParser.SET)
            self.state = 2513
            self.match(PlSqlParser.CONTAINER_DATA)
            self.state = 2514
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 2518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALL]:
                self.state = 2515
                self.match(PlSqlParser.ALL)
                pass
            elif token in [PlSqlParser.DEFAULT]:
                self.state = 2516
                self.match(PlSqlParser.DEFAULT)
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 2517
                self.container_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_rem_container_dataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER_DATA(self):
            return self.getToken(PlSqlParser.CONTAINER_DATA, 0)

        def EQUALS_OP(self):
            return self.getToken(PlSqlParser.EQUALS_OP, 0)

        def container_names(self):
            return self.getTypedRuleContext(PlSqlParser.Container_namesContext,0)


        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def REMOVE(self):
            return self.getToken(PlSqlParser.REMOVE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_add_rem_container_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_rem_container_data" ):
                listener.enterAdd_rem_container_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_rem_container_data" ):
                listener.exitAdd_rem_container_data(self)




    def add_rem_container_data(self):

        localctx = PlSqlParser.Add_rem_container_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_add_rem_container_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ADD or _la==PlSqlParser.REMOVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2521
            self.match(PlSqlParser.CONTAINER_DATA)
            self.state = 2522
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 2523
            self.container_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Container_data_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_container_data(self):
            return self.getTypedRuleContext(PlSqlParser.Set_container_dataContext,0)


        def add_rem_container_data(self):
            return self.getTypedRuleContext(PlSqlParser.Add_rem_container_dataContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def container_tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Container_tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_container_data_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_data_clause" ):
                listener.enterContainer_data_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_data_clause" ):
                listener.exitContainer_data_clause(self)




    def container_data_clause(self):

        localctx = PlSqlParser.Container_data_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_container_data_clause)
        self._la = 0 # Token type
        try:
            self.state = 2531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2525
                self.set_container_data()
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.REMOVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2526
                self.add_rem_container_data()
                self.state = 2529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.FOR:
                    self.state = 2527
                    self.match(PlSqlParser.FOR)
                    self.state = 2528
                    self.container_tableview_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)




    def drop_index(self):

        localctx = PlSqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_drop_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2533
            self.match(PlSqlParser.DROP)
            self.state = 2534
            self.match(PlSqlParser.INDEX)
            self.state = 2535
            self.index_name()
            self.state = 2536
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.GRANT)
            else:
                return self.getToken(PlSqlParser.GRANT, i)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def grant_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Grant_object_nameContext,0)


        def grantee_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Grantee_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Grantee_nameContext,i)


        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PUBLIC)
            else:
                return self.getToken(PlSqlParser.PUBLIC, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.WITH)
            else:
                return self.getToken(PlSqlParser.WITH, i)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OPTION)
            else:
                return self.getToken(PlSqlParser.OPTION, i)

        def HIERARCHY(self):
            return self.getToken(PlSqlParser.HIERARCHY, 0)

        def container_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Container_clauseContext,0)


        def ADMIN(self):
            return self.getToken(PlSqlParser.ADMIN, 0)

        def DELEGATE(self):
            return self.getToken(PlSqlParser.DELEGATE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Role_nameContext,i)


        def system_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.System_privilegeContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.System_privilegeContext,i)


        def object_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_privilegeContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_privilegeContext,i)


        def paren_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Paren_column_listContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grant_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_statement" ):
                listener.enterGrant_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_statement" ):
                listener.exitGrant_statement(self)




    def grant_statement(self):

        localctx = PlSqlParser.Grant_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_grant_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.match(PlSqlParser.GRANT)
            self.state = 2550 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2539
                        self.match(PlSqlParser.COMMA)


                    self.state = 2548
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        self.state = 2542
                        self.role_name()
                        pass

                    elif la_ == 2:
                        self.state = 2543
                        self.system_privilege()
                        pass

                    elif la_ == 3:
                        self.state = 2544
                        self.object_privilege()
                        self.state = 2546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.LEFT_PAREN:
                            self.state = 2545
                            self.paren_column_list()


                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 2552 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

            self.state = 2556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ON:
                self.state = 2554
                self.match(PlSqlParser.ON)
                self.state = 2555
                self.grant_object_name()


            self.state = 2558
            self.match(PlSqlParser.TO)
            self.state = 2564 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.COMMA, PlSqlParser.REGULAR_ID]:
                    self.state = 2560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2559
                        self.match(PlSqlParser.COMMA)


                    self.state = 2562
                    self.grantee_name()
                    pass
                elif token in [PlSqlParser.PUBLIC]:
                    self.state = 2563
                    self.match(PlSqlParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2566 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (PlSqlParser.PUBLIC - 454)) | (1 << (PlSqlParser.RAISE - 454)) | (1 << (PlSqlParser.RANGE - 454)) | (1 << (PlSqlParser.RAW - 454)) | (1 << (PlSqlParser.READ - 454)) | (1 << (PlSqlParser.REAL - 454)) | (1 << (PlSqlParser.RECORD - 454)) | (1 << (PlSqlParser.REFERENCE - 454)) | (1 << (PlSqlParser.REFERENCING - 454)) | (1 << (PlSqlParser.REF - 454)) | (1 << (PlSqlParser.REJECT - 454)) | (1 << (PlSqlParser.RELIES_ON - 454)) | (1 << (PlSqlParser.RENAME - 454)) | (1 << (PlSqlParser.REPLACE - 454)) | (1 << (PlSqlParser.RESPECT - 454)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 454)) | (1 << (PlSqlParser.RESULT_CACHE - 454)) | (1 << (PlSqlParser.RESULT - 454)) | (1 << (PlSqlParser.RETURNING - 454)) | (1 << (PlSqlParser.RETURN - 454)) | (1 << (PlSqlParser.REUSE - 454)) | (1 << (PlSqlParser.REVERSE - 454)) | (1 << (PlSqlParser.RIGHT - 454)) | (1 << (PlSqlParser.ROLLBACK - 454)) | (1 << (PlSqlParser.ROLLUP - 454)) | (1 << (PlSqlParser.ROWID - 454)) | (1 << (PlSqlParser.ROW - 454)) | (1 << (PlSqlParser.ROWS - 454)) | (1 << (PlSqlParser.RULES - 454)) | (1 << (PlSqlParser.SAMPLE - 454)) | (1 << (PlSqlParser.SAVEPOINT - 454)) | (1 << (PlSqlParser.SAVE - 454)) | (1 << (PlSqlParser.SCHEMACHECK - 454)) | (1 << (PlSqlParser.SCHEMA - 454)) | (1 << (PlSqlParser.SCN - 454)))) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & ((1 << (PlSqlParser.SECOND - 518)) | (1 << (PlSqlParser.SEED - 518)) | (1 << (PlSqlParser.SEGMENT - 518)) | (1 << (PlSqlParser.SELF - 518)) | (1 << (PlSqlParser.SEQUENTIAL - 518)) | (1 << (PlSqlParser.SERIALIZABLE - 518)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 518)) | (1 << (PlSqlParser.SERVERERROR - 518)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 518)) | (1 << (PlSqlParser.SET - 518)) | (1 << (PlSqlParser.SETS - 518)) | (1 << (PlSqlParser.SETTINGS - 518)) | (1 << (PlSqlParser.SHOW - 518)) | (1 << (PlSqlParser.SHUTDOWN - 518)) | (1 << (PlSqlParser.SIBLINGS - 518)) | (1 << (PlSqlParser.SIGNTYPE - 518)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 518)) | (1 << (PlSqlParser.SINGLE - 518)) | (1 << (PlSqlParser.SKIP_ - 518)) | (1 << (PlSqlParser.SMALLINT - 518)) | (1 << (PlSqlParser.SNAPSHOT - 518)) | (1 << (PlSqlParser.SOME - 518)) | (1 << (PlSqlParser.SPECIFICATION - 518)) | (1 << (PlSqlParser.SQLDATA - 518)) | (1 << (PlSqlParser.SQLERROR - 518)) | (1 << (PlSqlParser.SQL - 518)) | (1 << (PlSqlParser.STANDALONE - 518)) | (1 << (PlSqlParser.STARTUP - 518)) | (1 << (PlSqlParser.STATEMENT_ID - 518)) | (1 << (PlSqlParser.STATEMENT - 518)) | (1 << (PlSqlParser.STATIC - 518)) | (1 << (PlSqlParser.STATISTICS - 518)) | (1 << (PlSqlParser.STORE - 518)) | (1 << (PlSqlParser.STRING - 518)) | (1 << (PlSqlParser.SUBMULTISET - 518)) | (1 << (PlSqlParser.SUBPARTITION - 518)) | (1 << (PlSqlParser.SUBSTITUTABLE - 518)) | (1 << (PlSqlParser.SUBTYPE - 518)) | (1 << (PlSqlParser.SUCCESS - 518)) | (1 << (PlSqlParser.SUSPEND - 518)) | (1 << (PlSqlParser.SYSDATE - 518)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (PlSqlParser.TEMPORARY - 586)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP - 586)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIME - 586)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 586)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 586)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 586)) | (1 << (PlSqlParser.TIMEZONE_REGION - 586)) | (1 << (PlSqlParser.TRAILING - 586)) | (1 << (PlSqlParser.TRANSACTION - 586)) | (1 << (PlSqlParser.TRANSLATE - 586)) | (1 << (PlSqlParser.TREAT - 586)) | (1 << (PlSqlParser.TRIGGER - 586)) | (1 << (PlSqlParser.TRUNCATE - 586)) | (1 << (PlSqlParser.TYPE - 586)) | (1 << (PlSqlParser.UNBOUNDED - 586)) | (1 << (PlSqlParser.UNDER - 586)) | (1 << (PlSqlParser.UNLIMITED - 586)) | (1 << (PlSqlParser.UNTIL - 586)) | (1 << (PlSqlParser.UPDATED - 586)) | (1 << (PlSqlParser.UPSERT - 586)) | (1 << (PlSqlParser.UROWID - 586)) | (1 << (PlSqlParser.USERS - 586)) | (1 << (PlSqlParser.USER - 586)) | (1 << (PlSqlParser.USE - 586)) | (1 << (PlSqlParser.VALIDATE - 586)) | (1 << (PlSqlParser.VALUE - 586)) | (1 << (PlSqlParser.VARCHAR2 - 586)) | (1 << (PlSqlParser.VARCHAR - 586)) | (1 << (PlSqlParser.VARIABLE - 586)) | (1 << (PlSqlParser.VARRAY - 586)) | (1 << (PlSqlParser.VARYING - 586)) | (1 << (PlSqlParser.VERSIONS - 586)) | (1 << (PlSqlParser.VERSION - 586)) | (1 << (PlSqlParser.WAIT - 586)) | (1 << (PlSqlParser.WARNING - 586)) | (1 << (PlSqlParser.WELLFORMED - 586)) | (1 << (PlSqlParser.WHENEVER - 586)))) != 0) or ((((_la - 652)) & ~0x3f) == 0 and ((1 << (_la - 652)) & ((1 << (PlSqlParser.WHILE - 652)) | (1 << (PlSqlParser.WITHIN - 652)) | (1 << (PlSqlParser.WORK - 652)) | (1 << (PlSqlParser.WRITE - 652)) | (1 << (PlSqlParser.XMLAGG - 652)) | (1 << (PlSqlParser.XMLATTRIBUTES - 652)) | (1 << (PlSqlParser.XMLCAST - 652)) | (1 << (PlSqlParser.XMLCOLATTVAL - 652)) | (1 << (PlSqlParser.XMLELEMENT - 652)) | (1 << (PlSqlParser.XMLEXISTS - 652)) | (1 << (PlSqlParser.XMLFOREST - 652)) | (1 << (PlSqlParser.XMLNAMESPACES - 652)) | (1 << (PlSqlParser.XMLPARSE - 652)) | (1 << (PlSqlParser.XMLPI - 652)) | (1 << (PlSqlParser.XMLQUERY - 652)) | (1 << (PlSqlParser.XMLROOT - 652)) | (1 << (PlSqlParser.XMLSERIALIZE - 652)) | (1 << (PlSqlParser.XMLTABLE - 652)) | (1 << (PlSqlParser.XMLTYPE - 652)) | (1 << (PlSqlParser.XML - 652)) | (1 << (PlSqlParser.YEAR - 652)) | (1 << (PlSqlParser.YES - 652)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 652)) | (1 << (PlSqlParser.ZONE - 652)) | (1 << (PlSqlParser.PREDICTION - 652)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 652)) | (1 << (PlSqlParser.PREDICTION_COST - 652)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 652)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 652)) | (1 << (PlSqlParser.PREDICTION_SET - 652)) | (1 << (PlSqlParser.CUME_DIST - 652)) | (1 << (PlSqlParser.DENSE_RANK - 652)) | (1 << (PlSqlParser.LISTAGG - 652)) | (1 << (PlSqlParser.PERCENT_RANK - 652)) | (1 << (PlSqlParser.PERCENTILE_CONT - 652)) | (1 << (PlSqlParser.PERCENTILE_DISC - 652)) | (1 << (PlSqlParser.RANK - 652)) | (1 << (PlSqlParser.AVG - 652)) | (1 << (PlSqlParser.CORR - 652)) | (1 << (PlSqlParser.COVAR_ - 652)) | (1 << (PlSqlParser.LAG - 652)) | (1 << (PlSqlParser.LEAD - 652)) | (1 << (PlSqlParser.MAX - 652)) | (1 << (PlSqlParser.MEDIAN - 652)) | (1 << (PlSqlParser.MIN - 652)) | (1 << (PlSqlParser.NTILE - 652)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 652)) | (1 << (PlSqlParser.REGR_ - 652)) | (1 << (PlSqlParser.ROW_NUMBER - 652)) | (1 << (PlSqlParser.SUBSTR - 652)) | (1 << (PlSqlParser.TRIM - 652)) | (1 << (PlSqlParser.SUM - 652)) | (1 << (PlSqlParser.STDDEV - 652)) | (1 << (PlSqlParser.VAR_ - 652)) | (1 << (PlSqlParser.VARIANCE - 652)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 2571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 2568
                self.match(PlSqlParser.WITH)
                self.state = 2569
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ADMIN or _la==PlSqlParser.DELEGATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2570
                self.match(PlSqlParser.OPTION)


            self.state = 2576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 2573
                self.match(PlSqlParser.WITH)
                self.state = 2574
                self.match(PlSqlParser.HIERARCHY)
                self.state = 2575
                self.match(PlSqlParser.OPTION)


            self.state = 2581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WITH:
                self.state = 2578
                self.match(PlSqlParser.WITH)
                self.state = 2579
                self.match(PlSqlParser.GRANT)
                self.state = 2580
                self.match(PlSqlParser.OPTION)


            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CONTAINER:
                self.state = 2583
                self.container_clause()


            self.state = 2586
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Container_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(PlSqlParser.CONTAINER, 0)

        def EQUALS_OP(self):
            return self.getToken(PlSqlParser.EQUALS_OP, 0)

        def CURRENT(self):
            return self.getToken(PlSqlParser.CURRENT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_container_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_clause" ):
                listener.enterContainer_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_clause" ):
                listener.exitContainer_clause(self)




    def container_clause(self):

        localctx = PlSqlParser.Container_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_container_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(PlSqlParser.CONTAINER)
            self.state = 2589
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 2590
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.CURRENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(PlSqlParser.VIEW, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def EDITIONING(self):
            return self.getToken(PlSqlParser.EDITIONING, 0)

        def view_options(self):
            return self.getTypedRuleContext(PlSqlParser.View_optionsContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_restriction_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = PlSqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(PlSqlParser.CREATE)
            self.state = 2595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 2593
                self.match(PlSqlParser.OR)
                self.state = 2594
                self.match(PlSqlParser.REPLACE)


            self.state = 2601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE or _la==PlSqlParser.OR:
                self.state = 2598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OR:
                    self.state = 2597
                    self.match(PlSqlParser.OR)


                self.state = 2600
                self.match(PlSqlParser.FORCE)


            self.state = 2604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EDITIONING:
                self.state = 2603
                self.match(PlSqlParser.EDITIONING)


            self.state = 2606
            self.match(PlSqlParser.VIEW)
            self.state = 2607
            self.tableview_name()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OF or _la==PlSqlParser.LEFT_PAREN:
                self.state = 2608
                self.view_options()


            self.state = 2611
            self.match(PlSqlParser.AS)
            self.state = 2612
            self.subquery()
            self.state = 2614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2613
                self.subquery_restriction_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def view_alias_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.View_alias_constraintContext,0)


        def object_view_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Object_view_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_view_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_options" ):
                listener.enterView_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_options" ):
                listener.exitView_options(self)




    def view_options(self):

        localctx = PlSqlParser.View_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_view_options)
        try:
            self.state = 2618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2616
                self.view_alias_constraint()
                pass
            elif token in [PlSqlParser.OF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2617
                self.object_view_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_alias_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Table_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,i)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Out_of_line_constraintContext,i)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_view_alias_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_alias_constraint" ):
                listener.enterView_alias_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_alias_constraint" ):
                listener.exitView_alias_constraint(self)




    def view_alias_constraint(self):

        localctx = PlSqlParser.View_alias_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_view_alias_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2634 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 2621
                    self.match(PlSqlParser.COMMA)


                self.state = 2632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 2624
                    self.table_alias()
                    self.state = 2628
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2625
                            self.inline_constraint() 
                        self.state = 2630
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 2631
                    self.out_of_line_constraint()
                    pass


                self.state = 2636 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHECK - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FOREIGN - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIMARY - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNIQUE - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (PlSqlParser.CHAR_STRING - 724)) | (1 << (PlSqlParser.DELIMITED_ID - 724)) | (1 << (PlSqlParser.COMMA - 724)) | (1 << (PlSqlParser.INTRODUCER - 724)) | (1 << (PlSqlParser.REGULAR_ID - 724)))) != 0)):
                    break

            self.state = 2638
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_view_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def IDENTIFIER(self):
            return self.getToken(PlSqlParser.IDENTIFIER, 0)

        def ID(self):
            return self.getToken(PlSqlParser.ID, 0)

        def OID(self):
            return self.getToken(PlSqlParser.OID, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def REGULAR_ID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.REGULAR_ID)
            else:
                return self.getToken(PlSqlParser.REGULAR_ID, i)

        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Out_of_line_constraintContext,i)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_view_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_view_clause" ):
                listener.enterObject_view_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_view_clause" ):
                listener.exitObject_view_clause(self)




    def object_view_clause(self):

        localctx = PlSqlParser.Object_view_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_object_view_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2640
            self.match(PlSqlParser.OF)
            self.state = 2641
            self.type_name()
            self.state = 2660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WITH]:
                self.state = 2642
                self.match(PlSqlParser.WITH)
                self.state = 2643
                self.match(PlSqlParser.OBJECT)
                self.state = 2644
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.IDENTIFIER or _la==PlSqlParser.ID or _la==PlSqlParser.OID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2656
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DEFAULT]:
                    self.state = 2645
                    self.match(PlSqlParser.DEFAULT)
                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 2646
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 2651 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2648
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 2647
                            self.match(PlSqlParser.COMMA)


                        self.state = 2650
                        self.match(PlSqlParser.REGULAR_ID)
                        self.state = 2653 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                            break

                    self.state = 2655
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PlSqlParser.UNDER]:
                self.state = 2658
                self.match(PlSqlParser.UNDER)
                self.state = 2659
                self.tableview_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.LEFT_PAREN:
                self.state = 2662
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2671 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2663
                        self.match(PlSqlParser.COMMA)


                    self.state = 2669
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.CHECK, PlSqlParser.CONSTRAINT, PlSqlParser.FOREIGN, PlSqlParser.PRIMARY, PlSqlParser.UNIQUE]:
                        self.state = 2666
                        self.out_of_line_constraint()
                        pass
                    elif token in [PlSqlParser.REGULAR_ID]:
                        self.state = 2667
                        self.match(PlSqlParser.REGULAR_ID)
                        self.state = 2668
                        self.inline_constraint()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2673 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.CHECK or _la==PlSqlParser.CONSTRAINT or _la==PlSqlParser.FOREIGN or _la==PlSqlParser.PRIMARY or _la==PlSqlParser.UNIQUE or _la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                        break

                self.state = 2675
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(PlSqlParser.References_clauseContext,0)


        def check_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Check_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_stateContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_inline_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_constraint" ):
                listener.enterInline_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_constraint" ):
                listener.exitInline_constraint(self)




    def inline_constraint(self):

        localctx = PlSqlParser.Inline_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_inline_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CONSTRAINT:
                self.state = 2682
                self.match(PlSqlParser.CONSTRAINT)
                self.state = 2683
                self.constraint_name()


            self.state = 2695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NOT, PlSqlParser.NULL]:
                self.state = 2687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NOT:
                    self.state = 2686
                    self.match(PlSqlParser.NOT)


                self.state = 2689
                self.match(PlSqlParser.NULL)
                pass
            elif token in [PlSqlParser.UNIQUE]:
                self.state = 2690
                self.match(PlSqlParser.UNIQUE)
                pass
            elif token in [PlSqlParser.PRIMARY]:
                self.state = 2691
                self.match(PlSqlParser.PRIMARY)
                self.state = 2692
                self.match(PlSqlParser.KEY)
                pass
            elif token in [PlSqlParser.REFERENCES]:
                self.state = 2693
                self.references_clause()
                pass
            elif token in [PlSqlParser.CHECK]:
                self.state = 2694
                self.check_constraint()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 2697
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(PlSqlParser.SCOPE, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def references_clause(self):
            return self.getTypedRuleContext(PlSqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_stateContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_inline_ref_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_ref_constraint" ):
                listener.enterInline_ref_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_ref_constraint" ):
                listener.exitInline_ref_constraint(self)




    def inline_ref_constraint(self):

        localctx = PlSqlParser.Inline_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_inline_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2700
                self.match(PlSqlParser.SCOPE)
                self.state = 2701
                self.match(PlSqlParser.IS)
                self.state = 2702
                self.tableview_name()
                pass
            elif token in [PlSqlParser.WITH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2703
                self.match(PlSqlParser.WITH)
                self.state = 2704
                self.match(PlSqlParser.ROWID)
                pass
            elif token in [PlSqlParser.CONSTRAINT, PlSqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CONSTRAINT:
                    self.state = 2705
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 2706
                    self.constraint_name()


                self.state = 2709
                self.references_clause()
                self.state = 2711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2710
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Out_of_line_ref_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ref_col_or_attr = None # Regular_idContext

        def SCOPE(self):
            return self.getToken(PlSqlParser.SCOPE, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def FOREIGN(self):
            return self.getToken(PlSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def references_clause(self):
            return self.getTypedRuleContext(PlSqlParser.References_clauseContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def constraint_state(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_stateContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_out_of_line_ref_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_ref_constraint" ):
                listener.enterOut_of_line_ref_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_ref_constraint" ):
                listener.exitOut_of_line_ref_constraint(self)




    def out_of_line_ref_constraint(self):

        localctx = PlSqlParser.Out_of_line_ref_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_out_of_line_ref_constraint)
        self._la = 0 # Token type
        try:
            self.state = 2750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SCOPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2715
                self.match(PlSqlParser.SCOPE)
                self.state = 2716
                self.match(PlSqlParser.FOR)
                self.state = 2717
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2718
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2719
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 2720
                self.match(PlSqlParser.IS)
                self.state = 2721
                self.tableview_name()
                pass
            elif token in [PlSqlParser.REF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2723
                self.match(PlSqlParser.REF)
                self.state = 2724
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2725
                localctx.ref_col_or_attr = self.regular_id()
                self.state = 2726
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 2727
                self.match(PlSqlParser.WITH)
                self.state = 2728
                self.match(PlSqlParser.ROWID)
                pass
            elif token in [PlSqlParser.CONSTRAINT, PlSqlParser.FOREIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CONSTRAINT:
                    self.state = 2730
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 2731
                    self.constraint_name()


                self.state = 2734
                self.match(PlSqlParser.FOREIGN)
                self.state = 2735
                self.match(PlSqlParser.KEY)
                self.state = 2736
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2737
                        self.match(PlSqlParser.COMMA)


                    self.state = 2740
                    localctx.ref_col_or_attr = self.regular_id()
                    self.state = 2743 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                        break

                self.state = 2745
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 2746
                self.references_clause()
                self.state = 2748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 2747
                    self.constraint_state()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Out_of_line_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_state(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_stateContext,0)


        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Foreign_key_clauseContext,0)


        def CHECK(self):
            return self.getToken(PlSqlParser.CHECK, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_out_of_line_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_constraint" ):
                listener.enterOut_of_line_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_constraint" ):
                listener.exitOut_of_line_constraint(self)




    def out_of_line_constraint(self):

        localctx = PlSqlParser.Out_of_line_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_out_of_line_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CONSTRAINT:
                self.state = 2752
                self.match(PlSqlParser.CONSTRAINT)
                self.state = 2753
                self.constraint_name()


            self.state = 2787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UNIQUE]:
                self.state = 2756
                self.match(PlSqlParser.UNIQUE)
                self.state = 2757
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2762 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2758
                        self.match(PlSqlParser.COMMA)


                    self.state = 2761
                    self.column_name()
                    self.state = 2764 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 2766
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.PRIMARY]:
                self.state = 2768
                self.match(PlSqlParser.PRIMARY)
                self.state = 2769
                self.match(PlSqlParser.KEY)
                self.state = 2770
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2775 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2771
                        self.match(PlSqlParser.COMMA)


                    self.state = 2774
                    self.column_name()
                    self.state = 2777 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 2779
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.FOREIGN]:
                self.state = 2781
                self.foreign_key_clause()
                pass
            elif token in [PlSqlParser.CHECK]:
                self.state = 2782
                self.match(PlSqlParser.CHECK)
                self.state = 2783
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2784
                self.expression()
                self.state = 2785
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2789
                self.constraint_state()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFERRABLE)
            else:
                return self.getToken(PlSqlParser.DEFERRABLE, i)

        def INITIALLY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INITIALLY)
            else:
                return self.getToken(PlSqlParser.INITIALLY, i)

        def IMMEDIATE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IMMEDIATE)
            else:
                return self.getToken(PlSqlParser.IMMEDIATE, i)

        def DEFERRED(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFERRED)
            else:
                return self.getToken(PlSqlParser.DEFERRED, i)

        def RELY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.RELY)
            else:
                return self.getToken(PlSqlParser.RELY, i)

        def NORELY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NORELY)
            else:
                return self.getToken(PlSqlParser.NORELY, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENABLE)
            else:
                return self.getToken(PlSqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DISABLE)
            else:
                return self.getToken(PlSqlParser.DISABLE, i)

        def VALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.VALIDATE)
            else:
                return self.getToken(PlSqlParser.VALIDATE, i)

        def NOVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOVALIDATE)
            else:
                return self.getToken(PlSqlParser.NOVALIDATE, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOT)
            else:
                return self.getToken(PlSqlParser.NOT, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_constraint_state

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_state" ):
                listener.enterConstraint_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_state" ):
                listener.exitConstraint_state(self)




    def constraint_state(self):

        localctx = PlSqlParser.Constraint_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_constraint_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2801
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.DEFERRABLE, PlSqlParser.NOT]:
                        self.state = 2793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.NOT:
                            self.state = 2792
                            self.match(PlSqlParser.NOT)


                        self.state = 2795
                        self.match(PlSqlParser.DEFERRABLE)
                        pass
                    elif token in [PlSqlParser.INITIALLY]:
                        self.state = 2796
                        self.match(PlSqlParser.INITIALLY)
                        self.state = 2797
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.DEFERRED or _la==PlSqlParser.IMMEDIATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [PlSqlParser.NORELY, PlSqlParser.RELY]:
                        self.state = 2798
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.NORELY or _la==PlSqlParser.RELY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [PlSqlParser.DISABLE, PlSqlParser.ENABLE]:
                        self.state = 2799
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [PlSqlParser.NOVALIDATE, PlSqlParser.VALIDATE]:
                        self.state = 2800
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.NOVALIDATE or _la==PlSqlParser.VALIDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2803 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def permanent_tablespace_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Permanent_tablespace_clauseContext,0)


        def temporary_tablespace_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Temporary_tablespace_clauseContext,0)


        def undo_tablespace_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Undo_tablespace_clauseContext,0)


        def BIGFILE(self):
            return self.getToken(PlSqlParser.BIGFILE, 0)

        def SMALLFILE(self):
            return self.getToken(PlSqlParser.SMALLFILE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_tablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_tablespace" ):
                listener.enterCreate_tablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_tablespace" ):
                listener.exitCreate_tablespace(self)




    def create_tablespace(self):

        localctx = PlSqlParser.Create_tablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_create_tablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2805
            self.match(PlSqlParser.CREATE)
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BIGFILE or _la==PlSqlParser.SMALLFILE:
                self.state = 2806
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BIGFILE or _la==PlSqlParser.SMALLFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLESPACE]:
                self.state = 2809
                self.permanent_tablespace_clause()
                pass
            elif token in [PlSqlParser.TEMPORARY]:
                self.state = 2810
                self.temporary_tablespace_clause()
                pass
            elif token in [PlSqlParser.UNDO]:
                self.state = 2811
                self.undo_tablespace_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2814
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Permanent_tablespace_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def datafile_specification(self):
            return self.getTypedRuleContext(PlSqlParser.Datafile_specificationContext,0)


        def MINIMUM(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MINIMUM)
            else:
                return self.getToken(PlSqlParser.MINIMUM, i)

        def EXTENT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EXTENT)
            else:
                return self.getToken(PlSqlParser.EXTENT, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,i)


        def BLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BLOCKSIZE)
            else:
                return self.getToken(PlSqlParser.BLOCKSIZE, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FORCE)
            else:
                return self.getToken(PlSqlParser.FORCE, i)

        def LOGGING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOGGING)
            else:
                return self.getToken(PlSqlParser.LOGGING, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENCRYPTION)
            else:
                return self.getToken(PlSqlParser.ENCRYPTION, i)

        def tablespace_encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Tablespace_encryption_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Tablespace_encryption_specContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFAULT)
            else:
                return self.getToken(PlSqlParser.DEFAULT, i)

        def extent_management_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Extent_management_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Extent_management_clauseContext,i)


        def segment_management_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Segment_management_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Segment_management_clauseContext,i)


        def flashback_mode_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Flashback_mode_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Flashback_mode_clauseContext,i)


        def ONLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ONLINE)
            else:
                return self.getToken(PlSqlParser.ONLINE, i)

        def OFFLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OFFLINE)
            else:
                return self.getToken(PlSqlParser.OFFLINE, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_permanent_tablespace_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermanent_tablespace_clause" ):
                listener.enterPermanent_tablespace_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermanent_tablespace_clause" ):
                listener.exitPermanent_tablespace_clause(self)




    def permanent_tablespace_clause(self):

        localctx = PlSqlParser.Permanent_tablespace_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_permanent_tablespace_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.match(PlSqlParser.TABLESPACE)
            self.state = 2817
            self.id_expression()
            self.state = 2819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DATAFILE:
                self.state = 2818
                self.datafile_specification()


            self.state = 2838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.BLOCKSIZE or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (PlSqlParser.DEFAULT - 141)) | (1 << (PlSqlParser.ENCRYPTION - 141)) | (1 << (PlSqlParser.EXTENT - 141)))) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & ((1 << (PlSqlParser.FILESYSTEM_LIKE_LOGGING - 205)) | (1 << (PlSqlParser.FLASHBACK - 205)) | (1 << (PlSqlParser.FORCE - 205)))) != 0) or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (PlSqlParser.LOGGING - 305)) | (1 << (PlSqlParser.MINIMUM - 305)) | (1 << (PlSqlParser.NOLOGGING - 305)))) != 0) or _la==PlSqlParser.OFFLINE or _la==PlSqlParser.ONLINE or _la==PlSqlParser.SEGMENT:
                self.state = 2836
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.MINIMUM]:
                    self.state = 2821
                    self.match(PlSqlParser.MINIMUM)
                    self.state = 2822
                    self.match(PlSqlParser.EXTENT)
                    self.state = 2823
                    self.size_clause()
                    pass
                elif token in [PlSqlParser.BLOCKSIZE]:
                    self.state = 2824
                    self.match(PlSqlParser.BLOCKSIZE)
                    self.state = 2825
                    self.size_clause()
                    pass
                elif token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING]:
                    self.state = 2826
                    self.logging_clause()
                    pass
                elif token in [PlSqlParser.FORCE]:
                    self.state = 2827
                    self.match(PlSqlParser.FORCE)
                    self.state = 2828
                    self.match(PlSqlParser.LOGGING)
                    pass
                elif token in [PlSqlParser.OFFLINE, PlSqlParser.ONLINE]:
                    self.state = 2829
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.OFFLINE or _la==PlSqlParser.ONLINE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [PlSqlParser.ENCRYPTION]:
                    self.state = 2830
                    self.match(PlSqlParser.ENCRYPTION)
                    self.state = 2831
                    self.tablespace_encryption_spec()
                    pass
                elif token in [PlSqlParser.DEFAULT]:
                    self.state = 2832
                    self.match(PlSqlParser.DEFAULT)
                    pass
                elif token in [PlSqlParser.EXTENT]:
                    self.state = 2833
                    self.extent_management_clause()
                    pass
                elif token in [PlSqlParser.SEGMENT]:
                    self.state = 2834
                    self.segment_management_clause()
                    pass
                elif token in [PlSqlParser.FLASHBACK]:
                    self.state = 2835
                    self.flashback_mode_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tablespace_encryption_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.encrypt_algorithm = None # Token

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_tablespace_encryption_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespace_encryption_spec" ):
                listener.enterTablespace_encryption_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespace_encryption_spec" ):
                listener.exitTablespace_encryption_spec(self)




    def tablespace_encryption_spec(self):

        localctx = PlSqlParser.Tablespace_encryption_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tablespace_encryption_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            self.match(PlSqlParser.USING)
            self.state = 2842
            localctx.encrypt_algorithm = self.match(PlSqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(PlSqlParser.LOGGING, 0)

        def NOLOGGING(self):
            return self.getToken(PlSqlParser.NOLOGGING, 0)

        def FILESYSTEM_LIKE_LOGGING(self):
            return self.getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_clause" ):
                listener.enterLogging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_clause" ):
                listener.exitLogging_clause(self)




    def logging_clause(self):

        localctx = PlSqlParser.Logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2844
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extent_management_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENT(self):
            return self.getToken(PlSqlParser.EXTENT, 0)

        def MANAGEMENT(self):
            return self.getToken(PlSqlParser.MANAGEMENT, 0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def AUTOALLOCATE(self):
            return self.getToken(PlSqlParser.AUTOALLOCATE, 0)

        def UNIFORM(self):
            return self.getToken(PlSqlParser.UNIFORM, 0)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_extent_management_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtent_management_clause" ):
                listener.enterExtent_management_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtent_management_clause" ):
                listener.exitExtent_management_clause(self)




    def extent_management_clause(self):

        localctx = PlSqlParser.Extent_management_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_extent_management_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2846
            self.match(PlSqlParser.EXTENT)
            self.state = 2847
            self.match(PlSqlParser.MANAGEMENT)
            self.state = 2848
            self.match(PlSqlParser.LOCAL)
            self.state = 2855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AUTOALLOCATE]:
                self.state = 2849
                self.match(PlSqlParser.AUTOALLOCATE)
                pass
            elif token in [PlSqlParser.UNIFORM]:
                self.state = 2850
                self.match(PlSqlParser.UNIFORM)
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.SIZE:
                    self.state = 2851
                    self.match(PlSqlParser.SIZE)
                    self.state = 2852
                    self.size_clause()


                pass
            elif token in [PlSqlParser.BLOCKSIZE, PlSqlParser.DEFAULT, PlSqlParser.ENCRYPTION, PlSqlParser.EXTENT, PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.FLASHBACK, PlSqlParser.FORCE, PlSqlParser.LOGGING, PlSqlParser.MINIMUM, PlSqlParser.NOLOGGING, PlSqlParser.OFFLINE, PlSqlParser.ONLINE, PlSqlParser.RETENTION, PlSqlParser.SEGMENT, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Segment_management_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def SPACE_KEYWORD(self):
            return self.getToken(PlSqlParser.SPACE_KEYWORD, 0)

        def MANAGEMENT(self):
            return self.getToken(PlSqlParser.MANAGEMENT, 0)

        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def MANUAL(self):
            return self.getToken(PlSqlParser.MANUAL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_segment_management_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment_management_clause" ):
                listener.enterSegment_management_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment_management_clause" ):
                listener.exitSegment_management_clause(self)




    def segment_management_clause(self):

        localctx = PlSqlParser.Segment_management_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_segment_management_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self.match(PlSqlParser.SEGMENT)
            self.state = 2858
            self.match(PlSqlParser.SPACE_KEYWORD)
            self.state = 2859
            self.match(PlSqlParser.MANAGEMENT)
            self.state = 2860
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AUTO or _la==PlSqlParser.MANUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_mode_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLASHBACK(self):
            return self.getToken(PlSqlParser.FLASHBACK, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_flashback_mode_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_mode_clause" ):
                listener.enterFlashback_mode_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_mode_clause" ):
                listener.exitFlashback_mode_clause(self)




    def flashback_mode_clause(self):

        localctx = PlSqlParser.Flashback_mode_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_flashback_mode_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(PlSqlParser.FLASHBACK)
            self.state = 2863
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.OFF or _la==PlSqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Temporary_tablespace_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def TEMPORARY(self):
            return self.getToken(PlSqlParser.TEMPORARY, 0)

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def tempfile_specification(self):
            return self.getTypedRuleContext(PlSqlParser.Tempfile_specificationContext,0)


        def tablespace_group_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Tablespace_group_clauseContext,0)


        def extent_management_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Extent_management_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_temporary_tablespace_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporary_tablespace_clause" ):
                listener.enterTemporary_tablespace_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporary_tablespace_clause" ):
                listener.exitTemporary_tablespace_clause(self)




    def temporary_tablespace_clause(self):

        localctx = PlSqlParser.Temporary_tablespace_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_temporary_tablespace_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            self.match(PlSqlParser.TEMPORARY)
            self.state = 2866
            self.match(PlSqlParser.TABLESPACE)
            self.state = 2867
            localctx.tablespace_name = self.id_expression()
            self.state = 2869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.TEMPFILE:
                self.state = 2868
                self.tempfile_specification()


            self.state = 2872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.TABLESPACE:
                self.state = 2871
                self.tablespace_group_clause()


            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXTENT:
                self.state = 2874
                self.extent_management_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tablespace_group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_tablespace_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespace_group_clause" ):
                listener.enterTablespace_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespace_group_clause" ):
                listener.exitTablespace_group_clause(self)




    def tablespace_group_clause(self):

        localctx = PlSqlParser.Tablespace_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_tablespace_group_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2877
            self.match(PlSqlParser.TABLESPACE)
            self.state = 2878
            self.match(PlSqlParser.GROUP)
            self.state = 2879
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CHAR_STRING or _la==PlSqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Undo_tablespace_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def UNDO(self):
            return self.getToken(PlSqlParser.UNDO, 0)

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def datafile_specification(self):
            return self.getTypedRuleContext(PlSqlParser.Datafile_specificationContext,0)


        def extent_management_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Extent_management_clauseContext,0)


        def tablespace_retention_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Tablespace_retention_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_undo_tablespace_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndo_tablespace_clause" ):
                listener.enterUndo_tablespace_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndo_tablespace_clause" ):
                listener.exitUndo_tablespace_clause(self)




    def undo_tablespace_clause(self):

        localctx = PlSqlParser.Undo_tablespace_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_undo_tablespace_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self.match(PlSqlParser.UNDO)
            self.state = 2882
            self.match(PlSqlParser.TABLESPACE)
            self.state = 2883
            localctx.tablespace_name = self.id_expression()
            self.state = 2885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DATAFILE:
                self.state = 2884
                self.datafile_specification()


            self.state = 2888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXTENT:
                self.state = 2887
                self.extent_management_clause()


            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETENTION:
                self.state = 2890
                self.tablespace_retention_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tablespace_retention_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETENTION(self):
            return self.getToken(PlSqlParser.RETENTION, 0)

        def GUARANTEE(self):
            return self.getToken(PlSqlParser.GUARANTEE, 0)

        def NOGUARANTEE(self):
            return self.getToken(PlSqlParser.NOGUARANTEE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_tablespace_retention_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespace_retention_clause" ):
                listener.enterTablespace_retention_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespace_retention_clause" ):
                listener.exitTablespace_retention_clause(self)




    def tablespace_retention_clause(self):

        localctx = PlSqlParser.Tablespace_retention_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_tablespace_retention_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2893
            self.match(PlSqlParser.RETENTION)
            self.state = 2894
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.GUARANTEE or _la==PlSqlParser.NOGUARANTEE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Datafile_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAFILE(self):
            return self.getToken(PlSqlParser.DATAFILE, 0)

        def datafile_tempfile_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Datafile_tempfile_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_datafile_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatafile_specification" ):
                listener.enterDatafile_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatafile_specification" ):
                listener.exitDatafile_specification(self)




    def datafile_specification(self):

        localctx = PlSqlParser.Datafile_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_datafile_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            self.match(PlSqlParser.DATAFILE)

            self.state = 2898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 2897
                self.match(PlSqlParser.COMMA)


            self.state = 2900
            self.datafile_tempfile_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tempfile_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPFILE(self):
            return self.getToken(PlSqlParser.TEMPFILE, 0)

        def datafile_tempfile_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Datafile_tempfile_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_tempfile_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTempfile_specification" ):
                listener.enterTempfile_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTempfile_specification" ):
                listener.exitTempfile_specification(self)




    def tempfile_specification(self):

        localctx = PlSqlParser.Tempfile_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_tempfile_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2902
            self.match(PlSqlParser.TEMPFILE)

            self.state = 2904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 2903
                self.match(PlSqlParser.COMMA)


            self.state = 2906
            self.datafile_tempfile_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Datafile_tempfile_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def autoextend_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Autoextend_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_datafile_tempfile_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatafile_tempfile_spec" ):
                listener.enterDatafile_tempfile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatafile_tempfile_spec" ):
                listener.exitDatafile_tempfile_spec(self)




    def datafile_tempfile_spec(self):

        localctx = PlSqlParser.Datafile_tempfile_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_datafile_tempfile_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CHAR_STRING:
                self.state = 2908
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 2913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SIZE:
                self.state = 2911
                self.match(PlSqlParser.SIZE)
                self.state = 2912
                self.size_clause()


            self.state = 2916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 2915
                self.match(PlSqlParser.REUSE)


            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTOEXTEND:
                self.state = 2918
                self.autoextend_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Redo_log_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAFILE(self):
            return self.getToken(PlSqlParser.DATAFILE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,i)


        def BLOCKSIZE(self):
            return self.getToken(PlSqlParser.BLOCKSIZE, 0)

        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_redo_log_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedo_log_file_spec" ):
                listener.enterRedo_log_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedo_log_file_spec" ):
                listener.exitRedo_log_file_spec(self)




    def redo_log_file_spec(self):

        localctx = PlSqlParser.Redo_log_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_redo_log_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            self.match(PlSqlParser.DATAFILE)
            self.state = 2933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CHAR_STRING]:
                self.state = 2922
                self.match(PlSqlParser.CHAR_STRING)
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 2923
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2928 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2924
                        self.match(PlSqlParser.COMMA)


                    self.state = 2927
                    self.match(PlSqlParser.CHAR_STRING)
                    self.state = 2930 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.CHAR_STRING or _la==PlSqlParser.COMMA):
                        break

                self.state = 2932
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.BLOCKSIZE, PlSqlParser.REUSE, PlSqlParser.SIZE]:
                pass
            else:
                pass
            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SIZE:
                self.state = 2935
                self.match(PlSqlParser.SIZE)
                self.state = 2936
                self.size_clause()


            self.state = 2941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BLOCKSIZE:
                self.state = 2939
                self.match(PlSqlParser.BLOCKSIZE)
                self.state = 2940
                self.size_clause()


            self.state = 2944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 2943
                self.match(PlSqlParser.REUSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Autoextend_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOEXTEND(self):
            return self.getToken(PlSqlParser.AUTOEXTEND, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def NEXT(self):
            return self.getToken(PlSqlParser.NEXT, 0)

        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def maxsize_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Maxsize_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_autoextend_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoextend_clause" ):
                listener.enterAutoextend_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoextend_clause" ):
                listener.exitAutoextend_clause(self)




    def autoextend_clause(self):

        localctx = PlSqlParser.Autoextend_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_autoextend_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            self.match(PlSqlParser.AUTOEXTEND)
            self.state = 2956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.OFF]:
                self.state = 2947
                self.match(PlSqlParser.OFF)
                pass
            elif token in [PlSqlParser.ON]:
                self.state = 2948
                self.match(PlSqlParser.ON)
                self.state = 2951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NEXT:
                    self.state = 2949
                    self.match(PlSqlParser.NEXT)
                    self.state = 2950
                    self.size_clause()


                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.MAXSIZE:
                    self.state = 2953
                    self.maxsize_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maxsize_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSIZE(self):
            return self.getToken(PlSqlParser.MAXSIZE, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_maxsize_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxsize_clause" ):
                listener.enterMaxsize_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxsize_clause" ):
                listener.exitMaxsize_clause(self)




    def maxsize_clause(self):

        localctx = PlSqlParser.Maxsize_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_maxsize_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.match(PlSqlParser.MAXSIZE)
            self.state = 2961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UNLIMITED]:
                self.state = 2959
                self.match(PlSqlParser.UNLIMITED)
                pass
            elif token in [PlSqlParser.UNSIGNED_INTEGER]:
                self.state = 2960
                self.size_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD(self):
            return self.getToken(PlSqlParser.BUILD, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_build_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_clause" ):
                listener.enterBuild_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_clause" ):
                listener.exitBuild_clause(self)




    def build_clause(self):

        localctx = PlSqlParser.Build_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_build_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.match(PlSqlParser.BUILD)
            self.state = 2964
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFERRED or _la==PlSqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parallel_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parallel_count = None # Token

        def NOPARALLEL(self):
            return self.getToken(PlSqlParser.NOPARALLEL, 0)

        def PARALLEL(self):
            return self.getToken(PlSqlParser.PARALLEL, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_parallel_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_clause" ):
                listener.enterParallel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_clause" ):
                listener.exitParallel_clause(self)




    def parallel_clause(self):

        localctx = PlSqlParser.Parallel_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_parallel_clause)
        self._la = 0 # Token type
        try:
            self.state = 2971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NOPARALLEL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2966
                self.match(PlSqlParser.NOPARALLEL)
                pass
            elif token in [PlSqlParser.PARALLEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2967
                self.match(PlSqlParser.PARALLEL)
                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.UNSIGNED_INTEGER:
                    self.state = 2968
                    localctx.parallel_count = self.match(PlSqlParser.UNSIGNED_INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_materialized_view_logContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(PlSqlParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PlSqlParser.VIEW, 0)

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.WITH)
            else:
                return self.getToken(PlSqlParser.WITH, i)

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLESPACE)
            else:
                return self.getToken(PlSqlParser.TABLESPACE, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def mv_log_purge_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Mv_log_purge_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Mv_log_purge_clauseContext,i)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CACHE)
            else:
                return self.getToken(PlSqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCACHE)
            else:
                return self.getToken(PlSqlParser.NOCACHE, i)

        def OBJECT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OBJECT)
            else:
                return self.getToken(PlSqlParser.OBJECT, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ID)
            else:
                return self.getToken(PlSqlParser.ID, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PRIMARY)
            else:
                return self.getToken(PlSqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.KEY)
            else:
                return self.getToken(PlSqlParser.KEY, i)

        def ROWID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROWID)
            else:
                return self.getToken(PlSqlParser.ROWID, i)

        def SEQUENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SEQUENCE)
            else:
                return self.getToken(PlSqlParser.SEQUENCE, i)

        def COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.COMMIT)
            else:
                return self.getToken(PlSqlParser.COMMIT, i)

        def SCN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SCN)
            else:
                return self.getToken(PlSqlParser.SCN, i)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def new_values_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.New_values_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.New_values_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_materialized_view_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_materialized_view_log" ):
                listener.enterCreate_materialized_view_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_materialized_view_log" ):
                listener.exitCreate_materialized_view_log(self)




    def create_materialized_view_log(self):

        localctx = PlSqlParser.Create_materialized_view_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_create_materialized_view_log)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.match(PlSqlParser.CREATE)
            self.state = 2974
            self.match(PlSqlParser.MATERIALIZED)
            self.state = 2975
            self.match(PlSqlParser.VIEW)
            self.state = 2976
            self.match(PlSqlParser.LOG)
            self.state = 2977
            self.match(PlSqlParser.ON)
            self.state = 2978
            self.tableview_name()
            self.state = 2988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CACHE or _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (PlSqlParser.LOGGING - 305)) | (1 << (PlSqlParser.NOCACHE - 305)) | (1 << (PlSqlParser.NOLOGGING - 305)))) != 0) or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                self.state = 2984 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2984
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.INITRANS, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE]:
                        self.state = 2979
                        self.physical_attributes_clause()
                        pass
                    elif token in [PlSqlParser.TABLESPACE]:
                        self.state = 2980
                        self.match(PlSqlParser.TABLESPACE)
                        self.state = 2981
                        localctx.tablespace_name = self.id_expression()
                        pass
                    elif token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING]:
                        self.state = 2982
                        self.logging_clause()
                        pass
                    elif token in [PlSqlParser.CACHE, PlSqlParser.NOCACHE]:
                        self.state = 2983
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2986 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.CACHE or _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (PlSqlParser.LOGGING - 305)) | (1 << (PlSqlParser.NOCACHE - 305)) | (1 << (PlSqlParser.NOLOGGING - 305)))) != 0) or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE):
                        break



            self.state = 2991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                self.state = 2990
                self.parallel_clause()


            self.state = 3032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2993
                    self.match(PlSqlParser.WITH)
                    self.state = 3009
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2995
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.COMMA:
                                self.state = 2994
                                self.match(PlSqlParser.COMMA)


                            self.state = 3005
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [PlSqlParser.OBJECT]:
                                self.state = 2997
                                self.match(PlSqlParser.OBJECT)
                                self.state = 2998
                                self.match(PlSqlParser.ID)
                                pass
                            elif token in [PlSqlParser.PRIMARY]:
                                self.state = 2999
                                self.match(PlSqlParser.PRIMARY)
                                self.state = 3000
                                self.match(PlSqlParser.KEY)
                                pass
                            elif token in [PlSqlParser.ROWID]:
                                self.state = 3001
                                self.match(PlSqlParser.ROWID)
                                pass
                            elif token in [PlSqlParser.SEQUENCE]:
                                self.state = 3002
                                self.match(PlSqlParser.SEQUENCE)
                                pass
                            elif token in [PlSqlParser.COMMIT]:
                                self.state = 3003
                                self.match(PlSqlParser.COMMIT)
                                self.state = 3004
                                self.match(PlSqlParser.SCN)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 3011
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

                    self.state = 3025
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                    if la_ == 1:
                        self.state = 3012
                        self.match(PlSqlParser.LEFT_PAREN)
                        self.state = 3017 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3014
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.COMMA:
                                self.state = 3013
                                self.match(PlSqlParser.COMMA)


                            self.state = 3016
                            self.regular_id()
                            self.state = 3019 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                                break

                        self.state = 3021
                        self.match(PlSqlParser.RIGHT_PAREN)
                        self.state = 3023
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                        if la_ == 1:
                            self.state = 3022
                            self.new_values_clause()




                    self.state = 3028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.PURGE:
                        self.state = 3027
                        self.mv_log_purge_clause()

             
                self.state = 3034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(PlSqlParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_new_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_values_clause" ):
                listener.enterNew_values_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_values_clause" ):
                listener.exitNew_values_clause(self)




    def new_values_clause(self):

        localctx = PlSqlParser.New_values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_new_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.EXCLUDING or _la==PlSqlParser.INCLUDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3036
            self.match(PlSqlParser.NEW)
            self.state = 3037
            self.match(PlSqlParser.VALUES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mv_log_purge_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURGE(self):
            return self.getToken(PlSqlParser.PURGE, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def SYNCHRONOUS(self):
            return self.getToken(PlSqlParser.SYNCHRONOUS, 0)

        def ASYNCHRONOUS(self):
            return self.getToken(PlSqlParser.ASYNCHRONOUS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_mv_log_purge_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMv_log_purge_clause" ):
                listener.enterMv_log_purge_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMv_log_purge_clause" ):
                listener.exitMv_log_purge_clause(self)




    def mv_log_purge_clause(self):

        localctx = PlSqlParser.Mv_log_purge_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_mv_log_purge_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.match(PlSqlParser.PURGE)

            self.state = 3040
            self.match(PlSqlParser.IMMEDIATE)
            self.state = 3042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ASYNCHRONOUS or _la==PlSqlParser.SYNCHRONOUS:
                self.state = 3041
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ASYNCHRONOUS or _la==PlSqlParser.SYNCHRONOUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_materialized_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mv_tablespace = None # Id_expressionContext

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(PlSqlParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PlSqlParser.VIEW, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def PREBUILT(self):
            return self.getToken(PlSqlParser.PREBUILT, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def create_mv_refresh(self):
            return self.getTypedRuleContext(PlSqlParser.Create_mv_refreshContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def QUERY(self):
            return self.getToken(PlSqlParser.QUERY, 0)

        def REWRITE(self):
            return self.getToken(PlSqlParser.REWRITE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def REDUCED(self):
            return self.getToken(PlSqlParser.REDUCED, 0)

        def PRECISION(self):
            return self.getToken(PlSqlParser.PRECISION, 0)

        def physical_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Physical_propertiesContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def build_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Build_clauseContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(PlSqlParser.WITHOUT, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLESPACE)
            else:
                return self.getToken(PlSqlParser.TABLESPACE, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_materialized_view" ):
                listener.enterCreate_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_materialized_view" ):
                listener.exitCreate_materialized_view(self)




    def create_materialized_view(self):

        localctx = PlSqlParser.Create_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_create_materialized_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self.match(PlSqlParser.CREATE)
            self.state = 3045
            self.match(PlSqlParser.MATERIALIZED)
            self.state = 3046
            self.match(PlSqlParser.VIEW)
            self.state = 3047
            self.tableview_name()
            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OF:
                self.state = 3048
                self.match(PlSqlParser.OF)
                self.state = 3049
                self.type_name()


            self.state = 3072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ON]:
                self.state = 3052
                self.match(PlSqlParser.ON)
                self.state = 3053
                self.match(PlSqlParser.PREBUILT)
                self.state = 3054
                self.match(PlSqlParser.TABLE)
                self.state = 3058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WITHOUT or _la==PlSqlParser.WITH:
                    self.state = 3055
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.WITHOUT or _la==PlSqlParser.WITH):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3056
                    self.match(PlSqlParser.REDUCED)
                    self.state = 3057
                    self.match(PlSqlParser.PRECISION)


                pass
            elif token in [PlSqlParser.AS, PlSqlParser.BUILD, PlSqlParser.CACHE, PlSqlParser.DISABLE, PlSqlParser.ENABLE, PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.FOR, PlSqlParser.INITRANS, PlSqlParser.LOGGING, PlSqlParser.NEVER, PlSqlParser.NOCACHE, PlSqlParser.NOLOGGING, PlSqlParser.NOPARALLEL, PlSqlParser.PARALLEL, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.REFRESH, PlSqlParser.SEGMENT, PlSqlParser.STORAGE, PlSqlParser.TABLESPACE, PlSqlParser.USING]:
                self.state = 3061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PlSqlParser.SEGMENT - 521)) | (1 << (PlSqlParser.STORAGE - 521)) | (1 << (PlSqlParser.TABLESPACE - 521)))) != 0):
                    self.state = 3060
                    self.physical_properties()


                self.state = 3064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE:
                    self.state = 3063
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                    self.state = 3066
                    self.parallel_clause()


                self.state = 3070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.BUILD:
                    self.state = 3069
                    self.build_clause()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 3074
                self.match(PlSqlParser.USING)
                self.state = 3075
                self.match(PlSqlParser.INDEX)
                self.state = 3085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.INITRANS or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                    self.state = 3079 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3079
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [PlSqlParser.INITRANS, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE]:
                                self.state = 3076
                                self.physical_attributes_clause()
                                pass
                            elif token in [PlSqlParser.TABLESPACE]:
                                self.state = 3077
                                self.match(PlSqlParser.TABLESPACE)
                                self.state = 3078
                                localctx.mv_tablespace = self.id_expression()
                                pass
                            else:
                                raise NoViableAltException(self)


                        else:
                            raise NoViableAltException(self)
                        self.state = 3081 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

                    self.state = 3087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif la_ == 2:
                self.state = 3088
                self.match(PlSqlParser.USING)
                self.state = 3089
                self.match(PlSqlParser.NO)
                self.state = 3090
                self.match(PlSqlParser.INDEX)


            self.state = 3094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NEVER or _la==PlSqlParser.REFRESH:
                self.state = 3093
                self.create_mv_refresh()


            self.state = 3098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 3096
                self.match(PlSqlParser.FOR)
                self.state = 3097
                self.match(PlSqlParser.UPDATE)


            self.state = 3103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE:
                self.state = 3100
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3101
                self.match(PlSqlParser.QUERY)
                self.state = 3102
                self.match(PlSqlParser.REWRITE)


            self.state = 3105
            self.match(PlSqlParser.AS)
            self.state = 3106
            self.subquery()
            self.state = 3107
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_mv_refreshContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rb_segment = None # Token

        def NEVER(self):
            return self.getToken(PlSqlParser.NEVER, 0)

        def REFRESH(self):
            return self.getToken(PlSqlParser.REFRESH, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ON)
            else:
                return self.getToken(PlSqlParser.ON, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.WITH)
            else:
                return self.getToken(PlSqlParser.WITH, i)

        def USING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.USING)
            else:
                return self.getToken(PlSqlParser.USING, i)

        def CONSTRAINTS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CONSTRAINTS)
            else:
                return self.getToken(PlSqlParser.CONSTRAINTS, i)

        def FAST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FAST)
            else:
                return self.getToken(PlSqlParser.FAST, i)

        def COMPLETE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.COMPLETE)
            else:
                return self.getToken(PlSqlParser.COMPLETE, i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FORCE)
            else:
                return self.getToken(PlSqlParser.FORCE, i)

        def DEMAND(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEMAND)
            else:
                return self.getToken(PlSqlParser.DEMAND, i)

        def COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.COMMIT)
            else:
                return self.getToken(PlSqlParser.COMMIT, i)

        def ENFORCED(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENFORCED)
            else:
                return self.getToken(PlSqlParser.ENFORCED, i)

        def TRUSTED(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TRUSTED)
            else:
                return self.getToken(PlSqlParser.TRUSTED, i)

        def START(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.START)
            else:
                return self.getToken(PlSqlParser.START, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NEXT)
            else:
                return self.getToken(PlSqlParser.NEXT, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PRIMARY)
            else:
                return self.getToken(PlSqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.KEY)
            else:
                return self.getToken(PlSqlParser.KEY, i)

        def ROWID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROWID)
            else:
                return self.getToken(PlSqlParser.ROWID, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFAULT)
            else:
                return self.getToken(PlSqlParser.DEFAULT, i)

        def ROLLBACK(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROLLBACK)
            else:
                return self.getToken(PlSqlParser.ROLLBACK, i)

        def SEGMENT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SEGMENT)
            else:
                return self.getToken(PlSqlParser.SEGMENT, i)

        def REGULAR_ID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.REGULAR_ID)
            else:
                return self.getToken(PlSqlParser.REGULAR_ID, i)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MASTER)
            else:
                return self.getToken(PlSqlParser.MASTER, i)

        def LOCAL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOCAL)
            else:
                return self.getToken(PlSqlParser.LOCAL, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_mv_refresh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_mv_refresh" ):
                listener.enterCreate_mv_refresh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_mv_refresh" ):
                listener.exitCreate_mv_refresh(self)




    def create_mv_refresh(self):

        localctx = PlSqlParser.Create_mv_refreshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_create_mv_refresh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NEVER]:
                self.state = 3109
                self.match(PlSqlParser.NEVER)
                self.state = 3110
                self.match(PlSqlParser.REFRESH)
                pass
            elif token in [PlSqlParser.REFRESH]:
                self.state = 3111
                self.match(PlSqlParser.REFRESH)
                self.state = 3144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3144
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                    if la_ == 1:
                        self.state = 3112
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.COMPLETE or _la==PlSqlParser.FAST or _la==PlSqlParser.FORCE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 3113
                        self.match(PlSqlParser.ON)
                        self.state = 3114
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.COMMIT or _la==PlSqlParser.DEMAND):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 3:
                        self.state = 3118
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.START]:
                            self.state = 3115
                            self.match(PlSqlParser.START)
                            self.state = 3116
                            self.match(PlSqlParser.WITH)
                            pass
                        elif token in [PlSqlParser.NEXT]:
                            self.state = 3117
                            self.match(PlSqlParser.NEXT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 3120
                        self.match(PlSqlParser.WITH)
                        self.state = 3124
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.PRIMARY]:
                            self.state = 3121
                            self.match(PlSqlParser.PRIMARY)
                            self.state = 3122
                            self.match(PlSqlParser.KEY)
                            pass
                        elif token in [PlSqlParser.ROWID]:
                            self.state = 3123
                            self.match(PlSqlParser.ROWID)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 5:
                        self.state = 3126
                        self.match(PlSqlParser.USING)
                        self.state = 3139
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.DEFAULT]:
                            self.state = 3127
                            self.match(PlSqlParser.DEFAULT)
                            self.state = 3129
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.LOCAL or _la==PlSqlParser.MASTER:
                                self.state = 3128
                                _la = self._input.LA(1)
                                if not(_la==PlSqlParser.LOCAL or _la==PlSqlParser.MASTER):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()


                            self.state = 3131
                            self.match(PlSqlParser.ROLLBACK)
                            self.state = 3132
                            self.match(PlSqlParser.SEGMENT)
                            pass
                        elif token in [PlSqlParser.LOCAL, PlSqlParser.MASTER, PlSqlParser.ROLLBACK]:
                            self.state = 3134
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.LOCAL or _la==PlSqlParser.MASTER:
                                self.state = 3133
                                _la = self._input.LA(1)
                                if not(_la==PlSqlParser.LOCAL or _la==PlSqlParser.MASTER):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()


                            self.state = 3136
                            self.match(PlSqlParser.ROLLBACK)
                            self.state = 3137
                            self.match(PlSqlParser.SEGMENT)
                            self.state = 3138
                            localctx.rb_segment = self.match(PlSqlParser.REGULAR_ID)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 3141
                        self.match(PlSqlParser.USING)
                        self.state = 3142
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.ENFORCED or _la==PlSqlParser.TRUSTED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3143
                        self.match(PlSqlParser.CONSTRAINTS)
                        pass


                    self.state = 3146 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.COMPLETE or _la==PlSqlParser.FAST or _la==PlSqlParser.FORCE or _la==PlSqlParser.NEXT or _la==PlSqlParser.ON or _la==PlSqlParser.START or _la==PlSqlParser.USING or _la==PlSqlParser.WITH):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def relational_table(self):
            return self.getTypedRuleContext(PlSqlParser.Relational_tableContext,0)


        def object_table(self):
            return self.getTypedRuleContext(PlSqlParser.Object_tableContext,0)


        def xmltype_table(self):
            return self.getTypedRuleContext(PlSqlParser.Xmltype_tableContext,0)


        def GLOBAL(self):
            return self.getToken(PlSqlParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(PlSqlParser.TEMPORARY, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = PlSqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.match(PlSqlParser.CREATE)
            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.GLOBAL:
                self.state = 3151
                self.match(PlSqlParser.GLOBAL)
                self.state = 3152
                self.match(PlSqlParser.TEMPORARY)


            self.state = 3155
            self.match(PlSqlParser.TABLE)
            self.state = 3156
            self.tableview_name()
            self.state = 3160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3157
                self.relational_table()
                pass

            elif la_ == 2:
                self.state = 3158
                self.object_table()
                pass

            elif la_ == 3:
                self.state = 3159
                self.xmltype_table()
                pass


            self.state = 3164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 3162
                self.match(PlSqlParser.AS)
                self.state = 3163
                self.subquery()


            self.state = 3166
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmltype_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def XMLTYPE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.XMLTYPE)
            else:
                return self.getToken(PlSqlParser.XMLTYPE, i)

        def object_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Object_propertiesContext,0)


        def xmltype_storage(self):
            return self.getTypedRuleContext(PlSqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlschema_specContext,0)


        def xmltype_virtual_columns(self):
            return self.getTypedRuleContext(PlSqlParser.Xmltype_virtual_columnsContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(PlSqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(PlSqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmltype_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_table" ):
                listener.enterXmltype_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_table" ):
                listener.exitXmltype_table(self)




    def xmltype_table(self):

        localctx = PlSqlParser.Xmltype_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_xmltype_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3168
            self.match(PlSqlParser.OF)
            self.state = 3169
            self.match(PlSqlParser.XMLTYPE)
            self.state = 3174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3170
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3171
                self.object_properties()
                self.state = 3172
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 3176
                self.match(PlSqlParser.XMLTYPE)
                self.state = 3177
                self.xmltype_storage()


            self.state = 3181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELEMENT or _la==PlSqlParser.XMLSCHEMA:
                self.state = 3180
                self.xmlschema_spec()


            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.VIRTUAL:
                self.state = 3183
                self.xmltype_virtual_columns()


            self.state = 3190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ON:
                self.state = 3186
                self.match(PlSqlParser.ON)
                self.state = 3187
                self.match(PlSqlParser.COMMIT)
                self.state = 3188
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3189
                self.match(PlSqlParser.ROWS)


            self.state = 3193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OBJECT:
                self.state = 3192
                self.oid_clause()


            self.state = 3196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OIDINDEX:
                self.state = 3195
                self.oid_index_clause()


            self.state = 3199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PlSqlParser.SEGMENT - 521)) | (1 << (PlSqlParser.STORAGE - 521)) | (1 << (PlSqlParser.TABLESPACE - 521)))) != 0):
                self.state = 3198
                self.physical_properties()


            self.state = 3202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COLUMN or _la==PlSqlParser.LOB or _la==PlSqlParser.NESTED or _la==PlSqlParser.VARRAY or _la==PlSqlParser.XMLTYPE:
                self.state = 3201
                self.column_properties()


            self.state = 3205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 3204
                self.table_partitioning_clauses()


            self.state = 3208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE:
                self.state = 3207
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RESULT_CACHE:
                self.state = 3210
                self.match(PlSqlParser.RESULT_CACHE)
                self.state = 3211
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3212
                self.match(PlSqlParser.MODE)
                self.state = 3213
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3214
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                self.state = 3217
                self.parallel_clause()


            self.state = 3221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES:
                self.state = 3220
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 3224 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3223
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3226 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)



            self.state = 3231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE or _la==PlSqlParser.ROW:
                self.state = 3230
                self.row_movement_clause()


            self.state = 3234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FLASHBACK or _la==PlSqlParser.NO:
                self.state = 3233
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmltype_virtual_columnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRTUAL(self):
            return self.getToken(PlSqlParser.VIRTUAL, 0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmltype_virtual_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_virtual_columns" ):
                listener.enterXmltype_virtual_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_virtual_columns" ):
                listener.exitXmltype_virtual_columns(self)




    def xmltype_virtual_columns(self):

        localctx = PlSqlParser.Xmltype_virtual_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_xmltype_virtual_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.match(PlSqlParser.VIRTUAL)
            self.state = 3237
            self.match(PlSqlParser.COLUMNS)
            self.state = 3238
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3248 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 3239
                    self.match(PlSqlParser.COMMA)


                self.state = 3242
                self.column_name()
                self.state = 3243
                self.match(PlSqlParser.AS)
                self.state = 3244
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3245
                self.expression()
                self.state = 3246
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 3252
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmltype_column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLTYPE(self):
            return self.getToken(PlSqlParser.XMLTYPE, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def xmltype_storage(self):
            return self.getTypedRuleContext(PlSqlParser.Xmltype_storageContext,0)


        def xmlschema_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlschema_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmltype_column_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_column_properties" ):
                listener.enterXmltype_column_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_column_properties" ):
                listener.exitXmltype_column_properties(self)




    def xmltype_column_properties(self):

        localctx = PlSqlParser.Xmltype_column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_xmltype_column_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.match(PlSqlParser.XMLTYPE)
            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COLUMN:
                self.state = 3255
                self.match(PlSqlParser.COLUMN)


            self.state = 3258
            self.column_name()
            self.state = 3260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.STORE:
                self.state = 3259
                self.xmltype_storage()


            self.state = 3263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELEMENT or _la==PlSqlParser.XMLSCHEMA:
                self.state = 3262
                self.xmlschema_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmltype_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def RELATIONAL(self):
            return self.getToken(PlSqlParser.RELATIONAL, 0)

        def CLOB(self):
            return self.getToken(PlSqlParser.CLOB, 0)

        def BINARY(self):
            return self.getToken(PlSqlParser.BINARY, 0)

        def XML(self):
            return self.getToken(PlSqlParser.XML, 0)

        def lob_segname(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_segnameContext,0)


        def lob_parameters(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_parametersContext,0)


        def SECUREFILE(self):
            return self.getToken(PlSqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(PlSqlParser.BASICFILE, 0)

        def VARRAYS(self):
            return self.getToken(PlSqlParser.VARRAYS, 0)

        def LOBS(self):
            return self.getToken(PlSqlParser.LOBS, 0)

        def TABLES(self):
            return self.getToken(PlSqlParser.TABLES, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xmltype_storage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltype_storage" ):
                listener.enterXmltype_storage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltype_storage" ):
                listener.exitXmltype_storage(self)




    def xmltype_storage(self):

        localctx = PlSqlParser.Xmltype_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_xmltype_storage)
        self._la = 0 # Token type
        try:
            self.state = 3296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3265
                self.match(PlSqlParser.STORE)
                self.state = 3266
                self.match(PlSqlParser.AS)
                self.state = 3290
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.OBJECT]:
                    self.state = 3267
                    self.match(PlSqlParser.OBJECT)
                    self.state = 3268
                    self.match(PlSqlParser.RELATIONAL)
                    pass
                elif token in [PlSqlParser.BASICFILE, PlSqlParser.BINARY, PlSqlParser.CLOB, PlSqlParser.SECUREFILE]:
                    self.state = 3270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE:
                        self.state = 3269
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3275
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.CLOB]:
                        self.state = 3272
                        self.match(PlSqlParser.CLOB)
                        pass
                    elif token in [PlSqlParser.BINARY]:
                        self.state = 3273
                        self.match(PlSqlParser.BINARY)
                        self.state = 3274
                        self.match(PlSqlParser.XML)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3288
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                    if la_ == 1:
                        self.state = 3277
                        self.lob_segname()
                        self.state = 3282
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                        if la_ == 1:
                            self.state = 3278
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 3279
                            self.lob_parameters()
                            self.state = 3280
                            self.match(PlSqlParser.RIGHT_PAREN)



                    elif la_ == 2:
                        self.state = 3284
                        self.match(PlSqlParser.LEFT_PAREN)
                        self.state = 3285
                        self.lob_parameters()
                        self.state = 3286
                        self.match(PlSqlParser.RIGHT_PAREN)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3292
                self.match(PlSqlParser.STORE)
                self.state = 3293
                self.match(PlSqlParser.VARRAYS)
                self.state = 3294
                self.match(PlSqlParser.AS)
                self.state = 3295
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.LOBS or _la==PlSqlParser.TABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlschema_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def DELIMITED_ID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DELIMITED_ID)
            else:
                return self.getToken(PlSqlParser.DELIMITED_ID, i)

        def XMLSCHEMA(self):
            return self.getToken(PlSqlParser.XMLSCHEMA, 0)

        def allow_or_disallow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Allow_or_disallowContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Allow_or_disallowContext,i)


        def NONSCHEMA(self):
            return self.getToken(PlSqlParser.NONSCHEMA, 0)

        def ANYSCHEMA(self):
            return self.getToken(PlSqlParser.ANYSCHEMA, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlschema_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlschema_spec" ):
                listener.enterXmlschema_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlschema_spec" ):
                listener.exitXmlschema_spec(self)




    def xmlschema_spec(self):

        localctx = PlSqlParser.Xmlschema_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_xmlschema_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.XMLSCHEMA:
                self.state = 3298
                self.match(PlSqlParser.XMLSCHEMA)
                self.state = 3299
                self.match(PlSqlParser.DELIMITED_ID)


            self.state = 3302
            self.match(PlSqlParser.ELEMENT)
            self.state = 3303
            self.match(PlSqlParser.DELIMITED_ID)
            self.state = 3307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 3304
                self.allow_or_disallow()
                self.state = 3305
                self.match(PlSqlParser.NONSCHEMA)


            self.state = 3312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ALLOW or _la==PlSqlParser.DISALLOW:
                self.state = 3309
                self.allow_or_disallow()
                self.state = 3310
                self.match(PlSqlParser.ANYSCHEMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def object_table_substitution(self):
            return self.getTypedRuleContext(PlSqlParser.Object_table_substitutionContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def oid_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Oid_clauseContext,0)


        def oid_index_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Oid_index_clauseContext,0)


        def physical_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(PlSqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(PlSqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.NOROWDEPENDENCIES, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_propertiesContext,i)


        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_table" ):
                listener.enterObject_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_table" ):
                listener.exitObject_table(self)




    def object_table(self):

        localctx = PlSqlParser.Object_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_object_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314
            self.match(PlSqlParser.OF)
            self.state = 3315
            self.type_name()
            self.state = 3317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT or _la==PlSqlParser.SUBSTITUTABLE:
                self.state = 3316
                self.object_table_substitution()


            self.state = 3330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3319
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3324 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 3320
                        self.match(PlSqlParser.COMMA)


                    self.state = 3323
                    self.object_properties()
                    self.state = 3326 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHECK - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FOREIGN - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIMARY - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SCOPE - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUPPLEMENTAL - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNIQUE - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 3328
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ON:
                self.state = 3332
                self.match(PlSqlParser.ON)
                self.state = 3333
                self.match(PlSqlParser.COMMIT)
                self.state = 3334
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3335
                self.match(PlSqlParser.ROWS)


            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OBJECT:
                self.state = 3338
                self.oid_clause()


            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OIDINDEX:
                self.state = 3341
                self.oid_index_clause()


            self.state = 3345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PlSqlParser.SEGMENT - 521)) | (1 << (PlSqlParser.STORAGE - 521)) | (1 << (PlSqlParser.TABLESPACE - 521)))) != 0):
                self.state = 3344
                self.physical_properties()


            self.state = 3348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COLUMN or _la==PlSqlParser.LOB or _la==PlSqlParser.NESTED or _la==PlSqlParser.VARRAY or _la==PlSqlParser.XMLTYPE:
                self.state = 3347
                self.column_properties()


            self.state = 3351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 3350
                self.table_partitioning_clauses()


            self.state = 3354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE:
                self.state = 3353
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RESULT_CACHE:
                self.state = 3356
                self.match(PlSqlParser.RESULT_CACHE)
                self.state = 3357
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3358
                self.match(PlSqlParser.MODE)
                self.state = 3359
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3360
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                self.state = 3363
                self.parallel_clause()


            self.state = 3367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES:
                self.state = 3366
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.state = 3370 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3369
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3372 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,382,self._ctx)



            self.state = 3377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE or _la==PlSqlParser.ROW:
                self.state = 3376
                self.row_movement_clause()


            self.state = 3380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FLASHBACK or _la==PlSqlParser.NO:
                self.state = 3379
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Oid_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OIDINDEX(self):
            return self.getToken(PlSqlParser.OIDINDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLESPACE)
            else:
                return self.getToken(PlSqlParser.TABLESPACE, i)

        def tablespace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.TablespaceContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.TablespaceContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_oid_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOid_index_clause" ):
                listener.enterOid_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOid_index_clause" ):
                listener.exitOid_index_clause(self)




    def oid_index_clause(self):

        localctx = PlSqlParser.Oid_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oid_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self.match(PlSqlParser.OIDINDEX)
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 3383
                self.index_name()


            self.state = 3386
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.INITRANS, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE]:
                    self.state = 3387
                    self.physical_attributes_clause()
                    pass
                elif token in [PlSqlParser.TABLESPACE]:
                    self.state = 3388
                    self.match(PlSqlParser.TABLESPACE)
                    self.state = 3389
                    self.tablespace()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.INITRANS or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE):
                    break

            self.state = 3394
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Oid_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def IDENTIFIER(self):
            return self.getToken(PlSqlParser.IDENTIFIER, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def SYSTEM(self):
            return self.getToken(PlSqlParser.SYSTEM, 0)

        def GENERATED(self):
            return self.getToken(PlSqlParser.GENERATED, 0)

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_oid_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOid_clause" ):
                listener.enterOid_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOid_clause" ):
                listener.exitOid_clause(self)




    def oid_clause(self):

        localctx = PlSqlParser.Oid_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oid_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3396
            self.match(PlSqlParser.OBJECT)
            self.state = 3397
            self.match(PlSqlParser.IDENTIFIER)
            self.state = 3398
            self.match(PlSqlParser.IS)
            self.state = 3403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SYSTEM]:
                self.state = 3399
                self.match(PlSqlParser.SYSTEM)
                self.state = 3400
                self.match(PlSqlParser.GENERATED)
                pass
            elif token in [PlSqlParser.PRIMARY]:
                self.state = 3401
                self.match(PlSqlParser.PRIMARY)
                self.state = 3402
                self.match(PlSqlParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def attribute_name(self):
            return self.getTypedRuleContext(PlSqlParser.Attribute_nameContext,0)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Inline_ref_constraintContext,0)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def out_of_line_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Out_of_line_constraintContext,0)


        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Out_of_line_ref_constraintContext,0)


        def supplemental_logging_props(self):
            return self.getTypedRuleContext(PlSqlParser.Supplemental_logging_propsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_properties" ):
                listener.enterObject_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_properties" ):
                listener.exitObject_properties(self)




    def object_properties(self):

        localctx = PlSqlParser.Object_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_object_properties)
        self._la = 0 # Token type
        try:
            self.state = 3427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 3405
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 3406
                    self.attribute_name()
                    pass


                self.state = 3411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DEFAULT:
                    self.state = 3409
                    self.match(PlSqlParser.DEFAULT)
                    self.state = 3410
                    self.expression()


                self.state = 3422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
                if la_ == 1:
                    self.state = 3417 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3414
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.COMMA:
                                self.state = 3413
                                self.match(PlSqlParser.COMMA)


                            self.state = 3416
                            self.inline_constraint()

                        else:
                            raise NoViableAltException(self)
                        self.state = 3419 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,393,self._ctx)


                elif la_ == 2:
                    self.state = 3421
                    self.inline_ref_constraint()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3424
                self.out_of_line_constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3425
                self.out_of_line_ref_constraint()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3426
                self.supplemental_logging_props()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_table_substitutionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(PlSqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_object_table_substitution

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_table_substitution" ):
                listener.enterObject_table_substitution(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_table_substitution" ):
                listener.exitObject_table_substitution(self)




    def object_table_substitution(self):

        localctx = PlSqlParser.Object_table_substitutionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_object_table_substitution)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 3429
                self.match(PlSqlParser.NOT)


            self.state = 3432
            self.match(PlSqlParser.SUBSTITUTABLE)
            self.state = 3433
            self.match(PlSqlParser.AT)
            self.state = 3434
            self.match(PlSqlParser.ALL)
            self.state = 3435
            self.match(PlSqlParser.LEVELS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Relational_propertiesContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def physical_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Physical_propertiesContext,0)


        def column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,0)


        def table_partitioning_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Table_partitioning_clausesContext,0)


        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def MODE(self):
            return self.getToken(PlSqlParser.MODE, 0)

        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def row_movement_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Row_movement_clauseContext,0)


        def flashback_archive_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Flashback_archive_clauseContext,0)


        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(PlSqlParser.PRESERVE, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def ROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.ROWDEPENDENCIES, 0)

        def NOROWDEPENDENCIES(self):
            return self.getToken(PlSqlParser.NOROWDEPENDENCIES, 0)

        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Enable_disable_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relational_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_table" ):
                listener.enterRelational_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_table" ):
                listener.exitRelational_table(self)




    def relational_table(self):

        localctx = PlSqlParser.Relational_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_relational_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3437
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3438
                self.relational_properties()
                self.state = 3439
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ON:
                self.state = 3443
                self.match(PlSqlParser.ON)
                self.state = 3444
                self.match(PlSqlParser.COMMIT)
                self.state = 3445
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.PRESERVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3446
                self.match(PlSqlParser.ROWS)


            self.state = 3450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PlSqlParser.SEGMENT - 521)) | (1 << (PlSqlParser.STORAGE - 521)) | (1 << (PlSqlParser.TABLESPACE - 521)))) != 0):
                self.state = 3449
                self.physical_properties()


            self.state = 3453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COLUMN or _la==PlSqlParser.LOB or _la==PlSqlParser.NESTED or _la==PlSqlParser.VARRAY or _la==PlSqlParser.XMLTYPE:
                self.state = 3452
                self.column_properties()


            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 3455
                self.table_partitioning_clauses()


            self.state = 3459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE:
                self.state = 3458
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RESULT_CACHE:
                self.state = 3461
                self.match(PlSqlParser.RESULT_CACHE)
                self.state = 3462
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3463
                self.match(PlSqlParser.MODE)
                self.state = 3464
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.FORCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3465
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                self.state = 3468
                self.parallel_clause()


            self.state = 3472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES:
                self.state = 3471
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOROWDEPENDENCIES or _la==PlSqlParser.ROWDEPENDENCIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3475 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3474
                        self.enable_disable_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3477 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,406,self._ctx)



            self.state = 3482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE or _la==PlSqlParser.ROW:
                self.state = 3481
                self.row_movement_clause()


            self.state = 3485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FLASHBACK or _la==PlSqlParser.NO:
                self.state = 3484
                self.flashback_archive_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Virtual_column_definitionContext,i)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Out_of_line_constraintContext,i)


        def out_of_line_ref_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Out_of_line_ref_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Out_of_line_ref_constraintContext,i)


        def supplemental_logging_props(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Supplemental_logging_propsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Supplemental_logging_propsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relational_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_properties" ):
                listener.enterRelational_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_properties" ):
                listener.exitRelational_properties(self)




    def relational_properties(self):

        localctx = PlSqlParser.Relational_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_relational_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 3487
                    self.match(PlSqlParser.COMMA)


                self.state = 3495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 3490
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 3491
                    self.virtual_column_definition()
                    pass

                elif la_ == 3:
                    self.state = 3492
                    self.out_of_line_constraint()
                    pass

                elif la_ == 4:
                    self.state = 3493
                    self.out_of_line_ref_constraint()
                    pass

                elif la_ == 5:
                    self.state = 3494
                    self.supplemental_logging_props()
                    pass


                self.state = 3499 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHECK - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FOREIGN - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIMARY - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SCOPE - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUPPLEMENTAL - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNIQUE - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_partitioning_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_range_partition_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Table_range_partition_by_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_partitioning_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_partitioning_clauses" ):
                listener.enterTable_partitioning_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_partitioning_clauses" ):
                listener.exitTable_partitioning_clauses(self)




    def table_partitioning_clauses(self):

        localctx = PlSqlParser.Table_partitioning_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_table_partitioning_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3501
            self.table_range_partition_by_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_range_partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Token
            self.partition_tablespace = None # Id_expressionContext

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PARTITION)
            else:
                return self.getToken(PlSqlParser.PARTITION, i)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Partition_nameContext,i)


        def VALUES(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.VALUES)
            else:
                return self.getToken(PlSqlParser.VALUES, i)

        def LESS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LESS)
            else:
                return self.getToken(PlSqlParser.LESS, i)

        def THAN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.THAN)
            else:
                return self.getToken(PlSqlParser.THAN, i)

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.COMMA)
            else:
                return self.getToken(PlSqlParser.COMMA, i)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def string_function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.String_functionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.String_functionContext,i)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.NumericContext,i)


        def MAXVALUE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MAXVALUE)
            else:
                return self.getToken(PlSqlParser.MAXVALUE, i)

        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLESPACE)
            else:
                return self.getToken(PlSqlParser.TABLESPACE, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ON)
            else:
                return self.getToken(PlSqlParser.ON, i)

        def COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.COMMIT)
            else:
                return self.getToken(PlSqlParser.COMMIT, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROWS)
            else:
                return self.getToken(PlSqlParser.ROWS, i)

        def deferred_segment_creation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Deferred_segment_creationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Deferred_segment_creationContext,i)


        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DELETE)
            else:
                return self.getToken(PlSqlParser.DELETE, i)

        def PRESERVE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PRESERVE)
            else:
                return self.getToken(PlSqlParser.PRESERVE, i)

        def REGULAR_ID(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.REGULAR_ID)
            else:
                return self.getToken(PlSqlParser.REGULAR_ID, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_range_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_range_partition_by_clause" ):
                listener.enterTable_range_partition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_range_partition_by_clause" ):
                listener.exitTable_range_partition_by_clause(self)




    def table_range_partition_by_clause(self):

        localctx = PlSqlParser.Table_range_partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_table_range_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3503
            self.match(PlSqlParser.PARTITION)
            self.state = 3504
            self.match(PlSqlParser.BY)
            self.state = 3505
            self.match(PlSqlParser.RANGE)
            self.state = 3506
            self.paren_column_list()
            self.state = 3525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTERVAL:
                self.state = 3507
                self.match(PlSqlParser.INTERVAL)
                self.state = 3508
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3509
                self.expression()
                self.state = 3510
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.STORE:
                    self.state = 3511
                    self.match(PlSqlParser.STORE)
                    self.state = 3512
                    self.match(PlSqlParser.IN)
                    self.state = 3513
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3518 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 3514
                            self.match(PlSqlParser.COMMA)


                        self.state = 3517
                        localctx.tablespace_name = self.match(PlSqlParser.REGULAR_ID)
                        self.state = 3520 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                            break

                    self.state = 3522
                    self.match(PlSqlParser.RIGHT_PAREN)




            self.state = 3527
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3574 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 3528
                    self.match(PlSqlParser.COMMA)


                self.state = 3531
                self.match(PlSqlParser.PARTITION)
                self.state = 3532
                self.partition_name()
                self.state = 3533
                self.match(PlSqlParser.VALUES)
                self.state = 3534
                self.match(PlSqlParser.LESS)
                self.state = 3535
                self.match(PlSqlParser.THAN)
                self.state = 3536
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3553
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
                    if la_ == 1:
                        self.state = 3538
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 3537
                            self.match(PlSqlParser.COMMA)


                        self.state = 3540
                        self.match(PlSqlParser.CHAR_STRING)
                        pass

                    elif la_ == 2:
                        self.state = 3542
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 3541
                            self.match(PlSqlParser.COMMA)


                        self.state = 3544
                        self.string_function()
                        pass

                    elif la_ == 3:
                        self.state = 3546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 3545
                            self.match(PlSqlParser.COMMA)


                        self.state = 3548
                        self.numeric()
                        pass

                    elif la_ == 4:
                        self.state = 3550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 3549
                            self.match(PlSqlParser.COMMA)


                        self.state = 3552
                        self.match(PlSqlParser.MAXVALUE)
                        pass


                    self.state = 3555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.CHR or _la==PlSqlParser.MAXVALUE or ((((_la - 695)) & ~0x3f) == 0 and ((1 << (_la - 695)) & ((1 << (PlSqlParser.DECODE - 695)) | (1 << (PlSqlParser.NVL - 695)) | (1 << (PlSqlParser.SUBSTR - 695)) | (1 << (PlSqlParser.TO_CHAR - 695)) | (1 << (PlSqlParser.TRIM - 695)) | (1 << (PlSqlParser.TO_DATE - 695)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 695)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 695)) | (1 << (PlSqlParser.CHAR_STRING - 695)) | (1 << (PlSqlParser.COMMA - 695)))) != 0)):
                        break

                self.state = 3557
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.TABLESPACE:
                    self.state = 3558
                    self.match(PlSqlParser.TABLESPACE)
                    self.state = 3559
                    localctx.partition_tablespace = self.id_expression()


                self.state = 3566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ON:
                    self.state = 3562
                    self.match(PlSqlParser.ON)
                    self.state = 3563
                    self.match(PlSqlParser.COMMIT)
                    self.state = 3564
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.PRESERVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3565
                    self.match(PlSqlParser.ROWS)


                self.state = 3569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.SEGMENT:
                    self.state = 3568
                    self.deferred_segment_creation()


                self.state = 3572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INITRANS or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE:
                    self.state = 3571
                    self.physical_attributes_clause()


                self.state = 3576 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.PARTITION or _la==PlSqlParser.COMMA):
                    break

            self.state = 3578
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Datatype_null_enableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def SORT(self):
            return self.getToken(PlSqlParser.SORT, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(PlSqlParser.ENCRYPT, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(PlSqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def SALT(self):
            return self.getToken(PlSqlParser.SALT, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_datatype_null_enable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype_null_enable" ):
                listener.enterDatatype_null_enable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype_null_enable" ):
                listener.exitDatatype_null_enable(self)




    def datatype_null_enable(self):

        localctx = PlSqlParser.Datatype_null_enableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_datatype_null_enable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3580
            self.column_name()
            self.state = 3581
            self.datatype()
            self.state = 3583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SORT:
                self.state = 3582
                self.match(PlSqlParser.SORT)


            self.state = 3587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT:
                self.state = 3585
                self.match(PlSqlParser.DEFAULT)
                self.state = 3586
                self.expression()


            self.state = 3608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ENCRYPT:
                self.state = 3589
                self.match(PlSqlParser.ENCRYPT)
                self.state = 3592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 3590
                    self.match(PlSqlParser.USING)
                    self.state = 3591
                    self.match(PlSqlParser.CHAR_STRING)


                self.state = 3597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IDENTIFIED:
                    self.state = 3594
                    self.match(PlSqlParser.IDENTIFIED)
                    self.state = 3595
                    self.match(PlSqlParser.BY)
                    self.state = 3596
                    self.match(PlSqlParser.REGULAR_ID)


                self.state = 3600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CHAR_STRING:
                    self.state = 3599
                    self.match(PlSqlParser.CHAR_STRING)


                self.state = 3606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NO or _la==PlSqlParser.SALT:
                    self.state = 3603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NO:
                        self.state = 3602
                        self.match(PlSqlParser.NO)


                    self.state = 3605
                    self.match(PlSqlParser.SALT)




            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 3610
                self.match(PlSqlParser.NOT)
                self.state = 3611
                self.match(PlSqlParser.NULL)


            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE:
                self.state = 3614
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Size_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_size_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize_clause" ):
                listener.enterSize_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize_clause" ):
                listener.exitSize_clause(self)




    def size_clause(self):

        localctx = PlSqlParser.Size_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_size_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.match(PlSqlParser.UNSIGNED_INTEGER)
            self.state = 3619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REGULAR_ID:
                self.state = 3618
                self.match(PlSqlParser.REGULAR_ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPRESS(self):
            return self.getToken(PlSqlParser.COMPRESS, 0)

        def BASIC(self):
            return self.getToken(PlSqlParser.BASIC, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def OLTP(self):
            return self.getToken(PlSqlParser.OLTP, 0)

        def QUERY(self):
            return self.getToken(PlSqlParser.QUERY, 0)

        def ARCHIVE(self):
            return self.getToken(PlSqlParser.ARCHIVE, 0)

        def LOW(self):
            return self.getToken(PlSqlParser.LOW, 0)

        def HIGH(self):
            return self.getToken(PlSqlParser.HIGH, 0)

        def NOCOMPRESS(self):
            return self.getToken(PlSqlParser.NOCOMPRESS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_compression" ):
                listener.enterTable_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_compression" ):
                listener.exitTable_compression(self)




    def table_compression(self):

        localctx = PlSqlParser.Table_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_table_compression)
        self._la = 0 # Token type
        try:
            self.state = 3634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3621
                self.match(PlSqlParser.COMPRESS)
                self.state = 3631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
                if la_ == 1:
                    self.state = 3622
                    self.match(PlSqlParser.BASIC)

                elif la_ == 2:
                    self.state = 3623
                    self.match(PlSqlParser.FOR)
                    self.state = 3629
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.OLTP]:
                        self.state = 3624
                        self.match(PlSqlParser.OLTP)
                        pass
                    elif token in [PlSqlParser.ARCHIVE, PlSqlParser.QUERY]:
                        self.state = 3625
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.ARCHIVE or _la==PlSqlParser.QUERY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.HIGH or _la==PlSqlParser.LOW:
                            self.state = 3626
                            _la = self._input.LA(1)
                            if not(_la==PlSqlParser.HIGH or _la==PlSqlParser.LOW):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [PlSqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3633
                self.match(PlSqlParser.NOCOMPRESS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pctfree = None # Token
            self.pctused = None # Token
            self.inittrans = None # Token

        def PCTFREE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PCTFREE)
            else:
                return self.getToken(PlSqlParser.PCTFREE, i)

        def PCTUSED(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PCTUSED)
            else:
                return self.getToken(PlSqlParser.PCTUSED, i)

        def INITRANS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INITRANS)
            else:
                return self.getToken(PlSqlParser.INITRANS, i)

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_physical_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_attributes_clause" ):
                listener.enterPhysical_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_attributes_clause" ):
                listener.exitPhysical_attributes_clause(self)




    def physical_attributes_clause(self):

        localctx = PlSqlParser.Physical_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_physical_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3643
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.PCTFREE]:
                        self.state = 3636
                        self.match(PlSqlParser.PCTFREE)
                        self.state = 3637
                        localctx.pctfree = self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [PlSqlParser.PCTUSED]:
                        self.state = 3638
                        self.match(PlSqlParser.PCTUSED)
                        self.state = 3639
                        localctx.pctused = self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [PlSqlParser.INITRANS]:
                        self.state = 3640
                        self.match(PlSqlParser.INITRANS)
                        self.state = 3641
                        localctx.inittrans = self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [PlSqlParser.STORAGE]:
                        self.state = 3642
                        self.storage_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3645 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,445,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initial_size = None # Size_clauseContext
            self.next_size = None # Size_clauseContext
            self.minextents = None # Token
            self.pctincrease = None # Token
            self.freelists = None # Token
            self.freelist_groups = None # Token

        def STORAGE(self):
            return self.getToken(PlSqlParser.STORAGE, 0)

        def INITIAL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INITIAL)
            else:
                return self.getToken(PlSqlParser.INITIAL, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NEXT)
            else:
                return self.getToken(PlSqlParser.NEXT, i)

        def MINEXTENTS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MINEXTENTS)
            else:
                return self.getToken(PlSqlParser.MINEXTENTS, i)

        def PCTINCREASE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PCTINCREASE)
            else:
                return self.getToken(PlSqlParser.PCTINCREASE, i)

        def FREELISTS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FREELISTS)
            else:
                return self.getToken(PlSqlParser.FREELISTS, i)

        def FREELIST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FREELIST)
            else:
                return self.getToken(PlSqlParser.FREELIST, i)

        def GROUPS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.GROUPS)
            else:
                return self.getToken(PlSqlParser.GROUPS, i)

        def OPTIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OPTIMAL)
            else:
                return self.getToken(PlSqlParser.OPTIMAL, i)

        def BUFFER_POOL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BUFFER_POOL)
            else:
                return self.getToken(PlSqlParser.BUFFER_POOL, i)

        def FLASH_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FLASH_CACHE)
            else:
                return self.getToken(PlSqlParser.FLASH_CACHE, i)

        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENCRYPT)
            else:
                return self.getToken(PlSqlParser.ENCRYPT, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def KEEP(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.KEEP)
            else:
                return self.getToken(PlSqlParser.KEEP, i)

        def RECYCLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.RECYCLE)
            else:
                return self.getToken(PlSqlParser.RECYCLE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFAULT)
            else:
                return self.getToken(PlSqlParser.DEFAULT, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NONE)
            else:
                return self.getToken(PlSqlParser.NONE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNLIMITED)
            else:
                return self.getToken(PlSqlParser.UNLIMITED, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULL)
            else:
                return self.getToken(PlSqlParser.NULL, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorage_clause" ):
                listener.enterStorage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorage_clause" ):
                listener.exitStorage_clause(self)




    def storage_clause(self):

        localctx = PlSqlParser.Storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3647
            self.match(PlSqlParser.STORAGE)
            self.state = 3648
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3672 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3672
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.INITIAL]:
                    self.state = 3649
                    self.match(PlSqlParser.INITIAL)
                    self.state = 3650
                    localctx.initial_size = self.size_clause()
                    pass
                elif token in [PlSqlParser.NEXT]:
                    self.state = 3651
                    self.match(PlSqlParser.NEXT)
                    self.state = 3652
                    localctx.next_size = self.size_clause()
                    pass
                elif token in [PlSqlParser.MINEXTENTS]:
                    self.state = 3653
                    self.match(PlSqlParser.MINEXTENTS)
                    self.state = 3654
                    localctx.minextents = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.UNLIMITED or _la==PlSqlParser.UNSIGNED_INTEGER):
                        localctx.minextents = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [PlSqlParser.PCTINCREASE]:
                    self.state = 3655
                    self.match(PlSqlParser.PCTINCREASE)
                    self.state = 3656
                    localctx.pctincrease = self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.FREELISTS]:
                    self.state = 3657
                    self.match(PlSqlParser.FREELISTS)
                    self.state = 3658
                    localctx.freelists = self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.FREELIST]:
                    self.state = 3659
                    self.match(PlSqlParser.FREELIST)
                    self.state = 3660
                    self.match(PlSqlParser.GROUPS)
                    self.state = 3661
                    localctx.freelist_groups = self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.OPTIMAL]:
                    self.state = 3662
                    self.match(PlSqlParser.OPTIMAL)
                    self.state = 3665
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER]:
                        self.state = 3663
                        self.size_clause()
                        pass
                    elif token in [PlSqlParser.NULL]:
                        self.state = 3664
                        self.match(PlSqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [PlSqlParser.BUFFER_POOL]:
                    self.state = 3667
                    self.match(PlSqlParser.BUFFER_POOL)
                    self.state = 3668
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.KEEP or _la==PlSqlParser.RECYCLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [PlSqlParser.FLASH_CACHE]:
                    self.state = 3669
                    self.match(PlSqlParser.FLASH_CACHE)
                    self.state = 3670
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.KEEP or _la==PlSqlParser.NONE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [PlSqlParser.ENCRYPT]:
                    self.state = 3671
                    self.match(PlSqlParser.ENCRYPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.BUFFER_POOL or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & ((1 << (PlSqlParser.ENCRYPT - 174)) | (1 << (PlSqlParser.FLASH_CACHE - 174)) | (1 << (PlSqlParser.FREELIST - 174)) | (1 << (PlSqlParser.FREELISTS - 174)))) != 0) or _la==PlSqlParser.INITIAL or _la==PlSqlParser.MINEXTENTS or _la==PlSqlParser.NEXT or _la==PlSqlParser.OPTIMAL or _la==PlSqlParser.PCTINCREASE):
                    break

            self.state = 3676
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Deferred_segment_creationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def CREATION(self):
            return self.getToken(PlSqlParser.CREATION, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_deferred_segment_creation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferred_segment_creation" ):
                listener.enterDeferred_segment_creation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferred_segment_creation" ):
                listener.exitDeferred_segment_creation(self)




    def deferred_segment_creation(self):

        localctx = PlSqlParser.Deferred_segment_creationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_deferred_segment_creation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3678
            self.match(PlSqlParser.SEGMENT)
            self.state = 3679
            self.match(PlSqlParser.CREATION)
            self.state = 3680
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFERRED or _la==PlSqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Segment_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tablespace_name = None # Id_expressionContext

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLESPACE)
            else:
                return self.getToken(PlSqlParser.TABLESPACE, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_segment_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment_attributes_clause" ):
                listener.enterSegment_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment_attributes_clause" ):
                listener.exitSegment_attributes_clause(self)




    def segment_attributes_clause(self):

        localctx = PlSqlParser.Segment_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_segment_attributes_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3686 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3686
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.INITRANS, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE]:
                        self.state = 3682
                        self.physical_attributes_clause()
                        pass
                    elif token in [PlSqlParser.TABLESPACE]:
                        self.state = 3683
                        self.match(PlSqlParser.TABLESPACE)
                        self.state = 3684
                        localctx.tablespace_name = self.id_expression()
                        pass
                    elif token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING]:
                        self.state = 3685
                        self.logging_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3688 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def segment_attributes_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Segment_attributes_clauseContext,0)


        def deferred_segment_creation(self):
            return self.getTypedRuleContext(PlSqlParser.Deferred_segment_creationContext,0)


        def table_compression(self):
            return self.getTypedRuleContext(PlSqlParser.Table_compressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_physical_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_properties" ):
                listener.enterPhysical_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_properties" ):
                listener.exitPhysical_properties(self)




    def physical_properties(self):

        localctx = PlSqlParser.Physical_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_physical_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SEGMENT:
                self.state = 3690
                self.deferred_segment_creation()


            self.state = 3693
            self.segment_attributes_clause()
            self.state = 3695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMPRESS or _la==PlSqlParser.NOCOMPRESS:
                self.state = 3694
                self.table_compression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_movement_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def MOVEMENT(self):
            return self.getToken(PlSqlParser.MOVEMENT, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_row_movement_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_movement_clause" ):
                listener.enterRow_movement_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_movement_clause" ):
                listener.exitRow_movement_clause(self)




    def row_movement_clause(self):

        localctx = PlSqlParser.Row_movement_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_row_movement_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE:
                self.state = 3697
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3700
            self.match(PlSqlParser.ROW)
            self.state = 3701
            self.match(PlSqlParser.MOVEMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_archive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flashback_archive = None # Token

        def FLASHBACK(self):
            return self.getToken(PlSqlParser.FLASHBACK, 0)

        def ARCHIVE(self):
            return self.getToken(PlSqlParser.ARCHIVE, 0)

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_flashback_archive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_archive_clause" ):
                listener.enterFlashback_archive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_archive_clause" ):
                listener.exitFlashback_archive_clause(self)




    def flashback_archive_clause(self):

        localctx = PlSqlParser.Flashback_archive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_flashback_archive_clause)
        try:
            self.state = 3709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.FLASHBACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3703
                self.match(PlSqlParser.FLASHBACK)
                self.state = 3704
                self.match(PlSqlParser.ARCHIVE)
                self.state = 3705
                localctx.flashback_archive = self.match(PlSqlParser.REGULAR_ID)
                pass
            elif token in [PlSqlParser.NO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3706
                self.match(PlSqlParser.NO)
                self.state = 3707
                self.match(PlSqlParser.FLASHBACK)
                self.state = 3708
                self.match(PlSqlParser.ARCHIVE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Log_grpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_log_grp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_grp" ):
                listener.enterLog_grp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_grp" ):
                listener.exitLog_grp(self)




    def log_grp(self):

        localctx = PlSqlParser.Log_grpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_log_grp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3711
            self.match(PlSqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Supplemental_table_loggingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def SUPPLEMENTAL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SUPPLEMENTAL)
            else:
                return self.getToken(PlSqlParser.SUPPLEMENTAL, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOG)
            else:
                return self.getToken(PlSqlParser.LOG, i)

        def supplemental_log_grp_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Supplemental_log_grp_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Supplemental_log_grp_clauseContext,i)


        def supplemental_id_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Supplemental_id_key_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Supplemental_id_key_clauseContext,i)


        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.GROUP)
            else:
                return self.getToken(PlSqlParser.GROUP, i)

        def log_grp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Log_grpContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Log_grpContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_supplemental_table_logging

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_table_logging" ):
                listener.enterSupplemental_table_logging(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_table_logging" ):
                listener.exitSupplemental_table_logging(self)




    def supplemental_table_logging(self):

        localctx = PlSqlParser.Supplemental_table_loggingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_supplemental_table_logging)
        self._la = 0 # Token type
        try:
            self.state = 3744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3713
                self.match(PlSqlParser.ADD)
                self.state = 3725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.SUPPLEMENTAL or _la==PlSqlParser.COMMA:
                    self.state = 3715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 3714
                        self.match(PlSqlParser.COMMA)


                    self.state = 3717
                    self.match(PlSqlParser.SUPPLEMENTAL)
                    self.state = 3718
                    self.match(PlSqlParser.LOG)
                    self.state = 3721
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.GROUP]:
                        self.state = 3719
                        self.supplemental_log_grp_clause()
                        pass
                    elif token in [PlSqlParser.DATA]:
                        self.state = 3720
                        self.supplemental_id_key_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PlSqlParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3728
                self.match(PlSqlParser.DROP)
                self.state = 3741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.SUPPLEMENTAL or _la==PlSqlParser.COMMA:
                    self.state = 3730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 3729
                        self.match(PlSqlParser.COMMA)


                    self.state = 3732
                    self.match(PlSqlParser.SUPPLEMENTAL)
                    self.state = 3733
                    self.match(PlSqlParser.LOG)
                    self.state = 3737
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.DATA]:
                        self.state = 3734
                        self.supplemental_id_key_clause()
                        pass
                    elif token in [PlSqlParser.GROUP]:
                        self.state = 3735
                        self.match(PlSqlParser.GROUP)
                        self.state = 3736
                        self.log_grp()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Supplemental_log_grp_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def log_grp(self):
            return self.getTypedRuleContext(PlSqlParser.Log_grpContext,0)


        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def ALWAYS(self):
            return self.getToken(PlSqlParser.ALWAYS, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NO)
            else:
                return self.getToken(PlSqlParser.NO, i)

        def LOG(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOG)
            else:
                return self.getToken(PlSqlParser.LOG, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_supplemental_log_grp_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_log_grp_clause" ):
                listener.enterSupplemental_log_grp_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_log_grp_clause" ):
                listener.exitSupplemental_log_grp_clause(self)




    def supplemental_log_grp_clause(self):

        localctx = PlSqlParser.Supplemental_log_grp_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_supplemental_log_grp_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3746
            self.match(PlSqlParser.GROUP)
            self.state = 3747
            self.log_grp()
            self.state = 3748
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3757 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 3749
                    self.match(PlSqlParser.COMMA)


                self.state = 3752
                self.regular_id()
                self.state = 3755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
                if la_ == 1:
                    self.state = 3753
                    self.match(PlSqlParser.NO)
                    self.state = 3754
                    self.match(PlSqlParser.LOG)


                self.state = 3759 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                    break

            self.state = 3761
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ALWAYS:
                self.state = 3762
                self.match(PlSqlParser.ALWAYS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Supplemental_id_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ALL)
            else:
                return self.getToken(PlSqlParser.ALL, i)

        def PRIMARY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PRIMARY)
            else:
                return self.getToken(PlSqlParser.PRIMARY, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.KEY)
            else:
                return self.getToken(PlSqlParser.KEY, i)

        def UNIQUE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNIQUE)
            else:
                return self.getToken(PlSqlParser.UNIQUE, i)

        def FOREIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FOREIGN)
            else:
                return self.getToken(PlSqlParser.FOREIGN, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_supplemental_id_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_id_key_clause" ):
                listener.enterSupplemental_id_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_id_key_clause" ):
                listener.exitSupplemental_id_key_clause(self)




    def supplemental_id_key_clause(self):

        localctx = PlSqlParser.Supplemental_id_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_supplemental_id_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.match(PlSqlParser.DATA)
            self.state = 3766
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3778 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 3767
                    self.match(PlSqlParser.COMMA)


                self.state = 3776
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ALL]:
                    self.state = 3770
                    self.match(PlSqlParser.ALL)
                    pass
                elif token in [PlSqlParser.PRIMARY]:
                    self.state = 3771
                    self.match(PlSqlParser.PRIMARY)
                    self.state = 3772
                    self.match(PlSqlParser.KEY)
                    pass
                elif token in [PlSqlParser.UNIQUE]:
                    self.state = 3773
                    self.match(PlSqlParser.UNIQUE)
                    pass
                elif token in [PlSqlParser.FOREIGN]:
                    self.state = 3774
                    self.match(PlSqlParser.FOREIGN)
                    self.state = 3775
                    self.match(PlSqlParser.KEY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3780 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.ALL or _la==PlSqlParser.FOREIGN or _la==PlSqlParser.PRIMARY or _la==PlSqlParser.UNIQUE or _la==PlSqlParser.COMMA):
                    break

            self.state = 3782
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3783
            self.match(PlSqlParser.COLUMNS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Allocate_extent_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.inst_num = None # Token

        def ALLOCATE(self):
            return self.getToken(PlSqlParser.ALLOCATE, 0)

        def EXTENT(self):
            return self.getToken(PlSqlParser.EXTENT, 0)

        def SIZE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SIZE)
            else:
                return self.getToken(PlSqlParser.SIZE, i)

        def size_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Size_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,i)


        def DATAFILE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DATAFILE)
            else:
                return self.getToken(PlSqlParser.DATAFILE, i)

        def INSTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INSTANCE)
            else:
                return self.getToken(PlSqlParser.INSTANCE, i)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_allocate_extent_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocate_extent_clause" ):
                listener.enterAllocate_extent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocate_extent_clause" ):
                listener.exitAllocate_extent_clause(self)




    def allocate_extent_clause(self):

        localctx = PlSqlParser.Allocate_extent_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_allocate_extent_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3785
            self.match(PlSqlParser.ALLOCATE)
            self.state = 3786
            self.match(PlSqlParser.EXTENT)
            self.state = 3799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3787
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3794 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3794
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.SIZE]:
                        self.state = 3788
                        self.match(PlSqlParser.SIZE)
                        self.state = 3789
                        self.size_clause()
                        pass
                    elif token in [PlSqlParser.DATAFILE]:
                        self.state = 3790
                        self.match(PlSqlParser.DATAFILE)
                        self.state = 3791
                        localctx.datafile = self.match(PlSqlParser.CHAR_STRING)
                        pass
                    elif token in [PlSqlParser.INSTANCE]:
                        self.state = 3792
                        self.match(PlSqlParser.INSTANCE)
                        self.state = 3793
                        localctx.inst_num = self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3796 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.DATAFILE or _la==PlSqlParser.INSTANCE or _la==PlSqlParser.SIZE):
                        break

                self.state = 3798
                self.match(PlSqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Deallocate_unused_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(PlSqlParser.DEALLOCATE, 0)

        def UNUSED(self):
            return self.getToken(PlSqlParser.UNUSED, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def size_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Size_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_deallocate_unused_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate_unused_clause" ):
                listener.enterDeallocate_unused_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate_unused_clause" ):
                listener.exitDeallocate_unused_clause(self)




    def deallocate_unused_clause(self):

        localctx = PlSqlParser.Deallocate_unused_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_deallocate_unused_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3801
            self.match(PlSqlParser.DEALLOCATE)
            self.state = 3802
            self.match(PlSqlParser.UNUSED)
            self.state = 3805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.KEEP:
                self.state = 3803
                self.match(PlSqlParser.KEEP)
                self.state = 3804
                self.size_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shrink_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHRINK(self):
            return self.getToken(PlSqlParser.SHRINK, 0)

        def SPACE_KEYWORD(self):
            return self.getToken(PlSqlParser.SPACE_KEYWORD, 0)

        def COMPACT(self):
            return self.getToken(PlSqlParser.COMPACT, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_shrink_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShrink_clause" ):
                listener.enterShrink_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShrink_clause" ):
                listener.exitShrink_clause(self)




    def shrink_clause(self):

        localctx = PlSqlParser.Shrink_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_shrink_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            self.match(PlSqlParser.SHRINK)
            self.state = 3808
            self.match(PlSqlParser.SPACE_KEYWORD)
            self.state = 3810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMPACT:
                self.state = 3809
                self.match(PlSqlParser.COMPACT)


            self.state = 3813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CASCADE:
                self.state = 3812
                self.match(PlSqlParser.CASCADE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Records_per_block_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORDS_PER_BLOCK(self):
            return self.getToken(PlSqlParser.RECORDS_PER_BLOCK, 0)

        def MINIMIZE(self):
            return self.getToken(PlSqlParser.MINIMIZE, 0)

        def NOMINIMIZE(self):
            return self.getToken(PlSqlParser.NOMINIMIZE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_records_per_block_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecords_per_block_clause" ):
                listener.enterRecords_per_block_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecords_per_block_clause" ):
                listener.exitRecords_per_block_clause(self)




    def records_per_block_clause(self):

        localctx = PlSqlParser.Records_per_block_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_records_per_block_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.MINIMIZE or _la==PlSqlParser.NOMINIMIZE:
                self.state = 3815
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.MINIMIZE or _la==PlSqlParser.NOMINIMIZE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3818
            self.match(PlSqlParser.RECORDS_PER_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upgrade_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPGRADE(self):
            return self.getToken(PlSqlParser.UPGRADE, 0)

        def column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,0)


        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_upgrade_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpgrade_table_clause" ):
                listener.enterUpgrade_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpgrade_table_clause" ):
                listener.exitUpgrade_table_clause(self)




    def upgrade_table_clause(self):

        localctx = PlSqlParser.Upgrade_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_upgrade_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3820
            self.match(PlSqlParser.UPGRADE)

            self.state = 3822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 3821
                self.match(PlSqlParser.NOT)


            self.state = 3824
            self.match(PlSqlParser.INCLUDING)
            self.state = 3825
            self.match(PlSqlParser.DATA)
            self.state = 3827
            self.column_properties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(PlSqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = PlSqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_drop_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3829
            self.match(PlSqlParser.DROP)
            self.state = 3830
            self.match(PlSqlParser.TABLE)
            self.state = 3831
            self.tableview_name()
            self.state = 3832
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_on_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(PlSqlParser.PERIOD, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_comment_on_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_on_column" ):
                listener.enterComment_on_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_on_column" ):
                listener.exitComment_on_column(self)




    def comment_on_column(self):

        localctx = PlSqlParser.Comment_on_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_comment_on_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3834
            self.match(PlSqlParser.COMMENT)
            self.state = 3835
            self.match(PlSqlParser.ON)
            self.state = 3836
            self.match(PlSqlParser.COLUMN)
            self.state = 3837
            self.tableview_name()
            self.state = 3838
            self.match(PlSqlParser.PERIOD)
            self.state = 3839
            self.column_name()
            self.state = 3840
            self.match(PlSqlParser.IS)
            self.state = 3841
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enable_or_disableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_enable_or_disable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_or_disable" ):
                listener.enterEnable_or_disable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_or_disable" ):
                listener.exitEnable_or_disable(self)




    def enable_or_disable(self):

        localctx = PlSqlParser.Enable_or_disableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_enable_or_disable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3843
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Allow_or_disallowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(PlSqlParser.ALLOW, 0)

        def DISALLOW(self):
            return self.getToken(PlSqlParser.DISALLOW, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_allow_or_disallow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_or_disallow" ):
                listener.enterAllow_or_disallow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_or_disallow" ):
                listener.exitAllow_or_disallow(self)




    def allow_or_disallow(self):

        localctx = PlSqlParser.Allow_or_disallowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_allow_or_disallow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3845
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALLOW or _la==PlSqlParser.DISALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def PUBLIC(self):
            return self.getToken(PlSqlParser.PUBLIC, 0)

        def SYNONYM(self):
            return self.getToken(PlSqlParser.SYNONYM, 0)

        def synonym_name(self):
            return self.getTypedRuleContext(PlSqlParser.Synonym_nameContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_object_nameContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def schema_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Schema_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Schema_nameContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PERIOD)
            else:
                return self.getToken(PlSqlParser.PERIOD, i)

        def AT_SIGN(self):
            return self.getToken(PlSqlParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_synonym" ):
                listener.enterCreate_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_synonym" ):
                listener.exitCreate_synonym(self)




    def create_synonym(self):

        localctx = PlSqlParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_create_synonym)
        self._la = 0 # Token type
        try:
            self.state = 3889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3847
                self.match(PlSqlParser.CREATE)
                self.state = 3850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OR:
                    self.state = 3848
                    self.match(PlSqlParser.OR)
                    self.state = 3849
                    self.match(PlSqlParser.REPLACE)


                self.state = 3852
                self.match(PlSqlParser.PUBLIC)
                self.state = 3853
                self.match(PlSqlParser.SYNONYM)
                self.state = 3854
                self.synonym_name()
                self.state = 3855
                self.match(PlSqlParser.FOR)
                self.state = 3859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
                if la_ == 1:
                    self.state = 3856
                    self.schema_name()
                    self.state = 3857
                    self.match(PlSqlParser.PERIOD)


                self.state = 3861
                self.schema_object_name()
                self.state = 3864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AT_SIGN:
                    self.state = 3862
                    self.match(PlSqlParser.AT_SIGN)
                    self.state = 3863
                    self.link_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3866
                self.match(PlSqlParser.CREATE)
                self.state = 3869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OR:
                    self.state = 3867
                    self.match(PlSqlParser.OR)
                    self.state = 3868
                    self.match(PlSqlParser.REPLACE)


                self.state = 3871
                self.match(PlSqlParser.SYNONYM)
                self.state = 3875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 3872
                    self.schema_name()
                    self.state = 3873
                    self.match(PlSqlParser.PERIOD)


                self.state = 3877
                self.synonym_name()
                self.state = 3878
                self.match(PlSqlParser.FOR)
                self.state = 3882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
                if la_ == 1:
                    self.state = 3879
                    self.schema_name()
                    self.state = 3880
                    self.match(PlSqlParser.PERIOD)


                self.state = 3884
                self.schema_object_name()
                self.state = 3887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AT_SIGN:
                    self.state = 3885
                    self.match(PlSqlParser.AT_SIGN)
                    self.state = 3886
                    self.link_name()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_on_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_comment_on_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_on_table" ):
                listener.enterComment_on_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_on_table" ):
                listener.exitComment_on_table(self)




    def comment_on_table(self):

        localctx = PlSqlParser.Comment_on_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_comment_on_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3891
            self.match(PlSqlParser.COMMENT)
            self.state = 3892
            self.match(PlSqlParser.ON)
            self.state = 3893
            self.match(PlSqlParser.TABLE)
            self.state = 3894
            self.tableview_name()
            self.state = 3895
            self.match(PlSqlParser.IS)
            self.state = 3896
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TABLE)
            else:
                return self.getToken(PlSqlParser.TABLE, i)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def alter_table_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_table_propertiesContext,0)


        def column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Column_clausesContext,0)


        def constraint_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_clausesContext,0)


        def move_table_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Move_table_clauseContext,0)


        def enable_disable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Enable_disable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Enable_disable_clauseContext,i)


        def enable_or_disable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Enable_or_disableContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Enable_or_disableContext,i)


        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOCK)
            else:
                return self.getToken(PlSqlParser.LOCK, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ALL)
            else:
                return self.getToken(PlSqlParser.ALL, i)

        def TRIGGERS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TRIGGERS)
            else:
                return self.getToken(PlSqlParser.TRIGGERS, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)




    def alter_table(self):

        localctx = PlSqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3898
            self.match(PlSqlParser.ALTER)
            self.state = 3899
            self.match(PlSqlParser.TABLE)
            self.state = 3900
            self.tableview_name()
            self.state = 3906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                pass

            elif la_ == 2:
                self.state = 3902
                self.alter_table_properties()
                pass

            elif la_ == 3:
                self.state = 3903
                self.column_clauses()
                pass

            elif la_ == 4:
                self.state = 3904
                self.constraint_clauses()
                pass

            elif la_ == 5:
                self.state = 3905
                self.move_table_clause()
                pass


            self.state = 3920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE:
                self.state = 3916 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3916
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                    if la_ == 1:
                        self.state = 3908
                        self.enable_disable_clause()
                        pass

                    elif la_ == 2:
                        self.state = 3909
                        self.enable_or_disable()
                        self.state = 3914
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.TABLE]:
                            self.state = 3910
                            self.match(PlSqlParser.TABLE)
                            self.state = 3911
                            self.match(PlSqlParser.LOCK)
                            pass
                        elif token in [PlSqlParser.ALL]:
                            self.state = 3912
                            self.match(PlSqlParser.ALL)
                            self.state = 3913
                            self.match(PlSqlParser.TRIGGERS)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass


                    self.state = 3918 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                        break



            self.state = 3922
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_properties_1(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_table_properties_1Context,0)


        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def shrink_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Shrink_clauseContext,0)


        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def REKEY(self):
            return self.getToken(PlSqlParser.REKEY, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_table_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_properties" ):
                listener.enterAlter_table_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_properties" ):
                listener.exitAlter_table_properties(self)




    def alter_table_properties(self):

        localctx = PlSqlParser.Alter_table_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_alter_table_properties)
        try:
            self.state = 3935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3924
                self.alter_table_properties_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3925
                self.match(PlSqlParser.RENAME)
                self.state = 3926
                self.match(PlSqlParser.TO)
                self.state = 3927
                self.tableview_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3928
                self.shrink_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3929
                self.match(PlSqlParser.READ)
                self.state = 3930
                self.match(PlSqlParser.ONLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3931
                self.match(PlSqlParser.READ)
                self.state = 3932
                self.match(PlSqlParser.WRITE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3933
                self.match(PlSqlParser.REKEY)
                self.state = 3934
                self.match(PlSqlParser.CHAR_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_properties_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_attributes_clauseContext,i)


        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def table_compression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Table_compressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Table_compressionContext,i)


        def supplemental_table_logging(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Supplemental_table_loggingContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Supplemental_table_loggingContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Allocate_extent_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Deallocate_unused_clauseContext,i)


        def RESULT_CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.RESULT_CACHE)
            else:
                return self.getToken(PlSqlParser.RESULT_CACHE, i)

        def MODE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MODE)
            else:
                return self.getToken(PlSqlParser.MODE, i)

        def upgrade_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Upgrade_table_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Upgrade_table_clauseContext,i)


        def records_per_block_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Records_per_block_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Records_per_block_clauseContext,i)


        def parallel_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parallel_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,i)


        def row_movement_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Row_movement_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Row_movement_clauseContext,i)


        def flashback_archive_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Flashback_archive_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Flashback_archive_clauseContext,i)


        def alter_iot_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_iot_clausesContext,0)


        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CACHE)
            else:
                return self.getToken(PlSqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCACHE)
            else:
                return self.getToken(PlSqlParser.NOCACHE, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DEFAULT)
            else:
                return self.getToken(PlSqlParser.DEFAULT, i)

        def FORCE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FORCE)
            else:
                return self.getToken(PlSqlParser.FORCE, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_table_properties_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_properties_1" ):
                listener.enterAlter_table_properties_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_properties_1" ):
                listener.exitAlter_table_properties_1(self)




    def alter_table_properties_1(self):

        localctx = PlSqlParser.Alter_table_properties_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_alter_table_properties_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3954 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3954
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.INITRANS, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE]:
                        self.state = 3937
                        self.physical_attributes_clause()
                        pass
                    elif token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING]:
                        self.state = 3938
                        self.logging_clause()
                        pass
                    elif token in [PlSqlParser.COMPRESS, PlSqlParser.NOCOMPRESS]:
                        self.state = 3939
                        self.table_compression()
                        pass
                    elif token in [PlSqlParser.ADD, PlSqlParser.DROP]:
                        self.state = 3940
                        self.supplemental_table_logging()
                        pass
                    elif token in [PlSqlParser.ALLOCATE]:
                        self.state = 3941
                        self.allocate_extent_clause()
                        pass
                    elif token in [PlSqlParser.DEALLOCATE]:
                        self.state = 3942
                        self.deallocate_unused_clause()
                        pass
                    elif token in [PlSqlParser.CACHE, PlSqlParser.NOCACHE]:
                        self.state = 3943
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.CACHE or _la==PlSqlParser.NOCACHE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [PlSqlParser.RESULT_CACHE]:
                        self.state = 3944
                        self.match(PlSqlParser.RESULT_CACHE)
                        self.state = 3945
                        self.match(PlSqlParser.LEFT_PAREN)
                        self.state = 3946
                        self.match(PlSqlParser.MODE)
                        self.state = 3947
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.FORCE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3948
                        self.match(PlSqlParser.RIGHT_PAREN)
                        pass
                    elif token in [PlSqlParser.UPGRADE]:
                        self.state = 3949
                        self.upgrade_table_clause()
                        pass
                    elif token in [PlSqlParser.MINIMIZE, PlSqlParser.NOMINIMIZE, PlSqlParser.RECORDS_PER_BLOCK]:
                        self.state = 3950
                        self.records_per_block_clause()
                        pass
                    elif token in [PlSqlParser.NOPARALLEL, PlSqlParser.PARALLEL]:
                        self.state = 3951
                        self.parallel_clause()
                        pass
                    elif token in [PlSqlParser.DISABLE, PlSqlParser.ENABLE, PlSqlParser.ROW]:
                        self.state = 3952
                        self.row_movement_clause()
                        pass
                    elif token in [PlSqlParser.FLASHBACK, PlSqlParser.NO]:
                        self.state = 3953
                        self.flashback_archive_clause()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3956 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,492,self._ctx)

            self.state = 3959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ADD or _la==PlSqlParser.COALESCE or _la==PlSqlParser.COMPRESS or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & ((1 << (PlSqlParser.MAPPING - 318)) | (1 << (PlSqlParser.NOCOMPRESS - 318)) | (1 << (PlSqlParser.NOMAPPING - 318)))) != 0) or _la==PlSqlParser.OVERFLOW or _la==PlSqlParser.PCTTHRESHOLD:
                self.state = 3958
                self.alter_iot_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_iot_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_org_table_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Index_org_table_clauseContext,0)


        def alter_overflow_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_overflow_clauseContext,0)


        def alter_mapping_table_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_mapping_table_clauseContext,0)


        def COALESCE(self):
            return self.getToken(PlSqlParser.COALESCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_iot_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_iot_clauses" ):
                listener.enterAlter_iot_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_iot_clauses" ):
                listener.exitAlter_iot_clauses(self)




    def alter_iot_clauses(self):

        localctx = PlSqlParser.Alter_iot_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alter_iot_clauses)
        try:
            self.state = 3965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3961
                self.index_org_table_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3962
                self.alter_overflow_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3963
                self.alter_mapping_table_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3964
                self.match(PlSqlParser.COALESCE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(PlSqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def allocate_extent_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Allocate_extent_clauseContext,0)


        def deallocate_unused_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Deallocate_unused_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_mapping_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_mapping_table_clause" ):
                listener.enterAlter_mapping_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_mapping_table_clause" ):
                listener.exitAlter_mapping_table_clause(self)




    def alter_mapping_table_clause(self):

        localctx = PlSqlParser.Alter_mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_alter_mapping_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self.match(PlSqlParser.MAPPING)
            self.state = 3968
            self.match(PlSqlParser.TABLE)
            self.state = 3971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALLOCATE]:
                self.state = 3969
                self.allocate_extent_clause()
                pass
            elif token in [PlSqlParser.DEALLOCATE]:
                self.state = 3970
                self.deallocate_unused_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_overflow_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Add_overflow_clauseContext,0)


        def OVERFLOW(self):
            return self.getToken(PlSqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Segment_attributes_clauseContext,i)


        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Deallocate_unused_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_overflow_clause" ):
                listener.enterAlter_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_overflow_clause" ):
                listener.exitAlter_overflow_clause(self)




    def alter_overflow_clause(self):

        localctx = PlSqlParser.Alter_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_alter_overflow_clause)
        self._la = 0 # Token type
        try:
            self.state = 3983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3973
                self.add_overflow_clause()
                pass
            elif token in [PlSqlParser.OVERFLOW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3974
                self.match(PlSqlParser.OVERFLOW)
                self.state = 3979 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3979
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.INITRANS, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.STORAGE, PlSqlParser.TABLESPACE]:
                        self.state = 3975
                        self.segment_attributes_clause()
                        pass
                    elif token in [PlSqlParser.ALLOCATE]:
                        self.state = 3976
                        self.allocate_extent_clause()
                        pass
                    elif token in [PlSqlParser.SHRINK]:
                        self.state = 3977
                        self.shrink_clause()
                        pass
                    elif token in [PlSqlParser.DEALLOCATE]:
                        self.state = 3978
                        self.deallocate_unused_clause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3981 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.ALLOCATE or _la==PlSqlParser.DEALLOCATE or _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or ((((_la - 536)) & ~0x3f) == 0 and ((1 << (_la - 536)) & ((1 << (PlSqlParser.SHRINK - 536)) | (1 << (PlSqlParser.STORAGE - 536)) | (1 << (PlSqlParser.TABLESPACE - 536)))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def OVERFLOW(self):
            return self.getToken(PlSqlParser.OVERFLOW, 0)

        def segment_attributes_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Segment_attributes_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Segment_attributes_clauseContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PARTITION)
            else:
                return self.getToken(PlSqlParser.PARTITION, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_add_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_overflow_clause" ):
                listener.enterAdd_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_overflow_clause" ):
                listener.exitAdd_overflow_clause(self)




    def add_overflow_clause(self):

        localctx = PlSqlParser.Add_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_add_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3985
            self.match(PlSqlParser.ADD)
            self.state = 3986
            self.match(PlSqlParser.OVERFLOW)
            self.state = 3988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                self.state = 3987
                self.segment_attributes_clause()


            self.state = 4003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3990
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3998 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 3991
                        self.match(PlSqlParser.COMMA)


                    self.state = 3994
                    self.match(PlSqlParser.PARTITION)
                    self.state = 3996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                        self.state = 3995
                        self.segment_attributes_clause()


                    self.state = 4000 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.PARTITION or _la==PlSqlParser.COMMA):
                        break

                self.state = 4002
                self.match(PlSqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enable_disable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def using_index_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_index_clauseContext,0)


        def exceptions_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Exceptions_clauseContext,0)


        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def VALIDATE(self):
            return self.getToken(PlSqlParser.VALIDATE, 0)

        def NOVALIDATE(self):
            return self.getToken(PlSqlParser.NOVALIDATE, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_enable_disable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_disable_clause" ):
                listener.enterEnable_disable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_disable_clause" ):
                listener.exitEnable_disable_clause(self)




    def enable_disable_clause(self):

        localctx = PlSqlParser.Enable_disable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_enable_disable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4005
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOVALIDATE or _la==PlSqlParser.VALIDATE:
                self.state = 4006
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOVALIDATE or _la==PlSqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UNIQUE]:
                self.state = 4009
                self.match(PlSqlParser.UNIQUE)
                self.state = 4010
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4015 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4011
                        self.match(PlSqlParser.COMMA)


                    self.state = 4014
                    self.column_name()
                    self.state = 4017 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 4019
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.PRIMARY]:
                self.state = 4021
                self.match(PlSqlParser.PRIMARY)
                self.state = 4022
                self.match(PlSqlParser.KEY)
                pass
            elif token in [PlSqlParser.CONSTRAINT]:
                self.state = 4023
                self.match(PlSqlParser.CONSTRAINT)
                self.state = 4024
                self.constraint_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 4027
                self.using_index_clause()


            self.state = 4031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCEPTIONS:
                self.state = 4030
                self.exceptions_clause()


            self.state = 4034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CASCADE:
                self.state = 4033
                self.match(PlSqlParser.CASCADE)


            self.state = 4038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DROP or _la==PlSqlParser.KEEP:
                self.state = 4036
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DROP or _la==PlSqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4037
                self.match(PlSqlParser.INDEX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def create_index(self):
            return self.getTypedRuleContext(PlSqlParser.Create_indexContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_using_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_index_clause" ):
                listener.enterUsing_index_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_index_clause" ):
                listener.exitUsing_index_clause(self)




    def using_index_clause(self):

        localctx = PlSqlParser.Using_index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_using_index_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4040
            self.match(PlSqlParser.USING)
            self.state = 4041
            self.match(PlSqlParser.INDEX)
            self.state = 4047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 4042
                self.index_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 4043
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4044
                self.create_index()
                self.state = 4045
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exceptions_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_exceptions_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptions_clause" ):
                listener.enterExceptions_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptions_clause" ):
                listener.exitExceptions_clause(self)




    def exceptions_clause(self):

        localctx = PlSqlParser.Exceptions_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptions_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4049
            self.match(PlSqlParser.EXCEPTIONS)
            self.state = 4050
            self.match(PlSqlParser.INTO)
            self.state = 4051
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Move_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(PlSqlParser.MOVE, 0)

        def ONLINE(self):
            return self.getToken(PlSqlParser.ONLINE, 0)

        def segment_attributes_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Segment_attributes_clauseContext,0)


        def table_compression(self):
            return self.getTypedRuleContext(PlSqlParser.Table_compressionContext,0)


        def index_org_table_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Index_org_table_clauseContext,0)


        def parallel_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Parallel_clauseContext,0)


        def lob_storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_storage_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_storage_clauseContext,i)


        def varray_col_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Varray_col_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Varray_col_propertiesContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_move_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove_table_clause" ):
                listener.enterMove_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove_table_clause" ):
                listener.exitMove_table_clause(self)




    def move_table_clause(self):

        localctx = PlSqlParser.Move_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_move_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            self.match(PlSqlParser.MOVE)
            self.state = 4055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ONLINE:
                self.state = 4054
                self.match(PlSqlParser.ONLINE)


            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                self.state = 4057
                self.segment_attributes_clause()


            self.state = 4061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
            if la_ == 1:
                self.state = 4060
                self.table_compression()


            self.state = 4064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMPRESS or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & ((1 << (PlSqlParser.MAPPING - 318)) | (1 << (PlSqlParser.NOCOMPRESS - 318)) | (1 << (PlSqlParser.NOMAPPING - 318)))) != 0) or _la==PlSqlParser.PCTTHRESHOLD:
                self.state = 4063
                self.index_org_table_clause()


            self.state = 4072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOB or _la==PlSqlParser.VARRAY:
                self.state = 4068 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4068
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.LOB]:
                        self.state = 4066
                        self.lob_storage_clause()
                        pass
                    elif token in [PlSqlParser.VARRAY]:
                        self.state = 4067
                        self.varray_col_properties()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4070 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.LOB or _la==PlSqlParser.VARRAY):
                        break



            self.state = 4075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOPARALLEL or _la==PlSqlParser.PARALLEL:
                self.state = 4074
                self.parallel_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_org_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapping_table_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Mapping_table_clauseContext,0)


        def PCTTHRESHOLD(self):
            return self.getToken(PlSqlParser.PCTTHRESHOLD, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def key_compression(self):
            return self.getTypedRuleContext(PlSqlParser.Key_compressionContext,0)


        def index_org_overflow_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Index_org_overflow_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_index_org_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_org_table_clause" ):
                listener.enterIndex_org_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_org_table_clause" ):
                listener.exitIndex_org_table_clause(self)




    def index_org_table_clause(self):

        localctx = PlSqlParser.Index_org_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_index_org_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAPPING, PlSqlParser.NOMAPPING]:
                self.state = 4077
                self.mapping_table_clause()
                pass
            elif token in [PlSqlParser.PCTTHRESHOLD]:
                self.state = 4078
                self.match(PlSqlParser.PCTTHRESHOLD)
                self.state = 4079
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.COMPRESS, PlSqlParser.NOCOMPRESS]:
                self.state = 4080
                self.key_compression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INCLUDING or _la==PlSqlParser.OVERFLOW:
                self.state = 4083
                self.index_org_overflow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_table_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(PlSqlParser.MAPPING, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def NOMAPPING(self):
            return self.getToken(PlSqlParser.NOMAPPING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_mapping_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_table_clause" ):
                listener.enterMapping_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_table_clause" ):
                listener.exitMapping_table_clause(self)




    def mapping_table_clause(self):

        localctx = PlSqlParser.Mapping_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_mapping_table_clause)
        try:
            self.state = 4089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAPPING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4086
                self.match(PlSqlParser.MAPPING)
                self.state = 4087
                self.match(PlSqlParser.TABLE)
                pass
            elif token in [PlSqlParser.NOMAPPING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4088
                self.match(PlSqlParser.NOMAPPING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_compressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(PlSqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(PlSqlParser.COMPRESS, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_key_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_compression" ):
                listener.enterKey_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_compression" ):
                listener.exitKey_compression(self)




    def key_compression(self):

        localctx = PlSqlParser.Key_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_key_compression)
        try:
            self.state = 4094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4091
                self.match(PlSqlParser.NOCOMPRESS)
                pass
            elif token in [PlSqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4092
                self.match(PlSqlParser.COMPRESS)
                self.state = 4093
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_org_overflow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(PlSqlParser.OVERFLOW, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def segment_attributes_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Segment_attributes_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_index_org_overflow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_org_overflow_clause" ):
                listener.enterIndex_org_overflow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_org_overflow_clause" ):
                listener.exitIndex_org_overflow_clause(self)




    def index_org_overflow_clause(self):

        localctx = PlSqlParser.Index_org_overflow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_index_org_overflow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INCLUDING:
                self.state = 4096
                self.match(PlSqlParser.INCLUDING)
                self.state = 4097
                self.column_name()


            self.state = 4100
            self.match(PlSqlParser.OVERFLOW)
            self.state = 4102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING or _la==PlSqlParser.PCTFREE or _la==PlSqlParser.PCTUSED or _la==PlSqlParser.STORAGE or _la==PlSqlParser.TABLESPACE:
                self.state = 4101
                self.segment_attributes_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_modify_drop_column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Add_modify_drop_column_clausesContext,0)


        def rename_column_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Rename_column_clauseContext,0)


        def modify_collection_retrieval(self):
            return self.getTypedRuleContext(PlSqlParser.Modify_collection_retrievalContext,0)


        def modify_lob_storage_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Modify_lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_clauses" ):
                listener.enterColumn_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_clauses" ):
                listener.exitColumn_clauses(self)




    def column_clauses(self):

        localctx = PlSqlParser.Column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_column_clauses)
        try:
            self.state = 4108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4104
                self.add_modify_drop_column_clauses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4105
                self.rename_column_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4106
                self.modify_collection_retrieval()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4107
                self.modify_lob_storage_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_collection_retrievalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def collection_item(self):
            return self.getTypedRuleContext(PlSqlParser.Collection_itemContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(PlSqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_collection_retrieval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_collection_retrieval" ):
                listener.enterModify_collection_retrieval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_collection_retrieval" ):
                listener.exitModify_collection_retrieval(self)




    def modify_collection_retrieval(self):

        localctx = PlSqlParser.Modify_collection_retrievalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_modify_collection_retrieval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4110
            self.match(PlSqlParser.MODIFY)
            self.state = 4111
            self.match(PlSqlParser.NESTED)
            self.state = 4112
            self.match(PlSqlParser.TABLE)
            self.state = 4113
            self.collection_item()
            self.state = 4114
            self.match(PlSqlParser.RETURN)
            self.state = 4115
            self.match(PlSqlParser.AS)
            self.state = 4116
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.LOCATOR or _la==PlSqlParser.VALUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_collection_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_item" ):
                listener.enterCollection_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_item" ):
                listener.exitCollection_item(self)




    def collection_item(self):

        localctx = PlSqlParser.Collection_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_collection_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4118
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rename_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def old_column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Old_column_nameContext,0)


        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def new_column_name(self):
            return self.getTypedRuleContext(PlSqlParser.New_column_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_rename_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_column_clause" ):
                listener.enterRename_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_column_clause" ):
                listener.exitRename_column_clause(self)




    def rename_column_clause(self):

        localctx = PlSqlParser.Rename_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_rename_column_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4120
            self.match(PlSqlParser.RENAME)
            self.state = 4121
            self.match(PlSqlParser.COLUMN)
            self.state = 4122
            self.old_column_name()
            self.state = 4123
            self.match(PlSqlParser.TO)
            self.state = 4124
            self.new_column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_old_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_column_name" ):
                listener.enterOld_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_column_name" ):
                listener.exitOld_column_name(self)




    def old_column_name(self):

        localctx = PlSqlParser.Old_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_old_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4126
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_new_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_column_name" ):
                listener.enterNew_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_column_name" ):
                listener.exitNew_column_name(self)




    def new_column_name(self):

        localctx = PlSqlParser.New_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_new_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4128
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_modify_drop_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Add_column_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Add_column_clauseContext,i)


        def modify_column_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Modify_column_clausesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Modify_column_clausesContext,i)


        def drop_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Drop_column_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Drop_column_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_add_modify_drop_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_modify_drop_column_clauses" ):
                listener.enterAdd_modify_drop_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_modify_drop_column_clauses" ):
                listener.exitAdd_modify_drop_column_clauses(self)




    def add_modify_drop_column_clauses(self):

        localctx = PlSqlParser.Add_modify_drop_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_add_modify_drop_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4133
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ADD]:
                    self.state = 4130
                    self.add_column_clause()
                    pass
                elif token in [PlSqlParser.MODIFY]:
                    self.state = 4131
                    self.modify_column_clauses()
                    pass
                elif token in [PlSqlParser.DROP, PlSqlParser.SET]:
                    self.state = 4132
                    self.drop_column_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.ADD or _la==PlSqlParser.DROP or _la==PlSqlParser.MODIFY or _la==PlSqlParser.SET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def UNUSED(self):
            return self.getToken(PlSqlParser.UNUSED, 0)

        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CASCADE)
            else:
                return self.getToken(PlSqlParser.CASCADE, i)

        def CONSTRAINTS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CONSTRAINTS)
            else:
                return self.getToken(PlSqlParser.CONSTRAINTS, i)

        def INVALIDATE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INVALIDATE)
            else:
                return self.getToken(PlSqlParser.INVALIDATE, i)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def CHECKPOINT(self):
            return self.getToken(PlSqlParser.CHECKPOINT, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_clause" ):
                listener.enterDrop_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_clause" ):
                listener.exitDrop_column_clause(self)




    def drop_column_clause(self):

        localctx = PlSqlParser.Drop_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_drop_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 4199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4137
                self.match(PlSqlParser.SET)
                self.state = 4138
                self.match(PlSqlParser.UNUSED)
                self.state = 4152
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.COLUMN]:
                    self.state = 4139
                    self.match(PlSqlParser.COLUMN)
                    self.state = 4140
                    self.column_name()
                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 4141
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4146 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4143
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 4142
                            self.match(PlSqlParser.COMMA)


                        self.state = 4145
                        self.column_name()
                        self.state = 4148 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                            break

                    self.state = 4150
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.CASCADE or _la==PlSqlParser.INVALIDATE:
                    self.state = 4157
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.CASCADE]:
                        self.state = 4154
                        self.match(PlSqlParser.CASCADE)
                        self.state = 4155
                        self.match(PlSqlParser.CONSTRAINTS)
                        pass
                    elif token in [PlSqlParser.INVALIDATE]:
                        self.state = 4156
                        self.match(PlSqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4162
                self.match(PlSqlParser.DROP)
                self.state = 4176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.COLUMN]:
                    self.state = 4163
                    self.match(PlSqlParser.COLUMN)
                    self.state = 4164
                    self.column_name()
                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 4165
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4170 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4167
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 4166
                            self.match(PlSqlParser.COMMA)


                        self.state = 4169
                        self.column_name()
                        self.state = 4172 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                            break

                    self.state = 4174
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.CASCADE or _la==PlSqlParser.INVALIDATE:
                    self.state = 4181
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.CASCADE]:
                        self.state = 4178
                        self.match(PlSqlParser.CASCADE)
                        self.state = 4179
                        self.match(PlSqlParser.CONSTRAINTS)
                        pass
                    elif token in [PlSqlParser.INVALIDATE]:
                        self.state = 4180
                        self.match(PlSqlParser.INVALIDATE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CHECKPOINT:
                    self.state = 4186
                    self.match(PlSqlParser.CHECKPOINT)
                    self.state = 4187
                    self.match(PlSqlParser.UNSIGNED_INTEGER)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4190
                self.match(PlSqlParser.DROP)
                self.state = 4195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.UNUSED]:
                    self.state = 4191
                    self.match(PlSqlParser.UNUSED)
                    self.state = 4192
                    self.match(PlSqlParser.COLUMNS)
                    pass
                elif token in [PlSqlParser.COLUMNS]:
                    self.state = 4193
                    self.match(PlSqlParser.COLUMNS)
                    self.state = 4194
                    self.match(PlSqlParser.CONTINUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4197
                self.match(PlSqlParser.CHECKPOINT)
                self.state = 4198
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def modify_col_substitutable(self):
            return self.getTypedRuleContext(PlSqlParser.Modify_col_substitutableContext,0)


        def modify_col_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Modify_col_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Modify_col_propertiesContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_column_clauses" ):
                listener.enterModify_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_column_clauses" ):
                listener.exitModify_column_clauses(self)




    def modify_column_clauses(self):

        localctx = PlSqlParser.Modify_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_modify_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            self.match(PlSqlParser.MODIFY)
            self.state = 4214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LEFT_PAREN]:
                self.state = 4202
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4203
                        self.match(PlSqlParser.COMMA)


                    self.state = 4206
                    self.modify_col_properties()
                    self.state = 4209 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 4211
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.COLUMN]:
                self.state = 4213
                self.modify_col_substitutable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(PlSqlParser.ENCRYPT, 0)

        def encryption_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Encryption_specContext,0)


        def DECRYPT(self):
            return self.getToken(PlSqlParser.DECRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_storage_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_col_properties" ):
                listener.enterModify_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_col_properties" ):
                listener.exitModify_col_properties(self)




    def modify_col_properties(self):

        localctx = PlSqlParser.Modify_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_modify_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4216
            self.column_name()
            self.state = 4218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
            if la_ == 1:
                self.state = 4217
                self.datatype()


            self.state = 4222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT:
                self.state = 4220
                self.match(PlSqlParser.DEFAULT)
                self.state = 4221
                self.expression()


            self.state = 4227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ENCRYPT]:
                self.state = 4224
                self.match(PlSqlParser.ENCRYPT)
                self.state = 4225
                self.encryption_spec()
                pass
            elif token in [PlSqlParser.DECRYPT]:
                self.state = 4226
                self.match(PlSqlParser.DECRYPT)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHECK, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOB, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIMARY, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCES, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNIQUE, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.RIGHT_PAREN, PlSqlParser.COMMA, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                pass
            else:
                pass
            self.state = 4232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,549,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4229
                    self.inline_constraint() 
                self.state = 4234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,549,self._ctx)

            self.state = 4236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOB:
                self.state = 4235
                self.lob_storage_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_col_substitutableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(PlSqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_col_substitutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_col_substitutable" ):
                listener.enterModify_col_substitutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_col_substitutable" ):
                listener.exitModify_col_substitutable(self)




    def modify_col_substitutable(self):

        localctx = PlSqlParser.Modify_col_substitutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_modify_col_substitutable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4238
            self.match(PlSqlParser.COLUMN)
            self.state = 4239
            self.column_name()
            self.state = 4241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 4240
                self.match(PlSqlParser.NOT)


            self.state = 4243
            self.match(PlSqlParser.SUBSTITUTABLE)
            self.state = 4244
            self.match(PlSqlParser.AT)
            self.state = 4245
            self.match(PlSqlParser.ALL)
            self.state = 4246
            self.match(PlSqlParser.LEVELS)
            self.state = 4248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE:
                self.state = 4247
                self.match(PlSqlParser.FORCE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_definitionContext,i)


        def virtual_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Virtual_column_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Virtual_column_definitionContext,i)


        def column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_add_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_column_clause" ):
                listener.enterAdd_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_column_clause" ):
                listener.exitAdd_column_clause(self)




    def add_column_clause(self):

        localctx = PlSqlParser.Add_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_add_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4250
            self.match(PlSqlParser.ADD)
            self.state = 4251
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4260 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
                if la_ == 1:
                    self.state = 4253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4252
                        self.match(PlSqlParser.COMMA)


                    self.state = 4255
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 4257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4256
                        self.match(PlSqlParser.COMMA)


                    self.state = 4259
                    self.virtual_column_definition()
                    pass


                self.state = 4262 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 4264
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COLUMN or _la==PlSqlParser.LOB or _la==PlSqlParser.NESTED or _la==PlSqlParser.VARRAY or _la==PlSqlParser.XMLTYPE:
                self.state = 4265
                self.column_properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_varray_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def varray_item(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_itemContext,0)


        def modify_lob_parameters(self):
            return self.getTypedRuleContext(PlSqlParser.Modify_lob_parametersContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_varray_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_varray_col_properties" ):
                listener.enterAlter_varray_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_varray_col_properties" ):
                listener.exitAlter_varray_col_properties(self)




    def alter_varray_col_properties(self):

        localctx = PlSqlParser.Alter_varray_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_alter_varray_col_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4268
            self.match(PlSqlParser.MODIFY)
            self.state = 4269
            self.match(PlSqlParser.VARRAY)
            self.state = 4270
            self.varray_item()
            self.state = 4271
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4272
            self.modify_lob_parameters()
            self.state = 4273
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def varray_item(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_itemContext,0)


        def varray_storage_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_storage_clauseContext,0)


        def substitutable_column_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Substitutable_column_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_varray_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_col_properties" ):
                listener.enterVarray_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_col_properties" ):
                listener.exitVarray_col_properties(self)




    def varray_col_properties(self):

        localctx = PlSqlParser.Varray_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_varray_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4275
            self.match(PlSqlParser.VARRAY)
            self.state = 4276
            self.varray_item()
            self.state = 4282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.state = 4278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ELEMENT or _la==PlSqlParser.IS or _la==PlSqlParser.NOT or _la==PlSqlParser.SUBSTITUTABLE:
                    self.state = 4277
                    self.substitutable_column_clause()


                self.state = 4280
                self.varray_storage_clause()
                pass

            elif la_ == 2:
                self.state = 4281
                self.substitutable_column_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def LOB(self):
            return self.getToken(PlSqlParser.LOB, 0)

        def lob_storage_parameters(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_storage_parametersContext,0)


        def lob_segname(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_segnameContext,0)


        def SECUREFILE(self):
            return self.getToken(PlSqlParser.SECUREFILE, 0)

        def BASICFILE(self):
            return self.getToken(PlSqlParser.BASICFILE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_varray_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_storage_clause" ):
                listener.enterVarray_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_storage_clause" ):
                listener.exitVarray_storage_clause(self)




    def varray_storage_clause(self):

        localctx = PlSqlParser.Varray_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_varray_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4284
            self.match(PlSqlParser.STORE)
            self.state = 4285
            self.match(PlSqlParser.AS)
            self.state = 4287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE:
                self.state = 4286
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4289
            self.match(PlSqlParser.LOB)
            self.state = 4298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
            if la_ == 1:
                self.state = 4291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 4290
                    self.lob_segname()


                self.state = 4293
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4294
                self.lob_storage_parameters()
                self.state = 4295
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 4297
                self.lob_segname()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_segnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_segname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_segname" ):
                listener.enterLob_segname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_segname" ):
                listener.exitLob_segname(self)




    def lob_segname(self):

        localctx = PlSqlParser.Lob_segnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_lob_segname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4300
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_item" ):
                listener.enterLob_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_item" ):
                listener.exitLob_item(self)




    def lob_item(self):

        localctx = PlSqlParser.Lob_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_lob_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4302
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_storage_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def tablespace(self):
            return self.getTypedRuleContext(PlSqlParser.TablespaceContext,0)


        def lob_parameters(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_parametersContext,0)


        def storage_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Storage_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_storage_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_storage_parameters" ):
                listener.enterLob_storage_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_storage_parameters" ):
                listener.exitLob_storage_parameters(self)




    def lob_storage_parameters(self):

        localctx = PlSqlParser.Lob_storage_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_lob_storage_parameters)
        self._la = 0 # Token type
        try:
            self.state = 4311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLESPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4304
                self.match(PlSqlParser.TABLESPACE)
                self.state = 4305
                self.tablespace()
                pass
            elif token in [PlSqlParser.CACHE, PlSqlParser.CHUNK, PlSqlParser.COMPRESS, PlSqlParser.DECRYPT, PlSqlParser.DEDUPLICATE, PlSqlParser.DISABLE, PlSqlParser.ENABLE, PlSqlParser.ENCRYPT, PlSqlParser.FREEPOOLS, PlSqlParser.KEEP_DUPLICATES, PlSqlParser.NOCACHE, PlSqlParser.NOCOMPRESS, PlSqlParser.PCTVERSION, PlSqlParser.RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4306
                self.lob_parameters()
                self.state = 4308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.STORAGE:
                    self.state = 4307
                    self.storage_clause()


                pass
            elif token in [PlSqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4310
                self.storage_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB(self):
            return self.getToken(PlSqlParser.LOB, 0)

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def lob_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_itemContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_itemContext,i)


        def lob_storage_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_storage_parametersContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_storage_parametersContext,i)


        def lob_segname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_segnameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_segnameContext,i)


        def SECUREFILE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SECUREFILE)
            else:
                return self.getToken(PlSqlParser.SECUREFILE, i)

        def BASICFILE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BASICFILE)
            else:
                return self.getToken(PlSqlParser.BASICFILE, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_storage_clause" ):
                listener.enterLob_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_storage_clause" ):
                listener.exitLob_storage_clause(self)




    def lob_storage_clause(self):

        localctx = PlSqlParser.Lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_lob_storage_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4313
            self.match(PlSqlParser.LOB)
            self.state = 4350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 4314
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4319 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4315
                        self.match(PlSqlParser.COMMA)


                    self.state = 4318
                    self.lob_item()
                    self.state = 4321 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.COMMA or _la==PlSqlParser.REGULAR_ID):
                        break

                self.state = 4323
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4324
                self.match(PlSqlParser.STORE)
                self.state = 4325
                self.match(PlSqlParser.AS)
                self.state = 4331 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4331
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.BASICFILE, PlSqlParser.SECUREFILE]:
                            self.state = 4326
                            _la = self._input.LA(1)
                            if not(_la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [PlSqlParser.LEFT_PAREN]:
                            self.state = 4327
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 4328
                            self.lob_storage_parameters()
                            self.state = 4329
                            self.match(PlSqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 4333 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,568,self._ctx)

                pass

            elif la_ == 2:
                self.state = 4335
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4336
                self.lob_item()
                self.state = 4337
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4338
                self.match(PlSqlParser.STORE)
                self.state = 4339
                self.match(PlSqlParser.AS)
                self.state = 4346 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4346
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.BASICFILE, PlSqlParser.SECUREFILE]:
                            self.state = 4340
                            _la = self._input.LA(1)
                            if not(_la==PlSqlParser.BASICFILE or _la==PlSqlParser.SECUREFILE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.REGULAR_ID]:
                            self.state = 4341
                            self.lob_segname()
                            pass
                        elif token in [PlSqlParser.LEFT_PAREN]:
                            self.state = 4342
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 4343
                            self.lob_storage_parameters()
                            self.state = 4344
                            self.match(PlSqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 4348 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,570,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_lob_storage_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def LOB(self):
            return self.getToken(PlSqlParser.LOB, 0)

        def lob_item(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_itemContext,0)


        def modify_lob_parameters(self):
            return self.getTypedRuleContext(PlSqlParser.Modify_lob_parametersContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_lob_storage_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_lob_storage_clause" ):
                listener.enterModify_lob_storage_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_lob_storage_clause" ):
                listener.exitModify_lob_storage_clause(self)




    def modify_lob_storage_clause(self):

        localctx = PlSqlParser.Modify_lob_storage_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_modify_lob_storage_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4352
            self.match(PlSqlParser.MODIFY)
            self.state = 4353
            self.match(PlSqlParser.LOB)
            self.state = 4354
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4355
            self.lob_item()
            self.state = 4356
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4357
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4358
            self.modify_lob_parameters()
            self.state = 4359
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modify_lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Storage_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Storage_clauseContext,i)


        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def REBUILD(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.REBUILD)
            else:
                return self.getToken(PlSqlParser.REBUILD, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FREEPOOLS)
            else:
                return self.getToken(PlSqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENCRYPT)
            else:
                return self.getToken(PlSqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DECRYPT)
            else:
                return self.getToken(PlSqlParser.DECRYPT, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CACHE)
            else:
                return self.getToken(PlSqlParser.CACHE, i)

        def allocate_extent_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Allocate_extent_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Allocate_extent_clauseContext,i)


        def shrink_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Shrink_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Shrink_clauseContext,i)


        def deallocate_unused_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Deallocate_unused_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Deallocate_unused_clauseContext,i)


        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PCTVERSION)
            else:
                return self.getToken(PlSqlParser.PCTVERSION, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCACHE)
            else:
                return self.getToken(PlSqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.READS)
            else:
                return self.getToken(PlSqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_modify_lob_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_lob_parameters" ):
                listener.enterModify_lob_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_lob_parameters" ):
                listener.exitModify_lob_parameters(self)




    def modify_lob_parameters(self):

        localctx = PlSqlParser.Modify_lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_modify_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4385 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
                if la_ == 1:
                    self.state = 4361
                    self.storage_clause()
                    pass

                elif la_ == 2:
                    self.state = 4362
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.FREEPOOLS or _la==PlSqlParser.PCTVERSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4363
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass

                elif la_ == 3:
                    self.state = 4364
                    self.match(PlSqlParser.REBUILD)
                    self.state = 4365
                    self.match(PlSqlParser.FREEPOOLS)
                    pass

                elif la_ == 4:
                    self.state = 4366
                    self.lob_retention_clause()
                    pass

                elif la_ == 5:
                    self.state = 4367
                    self.lob_deduplicate_clause()
                    pass

                elif la_ == 6:
                    self.state = 4368
                    self.lob_compression_clause()
                    pass

                elif la_ == 7:
                    self.state = 4369
                    self.match(PlSqlParser.ENCRYPT)
                    self.state = 4370
                    self.encryption_spec()
                    pass

                elif la_ == 8:
                    self.state = 4371
                    self.match(PlSqlParser.DECRYPT)
                    pass

                elif la_ == 9:
                    self.state = 4372
                    self.match(PlSqlParser.CACHE)
                    pass

                elif la_ == 10:
                    self.state = 4377
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                    if la_ == 1:
                        self.state = 4373
                        self.match(PlSqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 4374
                        self.match(PlSqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 4375
                        self.match(PlSqlParser.CACHE)
                        self.state = 4376
                        self.match(PlSqlParser.READS)
                        pass


                    self.state = 4380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING:
                        self.state = 4379
                        self.logging_clause()


                    pass

                elif la_ == 11:
                    self.state = 4382
                    self.allocate_extent_clause()
                    pass

                elif la_ == 12:
                    self.state = 4383
                    self.shrink_clause()
                    pass

                elif la_ == 13:
                    self.state = 4384
                    self.deallocate_unused_clause()
                    pass


                self.state = 4387 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.ALLOCATE or _la==PlSqlParser.CACHE or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (PlSqlParser.COMPRESS - 96)) | (1 << (PlSqlParser.DEALLOCATE - 96)) | (1 << (PlSqlParser.DECRYPT - 96)) | (1 << (PlSqlParser.DEDUPLICATE - 96)))) != 0) or _la==PlSqlParser.ENCRYPT or _la==PlSqlParser.FREEPOOLS or _la==PlSqlParser.KEEP_DUPLICATES or _la==PlSqlParser.NOCACHE or _la==PlSqlParser.NOCOMPRESS or _la==PlSqlParser.PCTVERSION or _la==PlSqlParser.REBUILD or _la==PlSqlParser.RETENTION or _la==PlSqlParser.SHRINK or _la==PlSqlParser.STORAGE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.STORAGE)
            else:
                return self.getToken(PlSqlParser.STORAGE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IN)
            else:
                return self.getToken(PlSqlParser.IN, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROW)
            else:
                return self.getToken(PlSqlParser.ROW, i)

        def CHUNK(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHUNK)
            else:
                return self.getToken(PlSqlParser.CHUNK, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def PCTVERSION(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PCTVERSION)
            else:
                return self.getToken(PlSqlParser.PCTVERSION, i)

        def FREEPOOLS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FREEPOOLS)
            else:
                return self.getToken(PlSqlParser.FREEPOOLS, i)

        def lob_retention_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_retention_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_retention_clauseContext,i)


        def lob_deduplicate_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_deduplicate_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_deduplicate_clauseContext,i)


        def lob_compression_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lob_compression_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lob_compression_clauseContext,i)


        def ENCRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENCRYPT)
            else:
                return self.getToken(PlSqlParser.ENCRYPT, i)

        def encryption_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Encryption_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Encryption_specContext,i)


        def DECRYPT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DECRYPT)
            else:
                return self.getToken(PlSqlParser.DECRYPT, i)

        def ENABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ENABLE)
            else:
                return self.getToken(PlSqlParser.ENABLE, i)

        def DISABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DISABLE)
            else:
                return self.getToken(PlSqlParser.DISABLE, i)

        def CACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CACHE)
            else:
                return self.getToken(PlSqlParser.CACHE, i)

        def NOCACHE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCACHE)
            else:
                return self.getToken(PlSqlParser.NOCACHE, i)

        def READS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.READS)
            else:
                return self.getToken(PlSqlParser.READS, i)

        def logging_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logging_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logging_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_parameters" ):
                listener.enterLob_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_parameters" ):
                listener.exitLob_parameters(self)




    def lob_parameters(self):

        localctx = PlSqlParser.Lob_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_lob_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DISABLE, PlSqlParser.ENABLE]:
                    self.state = 4389
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4390
                    self.match(PlSqlParser.STORAGE)
                    self.state = 4391
                    self.match(PlSqlParser.IN)
                    self.state = 4392
                    self.match(PlSqlParser.ROW)
                    pass
                elif token in [PlSqlParser.CHUNK]:
                    self.state = 4393
                    self.match(PlSqlParser.CHUNK)
                    self.state = 4394
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.PCTVERSION]:
                    self.state = 4395
                    self.match(PlSqlParser.PCTVERSION)
                    self.state = 4396
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.FREEPOOLS]:
                    self.state = 4397
                    self.match(PlSqlParser.FREEPOOLS)
                    self.state = 4398
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                elif token in [PlSqlParser.RETENTION]:
                    self.state = 4399
                    self.lob_retention_clause()
                    pass
                elif token in [PlSqlParser.DEDUPLICATE, PlSqlParser.KEEP_DUPLICATES]:
                    self.state = 4400
                    self.lob_deduplicate_clause()
                    pass
                elif token in [PlSqlParser.COMPRESS, PlSqlParser.NOCOMPRESS]:
                    self.state = 4401
                    self.lob_compression_clause()
                    pass
                elif token in [PlSqlParser.ENCRYPT]:
                    self.state = 4402
                    self.match(PlSqlParser.ENCRYPT)
                    self.state = 4403
                    self.encryption_spec()
                    pass
                elif token in [PlSqlParser.DECRYPT]:
                    self.state = 4404
                    self.match(PlSqlParser.DECRYPT)
                    pass
                elif token in [PlSqlParser.CACHE, PlSqlParser.NOCACHE]:
                    self.state = 4409
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
                    if la_ == 1:
                        self.state = 4405
                        self.match(PlSqlParser.CACHE)
                        pass

                    elif la_ == 2:
                        self.state = 4406
                        self.match(PlSqlParser.NOCACHE)
                        pass

                    elif la_ == 3:
                        self.state = 4407
                        self.match(PlSqlParser.CACHE)
                        self.state = 4408
                        self.match(PlSqlParser.READS)
                        pass


                    self.state = 4412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.LOGGING or _la==PlSqlParser.NOLOGGING:
                        self.state = 4411
                        self.logging_clause()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (PlSqlParser.CACHE - 63)) | (1 << (PlSqlParser.CHUNK - 63)) | (1 << (PlSqlParser.COMPRESS - 63)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (PlSqlParser.DECRYPT - 139)) | (1 << (PlSqlParser.DEDUPLICATE - 139)) | (1 << (PlSqlParser.DISABLE - 139)) | (1 << (PlSqlParser.ENABLE - 139)) | (1 << (PlSqlParser.ENCRYPT - 139)))) != 0) or _la==PlSqlParser.FREEPOOLS or _la==PlSqlParser.KEEP_DUPLICATES or _la==PlSqlParser.NOCACHE or _la==PlSqlParser.NOCOMPRESS or _la==PlSqlParser.PCTVERSION or _la==PlSqlParser.RETENTION):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_deduplicate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDUPLICATE(self):
            return self.getToken(PlSqlParser.DEDUPLICATE, 0)

        def KEEP_DUPLICATES(self):
            return self.getToken(PlSqlParser.KEEP_DUPLICATES, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_deduplicate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_deduplicate_clause" ):
                listener.enterLob_deduplicate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_deduplicate_clause" ):
                listener.exitLob_deduplicate_clause(self)




    def lob_deduplicate_clause(self):

        localctx = PlSqlParser.Lob_deduplicate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_lob_deduplicate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4418
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEDUPLICATE or _la==PlSqlParser.KEEP_DUPLICATES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_compression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOCOMPRESS(self):
            return self.getToken(PlSqlParser.NOCOMPRESS, 0)

        def COMPRESS(self):
            return self.getToken(PlSqlParser.COMPRESS, 0)

        def HIGH(self):
            return self.getToken(PlSqlParser.HIGH, 0)

        def MEDIUM(self):
            return self.getToken(PlSqlParser.MEDIUM, 0)

        def LOW(self):
            return self.getToken(PlSqlParser.LOW, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_compression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_compression_clause" ):
                listener.enterLob_compression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_compression_clause" ):
                listener.exitLob_compression_clause(self)




    def lob_compression_clause(self):

        localctx = PlSqlParser.Lob_compression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_lob_compression_clause)
        self._la = 0 # Token type
        try:
            self.state = 4425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NOCOMPRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4420
                self.match(PlSqlParser.NOCOMPRESS)
                pass
            elif token in [PlSqlParser.COMPRESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4421
                self.match(PlSqlParser.COMPRESS)
                self.state = 4423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.HIGH or _la==PlSqlParser.LOW or _la==PlSqlParser.MEDIUM:
                    self.state = 4422
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.HIGH or _la==PlSqlParser.LOW or _la==PlSqlParser.MEDIUM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lob_retention_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETENTION(self):
            return self.getToken(PlSqlParser.RETENTION, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(PlSqlParser.MIN, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lob_retention_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_retention_clause" ):
                listener.enterLob_retention_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_retention_clause" ):
                listener.exitLob_retention_clause(self)




    def lob_retention_clause(self):

        localctx = PlSqlParser.Lob_retention_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_lob_retention_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4427
            self.match(PlSqlParser.RETENTION)
            self.state = 4433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAX]:
                self.state = 4428
                self.match(PlSqlParser.MAX)
                pass
            elif token in [PlSqlParser.MIN]:
                self.state = 4429
                self.match(PlSqlParser.MIN)
                self.state = 4430
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.AUTO]:
                self.state = 4431
                self.match(PlSqlParser.AUTO)
                pass
            elif token in [PlSqlParser.NONE]:
                self.state = 4432
                self.match(PlSqlParser.NONE)
                pass
            elif token in [PlSqlParser.ALLOCATE, PlSqlParser.CACHE, PlSqlParser.CHUNK, PlSqlParser.COMPRESS, PlSqlParser.DEALLOCATE, PlSqlParser.DECRYPT, PlSqlParser.DEDUPLICATE, PlSqlParser.DISABLE, PlSqlParser.ENABLE, PlSqlParser.ENCRYPT, PlSqlParser.FREEPOOLS, PlSqlParser.KEEP_DUPLICATES, PlSqlParser.NOCACHE, PlSqlParser.NOCOMPRESS, PlSqlParser.PCTVERSION, PlSqlParser.REBUILD, PlSqlParser.RETENTION, PlSqlParser.SHRINK, PlSqlParser.STORAGE, PlSqlParser.RIGHT_PAREN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Encryption_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(PlSqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def SALT(self):
            return self.getToken(PlSqlParser.SALT, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_encryption_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncryption_spec" ):
                listener.enterEncryption_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncryption_spec" ):
                listener.exitEncryption_spec(self)




    def encryption_spec(self):

        localctx = PlSqlParser.Encryption_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_encryption_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 4435
                self.match(PlSqlParser.USING)
                self.state = 4436
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 4442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.IDENTIFIED:
                self.state = 4439
                self.match(PlSqlParser.IDENTIFIED)
                self.state = 4440
                self.match(PlSqlParser.BY)
                self.state = 4441
                self.match(PlSqlParser.REGULAR_ID)


            self.state = 4445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CHAR_STRING:
                self.state = 4444
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 4451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
            if la_ == 1:
                self.state = 4448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NO:
                    self.state = 4447
                    self.match(PlSqlParser.NO)


                self.state = 4450
                self.match(PlSqlParser.SALT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_tablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespace" ):
                listener.enterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespace" ):
                listener.exitTablespace(self)




    def tablespace(self):

        localctx = PlSqlParser.TablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_tablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4453
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_varray_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_item" ):
                listener.enterVarray_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_item" ):
                listener.exitVarray_item(self)




    def varray_item(self):

        localctx = PlSqlParser.Varray_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_varray_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                self.state = 4455
                self.id_expression()
                self.state = 4456
                self.match(PlSqlParser.PERIOD)


            self.state = 4463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,589,self._ctx)
            if la_ == 1:
                self.state = 4460
                self.id_expression()
                self.state = 4461
                self.match(PlSqlParser.PERIOD)


            self.state = 4465
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_type_col_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Object_type_col_propertiesContext,0)


        def nested_table_col_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Nested_table_col_propertiesContext,0)


        def varray_col_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_col_propertiesContext,0)


        def lob_storage_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Lob_storage_clauseContext,0)


        def xmltype_column_properties(self):
            return self.getTypedRuleContext(PlSqlParser.Xmltype_column_propertiesContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_properties" ):
                listener.enterColumn_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_properties" ):
                listener.exitColumn_properties(self)




    def column_properties(self):

        localctx = PlSqlParser.Column_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_column_properties)
        try:
            self.state = 4474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.COLUMN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4467
                self.object_type_col_properties()
                pass
            elif token in [PlSqlParser.NESTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4468
                self.nested_table_col_properties()
                pass
            elif token in [PlSqlParser.LOB, PlSqlParser.VARRAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4471
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.VARRAY]:
                    self.state = 4469
                    self.varray_col_properties()
                    pass
                elif token in [PlSqlParser.LOB]:
                    self.state = 4470
                    self.lob_storage_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PlSqlParser.XMLTYPE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4473
                self.xmltype_column_properties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def inline_ref_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Inline_ref_constraintContext,0)


        def SORT(self):
            return self.getToken(PlSqlParser.SORT, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ENCRYPT(self):
            return self.getToken(PlSqlParser.ENCRYPT, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CHAR_STRING)
            else:
                return self.getToken(PlSqlParser.CHAR_STRING, i)

        def IDENTIFIED(self):
            return self.getToken(PlSqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def SALT(self):
            return self.getToken(PlSqlParser.SALT, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = PlSqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4476
            self.column_name()
            self.state = 4479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.state = 4477
                self.datatype()
                pass

            elif la_ == 2:
                self.state = 4478
                self.type_name()
                pass


            self.state = 4482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SORT:
                self.state = 4481
                self.match(PlSqlParser.SORT)


            self.state = 4486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT:
                self.state = 4484
                self.match(PlSqlParser.DEFAULT)
                self.state = 4485
                self.expression()


            self.state = 4507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ENCRYPT:
                self.state = 4488
                self.match(PlSqlParser.ENCRYPT)
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 4489
                    self.match(PlSqlParser.USING)
                    self.state = 4490
                    self.match(PlSqlParser.CHAR_STRING)


                self.state = 4496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IDENTIFIED:
                    self.state = 4493
                    self.match(PlSqlParser.IDENTIFIED)
                    self.state = 4494
                    self.match(PlSqlParser.BY)
                    self.state = 4495
                    self.regular_id()


                self.state = 4499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CHAR_STRING:
                    self.state = 4498
                    self.match(PlSqlParser.CHAR_STRING)


                self.state = 4505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
                if la_ == 1:
                    self.state = 4502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NO:
                        self.state = 4501
                        self.match(PlSqlParser.NO)


                    self.state = 4504
                    self.match(PlSqlParser.SALT)




            self.state = 4516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.state = 4512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,601,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4509
                        self.inline_constraint() 
                    self.state = 4514
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,601,self._ctx)

                pass

            elif la_ == 2:
                self.state = 4515
                self.inline_ref_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Virtual_column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def GENERATED(self):
            return self.getToken(PlSqlParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(PlSqlParser.ALWAYS, 0)

        def VIRTUAL(self):
            return self.getToken(PlSqlParser.VIRTUAL, 0)

        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Inline_constraintContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_virtual_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtual_column_definition" ):
                listener.enterVirtual_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtual_column_definition" ):
                listener.exitVirtual_column_definition(self)




    def virtual_column_definition(self):

        localctx = PlSqlParser.Virtual_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_virtual_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4518
            self.column_name()
            self.state = 4520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (PlSqlParser.BFILE - 45)) | (1 << (PlSqlParser.BINARY_DOUBLE - 45)) | (1 << (PlSqlParser.BINARY_FLOAT - 45)) | (1 << (PlSqlParser.BINARY_INTEGER - 45)) | (1 << (PlSqlParser.BLOB - 45)) | (1 << (PlSqlParser.BOOLEAN - 45)) | (1 << (PlSqlParser.CHARACTER - 45)) | (1 << (PlSqlParser.CHAR - 45)) | (1 << (PlSqlParser.CLOB - 45)))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PlSqlParser.DATE - 126)) | (1 << (PlSqlParser.DAY - 126)) | (1 << (PlSqlParser.DEC - 126)) | (1 << (PlSqlParser.DECIMAL - 126)) | (1 << (PlSqlParser.DOUBLE - 126)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 126)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (PlSqlParser.FLOAT - 211)) | (1 << (PlSqlParser.HOUR - 211)) | (1 << (PlSqlParser.INTEGER - 211)) | (1 << (PlSqlParser.INTERVAL - 211)) | (1 << (PlSqlParser.INT - 211)))) != 0) or ((((_la - 310)) & ~0x3f) == 0 and ((1 << (_la - 310)) & ((1 << (PlSqlParser.LONG - 310)) | (1 << (PlSqlParser.MINUTE - 310)) | (1 << (PlSqlParser.MLSLABEL - 310)) | (1 << (PlSqlParser.MONTH - 310)) | (1 << (PlSqlParser.NATURAL - 310)) | (1 << (PlSqlParser.NATURALN - 310)) | (1 << (PlSqlParser.NCHAR - 310)) | (1 << (PlSqlParser.NCLOB - 310)))) != 0) or ((((_la - 382)) & ~0x3f) == 0 and ((1 << (_la - 382)) & ((1 << (PlSqlParser.NUMBER - 382)) | (1 << (PlSqlParser.NUMERIC - 382)) | (1 << (PlSqlParser.NVARCHAR2 - 382)) | (1 << (PlSqlParser.PLS_INTEGER - 382)) | (1 << (PlSqlParser.POSITIVEN - 382)) | (1 << (PlSqlParser.POSITIVE - 382)))) != 0) or ((((_la - 460)) & ~0x3f) == 0 and ((1 << (_la - 460)) & ((1 << (PlSqlParser.RAW - 460)) | (1 << (PlSqlParser.REAL - 460)) | (1 << (PlSqlParser.ROWID - 460)) | (1 << (PlSqlParser.SECOND - 460)))) != 0) or ((((_la - 539)) & ~0x3f) == 0 and ((1 << (_la - 539)) & ((1 << (PlSqlParser.SIGNTYPE - 539)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 539)) | (1 << (PlSqlParser.SMALLINT - 539)) | (1 << (PlSqlParser.STRING - 539)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 539)) | (1 << (PlSqlParser.TIMESTAMP - 539)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 539)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 539)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 539)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 539)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 539)) | (1 << (PlSqlParser.TIMEZONE_REGION - 539)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (PlSqlParser.UROWID - 628)) | (1 << (PlSqlParser.VARCHAR2 - 628)) | (1 << (PlSqlParser.VARCHAR - 628)) | (1 << (PlSqlParser.YEAR - 628)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 628)))) != 0):
                self.state = 4519
                self.datatype()


            self.state = 4524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.GENERATED:
                self.state = 4522
                self.match(PlSqlParser.GENERATED)
                self.state = 4523
                self.match(PlSqlParser.ALWAYS)


            self.state = 4526
            self.match(PlSqlParser.AS)
            self.state = 4527
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4528
            self.expression()
            self.state = 4529
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.VIRTUAL:
                self.state = 4530
                self.match(PlSqlParser.VIRTUAL)


            self.state = 4536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,606,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4533
                    self.inline_constraint() 
                self.state = 4538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,606,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Out_of_line_part_storageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def partition_name(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_out_of_line_part_storage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_part_storage" ):
                listener.enterOut_of_line_part_storage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_part_storage" ):
                listener.exitOut_of_line_part_storage(self)




    def out_of_line_part_storage(self):

        localctx = PlSqlParser.Out_of_line_part_storageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_out_of_line_part_storage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4539
            self.match(PlSqlParser.PARTITION)
            self.state = 4540
            self.partition_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_table_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def nested_item(self):
            return self.getTypedRuleContext(PlSqlParser.Nested_itemContext,0)


        def COLUMN_VALUE(self):
            return self.getToken(PlSqlParser.COLUMN_VALUE, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Substitutable_column_clauseContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(PlSqlParser.GLOBAL, 0)

        def LOCATOR(self):
            return self.getToken(PlSqlParser.LOCATOR, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def object_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_propertiesContext,i)


        def physical_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Physical_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Physical_propertiesContext,i)


        def column_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_propertiesContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_propertiesContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_nested_table_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_col_properties" ):
                listener.enterNested_table_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_col_properties" ):
                listener.exitNested_table_col_properties(self)




    def nested_table_col_properties(self):

        localctx = PlSqlParser.Nested_table_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_nested_table_col_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4542
            self.match(PlSqlParser.NESTED)
            self.state = 4543
            self.match(PlSqlParser.TABLE)
            self.state = 4546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.REGULAR_ID]:
                self.state = 4544
                self.nested_item()
                pass
            elif token in [PlSqlParser.COLUMN_VALUE]:
                self.state = 4545
                self.match(PlSqlParser.COLUMN_VALUE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELEMENT or _la==PlSqlParser.IS or _la==PlSqlParser.NOT or _la==PlSqlParser.SUBSTITUTABLE:
                self.state = 4548
                self.substitutable_column_clause()


            self.state = 4552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.GLOBAL or _la==PlSqlParser.LOCAL:
                self.state = 4551
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.GLOBAL or _la==PlSqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4554
            self.match(PlSqlParser.STORE)
            self.state = 4555
            self.match(PlSqlParser.AS)
            self.state = 4556
            self.tableview_name()
            self.state = 4570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,612,self._ctx)
            if la_ == 1:
                self.state = 4557
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4564
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.LEFT_PAREN]:
                        self.state = 4558
                        self.match(PlSqlParser.LEFT_PAREN)
                        self.state = 4559
                        self.object_properties()
                        self.state = 4560
                        self.match(PlSqlParser.RIGHT_PAREN)
                        pass
                    elif token in [PlSqlParser.FILESYSTEM_LIKE_LOGGING, PlSqlParser.INITRANS, PlSqlParser.LOGGING, PlSqlParser.NOLOGGING, PlSqlParser.PCTFREE, PlSqlParser.PCTUSED, PlSqlParser.SEGMENT, PlSqlParser.STORAGE, PlSqlParser.TABLESPACE]:
                        self.state = 4562
                        self.physical_properties()
                        pass
                    elif token in [PlSqlParser.COLUMN, PlSqlParser.LOB, PlSqlParser.NESTED, PlSqlParser.VARRAY, PlSqlParser.XMLTYPE]:
                        self.state = 4563
                        self.column_properties()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4566 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.COLUMN or _la==PlSqlParser.FILESYSTEM_LIKE_LOGGING or _la==PlSqlParser.INITRANS or ((((_la - 299)) & ~0x3f) == 0 and ((1 << (_la - 299)) & ((1 << (PlSqlParser.LOB - 299)) | (1 << (PlSqlParser.LOGGING - 299)) | (1 << (PlSqlParser.NESTED - 299)))) != 0) or ((((_la - 363)) & ~0x3f) == 0 and ((1 << (_la - 363)) & ((1 << (PlSqlParser.NOLOGGING - 363)) | (1 << (PlSqlParser.PCTFREE - 363)) | (1 << (PlSqlParser.PCTUSED - 363)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (PlSqlParser.SEGMENT - 521)) | (1 << (PlSqlParser.STORAGE - 521)) | (1 << (PlSqlParser.TABLESPACE - 521)))) != 0) or _la==PlSqlParser.VARRAY or _la==PlSqlParser.XMLTYPE or _la==PlSqlParser.LEFT_PAREN):
                        break

                self.state = 4568
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 4577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 4572
                self.match(PlSqlParser.RETURN)
                self.state = 4574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AS:
                    self.state = 4573
                    self.match(PlSqlParser.AS)


                self.state = 4576
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.LOCATOR or _la==PlSqlParser.VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_nested_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_item" ):
                listener.enterNested_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_item" ):
                listener.exitNested_item(self)




    def nested_item(self):

        localctx = PlSqlParser.Nested_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_nested_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4579
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Substitutable_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def LEVELS(self):
            return self.getToken(PlSqlParser.LEVELS, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_substitutable_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstitutable_column_clause" ):
                listener.enterSubstitutable_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstitutable_column_clause" ):
                listener.exitSubstitutable_column_clause(self)




    def substitutable_column_clause(self):

        localctx = PlSqlParser.Substitutable_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_substitutable_column_clause)
        self._la = 0 # Token type
        try:
            self.state = 4600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ELEMENT, PlSqlParser.IS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ELEMENT:
                    self.state = 4581
                    self.match(PlSqlParser.ELEMENT)


                self.state = 4584
                self.match(PlSqlParser.IS)
                self.state = 4585
                self.match(PlSqlParser.OF)
                self.state = 4587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.TYPE:
                    self.state = 4586
                    self.match(PlSqlParser.TYPE)


                self.state = 4589
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4590
                self.type_name()
                self.state = 4591
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.NOT, PlSqlParser.SUBSTITUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NOT:
                    self.state = 4593
                    self.match(PlSqlParser.NOT)


                self.state = 4596
                self.match(PlSqlParser.SUBSTITUTABLE)
                self.state = 4597
                self.match(PlSqlParser.AT)
                self.state = 4598
                self.match(PlSqlParser.ALL)
                self.state = 4599
                self.match(PlSqlParser.LEVELS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PlSqlParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4602
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Supplemental_logging_propsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPPLEMENTAL(self):
            return self.getToken(PlSqlParser.SUPPLEMENTAL, 0)

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def supplemental_log_grp_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Supplemental_log_grp_clauseContext,0)


        def supplemental_id_key_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Supplemental_id_key_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_supplemental_logging_props

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupplemental_logging_props" ):
                listener.enterSupplemental_logging_props(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupplemental_logging_props" ):
                listener.exitSupplemental_logging_props(self)




    def supplemental_logging_props(self):

        localctx = PlSqlParser.Supplemental_logging_propsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_supplemental_logging_props)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4604
            self.match(PlSqlParser.SUPPLEMENTAL)
            self.state = 4605
            self.match(PlSqlParser.LOG)
            self.state = 4608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.GROUP]:
                self.state = 4606
                self.supplemental_log_grp_clause()
                pass
            elif token in [PlSqlParser.DATA]:
                self.state = 4607
                self.supplemental_id_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_or_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_or_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_or_attribute" ):
                listener.enterColumn_or_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_or_attribute" ):
                listener.exitColumn_or_attribute(self)




    def column_or_attribute(self):

        localctx = PlSqlParser.Column_or_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_column_or_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4610
            self.regular_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_type_col_propertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column = None # Regular_idContext

        def COLUMN(self):
            return self.getToken(PlSqlParser.COLUMN, 0)

        def substitutable_column_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Substitutable_column_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_type_col_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_col_properties" ):
                listener.enterObject_type_col_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_col_properties" ):
                listener.exitObject_type_col_properties(self)




    def object_type_col_properties(self):

        localctx = PlSqlParser.Object_type_col_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_object_type_col_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4612
            self.match(PlSqlParser.COLUMN)
            self.state = 4613
            localctx.column = self.regular_id()
            self.state = 4614
            self.substitutable_column_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def out_of_line_ref_constraint(self):
            return self.getTypedRuleContext(PlSqlParser.Out_of_line_ref_constraintContext,0)


        def out_of_line_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Out_of_line_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Out_of_line_constraintContext,i)


        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def constraint_state(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_stateContext,0)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def old_constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Old_constraint_nameContext,0)


        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def new_constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.New_constraint_nameContext,0)


        def drop_constraint_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Drop_constraint_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Drop_constraint_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_constraint_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_clauses" ):
                listener.enterConstraint_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_clauses" ):
                listener.exitConstraint_clauses(self)




    def constraint_clauses(self):

        localctx = PlSqlParser.Constraint_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_constraint_clauses)
        self._la = 0 # Token type
        try:
            self.state = 4660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4616
                self.match(PlSqlParser.ADD)
                self.state = 4624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
                if la_ == 1:
                    self.state = 4620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PlSqlParser.CHECK or _la==PlSqlParser.CONSTRAINT or _la==PlSqlParser.FOREIGN or _la==PlSqlParser.PRIMARY or _la==PlSqlParser.UNIQUE:
                        self.state = 4617
                        self.out_of_line_constraint()
                        self.state = 4622
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 4623
                    self.out_of_line_ref_constraint()
                    pass


                pass
            elif token in [PlSqlParser.MODIFY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4626
                self.match(PlSqlParser.MODIFY)
                self.state = 4643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.CONSTRAINT]:
                    self.state = 4627
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 4628
                    self.constraint_name()
                    pass
                elif token in [PlSqlParser.PRIMARY]:
                    self.state = 4629
                    self.match(PlSqlParser.PRIMARY)
                    self.state = 4630
                    self.match(PlSqlParser.KEY)
                    pass
                elif token in [PlSqlParser.UNIQUE]:
                    self.state = 4631
                    self.match(PlSqlParser.UNIQUE)
                    self.state = 4632
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4637 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4634
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 4633
                            self.match(PlSqlParser.COMMA)


                        self.state = 4636
                        self.column_name()
                        self.state = 4639 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                            break

                    self.state = 4641
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4645
                self.constraint_state()
                self.state = 4647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CASCADE:
                    self.state = 4646
                    self.match(PlSqlParser.CASCADE)


                pass
            elif token in [PlSqlParser.RENAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4649
                self.match(PlSqlParser.RENAME)
                self.state = 4650
                self.match(PlSqlParser.CONSTRAINT)
                self.state = 4651
                self.old_constraint_name()
                self.state = 4652
                self.match(PlSqlParser.TO)
                self.state = 4653
                self.new_constraint_name()
                pass
            elif token in [PlSqlParser.DROP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4656 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4655
                    self.drop_constraint_clause()
                    self.state = 4658 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.DROP):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Old_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_old_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_constraint_name" ):
                listener.enterOld_constraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_constraint_name" ):
                listener.exitOld_constraint_name(self)




    def old_constraint_name(self):

        localctx = PlSqlParser.Old_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_old_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4662
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_new_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_constraint_name" ):
                listener.enterNew_constraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_constraint_name" ):
                listener.exitNew_constraint_name(self)




    def new_constraint_name(self):

        localctx = PlSqlParser.New_constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_new_constraint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4664
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_constraint_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def drop_primary_key_or_unique_or_generic_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_primary_key_or_unique_or_generic_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_constraint_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_constraint_clause" ):
                listener.enterDrop_constraint_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_constraint_clause" ):
                listener.exitDrop_constraint_clause(self)




    def drop_constraint_clause(self):

        localctx = PlSqlParser.Drop_constraint_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_drop_constraint_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4666
            self.match(PlSqlParser.DROP)
            self.state = 4667
            self.drop_primary_key_or_unique_or_generic_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_primary_key_or_unique_or_generic_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_primary_key_or_unique_or_generic_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_primary_key_or_unique_or_generic_clause" ):
                listener.enterDrop_primary_key_or_unique_or_generic_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_primary_key_or_unique_or_generic_clause" ):
                listener.exitDrop_primary_key_or_unique_or_generic_clause(self)




    def drop_primary_key_or_unique_or_generic_clause(self):

        localctx = PlSqlParser.Drop_primary_key_or_unique_or_generic_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_drop_primary_key_or_unique_or_generic_clause)
        self._la = 0 # Token type
        try:
            self.state = 4696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PRIMARY, PlSqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4683
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.PRIMARY]:
                    self.state = 4669
                    self.match(PlSqlParser.PRIMARY)
                    self.state = 4670
                    self.match(PlSqlParser.KEY)
                    pass
                elif token in [PlSqlParser.UNIQUE]:
                    self.state = 4671
                    self.match(PlSqlParser.UNIQUE)
                    self.state = 4672
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4677 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4674
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 4673
                            self.match(PlSqlParser.COMMA)


                        self.state = 4676
                        self.column_name()
                        self.state = 4679 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                            break

                    self.state = 4681
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CASCADE:
                    self.state = 4685
                    self.match(PlSqlParser.CASCADE)


                self.state = 4689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,632,self._ctx)
                if la_ == 1:
                    self.state = 4688
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DROP or _la==PlSqlParser.KEEP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [PlSqlParser.CONSTRAINT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4691
                self.match(PlSqlParser.CONSTRAINT)
                self.state = 4692
                self.constraint_name()
                self.state = 4694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CASCADE:
                    self.state = 4693
                    self.match(PlSqlParser.CASCADE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def primary_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Primary_key_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Primary_key_clauseContext,i)


        def foreign_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Foreign_key_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Foreign_key_clauseContext,i)


        def unique_key_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Unique_key_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Unique_key_clauseContext,i)


        def check_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Check_constraintContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Check_constraintContext,i)


        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CONSTRAINT)
            else:
                return self.getToken(PlSqlParser.CONSTRAINT, i)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_add_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_constraint" ):
                listener.enterAdd_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_constraint" ):
                listener.exitAdd_constraint(self)




    def add_constraint(self):

        localctx = PlSqlParser.Add_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_add_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4698
            self.match(PlSqlParser.ADD)
            self.state = 4712 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 4699
                    self.match(PlSqlParser.COMMA)


                self.state = 4704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CONSTRAINT:
                    self.state = 4702
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 4703
                    self.constraint_name()


                self.state = 4710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.PRIMARY]:
                    self.state = 4706
                    self.primary_key_clause()
                    pass
                elif token in [PlSqlParser.FOREIGN]:
                    self.state = 4707
                    self.foreign_key_clause()
                    pass
                elif token in [PlSqlParser.UNIQUE]:
                    self.state = 4708
                    self.unique_key_clause()
                    pass
                elif token in [PlSqlParser.CHECK]:
                    self.state = 4709
                    self.check_constraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4714 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.CHECK or _la==PlSqlParser.CONSTRAINT or _la==PlSqlParser.FOREIGN or _la==PlSqlParser.PRIMARY or _la==PlSqlParser.UNIQUE or _la==PlSqlParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Check_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(PlSqlParser.CHECK, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_check_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_constraint" ):
                listener.enterCheck_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_constraint" ):
                listener.exitCheck_constraint(self)




    def check_constraint(self):

        localctx = PlSqlParser.Check_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_check_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4716
            self.match(PlSqlParser.CHECK)
            self.state = 4717
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4718
            self.condition()
            self.state = 4719
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 4720
                self.match(PlSqlParser.DISABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_constraint" ):
                listener.enterDrop_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_constraint" ):
                listener.exitDrop_constraint(self)




    def drop_constraint(self):

        localctx = PlSqlParser.Drop_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_drop_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4723
            self.match(PlSqlParser.DROP)
            self.state = 4724
            self.match(PlSqlParser.CONSTRAINT)
            self.state = 4725
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enable_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_enable_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_constraint" ):
                listener.enterEnable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_constraint" ):
                listener.exitEnable_constraint(self)




    def enable_constraint(self):

        localctx = PlSqlParser.Enable_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_enable_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4727
            self.match(PlSqlParser.ENABLE)
            self.state = 4728
            self.match(PlSqlParser.CONSTRAINT)
            self.state = 4729
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Disable_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_disable_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisable_constraint" ):
                listener.enterDisable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisable_constraint" ):
                listener.exitDisable_constraint(self)




    def disable_constraint(self):

        localctx = PlSqlParser.Disable_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_disable_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4731
            self.match(PlSqlParser.DISABLE)
            self.state = 4732
            self.match(PlSqlParser.CONSTRAINT)
            self.state = 4733
            self.constraint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREIGN(self):
            return self.getToken(PlSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def references_clause(self):
            return self.getTypedRuleContext(PlSqlParser.References_clauseContext,0)


        def on_delete_clause(self):
            return self.getTypedRuleContext(PlSqlParser.On_delete_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = PlSqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4735
            self.match(PlSqlParser.FOREIGN)
            self.state = 4736
            self.match(PlSqlParser.KEY)
            self.state = 4737
            self.paren_column_list()
            self.state = 4738
            self.references_clause()
            self.state = 4740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ON:
                self.state = 4739
                self.on_delete_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class References_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(PlSqlParser.REFERENCES, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_references_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences_clause" ):
                listener.enterReferences_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences_clause" ):
                listener.exitReferences_clause(self)




    def references_clause(self):

        localctx = PlSqlParser.References_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_references_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4742
            self.match(PlSqlParser.REFERENCES)
            self.state = 4743
            self.tableview_name()
            self.state = 4744
            self.paren_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_delete_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_on_delete_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete_clause" ):
                listener.enterOn_delete_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete_clause" ):
                listener.exitOn_delete_clause(self)




    def on_delete_clause(self):

        localctx = PlSqlParser.On_delete_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_on_delete_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4746
            self.match(PlSqlParser.ON)
            self.state = 4747
            self.match(PlSqlParser.DELETE)
            self.state = 4751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CASCADE]:
                self.state = 4748
                self.match(PlSqlParser.CASCADE)
                pass
            elif token in [PlSqlParser.SET]:
                self.state = 4749
                self.match(PlSqlParser.SET)
                self.state = 4750
                self.match(PlSqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unique_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def using_index_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_index_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unique_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique_key_clause" ):
                listener.enterUnique_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique_key_clause" ):
                listener.exitUnique_key_clause(self)




    def unique_key_clause(self):

        localctx = PlSqlParser.Unique_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_unique_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4753
            self.match(PlSqlParser.UNIQUE)
            self.state = 4754
            self.paren_column_list()
            self.state = 4756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 4755
                self.using_index_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(PlSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def using_index_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_index_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_primary_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key_clause" ):
                listener.enterPrimary_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key_clause" ):
                listener.exitPrimary_key_clause(self)




    def primary_key_clause(self):

        localctx = PlSqlParser.Primary_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_primary_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4758
            self.match(PlSqlParser.PRIMARY)
            self.state = 4759
            self.match(PlSqlParser.KEY)
            self.state = 4760
            self.paren_column_list()
            self.state = 4762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 4761
                self.using_index_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(PlSqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(PlSqlParser.SEMICOLON, 0)

        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def seq_of_declare_specs(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_declare_specsContext,0)


        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_anonymous_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_block" ):
                listener.enterAnonymous_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_block" ):
                listener.exitAnonymous_block(self)




    def anonymous_block(self):

        localctx = PlSqlParser.Anonymous_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_anonymous_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DECLARE:
                self.state = 4764
                self.match(PlSqlParser.DECLARE)
                self.state = 4765
                self.seq_of_declare_specs()


            self.state = 4768
            self.match(PlSqlParser.BEGIN)
            self.state = 4769
            self.seq_of_statements()
            self.state = 4776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCEPTION:
                self.state = 4770
                self.match(PlSqlParser.EXCEPTION)
                self.state = 4772 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4771
                    self.exception_handler()
                    self.state = 4774 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.WHEN):
                        break



            self.state = 4778
            self.match(PlSqlParser.END)
            self.state = 4779
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(PlSqlParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(PlSqlParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(PlSqlParser.DEFINER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)




    def invoker_rights_clause(self):

        localctx = PlSqlParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4781
            self.match(PlSqlParser.AUTHID)
            self.state = 4782
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CURRENT_USER or _la==PlSqlParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)




    def compiler_parameters_clause(self):

        localctx = PlSqlParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4784
            self.identifier()
            self.state = 4785
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 4786
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(PlSqlParser.C_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)




    def call_spec(self):

        localctx = PlSqlParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4788
            self.match(PlSqlParser.LANGUAGE)
            self.state = 4791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.JAVA]:
                self.state = 4789
                self.java_spec()
                pass
            elif token in [PlSqlParser.C_LETTER]:
                self.state = 4790
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)




    def java_spec(self):

        localctx = PlSqlParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4793
            self.match(PlSqlParser.JAVA)
            self.state = 4794
            self.match(PlSqlParser.NAME)
            self.state = 4795
            self.match(PlSqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(PlSqlParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(PlSqlParser.LIBRARY, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(PlSqlParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(PlSqlParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)




    def c_spec(self):

        localctx = PlSqlParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4797
            self.match(PlSqlParser.C_LETTER)
            self.state = 4800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NAME:
                self.state = 4798
                self.match(PlSqlParser.NAME)
                self.state = 4799
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 4802
            self.match(PlSqlParser.LIBRARY)
            self.state = 4803
            self.identifier()
            self.state = 4805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AGENT:
                self.state = 4804
                self.c_agent_in_clause()


            self.state = 4809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WITH:
                self.state = 4807
                self.match(PlSqlParser.WITH)
                self.state = 4808
                self.match(PlSqlParser.CONTEXT)


            self.state = 4812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARAMETERS:
                self.state = 4811
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(PlSqlParser.AGENT, 0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)




    def c_agent_in_clause(self):

        localctx = PlSqlParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_c_agent_in_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4814
            self.match(PlSqlParser.AGENT)
            self.state = 4815
            self.match(PlSqlParser.IN)
            self.state = 4816
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4817
            self.expressions()
            self.state = 4818
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(PlSqlParser.PARAMETERS, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)




    def c_parameters_clause(self):

        localctx = PlSqlParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_c_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4820
            self.match(PlSqlParser.PARAMETERS)
            self.state = 4821
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 4822
                self.expressions()
                pass
            elif token in [PlSqlParser.PERIOD]:
                self.state = 4823
                self.match(PlSqlParser.PERIOD)
                self.state = 4824
                self.match(PlSqlParser.PERIOD)
                self.state = 4825
                self.match(PlSqlParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4828
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IN)
            else:
                return self.getToken(PlSqlParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OUT)
            else:
                return self.getToken(PlSqlParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INOUT)
            else:
                return self.getToken(PlSqlParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCOPY)
            else:
                return self.getToken(PlSqlParser.NOCOPY, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = PlSqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4830
            self.parameter_name()
            self.state = 4834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,653,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4831
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.IN or _la==PlSqlParser.INOUT or _la==PlSqlParser.NOCOPY or _la==PlSqlParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 4836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,653,self._ctx)

            self.state = 4838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
            if la_ == 1:
                self.state = 4837
                self.type_spec()


            self.state = 4841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 4840
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(PlSqlParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)




    def default_value_part(self):

        localctx = PlSqlParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4843
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4844
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seq_of_declare_specsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_seq_of_declare_specs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_declare_specs" ):
                listener.enterSeq_of_declare_specs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_declare_specs" ):
                listener.exitSeq_of_declare_specs(self)




    def seq_of_declare_specs(self):

        localctx = PlSqlParser.Seq_of_declare_specsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_seq_of_declare_specs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4847 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4846
                    self.declare_spec()

                else:
                    raise NoViableAltException(self)
                self.state = 4849 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,656,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Type_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Function_specContext,0)


        def procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_bodyContext,0)


        def function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Function_bodyContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)




    def declare_spec(self):

        localctx = PlSqlParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_declare_spec)
        try:
            self.state = 4861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4851
                self.pragma_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4852
                self.variable_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4853
                self.subtype_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4854
                self.cursor_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4855
                self.exception_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4856
                self.type_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4857
                self.procedure_spec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4858
                self.function_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4859
                self.procedure_body()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4860
                self.function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def CONSTANT(self):
            return self.getToken(PlSqlParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)




    def variable_declaration(self):

        localctx = PlSqlParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4863
            self.identifier()
            self.state = 4865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
            if la_ == 1:
                self.state = 4864
                self.match(PlSqlParser.CONSTANT)


            self.state = 4867
            self.type_spec()
            self.state = 4870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 4868
                self.match(PlSqlParser.NOT)
                self.state = 4869
                self.match(PlSqlParser.NULL)


            self.state = 4873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 4872
                self.default_value_part()


            self.state = 4875
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(PlSqlParser.SUBTYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)




    def subtype_declaration(self):

        localctx = PlSqlParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4877
            self.match(PlSqlParser.SUBTYPE)
            self.state = 4878
            self.identifier()
            self.state = 4879
            self.match(PlSqlParser.IS)
            self.state = 4880
            self.type_spec()
            self.state = 4886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RANGE:
                self.state = 4881
                self.match(PlSqlParser.RANGE)
                self.state = 4882
                self.expression()
                self.state = 4883
                self.match(PlSqlParser.DOUBLE_PERIOD)
                self.state = 4884
                self.expression()


            self.state = 4890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 4888
                self.match(PlSqlParser.NOT)
                self.state = 4889
                self.match(PlSqlParser.NULL)


            self.state = 4892
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parameter_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)




    def cursor_declaration(self):

        localctx = PlSqlParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4894
            self.match(PlSqlParser.CURSOR)
            self.state = 4895
            self.identifier()
            self.state = 4907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 4896
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4901 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 4897
                        self.match(PlSqlParser.COMMA)


                    self.state = 4900
                    self.parameter_spec()
                    self.state = 4903 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 4905
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 4911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 4909
                self.match(PlSqlParser.RETURN)
                self.state = 4910
                self.type_spec()


            self.state = 4915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.IS:
                self.state = 4913
                self.match(PlSqlParser.IS)
                self.state = 4914
                self.select_statement()


            self.state = 4917
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)




    def parameter_spec(self):

        localctx = PlSqlParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4919
            self.parameter_name()
            self.state = 4924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
            if la_ == 1:
                self.state = 4921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IN:
                    self.state = 4920
                    self.match(PlSqlParser.IN)


                self.state = 4923
                self.type_spec()


            self.state = 4927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 4926
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)




    def exception_declaration(self):

        localctx = PlSqlParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4929
            self.identifier()
            self.state = 4930
            self.match(PlSqlParser.EXCEPTION)
            self.state = 4931
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # IdentifierContext

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(PlSqlParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(PlSqlParser.EXCEPTION_INIT, 0)

        def exception_name(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,0)


        def numeric_negative(self):
            return self.getTypedRuleContext(PlSqlParser.Numeric_negativeContext,0)


        def INLINE(self):
            return self.getToken(PlSqlParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.IdentifierContext,i)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)




    def pragma_declaration(self):

        localctx = PlSqlParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4933
            self.match(PlSqlParser.PRAGMA)
            self.state = 4964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SERIALLY_REUSABLE]:
                self.state = 4934
                self.match(PlSqlParser.SERIALLY_REUSABLE)
                pass
            elif token in [PlSqlParser.AUTONOMOUS_TRANSACTION]:
                self.state = 4935
                self.match(PlSqlParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [PlSqlParser.EXCEPTION_INIT]:
                self.state = 4936
                self.match(PlSqlParser.EXCEPTION_INIT)
                self.state = 4937
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4938
                self.exception_name()
                self.state = 4939
                self.match(PlSqlParser.COMMA)
                self.state = 4940
                self.numeric_negative()
                self.state = 4941
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.INLINE]:
                self.state = 4943
                self.match(PlSqlParser.INLINE)
                self.state = 4944
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4945
                localctx.id1 = self.identifier()
                self.state = 4946
                self.match(PlSqlParser.COMMA)
                self.state = 4947
                self.expression()
                self.state = 4948
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.RESTRICT_REFERENCES]:
                self.state = 4950
                self.match(PlSqlParser.RESTRICT_REFERENCES)
                self.state = 4951
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4954
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 4952
                    self.identifier()
                    pass
                elif token in [PlSqlParser.DEFAULT]:
                    self.state = 4953
                    self.match(PlSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4956
                    self.match(PlSqlParser.COMMA)
                    self.state = 4957
                    self.identifier()
                    self.state = 4960 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.COMMA):
                        break

                self.state = 4962
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4966
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(PlSqlParser.RECORD, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Field_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Field_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_record_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_def" ):
                listener.enterRecord_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_def" ):
                listener.exitRecord_type_def(self)




    def record_type_def(self):

        localctx = PlSqlParser.Record_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_record_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4968
            self.match(PlSqlParser.RECORD)
            self.state = 4969
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4974 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 4970
                    self.match(PlSqlParser.COMMA)


                self.state = 4973
                self.field_spec()
                self.state = 4976 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 4978
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)




    def field_spec(self):

        localctx = PlSqlParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4980
            self.column_name()
            self.state = 4982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
            if la_ == 1:
                self.state = 4981
                self.type_spec()


            self.state = 4986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 4984
                self.match(PlSqlParser.NOT)
                self.state = 4985
                self.match(PlSqlParser.NULL)


            self.state = 4989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 4988
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ref_cursor_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_ref_cursor_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_cursor_type_def" ):
                listener.enterRef_cursor_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_cursor_type_def" ):
                listener.exitRef_cursor_type_def(self)




    def ref_cursor_type_def(self):

        localctx = PlSqlParser.Ref_cursor_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_ref_cursor_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4991
            self.match(PlSqlParser.REF)
            self.state = 4992
            self.match(PlSqlParser.CURSOR)
            self.state = 4995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 4993
                self.match(PlSqlParser.RETURN)
                self.state = 4994
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def table_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Table_type_defContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_type_defContext,0)


        def record_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Record_type_defContext,0)


        def ref_cursor_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Ref_cursor_type_defContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = PlSqlParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4997
            self.match(PlSqlParser.TYPE)
            self.state = 4998
            self.identifier()
            self.state = 4999
            self.match(PlSqlParser.IS)
            self.state = 5004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLE]:
                self.state = 5000
                self.table_type_def()
                pass
            elif token in [PlSqlParser.VARRAY, PlSqlParser.VARYING]:
                self.state = 5001
                self.varray_type_def()
                pass
            elif token in [PlSqlParser.RECORD]:
                self.state = 5002
                self.record_type_def()
                pass
            elif token in [PlSqlParser.REF]:
                self.state = 5003
                self.ref_cursor_type_def()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5006
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(PlSqlParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_def" ):
                listener.enterTable_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_def" ):
                listener.exitTable_type_def(self)




    def table_type_def(self):

        localctx = PlSqlParser.Table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_table_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5008
            self.match(PlSqlParser.TABLE)
            self.state = 5009
            self.match(PlSqlParser.OF)
            self.state = 5010
            self.type_spec()
            self.state = 5012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INDEXED or _la==PlSqlParser.INDEX:
                self.state = 5011
                self.table_indexed_by_part()


            self.state = 5016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 5014
                self.match(PlSqlParser.NOT)
                self.state = 5015
                self.match(PlSqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(PlSqlParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)




    def table_indexed_by_part(self):

        localctx = PlSqlParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INDEXED]:
                self.state = 5018
                localctx.idx1 = self.match(PlSqlParser.INDEXED)
                pass
            elif token in [PlSqlParser.INDEX]:
                self.state = 5019
                localctx.idx2 = self.match(PlSqlParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5022
            self.match(PlSqlParser.BY)
            self.state = 5023
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(PlSqlParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(PlSqlParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)




    def varray_type_def(self):

        localctx = PlSqlParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VARRAY]:
                self.state = 5025
                self.match(PlSqlParser.VARRAY)
                pass
            elif token in [PlSqlParser.VARYING]:
                self.state = 5026
                self.match(PlSqlParser.VARYING)
                self.state = 5027
                self.match(PlSqlParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5030
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5031
            self.expression()
            self.state = 5032
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 5033
            self.match(PlSqlParser.OF)
            self.state = 5034
            self.type_spec()
            self.state = 5037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
            if la_ == 1:
                self.state = 5035
                self.match(PlSqlParser.NOT)
                self.state = 5036
                self.match(PlSqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_declarationContext,i)


        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EOF)
            else:
                return self.getToken(PlSqlParser.EOF, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)




    def seq_of_statements(self):

        localctx = PlSqlParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5043 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5043
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
                    if la_ == 1:
                        self.state = 5039
                        self.statement()
                        self.state = 5040
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.EOF or _la==PlSqlParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 5042
                        self.label_declaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 5045 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,687,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)




    def label_declaration(self):

        localctx = PlSqlParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5047
            localctx.ltp1 = self.match(PlSqlParser.LESS_THAN_OP)
            self.state = 5048
            self.match(PlSqlParser.LESS_THAN_OP)
            self.state = 5049
            self.label_name()
            self.state = 5050
            self.match(PlSqlParser.GREATER_THAN_OP)
            self.state = 5051
            self.match(PlSqlParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(PlSqlParser.Swallow_to_semiContext,0)


        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(PlSqlParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(PlSqlParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PlSqlParser.Function_callContext,0)


        def pipe_row_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Pipe_row_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = PlSqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_statement)
        try:
            self.state = 5073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5053
                self.match(PlSqlParser.CREATE)
                self.state = 5054
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5055
                self.match(PlSqlParser.TRUNCATE)
                self.state = 5056
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5057
                self.body()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5058
                self.block()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5059
                self.assignment_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5060
                self.continue_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5061
                self.exit_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5062
                self.goto_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5063
                self.if_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5064
                self.loop_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5065
                self.forall_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5066
                self.null_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5067
                self.raise_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5068
                self.return_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5069
                self.case_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5070
                self.sql_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5071
                self.function_call()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5072
                self.pipe_row_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)




    def swallow_to_semi(self):

        localctx = PlSqlParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5076 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5075
                _la = self._input.LA(1)
                if _la <= 0 or _la==PlSqlParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5078 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ACCESS) | (1 << PlSqlParser.ACCOUNT) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.ADMIN) | (1 << PlSqlParser.ADMINISTER) | (1 << PlSqlParser.ADVISOR) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ALLOCATE) | (1 << PlSqlParser.ALLOW) | (1 << PlSqlParser.ALTER) | (1 << PlSqlParser.ALWAYS) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.AND) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ANYSCHEMA) | (1 << PlSqlParser.ARCHIVE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASC) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.ASYNCHRONOUS) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHENTICATED) | (1 << PlSqlParser.AUTHENTICATION) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTOALLOCATE) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOEXTEND) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BACKUP) | (1 << PlSqlParser.BASIC) | (1 << PlSqlParser.BASICFILE) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BECOME) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BEGIN) | (1 << PlSqlParser.BETWEEN) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BIGFILE) | (1 << PlSqlParser.BINARY) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BLOCKSIZE) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BREADTH) | (1 << PlSqlParser.BUFFER_POOL) | (1 << PlSqlParser.BUILD) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BY) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.CACHE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CERTIFICATE - 64)) | (1 << (PlSqlParser.CHANGE - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHECK - 64)) | (1 << (PlSqlParser.CHECKPOINT - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.CHUNK - 64)) | (1 << (PlSqlParser.CLASS - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMN - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COLUMN_VALUE - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPACT - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.COMPRESS - 64)) | (1 << (PlSqlParser.COMPUTE - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONNECT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTAINER - 64)) | (1 << (PlSqlParser.CONTAINER_DATA - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CREATION - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATAFILE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.DBA_RECYCLEBIN - 128)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 128)) | (1 << (PlSqlParser.DBTIMEZONE - 128)) | (1 << (PlSqlParser.DDL - 128)) | (1 << (PlSqlParser.DEALLOCATE - 128)) | (1 << (PlSqlParser.DEBUG - 128)) | (1 << (PlSqlParser.DEC - 128)) | (1 << (PlSqlParser.DECIMAL - 128)) | (1 << (PlSqlParser.DECLARE - 128)) | (1 << (PlSqlParser.DECOMPOSE - 128)) | (1 << (PlSqlParser.DECREMENT - 128)) | (1 << (PlSqlParser.DECRYPT - 128)) | (1 << (PlSqlParser.DEDUPLICATE - 128)) | (1 << (PlSqlParser.DEFAULT - 128)) | (1 << (PlSqlParser.DEFAULTS - 128)) | (1 << (PlSqlParser.DEFERRABLE - 128)) | (1 << (PlSqlParser.DEFERRED - 128)) | (1 << (PlSqlParser.DEFINER - 128)) | (1 << (PlSqlParser.DELEGATE - 128)) | (1 << (PlSqlParser.DELETE - 128)) | (1 << (PlSqlParser.DEMAND - 128)) | (1 << (PlSqlParser.DEPTH - 128)) | (1 << (PlSqlParser.DESC - 128)) | (1 << (PlSqlParser.DETERMINISTIC - 128)) | (1 << (PlSqlParser.DICTIONARY - 128)) | (1 << (PlSqlParser.DIMENSION - 128)) | (1 << (PlSqlParser.DIRECTORY - 128)) | (1 << (PlSqlParser.DISABLE - 128)) | (1 << (PlSqlParser.DISALLOW - 128)) | (1 << (PlSqlParser.DISASSOCIATE - 128)) | (1 << (PlSqlParser.DISTINCT - 128)) | (1 << (PlSqlParser.DISTINGUISHED - 128)) | (1 << (PlSqlParser.DOCUMENT - 128)) | (1 << (PlSqlParser.DOUBLE - 128)) | (1 << (PlSqlParser.DROP - 128)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 128)) | (1 << (PlSqlParser.EACH - 128)) | (1 << (PlSqlParser.EDITION - 128)) | (1 << (PlSqlParser.EDITIONING - 128)) | (1 << (PlSqlParser.EDITIONS - 128)) | (1 << (PlSqlParser.ELEMENT - 128)) | (1 << (PlSqlParser.ELSE - 128)) | (1 << (PlSqlParser.ELSIF - 128)) | (1 << (PlSqlParser.EMPTY - 128)) | (1 << (PlSqlParser.ENABLE - 128)) | (1 << (PlSqlParser.ENCODING - 128)) | (1 << (PlSqlParser.ENCRYPT - 128)) | (1 << (PlSqlParser.ENCRYPTION - 128)) | (1 << (PlSqlParser.END - 128)) | (1 << (PlSqlParser.ENFORCED - 128)) | (1 << (PlSqlParser.ENTERPRISE - 128)) | (1 << (PlSqlParser.ENTITYESCAPING - 128)) | (1 << (PlSqlParser.ERR - 128)) | (1 << (PlSqlParser.ERRORS - 128)) | (1 << (PlSqlParser.ESCAPE - 128)) | (1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPT - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXCLUDING - 128)) | (1 << (PlSqlParser.EXCLUSIVE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.EXEMPT - 192)) | (1 << (PlSqlParser.EXISTS - 192)) | (1 << (PlSqlParser.EXIT - 192)) | (1 << (PlSqlParser.EXPIRE - 192)) | (1 << (PlSqlParser.EXPLAIN - 192)) | (1 << (PlSqlParser.EXTENT - 192)) | (1 << (PlSqlParser.EXTERNAL - 192)) | (1 << (PlSqlParser.EXTERNALLY - 192)) | (1 << (PlSqlParser.EXTRACT - 192)) | (1 << (PlSqlParser.FAILURE - 192)) | (1 << (PlSqlParser.FALSE - 192)) | (1 << (PlSqlParser.FAST - 192)) | (1 << (PlSqlParser.FETCH - 192)) | (1 << (PlSqlParser.FILESYSTEM_LIKE_LOGGING - 192)) | (1 << (PlSqlParser.FINAL - 192)) | (1 << (PlSqlParser.FIRST - 192)) | (1 << (PlSqlParser.FIRST_VALUE - 192)) | (1 << (PlSqlParser.FLASHBACK - 192)) | (1 << (PlSqlParser.FLASH_CACHE - 192)) | (1 << (PlSqlParser.FLOAT - 192)) | (1 << (PlSqlParser.FOLDER - 192)) | (1 << (PlSqlParser.FOLLOWING - 192)) | (1 << (PlSqlParser.FOLLOWS - 192)) | (1 << (PlSqlParser.FORALL - 192)) | (1 << (PlSqlParser.FORCE - 192)) | (1 << (PlSqlParser.FOREIGN - 192)) | (1 << (PlSqlParser.FOR - 192)) | (1 << (PlSqlParser.FREELIST - 192)) | (1 << (PlSqlParser.FREELISTS - 192)) | (1 << (PlSqlParser.FREEPOOLS - 192)) | (1 << (PlSqlParser.FROM - 192)) | (1 << (PlSqlParser.FULL - 192)) | (1 << (PlSqlParser.FUNCTION - 192)) | (1 << (PlSqlParser.GENERATED - 192)) | (1 << (PlSqlParser.GLOBAL - 192)) | (1 << (PlSqlParser.GLOBALLY - 192)) | (1 << (PlSqlParser.GOTO - 192)) | (1 << (PlSqlParser.GRANT - 192)) | (1 << (PlSqlParser.GROUP - 192)) | (1 << (PlSqlParser.GROUPING - 192)) | (1 << (PlSqlParser.GROUPS - 192)) | (1 << (PlSqlParser.GUARANTEE - 192)) | (1 << (PlSqlParser.HASH - 192)) | (1 << (PlSqlParser.HAVING - 192)) | (1 << (PlSqlParser.HIDE - 192)) | (1 << (PlSqlParser.HIERARCHY - 192)) | (1 << (PlSqlParser.HIGH - 192)) | (1 << (PlSqlParser.HOUR - 192)) | (1 << (PlSqlParser.IDENTIFIED - 192)) | (1 << (PlSqlParser.IDENTIFIER - 192)) | (1 << (PlSqlParser.ID - 192)) | (1 << (PlSqlParser.IF - 192)) | (1 << (PlSqlParser.IGNORE - 192)) | (1 << (PlSqlParser.IMMEDIATE - 192)) | (1 << (PlSqlParser.INCLUDE - 192)) | (1 << (PlSqlParser.INCLUDING - 192)) | (1 << (PlSqlParser.INCREMENT - 192)) | (1 << (PlSqlParser.INDENT - 192)) | (1 << (PlSqlParser.INDEXED - 192)) | (1 << (PlSqlParser.INDEX - 192)) | (1 << (PlSqlParser.INDEXTYPE - 192)) | (1 << (PlSqlParser.INDICATOR - 192)) | (1 << (PlSqlParser.INDICES - 192)) | (1 << (PlSqlParser.INFINITE - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.INHERIT - 256)) | (1 << (PlSqlParser.IN - 256)) | (1 << (PlSqlParser.INITIAL - 256)) | (1 << (PlSqlParser.INITIALLY - 256)) | (1 << (PlSqlParser.INITRANS - 256)) | (1 << (PlSqlParser.INLINE - 256)) | (1 << (PlSqlParser.INNER - 256)) | (1 << (PlSqlParser.INOUT - 256)) | (1 << (PlSqlParser.INSERT - 256)) | (1 << (PlSqlParser.INSTANCE - 256)) | (1 << (PlSqlParser.INSTANTIABLE - 256)) | (1 << (PlSqlParser.INSTEAD - 256)) | (1 << (PlSqlParser.INTEGER - 256)) | (1 << (PlSqlParser.INTERSECT - 256)) | (1 << (PlSqlParser.INTERVAL - 256)) | (1 << (PlSqlParser.INT - 256)) | (1 << (PlSqlParser.INTO - 256)) | (1 << (PlSqlParser.INVALIDATE - 256)) | (1 << (PlSqlParser.IS - 256)) | (1 << (PlSqlParser.ISOLATION - 256)) | (1 << (PlSqlParser.ITERATE - 256)) | (1 << (PlSqlParser.JAVA - 256)) | (1 << (PlSqlParser.JOB - 256)) | (1 << (PlSqlParser.JOIN - 256)) | (1 << (PlSqlParser.KEEP_DUPLICATES - 256)) | (1 << (PlSqlParser.KEEP - 256)) | (1 << (PlSqlParser.KEY - 256)) | (1 << (PlSqlParser.LANGUAGE - 256)) | (1 << (PlSqlParser.LAST - 256)) | (1 << (PlSqlParser.LAST_VALUE - 256)) | (1 << (PlSqlParser.LEADING - 256)) | (1 << (PlSqlParser.LEFT - 256)) | (1 << (PlSqlParser.LESS - 256)) | (1 << (PlSqlParser.LEVEL - 256)) | (1 << (PlSqlParser.LEVELS - 256)) | (1 << (PlSqlParser.LIBRARY - 256)) | (1 << (PlSqlParser.LIKE2 - 256)) | (1 << (PlSqlParser.LIKE4 - 256)) | (1 << (PlSqlParser.LIKEC - 256)) | (1 << (PlSqlParser.LIKE - 256)) | (1 << (PlSqlParser.LIMIT - 256)) | (1 << (PlSqlParser.LINK - 256)) | (1 << (PlSqlParser.LIST - 256)) | (1 << (PlSqlParser.LOB - 256)) | (1 << (PlSqlParser.LOBS - 256)) | (1 << (PlSqlParser.LOCAL - 256)) | (1 << (PlSqlParser.LOCATOR - 256)) | (1 << (PlSqlParser.LOCKED - 256)) | (1 << (PlSqlParser.LOCK - 256)) | (1 << (PlSqlParser.LOGGING - 256)) | (1 << (PlSqlParser.LOG - 256)) | (1 << (PlSqlParser.LOGMINING - 256)) | (1 << (PlSqlParser.LOGOFF - 256)) | (1 << (PlSqlParser.LOGON - 256)) | (1 << (PlSqlParser.LONG - 256)) | (1 << (PlSqlParser.LOOP - 256)) | (1 << (PlSqlParser.LOW - 256)) | (1 << (PlSqlParser.MAIN - 256)) | (1 << (PlSqlParser.MANAGE - 256)) | (1 << (PlSqlParser.MANAGEMENT - 256)) | (1 << (PlSqlParser.MANUAL - 256)) | (1 << (PlSqlParser.MAP - 256)) | (1 << (PlSqlParser.MAPPING - 256)) | (1 << (PlSqlParser.MASTER - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.MATCHED - 320)) | (1 << (PlSqlParser.MATERIALIZED - 320)) | (1 << (PlSqlParser.MAXSIZE - 320)) | (1 << (PlSqlParser.MAXVALUE - 320)) | (1 << (PlSqlParser.MEASURE - 320)) | (1 << (PlSqlParser.MEASURES - 320)) | (1 << (PlSqlParser.MEDIUM - 320)) | (1 << (PlSqlParser.MEMBER - 320)) | (1 << (PlSqlParser.MERGE - 320)) | (1 << (PlSqlParser.MINEXTENTS - 320)) | (1 << (PlSqlParser.MINIMIZE - 320)) | (1 << (PlSqlParser.MINIMUM - 320)) | (1 << (PlSqlParser.MINING - 320)) | (1 << (PlSqlParser.MINUS - 320)) | (1 << (PlSqlParser.MINUTE - 320)) | (1 << (PlSqlParser.MINVALUE - 320)) | (1 << (PlSqlParser.MLSLABEL - 320)) | (1 << (PlSqlParser.MODEL - 320)) | (1 << (PlSqlParser.MODE - 320)) | (1 << (PlSqlParser.MODIFY - 320)) | (1 << (PlSqlParser.MONTH - 320)) | (1 << (PlSqlParser.MOVEMENT - 320)) | (1 << (PlSqlParser.MOVE - 320)) | (1 << (PlSqlParser.MULTISET - 320)) | (1 << (PlSqlParser.NAME - 320)) | (1 << (PlSqlParser.NAN - 320)) | (1 << (PlSqlParser.NATURAL - 320)) | (1 << (PlSqlParser.NATURALN - 320)) | (1 << (PlSqlParser.NAV - 320)) | (1 << (PlSqlParser.NCHAR_CS - 320)) | (1 << (PlSqlParser.NCHAR - 320)) | (1 << (PlSqlParser.NCLOB - 320)) | (1 << (PlSqlParser.NESTED - 320)) | (1 << (PlSqlParser.NEVER - 320)) | (1 << (PlSqlParser.NEW - 320)) | (1 << (PlSqlParser.NEXT - 320)) | (1 << (PlSqlParser.NOAUDIT - 320)) | (1 << (PlSqlParser.NOCACHE - 320)) | (1 << (PlSqlParser.NOCOMPRESS - 320)) | (1 << (PlSqlParser.NOCOPY - 320)) | (1 << (PlSqlParser.NOCYCLE - 320)) | (1 << (PlSqlParser.NOENTITYESCAPING - 320)) | (1 << (PlSqlParser.NOGUARANTEE - 320)) | (1 << (PlSqlParser.NOLOGGING - 320)) | (1 << (PlSqlParser.NOMAPPING - 320)) | (1 << (PlSqlParser.NOMAXVALUE - 320)) | (1 << (PlSqlParser.NOMINIMIZE - 320)) | (1 << (PlSqlParser.NOMINVALUE - 320)) | (1 << (PlSqlParser.NONE - 320)) | (1 << (PlSqlParser.NO - 320)) | (1 << (PlSqlParser.NONSCHEMA - 320)) | (1 << (PlSqlParser.NOORDER - 320)) | (1 << (PlSqlParser.NOPARALLEL - 320)) | (1 << (PlSqlParser.NORELY - 320)) | (1 << (PlSqlParser.NOROWDEPENDENCIES - 320)) | (1 << (PlSqlParser.NOSCHEMACHECK - 320)) | (1 << (PlSqlParser.NOTIFICATION - 320)) | (1 << (PlSqlParser.NOT - 320)) | (1 << (PlSqlParser.NOVALIDATE - 320)) | (1 << (PlSqlParser.NOWAIT - 320)) | (1 << (PlSqlParser.NULL - 320)) | (1 << (PlSqlParser.NULLS - 320)) | (1 << (PlSqlParser.NUMBER - 320)) | (1 << (PlSqlParser.NUMERIC - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.NVARCHAR2 - 384)) | (1 << (PlSqlParser.OBJECT - 384)) | (1 << (PlSqlParser.OFFLINE - 384)) | (1 << (PlSqlParser.OFF - 384)) | (1 << (PlSqlParser.OF - 384)) | (1 << (PlSqlParser.OIDINDEX - 384)) | (1 << (PlSqlParser.OID - 384)) | (1 << (PlSqlParser.OLD - 384)) | (1 << (PlSqlParser.OLTP - 384)) | (1 << (PlSqlParser.ONLINE - 384)) | (1 << (PlSqlParser.ONLY - 384)) | (1 << (PlSqlParser.ON - 384)) | (1 << (PlSqlParser.OPEN - 384)) | (1 << (PlSqlParser.OPERATOR - 384)) | (1 << (PlSqlParser.OPTIMAL - 384)) | (1 << (PlSqlParser.OPTION - 384)) | (1 << (PlSqlParser.ORADATA - 384)) | (1 << (PlSqlParser.ORDER - 384)) | (1 << (PlSqlParser.ORDINALITY - 384)) | (1 << (PlSqlParser.OR - 384)) | (1 << (PlSqlParser.OSERROR - 384)) | (1 << (PlSqlParser.OUTER - 384)) | (1 << (PlSqlParser.OUTLINE - 384)) | (1 << (PlSqlParser.OUT - 384)) | (1 << (PlSqlParser.OVERFLOW - 384)) | (1 << (PlSqlParser.OVER - 384)) | (1 << (PlSqlParser.OVERRIDING - 384)) | (1 << (PlSqlParser.PACKAGE - 384)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 384)) | (1 << (PlSqlParser.PARALLEL - 384)) | (1 << (PlSqlParser.PARAMETERS - 384)) | (1 << (PlSqlParser.PARENT - 384)) | (1 << (PlSqlParser.PARTITION - 384)) | (1 << (PlSqlParser.PASSING - 384)) | (1 << (PlSqlParser.PASSWORD - 384)) | (1 << (PlSqlParser.PATH - 384)) | (1 << (PlSqlParser.PCTFREE - 384)) | (1 << (PlSqlParser.PCTINCREASE - 384)) | (1 << (PlSqlParser.PCTTHRESHOLD - 384)) | (1 << (PlSqlParser.PCTUSED - 384)) | (1 << (PlSqlParser.PCTVERSION - 384)) | (1 << (PlSqlParser.PERCENT_FOUND - 384)) | (1 << (PlSqlParser.PERCENT_ISOPEN - 384)) | (1 << (PlSqlParser.PERCENT_NOTFOUND - 384)) | (1 << (PlSqlParser.PERCENT_ROWCOUNT - 384)) | (1 << (PlSqlParser.PERCENT_ROWTYPE - 384)) | (1 << (PlSqlParser.PERCENT_TYPE - 384)) | (1 << (PlSqlParser.PIPELINED - 384)) | (1 << (PlSqlParser.PIPE - 384)) | (1 << (PlSqlParser.PIVOT - 384)) | (1 << (PlSqlParser.PLAN - 384)) | (1 << (PlSqlParser.PLS_INTEGER - 384)) | (1 << (PlSqlParser.PLUGGABLE - 384)) | (1 << (PlSqlParser.POLICY - 384)) | (1 << (PlSqlParser.POSITIVEN - 384)) | (1 << (PlSqlParser.POSITIVE - 384)) | (1 << (PlSqlParser.PRAGMA - 384)) | (1 << (PlSqlParser.PREBUILT - 384)) | (1 << (PlSqlParser.PRECEDING - 384)) | (1 << (PlSqlParser.PRECISION - 384)) | (1 << (PlSqlParser.PRESENT - 384)) | (1 << (PlSqlParser.PRESERVE - 384)) | (1 << (PlSqlParser.PRIMARY - 384)) | (1 << (PlSqlParser.PRIOR - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.PRIVILEGE - 448)) | (1 << (PlSqlParser.PRIVILEGES - 448)) | (1 << (PlSqlParser.PROCEDURE - 448)) | (1 << (PlSqlParser.PROCESS - 448)) | (1 << (PlSqlParser.PROFILE - 448)) | (1 << (PlSqlParser.PROGRAM - 448)) | (1 << (PlSqlParser.PUBLIC - 448)) | (1 << (PlSqlParser.PURGE - 448)) | (1 << (PlSqlParser.QUERY - 448)) | (1 << (PlSqlParser.QUOTA - 448)) | (1 << (PlSqlParser.RAISE - 448)) | (1 << (PlSqlParser.RANGE - 448)) | (1 << (PlSqlParser.RAW - 448)) | (1 << (PlSqlParser.READ - 448)) | (1 << (PlSqlParser.READS - 448)) | (1 << (PlSqlParser.REAL - 448)) | (1 << (PlSqlParser.REBUILD - 448)) | (1 << (PlSqlParser.RECORD - 448)) | (1 << (PlSqlParser.RECORDS_PER_BLOCK - 448)) | (1 << (PlSqlParser.RECYCLE - 448)) | (1 << (PlSqlParser.REDACTION - 448)) | (1 << (PlSqlParser.REDUCED - 448)) | (1 << (PlSqlParser.REFERENCE - 448)) | (1 << (PlSqlParser.REFERENCES - 448)) | (1 << (PlSqlParser.REFERENCING - 448)) | (1 << (PlSqlParser.REF - 448)) | (1 << (PlSqlParser.REFRESH - 448)) | (1 << (PlSqlParser.REJECT - 448)) | (1 << (PlSqlParser.REKEY - 448)) | (1 << (PlSqlParser.RELATIONAL - 448)) | (1 << (PlSqlParser.RELIES_ON - 448)) | (1 << (PlSqlParser.RELY - 448)) | (1 << (PlSqlParser.REMOVE - 448)) | (1 << (PlSqlParser.RENAME - 448)) | (1 << (PlSqlParser.REPLACE - 448)) | (1 << (PlSqlParser.REQUIRED - 448)) | (1 << (PlSqlParser.RESOURCE - 448)) | (1 << (PlSqlParser.RESPECT - 448)) | (1 << (PlSqlParser.RESTRICTED - 448)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 448)) | (1 << (PlSqlParser.RESULT_CACHE - 448)) | (1 << (PlSqlParser.RESULT - 448)) | (1 << (PlSqlParser.RESUMABLE - 448)) | (1 << (PlSqlParser.RETENTION - 448)) | (1 << (PlSqlParser.RETURNING - 448)) | (1 << (PlSqlParser.RETURN - 448)) | (1 << (PlSqlParser.REUSE - 448)) | (1 << (PlSqlParser.REVERSE - 448)) | (1 << (PlSqlParser.REVOKE - 448)) | (1 << (PlSqlParser.REWRITE - 448)) | (1 << (PlSqlParser.RIGHT - 448)) | (1 << (PlSqlParser.ROLE - 448)) | (1 << (PlSqlParser.ROLES - 448)) | (1 << (PlSqlParser.ROLLBACK - 448)) | (1 << (PlSqlParser.ROLLUP - 448)) | (1 << (PlSqlParser.ROWDEPENDENCIES - 448)) | (1 << (PlSqlParser.ROWID - 448)) | (1 << (PlSqlParser.ROW - 448)) | (1 << (PlSqlParser.ROWS - 448)) | (1 << (PlSqlParser.RULES - 448)) | (1 << (PlSqlParser.SALT - 448)) | (1 << (PlSqlParser.SAMPLE - 448)) | (1 << (PlSqlParser.SAVEPOINT - 448)) | (1 << (PlSqlParser.SAVE - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (PlSqlParser.SCHEDULER - 512)) | (1 << (PlSqlParser.SCHEMACHECK - 512)) | (1 << (PlSqlParser.SCHEMA - 512)) | (1 << (PlSqlParser.SCN - 512)) | (1 << (PlSqlParser.SCOPE - 512)) | (1 << (PlSqlParser.SEARCH - 512)) | (1 << (PlSqlParser.SECOND - 512)) | (1 << (PlSqlParser.SECUREFILE - 512)) | (1 << (PlSqlParser.SEED - 512)) | (1 << (PlSqlParser.SEGMENT - 512)) | (1 << (PlSqlParser.SELECT - 512)) | (1 << (PlSqlParser.SELF - 512)) | (1 << (PlSqlParser.SEQUENCE - 512)) | (1 << (PlSqlParser.SEQUENTIAL - 512)) | (1 << (PlSqlParser.SERIALIZABLE - 512)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 512)) | (1 << (PlSqlParser.SERVERERROR - 512)) | (1 << (PlSqlParser.SESSION - 512)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 512)) | (1 << (PlSqlParser.SET - 512)) | (1 << (PlSqlParser.SETS - 512)) | (1 << (PlSqlParser.SETTINGS - 512)) | (1 << (PlSqlParser.SHARE - 512)) | (1 << (PlSqlParser.SHOW - 512)) | (1 << (PlSqlParser.SHRINK - 512)) | (1 << (PlSqlParser.SHUTDOWN - 512)) | (1 << (PlSqlParser.SIBLINGS - 512)) | (1 << (PlSqlParser.SIGNTYPE - 512)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 512)) | (1 << (PlSqlParser.SINGLE - 512)) | (1 << (PlSqlParser.SIZE - 512)) | (1 << (PlSqlParser.SKIP_ - 512)) | (1 << (PlSqlParser.SMALLFILE - 512)) | (1 << (PlSqlParser.SMALLINT - 512)) | (1 << (PlSqlParser.SNAPSHOT - 512)) | (1 << (PlSqlParser.SOME - 512)) | (1 << (PlSqlParser.SORT - 512)) | (1 << (PlSqlParser.SOURCE - 512)) | (1 << (PlSqlParser.SPACE_KEYWORD - 512)) | (1 << (PlSqlParser.SPECIFICATION - 512)) | (1 << (PlSqlParser.SQLDATA - 512)) | (1 << (PlSqlParser.SQLERROR - 512)) | (1 << (PlSqlParser.SQL - 512)) | (1 << (PlSqlParser.STANDALONE - 512)) | (1 << (PlSqlParser.START - 512)) | (1 << (PlSqlParser.STARTUP - 512)) | (1 << (PlSqlParser.STATEMENT_ID - 512)) | (1 << (PlSqlParser.STATEMENT - 512)) | (1 << (PlSqlParser.STATIC - 512)) | (1 << (PlSqlParser.STATISTICS - 512)) | (1 << (PlSqlParser.STORAGE - 512)) | (1 << (PlSqlParser.STORE - 512)) | (1 << (PlSqlParser.STRING - 512)) | (1 << (PlSqlParser.SUBMULTISET - 512)) | (1 << (PlSqlParser.SUBPARTITION - 512)) | (1 << (PlSqlParser.SUBSTITUTABLE - 512)) | (1 << (PlSqlParser.SUBTYPE - 512)) | (1 << (PlSqlParser.SUCCESS - 512)) | (1 << (PlSqlParser.SUPPLEMENTAL - 512)) | (1 << (PlSqlParser.SUSPEND - 512)) | (1 << (PlSqlParser.SYNCHRONOUS - 512)) | (1 << (PlSqlParser.SYNONYM - 512)) | (1 << (PlSqlParser.SYSBACKUP - 512)) | (1 << (PlSqlParser.SYSDATE - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (PlSqlParser.SYSDBA - 576)) | (1 << (PlSqlParser.SYSDG - 576)) | (1 << (PlSqlParser.SYSGUID - 576)) | (1 << (PlSqlParser.SYSKM - 576)) | (1 << (PlSqlParser.SYSOPER - 576)) | (1 << (PlSqlParser.SYSTEM - 576)) | (1 << (PlSqlParser.TABLESPACE - 576)) | (1 << (PlSqlParser.TABLES - 576)) | (1 << (PlSqlParser.TABLE - 576)) | (1 << (PlSqlParser.TEMPFILE - 576)) | (1 << (PlSqlParser.TEMPORARY - 576)) | (1 << (PlSqlParser.THAN - 576)) | (1 << (PlSqlParser.THEN - 576)) | (1 << (PlSqlParser.THE - 576)) | (1 << (PlSqlParser.THROUGH - 576)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 576)) | (1 << (PlSqlParser.TIMESTAMP - 576)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 576)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 576)) | (1 << (PlSqlParser.TIME - 576)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 576)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 576)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 576)) | (1 << (PlSqlParser.TIMEZONE_REGION - 576)) | (1 << (PlSqlParser.TO - 576)) | (1 << (PlSqlParser.TRAILING - 576)) | (1 << (PlSqlParser.TRANSACTION - 576)) | (1 << (PlSqlParser.TRANSLATE - 576)) | (1 << (PlSqlParser.TRANSLATION - 576)) | (1 << (PlSqlParser.TREAT - 576)) | (1 << (PlSqlParser.TRIGGERS - 576)) | (1 << (PlSqlParser.TRIGGER - 576)) | (1 << (PlSqlParser.TRUE - 576)) | (1 << (PlSqlParser.TRUNCATE - 576)) | (1 << (PlSqlParser.TRUSTED - 576)) | (1 << (PlSqlParser.TUNING - 576)) | (1 << (PlSqlParser.TYPE - 576)) | (1 << (PlSqlParser.UNBOUNDED - 576)) | (1 << (PlSqlParser.UNDER - 576)) | (1 << (PlSqlParser.UNDO - 576)) | (1 << (PlSqlParser.UNIFORM - 576)) | (1 << (PlSqlParser.UNION - 576)) | (1 << (PlSqlParser.UNIQUE - 576)) | (1 << (PlSqlParser.UNLIMITED - 576)) | (1 << (PlSqlParser.UNLOCK - 576)) | (1 << (PlSqlParser.UNPIVOT - 576)) | (1 << (PlSqlParser.UNTIL - 576)) | (1 << (PlSqlParser.UNUSED - 576)) | (1 << (PlSqlParser.UPDATED - 576)) | (1 << (PlSqlParser.UPDATE - 576)) | (1 << (PlSqlParser.UPGRADE - 576)) | (1 << (PlSqlParser.UPSERT - 576)) | (1 << (PlSqlParser.UROWID - 576)) | (1 << (PlSqlParser.USERS - 576)) | (1 << (PlSqlParser.USER - 576)) | (1 << (PlSqlParser.USE - 576)) | (1 << (PlSqlParser.USING - 576)) | (1 << (PlSqlParser.VALIDATE - 576)) | (1 << (PlSqlParser.VALUES - 576)) | (1 << (PlSqlParser.VALUE - 576)) | (1 << (PlSqlParser.VARCHAR2 - 576)) | (1 << (PlSqlParser.VARCHAR - 576)) | (1 << (PlSqlParser.VARIABLE - 576)) | (1 << (PlSqlParser.VARRAYS - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (PlSqlParser.VARRAY - 640)) | (1 << (PlSqlParser.VARYING - 640)) | (1 << (PlSqlParser.VERSIONS - 640)) | (1 << (PlSqlParser.VERSION - 640)) | (1 << (PlSqlParser.VIEW - 640)) | (1 << (PlSqlParser.VIRTUAL - 640)) | (1 << (PlSqlParser.WAIT - 640)) | (1 << (PlSqlParser.WARNING - 640)) | (1 << (PlSqlParser.WELLFORMED - 640)) | (1 << (PlSqlParser.WHENEVER - 640)) | (1 << (PlSqlParser.WHEN - 640)) | (1 << (PlSqlParser.WHERE - 640)) | (1 << (PlSqlParser.WHILE - 640)) | (1 << (PlSqlParser.WITHIN - 640)) | (1 << (PlSqlParser.WITHOUT - 640)) | (1 << (PlSqlParser.WITH - 640)) | (1 << (PlSqlParser.WORK - 640)) | (1 << (PlSqlParser.WRITE - 640)) | (1 << (PlSqlParser.XMLAGG - 640)) | (1 << (PlSqlParser.XMLATTRIBUTES - 640)) | (1 << (PlSqlParser.XMLCAST - 640)) | (1 << (PlSqlParser.XMLCOLATTVAL - 640)) | (1 << (PlSqlParser.XMLELEMENT - 640)) | (1 << (PlSqlParser.XMLEXISTS - 640)) | (1 << (PlSqlParser.XMLFOREST - 640)) | (1 << (PlSqlParser.XMLNAMESPACES - 640)) | (1 << (PlSqlParser.XMLPARSE - 640)) | (1 << (PlSqlParser.XMLPI - 640)) | (1 << (PlSqlParser.XMLQUERY - 640)) | (1 << (PlSqlParser.XMLROOT - 640)) | (1 << (PlSqlParser.XMLSCHEMA - 640)) | (1 << (PlSqlParser.XMLSERIALIZE - 640)) | (1 << (PlSqlParser.XMLTABLE - 640)) | (1 << (PlSqlParser.XMLTYPE - 640)) | (1 << (PlSqlParser.XML - 640)) | (1 << (PlSqlParser.YEAR - 640)) | (1 << (PlSqlParser.YES - 640)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 640)) | (1 << (PlSqlParser.ZONE - 640)) | (1 << (PlSqlParser.PREDICTION - 640)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 640)) | (1 << (PlSqlParser.PREDICTION_COST - 640)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 640)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 640)) | (1 << (PlSqlParser.PREDICTION_SET - 640)) | (1 << (PlSqlParser.CUME_DIST - 640)) | (1 << (PlSqlParser.DENSE_RANK - 640)) | (1 << (PlSqlParser.LISTAGG - 640)) | (1 << (PlSqlParser.PERCENT_RANK - 640)) | (1 << (PlSqlParser.PERCENTILE_CONT - 640)) | (1 << (PlSqlParser.PERCENTILE_DISC - 640)) | (1 << (PlSqlParser.RANK - 640)) | (1 << (PlSqlParser.AVG - 640)) | (1 << (PlSqlParser.CORR - 640)) | (1 << (PlSqlParser.COVAR_ - 640)) | (1 << (PlSqlParser.DECODE - 640)) | (1 << (PlSqlParser.LAG - 640)) | (1 << (PlSqlParser.LEAD - 640)) | (1 << (PlSqlParser.MAX - 640)) | (1 << (PlSqlParser.MEDIAN - 640)) | (1 << (PlSqlParser.MIN - 640)) | (1 << (PlSqlParser.NTILE - 640)) | (1 << (PlSqlParser.NVL - 640)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (PlSqlParser.REGR_ - 704)) | (1 << (PlSqlParser.ROUND - 704)) | (1 << (PlSqlParser.ROW_NUMBER - 704)) | (1 << (PlSqlParser.SUBSTR - 704)) | (1 << (PlSqlParser.TO_CHAR - 704)) | (1 << (PlSqlParser.TRIM - 704)) | (1 << (PlSqlParser.SUM - 704)) | (1 << (PlSqlParser.STDDEV - 704)) | (1 << (PlSqlParser.VAR_ - 704)) | (1 << (PlSqlParser.VARIANCE - 704)) | (1 << (PlSqlParser.LEAST - 704)) | (1 << (PlSqlParser.GREATEST - 704)) | (1 << (PlSqlParser.TO_DATE - 704)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 704)) | (1 << (PlSqlParser.BIT_STRING_LIT - 704)) | (1 << (PlSqlParser.HEX_STRING_LIT - 704)) | (1 << (PlSqlParser.DOUBLE_PERIOD - 704)) | (1 << (PlSqlParser.PERIOD - 704)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 704)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 704)) | (1 << (PlSqlParser.CHAR_STRING - 704)) | (1 << (PlSqlParser.DELIMITED_ID - 704)) | (1 << (PlSqlParser.PERCENT - 704)) | (1 << (PlSqlParser.AMPERSAND - 704)) | (1 << (PlSqlParser.LEFT_PAREN - 704)) | (1 << (PlSqlParser.RIGHT_PAREN - 704)) | (1 << (PlSqlParser.DOUBLE_ASTERISK - 704)) | (1 << (PlSqlParser.ASTERISK - 704)) | (1 << (PlSqlParser.PLUS_SIGN - 704)) | (1 << (PlSqlParser.MINUS_SIGN - 704)) | (1 << (PlSqlParser.COMMA - 704)) | (1 << (PlSqlParser.SOLIDUS - 704)) | (1 << (PlSqlParser.AT_SIGN - 704)) | (1 << (PlSqlParser.ASSIGN_OP - 704)) | (1 << (PlSqlParser.BINDVAR - 704)) | (1 << (PlSqlParser.NOT_EQUAL_OP - 704)) | (1 << (PlSqlParser.CARRET_OPERATOR_PART - 704)) | (1 << (PlSqlParser.TILDE_OPERATOR_PART - 704)) | (1 << (PlSqlParser.EXCLAMATION_OPERATOR_PART - 704)) | (1 << (PlSqlParser.GREATER_THAN_OP - 704)) | (1 << (PlSqlParser.LESS_THAN_OP - 704)) | (1 << (PlSqlParser.COLON - 704)) | (1 << (PlSqlParser.BAR - 704)) | (1 << (PlSqlParser.EQUALS_OP - 704)) | (1 << (PlSqlParser.LEFT_BRACKET - 704)) | (1 << (PlSqlParser.RIGHT_BRACKET - 704)) | (1 << (PlSqlParser.INTRODUCER - 704)) | (1 << (PlSqlParser.SPACES - 704)) | (1 << (PlSqlParser.SINGLE_LINE_COMMENT - 704)) | (1 << (PlSqlParser.MULTI_LINE_COMMENT - 704)) | (1 << (PlSqlParser.PROMPT - 704)) | (1 << (PlSqlParser.START_CMD - 704)) | (1 << (PlSqlParser.REGULAR_ID - 704)) | (1 << (PlSqlParser.ZV - 704)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(PlSqlParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)




    def assignment_statement(self):

        localctx = PlSqlParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5080
                self.general_element()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.state = 5081
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5084
            self.match(PlSqlParser.ASSIGN_OP)
            self.state = 5085
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = PlSqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5087
            self.match(PlSqlParser.CONTINUE)
            self.state = 5089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 5088
                self.label_name()


            self.state = 5093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 5091
                self.match(PlSqlParser.WHEN)
                self.state = 5092
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)




    def exit_statement(self):

        localctx = PlSqlParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5095
            self.match(PlSqlParser.EXIT)
            self.state = 5097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 5096
                self.label_name()


            self.state = 5101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 5099
                self.match(PlSqlParser.WHEN)
                self.state = 5100
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(PlSqlParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = PlSqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5103
            self.match(PlSqlParser.GOTO)
            self.state = 5104
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IF)
            else:
                return self.getToken(PlSqlParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = PlSqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5106
            self.match(PlSqlParser.IF)
            self.state = 5107
            self.condition()
            self.state = 5108
            self.match(PlSqlParser.THEN)
            self.state = 5109
            self.seq_of_statements()
            self.state = 5113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.ELSIF:
                self.state = 5110
                self.elsif_part()
                self.state = 5115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 5116
                self.else_part()


            self.state = 5119
            self.match(PlSqlParser.END)
            self.state = 5120
            self.match(PlSqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(PlSqlParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)




    def elsif_part(self):

        localctx = PlSqlParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5122
            self.match(PlSqlParser.ELSIF)
            self.state = 5123
            self.condition()
            self.state = 5124
            self.match(PlSqlParser.THEN)
            self.state = 5125
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)




    def else_part(self):

        localctx = PlSqlParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5127
            self.match(PlSqlParser.ELSE)
            self.state = 5128
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOOP)
            else:
                return self.getToken(PlSqlParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def label_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Label_declarationContext,0)


        def WHILE(self):
            return self.getToken(PlSqlParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_loop_paramContext,0)


        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)




    def loop_statement(self):

        localctx = PlSqlParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LESS_THAN_OP:
                self.state = 5130
                self.label_declaration()


            self.state = 5137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WHILE]:
                self.state = 5133
                self.match(PlSqlParser.WHILE)
                self.state = 5134
                self.condition()
                pass
            elif token in [PlSqlParser.FOR]:
                self.state = 5135
                self.match(PlSqlParser.FOR)
                self.state = 5136
                self.cursor_loop_param()
                pass
            elif token in [PlSqlParser.LOOP]:
                pass
            else:
                pass
            self.state = 5139
            self.match(PlSqlParser.LOOP)
            self.state = 5140
            self.seq_of_statements()
            self.state = 5141
            self.match(PlSqlParser.END)
            self.state = 5142
            self.match(PlSqlParser.LOOP)
            self.state = 5144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 5143
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.range_separator = None # Token

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(PlSqlParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(PlSqlParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)




    def cursor_loop_param(self):

        localctx = PlSqlParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 5171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5146
                self.index_name()
                self.state = 5147
                self.match(PlSqlParser.IN)
                self.state = 5149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                if la_ == 1:
                    self.state = 5148
                    self.match(PlSqlParser.REVERSE)


                self.state = 5151
                self.lower_bound()
                self.state = 5152
                localctx.range_separator = self.match(PlSqlParser.DOUBLE_PERIOD)
                self.state = 5153
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5155
                self.record_name()
                self.state = 5156
                self.match(PlSqlParser.IN)
                self.state = 5169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 5157
                    self.cursor_name()
                    self.state = 5163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.LEFT_PAREN:
                        self.state = 5158
                        self.match(PlSqlParser.LEFT_PAREN)
                        self.state = 5160
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                            self.state = 5159
                            self.expressions()


                        self.state = 5162
                        self.match(PlSqlParser.RIGHT_PAREN)


                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 5165
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 5166
                    self.select_statement()
                    self.state = 5167
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(PlSqlParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(PlSqlParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)




    def forall_statement(self):

        localctx = PlSqlParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5173
            self.match(PlSqlParser.FORALL)
            self.state = 5174
            self.index_name()
            self.state = 5175
            self.match(PlSqlParser.IN)
            self.state = 5176
            self.bounds_clause()
            self.state = 5177
            self.sql_statement()
            self.state = 5180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SAVE:
                self.state = 5178
                self.match(PlSqlParser.SAVE)
                self.state = 5179
                self.match(PlSqlParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(PlSqlParser.INDICES, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(PlSqlParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)




    def bounds_clause(self):

        localctx = PlSqlParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 5195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,707,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5182
                self.lower_bound()
                self.state = 5183
                self.match(PlSqlParser.DOUBLE_PERIOD)
                self.state = 5184
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5186
                self.match(PlSqlParser.INDICES)
                self.state = 5187
                self.match(PlSqlParser.OF)
                self.state = 5188
                self.collection_name()
                self.state = 5190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.BETWEEN:
                    self.state = 5189
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5192
                self.match(PlSqlParser.VALUES)
                self.state = 5193
                self.match(PlSqlParser.OF)
                self.state = 5194
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)




    def between_bound(self):

        localctx = PlSqlParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5197
            self.match(PlSqlParser.BETWEEN)
            self.state = 5198
            self.lower_bound()
            self.state = 5199
            self.match(PlSqlParser.AND)
            self.state = 5200
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)




    def lower_bound(self):

        localctx = PlSqlParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5202
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)




    def upper_bound(self):

        localctx = PlSqlParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5204
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)




    def null_statement(self):

        localctx = PlSqlParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5206
            self.match(PlSqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PlSqlParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = PlSqlParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5208
            self.match(PlSqlParser.RAISE)
            self.state = 5210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 5209
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = PlSqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5212
            self.match(PlSqlParser.RETURN)
            self.state = 5214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 5213
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(PlSqlParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PlSqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
            if la_ == 1:
                self.state = 5216
                self.match(PlSqlParser.CALL)


            self.state = 5219
            self.routine_name()
            self.state = 5221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 5220
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pipe_row_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self):
            return self.getToken(PlSqlParser.PIPE, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pipe_row_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipe_row_statement" ):
                listener.enterPipe_row_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipe_row_statement" ):
                listener.exitPipe_row_statement(self)




    def pipe_row_statement(self):

        localctx = PlSqlParser.Pipe_row_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_pipe_row_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5223
            self.match(PlSqlParser.PIPE)
            self.state = 5224
            self.match(PlSqlParser.ROW)
            self.state = 5225
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5226
            self.expression()
            self.state = 5227
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(PlSqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = PlSqlParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.match(PlSqlParser.BEGIN)
            self.state = 5230
            self.seq_of_statements()
            self.state = 5237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCEPTION:
                self.state = 5231
                self.match(PlSqlParser.EXCEPTION)
                self.state = 5233 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5232
                    self.exception_handler()
                    self.state = 5235 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.WHEN):
                        break



            self.state = 5239
            self.match(PlSqlParser.END)
            self.state = 5241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
            if la_ == 1:
                self.state = 5240
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)




    def exception_handler(self):

        localctx = PlSqlParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5243
            self.match(PlSqlParser.WHEN)
            self.state = 5244
            self.exception_name()
            self.state = 5249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 5245
                self.match(PlSqlParser.OR)
                self.state = 5246
                self.exception_name()
                self.state = 5251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5252
            self.match(PlSqlParser.THEN)
            self.state = 5253
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)




    def trigger_block(self):

        localctx = PlSqlParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECLARE - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0):
                self.state = 5256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 5255
                    self.match(PlSqlParser.DECLARE)


                self.state = 5259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5258
                    self.declare_spec()
                    self.state = 5261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break



            self.state = 5265
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = PlSqlParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DECLARE:
                self.state = 5267
                self.match(PlSqlParser.DECLARE)


            self.state = 5271 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5270
                self.declare_spec()
                self.state = 5273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROCEDURE - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 5275
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(PlSqlParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)




    def sql_statement(self):

        localctx = PlSqlParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_sql_statement)
        try:
            self.state = 5281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5277
                self.execute_immediate()
                pass
            elif token in [PlSqlParser.DELETE, PlSqlParser.EXPLAIN, PlSqlParser.INSERT, PlSqlParser.LOCK, PlSqlParser.MERGE, PlSqlParser.SELECT, PlSqlParser.UPDATE, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5278
                self.data_manipulation_language_statements()
                pass
            elif token in [PlSqlParser.CLOSE, PlSqlParser.FETCH, PlSqlParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5279
                self.cursor_manipulation_statements()
                pass
            elif token in [PlSqlParser.COMMIT, PlSqlParser.ROLLBACK, PlSqlParser.SAVEPOINT, PlSqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5280
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)




    def execute_immediate(self):

        localctx = PlSqlParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5283
            self.match(PlSqlParser.EXECUTE)
            self.state = 5284
            self.match(PlSqlParser.IMMEDIATE)
            self.state = 5285
            self.expression()
            self.state = 5295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BULK, PlSqlParser.INTO]:
                self.state = 5286
                self.into_clause()
                self.state = 5288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 5287
                    self.using_clause()


                pass
            elif token in [PlSqlParser.USING]:
                self.state = 5290
                self.using_clause()
                self.state = 5292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RETURNING or _la==PlSqlParser.RETURN:
                    self.state = 5291
                    self.dynamic_returning_clause()


                pass
            elif token in [PlSqlParser.RETURNING, PlSqlParser.RETURN]:
                self.state = 5294
                self.dynamic_returning_clause()
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.SAVE, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)




    def dynamic_returning_clause(self):

        localctx = PlSqlParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5297
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RETURNING or _la==PlSqlParser.RETURN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5298
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_manipulation_language_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Lock_table_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_data_manipulation_language_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_language_statements" ):
                listener.enterData_manipulation_language_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_language_statements" ):
                listener.exitData_manipulation_language_statements(self)




    def data_manipulation_language_statements(self):

        localctx = PlSqlParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 5307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MERGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5300
                self.merge_statement()
                pass
            elif token in [PlSqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5301
                self.lock_table_statement()
                pass
            elif token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5302
                self.select_statement()
                pass
            elif token in [PlSqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5303
                self.update_statement()
                pass
            elif token in [PlSqlParser.DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5304
                self.delete_statement()
                pass
            elif token in [PlSqlParser.INSERT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5305
                self.insert_statement()
                pass
            elif token in [PlSqlParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5306
                self.explain_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)




    def cursor_manipulation_statements(self):

        localctx = PlSqlParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 5313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,726,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5309
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5310
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5311
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5312
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(PlSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)




    def close_statement(self):

        localctx = PlSqlParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5315
            self.match(PlSqlParser.CLOSE)
            self.state = 5316
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)




    def open_statement(self):

        localctx = PlSqlParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5318
            self.match(PlSqlParser.OPEN)
            self.state = 5319
            self.cursor_name()
            self.state = 5325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 5320
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 5321
                    self.expressions()


                self.state = 5324
                self.match(PlSqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(PlSqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)




    def fetch_statement(self):

        localctx = PlSqlParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5327
            self.match(PlSqlParser.FETCH)
            self.state = 5328
            self.cursor_name()
            self.state = 5349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INTO]:
                self.state = 5329
                localctx.it1 = self.match(PlSqlParser.INTO)
                self.state = 5334 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5330
                            self.match(PlSqlParser.COMMA)


                        self.state = 5333
                        self.variable_name()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5336 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,730,self._ctx)

                pass
            elif token in [PlSqlParser.BULK]:
                self.state = 5338
                self.match(PlSqlParser.BULK)
                self.state = 5339
                self.match(PlSqlParser.COLLECT)
                self.state = 5340
                self.match(PlSqlParser.INTO)
                self.state = 5345 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5341
                            self.match(PlSqlParser.COMMA)


                        self.state = 5344
                        self.variable_name()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5347 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,732,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)




    def open_for_statement(self):

        localctx = PlSqlParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5351
            self.match(PlSqlParser.OPEN)
            self.state = 5352
            self.variable_name()
            self.state = 5353
            self.match(PlSqlParser.FOR)
            self.state = 5356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.state = 5354
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 5355
                self.expression()
                pass


            self.state = 5359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 5358
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)




    def transaction_control_statements(self):

        localctx = PlSqlParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_transaction_control_statements)
        try:
            self.state = 5366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5361
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5362
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5363
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5364
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5365
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(PlSqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(PlSqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PlSqlParser.LEVEL, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(PlSqlParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(PlSqlParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(PlSqlParser.COMMITTED, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)




    def set_transaction_command(self):

        localctx = PlSqlParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5368
            self.match(PlSqlParser.SET)
            self.state = 5369
            self.match(PlSqlParser.TRANSACTION)
            self.state = 5383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
            if la_ == 1:
                self.state = 5370
                self.match(PlSqlParser.READ)
                self.state = 5371
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ONLY or _la==PlSqlParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            elif la_ == 2:
                self.state = 5372
                self.match(PlSqlParser.ISOLATION)
                self.state = 5373
                self.match(PlSqlParser.LEVEL)
                self.state = 5377
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.SERIALIZABLE]:
                    self.state = 5374
                    self.match(PlSqlParser.SERIALIZABLE)
                    pass
                elif token in [PlSqlParser.READ]:
                    self.state = 5375
                    self.match(PlSqlParser.READ)
                    self.state = 5376
                    self.match(PlSqlParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 3:
                self.state = 5379
                self.match(PlSqlParser.USE)
                self.state = 5380
                self.match(PlSqlParser.ROLLBACK)
                self.state = 5381
                self.match(PlSqlParser.SEGMENT)
                self.state = 5382
                self.rollback_segment_name()


            self.state = 5387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
            if la_ == 1:
                self.state = 5385
                self.match(PlSqlParser.NAME)
                self.state = 5386
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PlSqlParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)




    def set_constraint_command(self):

        localctx = PlSqlParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5389
            self.match(PlSqlParser.SET)
            self.state = 5390
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CONSTRAINT or _la==PlSqlParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALL]:
                self.state = 5391
                self.match(PlSqlParser.ALL)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.COMMA, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5396 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5392
                            self.match(PlSqlParser.COMMA)


                        self.state = 5395
                        self.constraint_name()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5398 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,741,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 5402
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFERRED or _la==PlSqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(PlSqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(PlSqlParser.CORRUPT_XID_ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)




    def commit_statement(self):

        localctx = PlSqlParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_commit_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5404
            self.match(PlSqlParser.COMMIT)
            self.state = 5406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.state = 5405
                self.match(PlSqlParser.WORK)


            self.state = 5421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.state = 5408
                self.match(PlSqlParser.COMMENT)
                self.state = 5409
                self.expression()

            elif la_ == 2:
                self.state = 5410
                self.match(PlSqlParser.FORCE)
                self.state = 5419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
                if la_ == 1:
                    self.state = 5411
                    self.match(PlSqlParser.CORRUPT_XID)
                    self.state = 5412
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 5413
                    self.match(PlSqlParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 5414
                    self.expression()
                    self.state = 5417
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                    if la_ == 1:
                        self.state = 5415
                        self.match(PlSqlParser.COMMA)
                        self.state = 5416
                        self.expression()


                    pass




            self.state = 5424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.state = 5423
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(PlSqlParser.BATCH, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)




    def write_clause(self):

        localctx = PlSqlParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5426
            self.match(PlSqlParser.WRITE)
            self.state = 5428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,748,self._ctx)
            if la_ == 1:
                self.state = 5427
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOWAIT or _la==PlSqlParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,749,self._ctx)
            if la_ == 1:
                self.state = 5430
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BATCH or _la==PlSqlParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)




    def rollback_statement(self):

        localctx = PlSqlParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_rollback_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5433
            self.match(PlSqlParser.ROLLBACK)
            self.state = 5435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
            if la_ == 1:
                self.state = 5434
                self.match(PlSqlParser.WORK)


            self.state = 5444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.state = 5437
                self.match(PlSqlParser.TO)
                self.state = 5439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,751,self._ctx)
                if la_ == 1:
                    self.state = 5438
                    self.match(PlSqlParser.SAVEPOINT)


                self.state = 5441
                self.savepoint_name()

            elif la_ == 2:
                self.state = 5442
                self.match(PlSqlParser.FORCE)
                self.state = 5443
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)




    def savepoint_statement(self):

        localctx = PlSqlParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5446
            self.match(PlSqlParser.SAVEPOINT)
            self.state = 5447
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(PlSqlParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(PlSqlParser.PLAN, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(PlSqlParser.STATEMENT_ID, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)




    def explain_statement(self):

        localctx = PlSqlParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5449
            self.match(PlSqlParser.EXPLAIN)
            self.state = 5450
            self.match(PlSqlParser.PLAN)
            self.state = 5455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SET:
                self.state = 5451
                self.match(PlSqlParser.SET)
                self.state = 5452
                self.match(PlSqlParser.STATEMENT_ID)
                self.state = 5453
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 5454
                self.quoted_string()


            self.state = 5459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTO:
                self.state = 5457
                self.match(PlSqlParser.INTO)
                self.state = 5458
                self.tableview_name()


            self.state = 5461
            self.match(PlSqlParser.FOR)
            self.state = 5467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.state = 5462
                self.select_statement()
                pass
            elif token in [PlSqlParser.UPDATE]:
                self.state = 5463
                self.update_statement()
                pass
            elif token in [PlSqlParser.DELETE]:
                self.state = 5464
                self.delete_statement()
                pass
            elif token in [PlSqlParser.INSERT]:
                self.state = 5465
                self.insert_statement()
                pass
            elif token in [PlSqlParser.MERGE]:
                self.state = 5466
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_factoring_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PlSqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WITH:
                self.state = 5469
                self.subquery_factoring_clause()


            self.state = 5472
            self.subquery()
            self.state = 5477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.FOR or _la==PlSqlParser.ORDER:
                self.state = 5475
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.FOR]:
                    self.state = 5473
                    self.for_update_clause()
                    pass
                elif token in [PlSqlParser.ORDER]:
                    self.state = 5474
                    self.order_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Factoring_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)




    def subquery_factoring_clause(self):

        localctx = PlSqlParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5480
            self.match(PlSqlParser.WITH)
            self.state = 5485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 5481
                    self.match(PlSqlParser.COMMA)


                self.state = 5484
                self.factoring_element()
                self.state = 5487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(PlSqlParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)




    def factoring_element(self):

        localctx = PlSqlParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5489
            self.query_name()
            self.state = 5491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 5490
                self.paren_column_list()


            self.state = 5493
            self.match(PlSqlParser.AS)
            self.state = 5494
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5495
            self.subquery()
            self.state = 5497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 5496
                self.order_by_clause()


            self.state = 5499
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 5501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SEARCH:
                self.state = 5500
                self.search_clause()


            self.state = 5504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
            if la_ == 1:
                self.state = 5503
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(PlSqlParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FIRST)
            else:
                return self.getToken(PlSqlParser.FIRST, i)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def DEPTH(self):
            return self.getToken(PlSqlParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(PlSqlParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ASC)
            else:
                return self.getToken(PlSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DESC)
            else:
                return self.getToken(PlSqlParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULLS)
            else:
                return self.getToken(PlSqlParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LAST)
            else:
                return self.getToken(PlSqlParser.LAST, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)




    def search_clause(self):

        localctx = PlSqlParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5506
            self.match(PlSqlParser.SEARCH)
            self.state = 5507
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.BREADTH or _la==PlSqlParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5508
            self.match(PlSqlParser.FIRST)
            self.state = 5509
            self.match(PlSqlParser.BY)
            self.state = 5510
            self.column_name()
            self.state = 5512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ASC:
                self.state = 5511
                self.match(PlSqlParser.ASC)


            self.state = 5515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DESC:
                self.state = 5514
                self.match(PlSqlParser.DESC)


            self.state = 5519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
            if la_ == 1:
                self.state = 5517
                self.match(PlSqlParser.NULLS)
                self.state = 5518
                self.match(PlSqlParser.FIRST)


            self.state = 5523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NULLS:
                self.state = 5521
                self.match(PlSqlParser.NULLS)
                self.state = 5522
                self.match(PlSqlParser.LAST)


            self.state = 5543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 5525
                self.match(PlSqlParser.COMMA)
                self.state = 5526
                self.column_name()
                self.state = 5528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ASC:
                    self.state = 5527
                    self.match(PlSqlParser.ASC)


                self.state = 5531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DESC:
                    self.state = 5530
                    self.match(PlSqlParser.DESC)


                self.state = 5535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
                if la_ == 1:
                    self.state = 5533
                    self.match(PlSqlParser.NULLS)
                    self.state = 5534
                    self.match(PlSqlParser.FIRST)


                self.state = 5539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NULLS:
                    self.state = 5537
                    self.match(PlSqlParser.NULLS)
                    self.state = 5538
                    self.match(PlSqlParser.LAST)


                self.state = 5545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5546
            self.match(PlSqlParser.SET)
            self.state = 5547
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Column_listContext,0)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)




    def cycle_clause(self):

        localctx = PlSqlParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_cycle_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5549
            self.match(PlSqlParser.CYCLE)
            self.state = 5550
            self.column_list()
            self.state = 5551
            self.match(PlSqlParser.SET)
            self.state = 5552
            self.column_name()
            self.state = 5553
            self.match(PlSqlParser.TO)
            self.state = 5554
            self.expression()
            self.state = 5555
            self.match(PlSqlParser.DEFAULT)
            self.state = 5556
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_basic_elementsContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Subquery_operation_partContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PlSqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5558
            self.subquery_basic_elements()
            self.state = 5562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.INTERSECT or _la==PlSqlParser.MINUS or _la==PlSqlParser.UNION:
                self.state = 5559
                self.subquery_operation_part()
                self.state = 5564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_basic_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_block(self):
            return self.getTypedRuleContext(PlSqlParser.Query_blockContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_basic_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_basic_elements" ):
                listener.enterSubquery_basic_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_basic_elements" ):
                listener.exitSubquery_basic_elements(self)




    def subquery_basic_elements(self):

        localctx = PlSqlParser.Subquery_basic_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_subquery_basic_elements)
        try:
            self.state = 5570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5565
                self.query_block()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5566
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5567
                self.subquery()
                self.state = 5568
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_basic_elementsContext,0)


        def UNION(self):
            return self.getToken(PlSqlParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(PlSqlParser.INTERSECT, 0)

        def MINUS(self):
            return self.getToken(PlSqlParser.MINUS, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)




    def subquery_operation_part(self):

        localctx = PlSqlParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UNION]:
                self.state = 5572
                self.match(PlSqlParser.UNION)
                self.state = 5574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ALL:
                    self.state = 5573
                    self.match(PlSqlParser.ALL)


                pass
            elif token in [PlSqlParser.INTERSECT]:
                self.state = 5576
                self.match(PlSqlParser.INTERSECT)
                pass
            elif token in [PlSqlParser.MINUS]:
                self.state = 5577
                self.match(PlSqlParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5580
            self.subquery_basic_elements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PlSqlParser.SELECT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(PlSqlParser.From_clauseContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Group_by_clauseContext,0)


        def model_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Selected_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)




    def query_block(self):

        localctx = PlSqlParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5582
            self.match(PlSqlParser.SELECT)
            self.state = 5584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.state = 5583
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ASTERISK]:
                self.state = 5586
                self.match(PlSqlParser.ASTERISK)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.COMMA, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5591 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5588
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5587
                            self.match(PlSqlParser.COMMA)


                        self.state = 5590
                        self.selected_element()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5593 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,780,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 5598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BULK or _la==PlSqlParser.INTO:
                self.state = 5597
                self.into_clause()


            self.state = 5600
            self.from_clause()
            self.state = 5602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
            if la_ == 1:
                self.state = 5601
                self.where_clause()


            self.state = 5605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,784,self._ctx)
            if la_ == 1:
                self.state = 5604
                self.hierarchical_query_clause()


            self.state = 5608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 5607
                self.group_by_clause()


            self.state = 5611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,786,self._ctx)
            if la_ == 1:
                self.state = 5610
                self.model_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Select_list_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_selected_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_element" ):
                listener.enterSelected_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_element" ):
                listener.exitSelected_element(self)




    def selected_element(self):

        localctx = PlSqlParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_selected_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5613
            self.select_list_elements()
            self.state = 5615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,787,self._ctx)
            if la_ == 1:
                self.state = 5614
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def table_ref_list(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = PlSqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5617
            self.match(PlSqlParser.FROM)
            self.state = 5618
            self.table_ref_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_select_list_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elements" ):
                listener.enterSelect_list_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elements" ):
                listener.exitSelect_list_elements(self)




    def select_list_elements(self):

        localctx = PlSqlParser.Select_list_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_select_list_elements)
        try:
            self.state = 5630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5620
                self.tableview_name()
                self.state = 5621
                self.match(PlSqlParser.PERIOD)
                self.state = 5622
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
                if la_ == 1:
                    self.state = 5624
                    self.regular_id()
                    self.state = 5625
                    self.match(PlSqlParser.PERIOD)


                self.state = 5629
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Table_refContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_list" ):
                listener.enterTable_ref_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_list" ):
                listener.exitTable_ref_list(self)




    def table_ref_list(self):

        localctx = PlSqlParser.Table_ref_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_table_ref_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5636 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 5632
                        self.match(PlSqlParser.COMMA)


                    self.state = 5635
                    self.table_ref()

                else:
                    raise NoViableAltException(self)
                self.state = 5638 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,791,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref_aux(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_auxContext,0)


        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Join_clauseContext,i)


        def pivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)




    def table_ref(self):

        localctx = PlSqlParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5640
            self.table_ref_aux()
            self.state = 5644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,792,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5641
                    self.join_clause() 
                self.state = 5646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,792,self._ctx)

            self.state = 5649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,793,self._ctx)
            if la_ == 1:
                self.state = 5647
                self.pivot_clause()

            elif la_ == 2:
                self.state = 5648
                self.unpivot_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref_aux_internal(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_aux_internalContext,0)


        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Flashback_query_clauseContext,i)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)




    def table_ref_aux(self):

        localctx = PlSqlParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_table_ref_aux)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5651
            self.table_ref_aux_internal()
            self.state = 5655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,794,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5652
                    self.flashback_query_clause() 
                self.state = 5657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,794,self._ctx)

            self.state = 5659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 5658
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_aux_internalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref_aux_internal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)
        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_table_expression_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_three" ):
                listener.enterTable_ref_aux_internal_three(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_three" ):
                listener.exitTable_ref_aux_internal_three(self)


    class Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_table_expression_clauseContext,0)

        def pivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_clauseContext,0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_one" ):
                listener.enterTable_ref_aux_internal_one(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_one" ):
                listener.exitTable_ref_aux_internal_one(self)


    class Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.Table_refContext,0)

        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Subquery_operation_partContext,i)

        def pivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_clauseContext,0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_two" ):
                listener.enterTable_ref_aux_internal_two(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_two" ):
                listener.exitTable_ref_aux_internal_two(self)



    def table_ref_aux_internal(self):

        localctx = PlSqlParser.Table_ref_aux_internalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_table_ref_aux_internal)
        self._la = 0 # Token type
        try:
            self.state = 5684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.Table_ref_aux_internal_oneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5661
                self.dml_table_expression_clause()
                self.state = 5664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
                if la_ == 1:
                    self.state = 5662
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 5663
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                localctx = PlSqlParser.Table_ref_aux_internal_twoContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5666
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5667
                self.table_ref()
                self.state = 5671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.INTERSECT or _la==PlSqlParser.MINUS or _la==PlSqlParser.UNION:
                    self.state = 5668
                    self.subquery_operation_part()
                    self.state = 5673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5674
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 5677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
                if la_ == 1:
                    self.state = 5675
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 5676
                    self.unpivot_clause()


                pass

            elif la_ == 3:
                localctx = PlSqlParser.Table_ref_aux_internal_threeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5679
                self.match(PlSqlParser.ONLY)
                self.state = 5680
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5681
                self.dml_table_expression_clause()
                self.state = 5682
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(PlSqlParser.JOIN, 0)

        def table_ref_aux(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_auxContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Query_partition_clauseContext,i)


        def INNER(self):
            return self.getToken(PlSqlParser.INNER, 0)

        def outer_join_type(self):
            return self.getTypedRuleContext(PlSqlParser.Outer_join_typeContext,0)


        def join_on_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Join_on_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Join_on_partContext,i)


        def join_using_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Join_using_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Join_using_partContext,i)


        def CROSS(self):
            return self.getToken(PlSqlParser.CROSS, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = PlSqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 5686
                self.query_partition_clause()


            self.state = 5690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CROSS or _la==PlSqlParser.NATURAL:
                self.state = 5689
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CROSS or _la==PlSqlParser.NATURAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INNER]:
                self.state = 5692
                self.match(PlSqlParser.INNER)
                pass
            elif token in [PlSqlParser.FULL, PlSqlParser.LEFT, PlSqlParser.RIGHT]:
                self.state = 5693
                self.outer_join_type()
                pass
            elif token in [PlSqlParser.JOIN]:
                pass
            else:
                pass
            self.state = 5696
            self.match(PlSqlParser.JOIN)
            self.state = 5697
            self.table_ref_aux()
            self.state = 5699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 5698
                self.query_partition_clause()


            self.state = 5705
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,805,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5703
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.ON]:
                        self.state = 5701
                        self.join_on_part()
                        pass
                    elif token in [PlSqlParser.USING]:
                        self.state = 5702
                        self.join_using_part()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,805,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)




    def join_on_part(self):

        localctx = PlSqlParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5708
            self.match(PlSqlParser.ON)
            self.state = 5709
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)




    def join_using_part(self):

        localctx = PlSqlParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_join_using_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5711
            self.match(PlSqlParser.USING)
            self.state = 5712
            self.paren_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PlSqlParser.FULL, 0)

        def LEFT(self):
            return self.getToken(PlSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PlSqlParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PlSqlParser.OUTER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_outer_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_type" ):
                listener.enterOuter_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_type" ):
                listener.exitOuter_join_type(self)




    def outer_join_type(self):

        localctx = PlSqlParser.Outer_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_outer_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5714
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FULL or _la==PlSqlParser.LEFT or _la==PlSqlParser.RIGHT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OUTER:
                self.state = 5715
                self.match(PlSqlParser.OUTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)




    def query_partition_clause(self):

        localctx = PlSqlParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5718
            self.match(PlSqlParser.PARTITION)
            self.state = 5719
            self.match(PlSqlParser.BY)
            self.state = 5727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.state = 5720
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,807,self._ctx)
                if la_ == 1:
                    self.state = 5721
                    self.subquery()

                elif la_ == 2:
                    self.state = 5722
                    self.expressions()


                self.state = 5725
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 5726
                self.expressions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(PlSqlParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(PlSqlParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(PlSqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)




    def flashback_query_clause(self):

        localctx = PlSqlParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 5737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5729
                self.match(PlSqlParser.VERSIONS)
                self.state = 5730
                self.match(PlSqlParser.BETWEEN)
                self.state = 5731
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.SCN or _la==PlSqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5732
                self.expression()
                pass
            elif token in [PlSqlParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5733
                self.match(PlSqlParser.AS)
                self.state = 5734
                self.match(PlSqlParser.OF)
                self.state = 5735
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.SCN or _la==PlSqlParser.SNAPSHOT or _la==PlSqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5736
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(PlSqlParser.PIVOT, 0)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_in_clauseContext,0)


        def XML(self):
            return self.getToken(PlSqlParser.XML, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pivot_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)




    def pivot_clause(self):

        localctx = PlSqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5739
            self.match(PlSqlParser.PIVOT)
            self.state = 5741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.XML:
                self.state = 5740
                self.match(PlSqlParser.XML)


            self.state = 5743
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5748 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 5744
                    self.match(PlSqlParser.COMMA)


                self.state = 5747
                self.pivot_element()
                self.state = 5750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 5752
            self.pivot_for_clause()
            self.state = 5753
            self.pivot_in_clause()
            self.state = 5754
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Aggregate_function_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)




    def pivot_element(self):

        localctx = PlSqlParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_pivot_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5756
            self.aggregate_function_name()
            self.state = 5757
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5758
            self.expression()
            self.state = 5759
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 5761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 5760
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)




    def pivot_for_clause(self):

        localctx = PlSqlParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_pivot_for_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5763
            self.match(PlSqlParser.FOR)
            self.state = 5766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5764
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 5765
                self.paren_column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ANY)
            else:
                return self.getToken(PlSqlParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pivot_in_clause_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)




    def pivot_in_clause(self):

        localctx = PlSqlParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5768
            self.match(PlSqlParser.IN)
            self.state = 5769
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.state = 5770
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 5775 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 5771
                        self.match(PlSqlParser.COMMA)


                    self.state = 5774
                    self.match(PlSqlParser.ANY)
                    self.state = 5777 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.ANY or _la==PlSqlParser.COMMA):
                        break

                pass

            elif la_ == 3:
                self.state = 5783 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 5779
                        self.match(PlSqlParser.COMMA)


                    self.state = 5782
                    self.pivot_in_clause_element()
                    self.state = 5785 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                        break

                pass


            self.state = 5789
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)




    def pivot_in_clause_element(self):

        localctx = PlSqlParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_pivot_in_clause_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5791
            self.pivot_in_clause_elements()
            self.state = 5793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 5792
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)




    def pivot_in_clause_elements(self):

        localctx = PlSqlParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_pivot_in_clause_elements)
        self._la = 0 # Token type
        try:
            self.state = 5801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5795
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5796
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 5797
                    self.expressions()


                self.state = 5800
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(PlSqlParser.UNPIVOT, 0)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_in_clauseContext,0)


        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(PlSqlParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(PlSqlParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)




    def unpivot_clause(self):

        localctx = PlSqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5803
            self.match(PlSqlParser.UNPIVOT)
            self.state = 5806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCLUDE or _la==PlSqlParser.INCLUDE:
                self.state = 5804
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.EXCLUDE or _la==PlSqlParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5805
                self.match(PlSqlParser.NULLS)


            self.state = 5808
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5809
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 5810
                self.paren_column_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5813
            self.pivot_for_clause()
            self.state = 5814
            self.unpivot_in_clause()
            self.state = 5815
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Unpivot_in_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)




    def unpivot_in_clause(self):

        localctx = PlSqlParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5817
            self.match(PlSqlParser.IN)
            self.state = 5818
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5823 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 5819
                    self.match(PlSqlParser.COMMA)


                self.state = 5822
                self.unpivot_in_elements()
                self.state = 5825 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.LEFT_PAREN - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                    break

            self.state = 5827
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)




    def unpivot_in_elements(self):

        localctx = PlSqlParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 5829
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 5830
                self.paren_column_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 5833
                self.match(PlSqlParser.AS)
                self.state = 5846
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DATE, PlSqlParser.DBTIMEZONE, PlSqlParser.DEFAULT, PlSqlParser.FALSE, PlSqlParser.INTERVAL, PlSqlParser.MAXVALUE, PlSqlParser.MINVALUE, PlSqlParser.NULL, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.TIMESTAMP, PlSqlParser.TRUE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 5834
                    self.constant()
                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 5835
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 5840 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 5837
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5836
                            self.match(PlSqlParser.COMMA)


                        self.state = 5839
                        self.constant()
                        self.state = 5842 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (PlSqlParser.DATE - 126)) | (1 << (PlSqlParser.DBTIMEZONE - 126)) | (1 << (PlSqlParser.DEFAULT - 126)))) != 0) or _la==PlSqlParser.FALSE or _la==PlSqlParser.INTERVAL or _la==PlSqlParser.MAXVALUE or _la==PlSqlParser.MINVALUE or _la==PlSqlParser.NULL or _la==PlSqlParser.SESSIONTIMEZONE or _la==PlSqlParser.TIMESTAMP or _la==PlSqlParser.TRUE or ((((_la - 717)) & ~0x3f) == 0 and ((1 << (_la - 717)) & ((1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 717)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 717)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 717)) | (1 << (PlSqlParser.CHAR_STRING - 717)) | (1 << (PlSqlParser.COMMA - 717)))) != 0)):
                            break

                    self.state = 5844
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(PlSqlParser.CONNECT, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(PlSqlParser.Start_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)




    def hierarchical_query_clause(self):

        localctx = PlSqlParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_hierarchical_query_clause)
        try:
            self.state = 5867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5850
                self.match(PlSqlParser.CONNECT)
                self.state = 5851
                self.match(PlSqlParser.BY)
                self.state = 5853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 5852
                    self.match(PlSqlParser.NOCYCLE)


                self.state = 5855
                self.condition()
                self.state = 5857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
                if la_ == 1:
                    self.state = 5856
                    self.start_part()


                pass
            elif token in [PlSqlParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5859
                self.start_part()
                self.state = 5860
                self.match(PlSqlParser.CONNECT)
                self.state = 5861
                self.match(PlSqlParser.BY)
                self.state = 5863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
                if la_ == 1:
                    self.state = 5862
                    self.match(PlSqlParser.NOCYCLE)


                self.state = 5865
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(PlSqlParser.START, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)




    def start_part(self):

        localctx = PlSqlParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5869
            self.match(PlSqlParser.START)
            self.state = 5870
            self.match(PlSqlParser.WITH)
            self.state = 5871
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Group_by_elementsContext,i)


        def having_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = PlSqlParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.state = 5899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.GROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5873
                self.match(PlSqlParser.GROUP)
                self.state = 5874
                self.match(PlSqlParser.BY)
                self.state = 5879 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 5875
                            self.match(PlSqlParser.COMMA)


                        self.state = 5878
                        self.group_by_elements()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5881 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,837,self._ctx)

                self.state = 5884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
                if la_ == 1:
                    self.state = 5883
                    self.having_clause()


                pass
            elif token in [PlSqlParser.HAVING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5886
                self.having_clause()
                self.state = 5897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
                if la_ == 1:
                    self.state = 5887
                    self.match(PlSqlParser.GROUP)
                    self.state = 5888
                    self.match(PlSqlParser.BY)
                    self.state = 5893 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 5890
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.COMMA:
                                self.state = 5889
                                self.match(PlSqlParser.COMMA)


                            self.state = 5892
                            self.group_by_elements()

                        else:
                            raise NoViableAltException(self)
                        self.state = 5895 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,840,self._ctx)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)




    def group_by_elements(self):

        localctx = PlSqlParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_group_by_elements)
        try:
            self.state = 5904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5901
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5902
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5903
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(PlSqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(PlSqlParser.CUBE, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Grouping_sets_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)




    def rollup_cube_clause(self):

        localctx = PlSqlParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5906
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CUBE or _la==PlSqlParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5907
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5912 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 5908
                    self.match(PlSqlParser.COMMA)


                self.state = 5911
                self.grouping_sets_elements()
                self.state = 5914 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                    break

            self.state = 5916
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(PlSqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(PlSqlParser.SETS, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Grouping_sets_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)




    def grouping_sets_clause(self):

        localctx = PlSqlParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5918
            self.match(PlSqlParser.GROUPING)
            self.state = 5919
            self.match(PlSqlParser.SETS)
            self.state = 5920
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5925 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 5921
                    self.match(PlSqlParser.COMMA)


                self.state = 5924
                self.grouping_sets_elements()
                self.state = 5927 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                    break

            self.state = 5929
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Rollup_cube_clauseContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)




    def grouping_sets_elements(self):

        localctx = PlSqlParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_grouping_sets_elements)
        self._la = 0 # Token type
        try:
            self.state = 5938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5931
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5932
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 5934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 5933
                    self.expressions()


                self.state = 5936
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5937
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PlSqlParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PlSqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5940
            self.match(PlSqlParser.HAVING)
            self.state = 5941
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(PlSqlParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)




    def model_clause(self):

        localctx = PlSqlParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5943
            self.match(PlSqlParser.MODEL)
            self.state = 5947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 5944
                self.cell_reference_options()
                self.state = 5949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 5950
                self.return_rows_clause()


            self.state = 5956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.REFERENCE:
                self.state = 5953
                self.reference_model()
                self.state = 5958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5959
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(PlSqlParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(PlSqlParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)




    def cell_reference_options(self):

        localctx = PlSqlParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 5969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.IGNORE, PlSqlParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5961
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5962
                self.match(PlSqlParser.NAV)
                pass
            elif token in [PlSqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5963
                self.match(PlSqlParser.UNIQUE)
                self.state = 5967
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DIMENSION]:
                    self.state = 5964
                    self.match(PlSqlParser.DIMENSION)
                    pass
                elif token in [PlSqlParser.SINGLE]:
                    self.state = 5965
                    self.match(PlSqlParser.SINGLE)
                    self.state = 5966
                    self.match(PlSqlParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(PlSqlParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)




    def return_rows_clause(self):

        localctx = PlSqlParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5971
            self.match(PlSqlParser.RETURN)
            self.state = 5972
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5973
            self.match(PlSqlParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(PlSqlParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def model_column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)




    def reference_model(self):

        localctx = PlSqlParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5975
            self.match(PlSqlParser.REFERENCE)
            self.state = 5976
            self.reference_model_name()
            self.state = 5977
            self.match(PlSqlParser.ON)
            self.state = 5978
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5979
            self.subquery()
            self.state = 5980
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 5981
            self.model_column_clauses()
            self.state = 5985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 5982
                self.cell_reference_options()
                self.state = 5987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(PlSqlParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(PlSqlParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)




    def main_model(self):

        localctx = PlSqlParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.MAIN:
                self.state = 5988
                self.match(PlSqlParser.MAIN)
                self.state = 5989
                self.main_model_name()


            self.state = 5992
            self.model_column_clauses()
            self.state = 5996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 5993
                self.cell_reference_options()
                self.state = 5998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5999
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(PlSqlParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)




    def model_column_clauses(self):

        localctx = PlSqlParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 6001
                self.model_column_partition_part()


            self.state = 6004
            self.match(PlSqlParser.DIMENSION)
            self.state = 6005
            self.match(PlSqlParser.BY)
            self.state = 6006
            self.model_column_list()
            self.state = 6007
            self.match(PlSqlParser.MEASURES)
            self.state = 6008
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)




    def model_column_partition_part(self):

        localctx = PlSqlParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6010
            self.match(PlSqlParser.PARTITION)
            self.state = 6011
            self.match(PlSqlParser.BY)
            self.state = 6012
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_columnContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)




    def model_column_list(self):

        localctx = PlSqlParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6014
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6019 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6015
                    self.match(PlSqlParser.COMMA)


                self.state = 6018
                self.model_column()
                self.state = 6021 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (PlSqlParser.SELECT - 522)) | (1 << (PlSqlParser.SELF - 522)) | (1 << (PlSqlParser.SEQUENTIAL - 522)) | (1 << (PlSqlParser.SERIALIZABLE - 522)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 522)) | (1 << (PlSqlParser.SERVERERROR - 522)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 522)) | (1 << (PlSqlParser.SET - 522)) | (1 << (PlSqlParser.SETS - 522)) | (1 << (PlSqlParser.SETTINGS - 522)) | (1 << (PlSqlParser.SHOW - 522)) | (1 << (PlSqlParser.SHUTDOWN - 522)) | (1 << (PlSqlParser.SIBLINGS - 522)) | (1 << (PlSqlParser.SIGNTYPE - 522)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 522)) | (1 << (PlSqlParser.SINGLE - 522)) | (1 << (PlSqlParser.SKIP_ - 522)) | (1 << (PlSqlParser.SMALLINT - 522)) | (1 << (PlSqlParser.SNAPSHOT - 522)) | (1 << (PlSqlParser.SOME - 522)) | (1 << (PlSqlParser.SPECIFICATION - 522)) | (1 << (PlSqlParser.SQLDATA - 522)) | (1 << (PlSqlParser.SQLERROR - 522)) | (1 << (PlSqlParser.SQL - 522)) | (1 << (PlSqlParser.STANDALONE - 522)) | (1 << (PlSqlParser.STARTUP - 522)) | (1 << (PlSqlParser.STATEMENT_ID - 522)) | (1 << (PlSqlParser.STATEMENT - 522)) | (1 << (PlSqlParser.STATIC - 522)) | (1 << (PlSqlParser.STATISTICS - 522)) | (1 << (PlSqlParser.STORE - 522)) | (1 << (PlSqlParser.STRING - 522)) | (1 << (PlSqlParser.SUBMULTISET - 522)) | (1 << (PlSqlParser.SUBPARTITION - 522)) | (1 << (PlSqlParser.SUBSTITUTABLE - 522)) | (1 << (PlSqlParser.SUBTYPE - 522)) | (1 << (PlSqlParser.SUCCESS - 522)) | (1 << (PlSqlParser.SUSPEND - 522)) | (1 << (PlSqlParser.SYSDATE - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (PlSqlParser.TEMPORARY - 586)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP - 586)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 586)) | (1 << (PlSqlParser.TIME - 586)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 586)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 586)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 586)) | (1 << (PlSqlParser.TIMEZONE_REGION - 586)) | (1 << (PlSqlParser.TRAILING - 586)) | (1 << (PlSqlParser.TRANSACTION - 586)) | (1 << (PlSqlParser.TRANSLATE - 586)) | (1 << (PlSqlParser.TREAT - 586)) | (1 << (PlSqlParser.TRIGGER - 586)) | (1 << (PlSqlParser.TRUE - 586)) | (1 << (PlSqlParser.TRUNCATE - 586)) | (1 << (PlSqlParser.TYPE - 586)) | (1 << (PlSqlParser.UNBOUNDED - 586)) | (1 << (PlSqlParser.UNDER - 586)) | (1 << (PlSqlParser.UNLIMITED - 586)) | (1 << (PlSqlParser.UNTIL - 586)) | (1 << (PlSqlParser.UPDATED - 586)) | (1 << (PlSqlParser.UPSERT - 586)) | (1 << (PlSqlParser.UROWID - 586)) | (1 << (PlSqlParser.USERS - 586)) | (1 << (PlSqlParser.USER - 586)) | (1 << (PlSqlParser.USE - 586)) | (1 << (PlSqlParser.VALIDATE - 586)) | (1 << (PlSqlParser.VALUE - 586)) | (1 << (PlSqlParser.VARCHAR2 - 586)) | (1 << (PlSqlParser.VARCHAR - 586)) | (1 << (PlSqlParser.VARIABLE - 586)) | (1 << (PlSqlParser.VARRAY - 586)) | (1 << (PlSqlParser.VARYING - 586)) | (1 << (PlSqlParser.VERSIONS - 586)) | (1 << (PlSqlParser.VERSION - 586)) | (1 << (PlSqlParser.WAIT - 586)) | (1 << (PlSqlParser.WARNING - 586)) | (1 << (PlSqlParser.WELLFORMED - 586)) | (1 << (PlSqlParser.WHENEVER - 586)))) != 0) or ((((_la - 652)) & ~0x3f) == 0 and ((1 << (_la - 652)) & ((1 << (PlSqlParser.WHILE - 652)) | (1 << (PlSqlParser.WITHIN - 652)) | (1 << (PlSqlParser.WORK - 652)) | (1 << (PlSqlParser.WRITE - 652)) | (1 << (PlSqlParser.XMLAGG - 652)) | (1 << (PlSqlParser.XMLATTRIBUTES - 652)) | (1 << (PlSqlParser.XMLCAST - 652)) | (1 << (PlSqlParser.XMLCOLATTVAL - 652)) | (1 << (PlSqlParser.XMLELEMENT - 652)) | (1 << (PlSqlParser.XMLEXISTS - 652)) | (1 << (PlSqlParser.XMLFOREST - 652)) | (1 << (PlSqlParser.XMLNAMESPACES - 652)) | (1 << (PlSqlParser.XMLPARSE - 652)) | (1 << (PlSqlParser.XMLPI - 652)) | (1 << (PlSqlParser.XMLQUERY - 652)) | (1 << (PlSqlParser.XMLROOT - 652)) | (1 << (PlSqlParser.XMLSERIALIZE - 652)) | (1 << (PlSqlParser.XMLTABLE - 652)) | (1 << (PlSqlParser.XMLTYPE - 652)) | (1 << (PlSqlParser.XML - 652)) | (1 << (PlSqlParser.YEAR - 652)) | (1 << (PlSqlParser.YES - 652)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 652)) | (1 << (PlSqlParser.ZONE - 652)) | (1 << (PlSqlParser.PREDICTION - 652)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 652)) | (1 << (PlSqlParser.PREDICTION_COST - 652)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 652)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 652)) | (1 << (PlSqlParser.PREDICTION_SET - 652)) | (1 << (PlSqlParser.CUME_DIST - 652)) | (1 << (PlSqlParser.DENSE_RANK - 652)) | (1 << (PlSqlParser.LISTAGG - 652)) | (1 << (PlSqlParser.PERCENT_RANK - 652)) | (1 << (PlSqlParser.PERCENTILE_CONT - 652)) | (1 << (PlSqlParser.PERCENTILE_DISC - 652)) | (1 << (PlSqlParser.RANK - 652)) | (1 << (PlSqlParser.AVG - 652)) | (1 << (PlSqlParser.CORR - 652)) | (1 << (PlSqlParser.COVAR_ - 652)) | (1 << (PlSqlParser.DECODE - 652)) | (1 << (PlSqlParser.LAG - 652)) | (1 << (PlSqlParser.LEAD - 652)) | (1 << (PlSqlParser.MAX - 652)) | (1 << (PlSqlParser.MEDIAN - 652)) | (1 << (PlSqlParser.MIN - 652)) | (1 << (PlSqlParser.NTILE - 652)) | (1 << (PlSqlParser.NVL - 652)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 652)) | (1 << (PlSqlParser.REGR_ - 652)) | (1 << (PlSqlParser.ROUND - 652)) | (1 << (PlSqlParser.ROW_NUMBER - 652)) | (1 << (PlSqlParser.SUBSTR - 652)) | (1 << (PlSqlParser.TO_CHAR - 652)) | (1 << (PlSqlParser.TRIM - 652)) | (1 << (PlSqlParser.SUM - 652)) | (1 << (PlSqlParser.STDDEV - 652)) | (1 << (PlSqlParser.VAR_ - 652)) | (1 << (PlSqlParser.VARIANCE - 652)) | (1 << (PlSqlParser.LEAST - 652)) | (1 << (PlSqlParser.GREATEST - 652)))) != 0) or ((((_la - 716)) & ~0x3f) == 0 and ((1 << (_la - 716)) & ((1 << (PlSqlParser.TO_DATE - 716)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 716)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 716)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 716)) | (1 << (PlSqlParser.CHAR_STRING - 716)) | (1 << (PlSqlParser.DELIMITED_ID - 716)) | (1 << (PlSqlParser.LEFT_PAREN - 716)) | (1 << (PlSqlParser.PLUS_SIGN - 716)) | (1 << (PlSqlParser.MINUS_SIGN - 716)) | (1 << (PlSqlParser.COMMA - 716)) | (1 << (PlSqlParser.BINDVAR - 716)) | (1 << (PlSqlParser.COLON - 716)) | (1 << (PlSqlParser.INTRODUCER - 716)) | (1 << (PlSqlParser.REGULAR_ID - 716)))) != 0)):
                    break

            self.state = 6023
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def query_block(self):
            return self.getTypedRuleContext(PlSqlParser.Query_blockContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)




    def model_column(self):

        localctx = PlSqlParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_model_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 6025
                self.expression()
                pass
            elif token in [PlSqlParser.SELECT]:
                self.state = 6026
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
            if la_ == 1:
                self.state = 6029
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_rules_part(self):
            return self.getTypedRuleContext(PlSqlParser.Model_rules_partContext,0)


        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_rules_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)




    def model_rules_clause(self):

        localctx = PlSqlParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RULES:
                self.state = 6032
                self.model_rules_part()


            self.state = 6035
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPDATE - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 6037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6036
                    self.match(PlSqlParser.COMMA)


                self.state = 6039
                self.model_rules_element()
                self.state = 6044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6045
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(PlSqlParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(PlSqlParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(PlSqlParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)




    def model_rules_part(self):

        localctx = PlSqlParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6047
            self.match(PlSqlParser.RULES)
            self.state = 6053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UPDATE]:
                self.state = 6048
                self.match(PlSqlParser.UPDATE)
                pass
            elif token in [PlSqlParser.UPSERT]:
                self.state = 6049
                self.match(PlSqlParser.UPSERT)
                self.state = 6051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ALL:
                    self.state = 6050
                    self.match(PlSqlParser.ALL)


                pass
            elif token in [PlSqlParser.AUTOMATIC, PlSqlParser.ITERATE, PlSqlParser.SEQUENTIAL, PlSqlParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 6057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTOMATIC or _la==PlSqlParser.SEQUENTIAL:
                self.state = 6055
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AUTOMATIC or _la==PlSqlParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6056
                self.match(PlSqlParser.ORDER)


            self.state = 6060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ITERATE:
                self.state = 6059
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(PlSqlParser.Cell_assignmentContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)




    def model_rules_element(self):

        localctx = PlSqlParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
            if la_ == 1:
                self.state = 6062
                self.match(PlSqlParser.UPDATE)

            elif la_ == 2:
                self.state = 6063
                self.match(PlSqlParser.UPSERT)
                self.state = 6065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
                if la_ == 1:
                    self.state = 6064
                    self.match(PlSqlParser.ALL)




            self.state = 6069
            self.cell_assignment()
            self.state = 6071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 6070
                self.order_by_clause()


            self.state = 6073
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 6074
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)




    def cell_assignment(self):

        localctx = PlSqlParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6076
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(PlSqlParser.ITERATE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def until_part(self):
            return self.getTypedRuleContext(PlSqlParser.Until_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)




    def model_iterate_clause(self):

        localctx = PlSqlParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6078
            self.match(PlSqlParser.ITERATE)
            self.state = 6079
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6080
            self.expression()
            self.state = 6081
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 6083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.UNTIL:
                self.state = 6082
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(PlSqlParser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)




    def until_part(self):

        localctx = PlSqlParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6085
            self.match(PlSqlParser.UNTIL)
            self.state = 6086
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6087
            self.condition()
            self.state = 6088
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def SIBLINGS(self):
            return self.getToken(PlSqlParser.SIBLINGS, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Order_by_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = PlSqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6090
            self.match(PlSqlParser.ORDER)
            self.state = 6092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SIBLINGS:
                self.state = 6091
                self.match(PlSqlParser.SIBLINGS)


            self.state = 6094
            self.match(PlSqlParser.BY)
            self.state = 6099 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 6095
                        self.match(PlSqlParser.COMMA)


                    self.state = 6098
                    self.order_by_elements()

                else:
                    raise NoViableAltException(self)
                self.state = 6101 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,876,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(PlSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(PlSqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)




    def order_by_elements(self):

        localctx = PlSqlParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6103
            self.expression()
            self.state = 6105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ASC or _la==PlSqlParser.DESC:
                self.state = 6104
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ASC or _la==PlSqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
            if la_ == 1:
                self.state = 6107
                self.match(PlSqlParser.NULLS)
                self.state = 6108
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FIRST or _la==PlSqlParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(PlSqlParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(PlSqlParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)




    def for_update_clause(self):

        localctx = PlSqlParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_for_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6111
            self.match(PlSqlParser.FOR)
            self.state = 6112
            self.match(PlSqlParser.UPDATE)
            self.state = 6114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OF:
                self.state = 6113
                self.for_update_of_part()


            self.state = 6117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
            if la_ == 1:
                self.state = 6116
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)




    def for_update_of_part(self):

        localctx = PlSqlParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6119
            self.match(PlSqlParser.OF)
            self.state = 6120
            self.column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(PlSqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(PlSqlParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)




    def for_update_options(self):

        localctx = PlSqlParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_for_update_options)
        try:
            self.state = 6127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6122
                self.match(PlSqlParser.SKIP_)
                self.state = 6123
                self.match(PlSqlParser.LOCKED)
                pass
            elif token in [PlSqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6124
                self.match(PlSqlParser.NOWAIT)
                pass
            elif token in [PlSqlParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6125
                self.match(PlSqlParser.WAIT)
                self.state = 6126
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Update_set_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = PlSqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6129
            self.match(PlSqlParser.UPDATE)
            self.state = 6130
            self.general_table_ref()
            self.state = 6131
            self.update_set_clause()
            self.state = 6133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 6132
                self.where_clause()


            self.state = 6136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.state = 6135
                self.static_returning_clause()


            self.state = 6139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.state = 6138
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_based_update_set_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)




    def update_set_clause(self):

        localctx = PlSqlParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6141
            self.match(PlSqlParser.SET)
            self.state = 6157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
            if la_ == 1:
                self.state = 6146 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6143
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 6142
                            self.match(PlSqlParser.COMMA)


                        self.state = 6145
                        self.column_based_update_set_clause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6148 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,886,self._ctx)

                pass

            elif la_ == 2:
                self.state = 6150
                self.match(PlSqlParser.VALUE)
                self.state = 6151
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6152
                self.identifier()
                self.state = 6153
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 6154
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 6155
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)




    def column_based_update_set_clause(self):

        localctx = PlSqlParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_column_based_update_set_clause)
        try:
            self.state = 6167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6159
                self.column_name()
                self.state = 6160
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 6161
                self.expression()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6163
                self.paren_column_list()
                self.state = 6164
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 6165
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = PlSqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6169
            self.match(PlSqlParser.DELETE)
            self.state = 6171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FROM:
                self.state = 6170
                self.match(PlSqlParser.FROM)


            self.state = 6173
            self.general_table_ref()
            self.state = 6175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 6174
                self.where_clause()


            self.state = 6178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 6177
                self.static_returning_clause()


            self.state = 6181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.state = 6180
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(PlSqlParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(PlSqlParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = PlSqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6183
            self.match(PlSqlParser.INSERT)
            self.state = 6186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INTO]:
                self.state = 6184
                self.single_table_insert()
                pass
            elif token in [PlSqlParser.ALL, PlSqlParser.FIRST, PlSqlParser.WHEN]:
                self.state = 6185
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)




    def single_table_insert(self):

        localctx = PlSqlParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_single_table_insert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6188
            self.insert_into_clause()
            self.state = 6194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VALUES]:
                self.state = 6189
                self.values_clause()
                self.state = 6191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
                if la_ == 1:
                    self.state = 6190
                    self.static_returning_clause()


                pass
            elif token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.state = 6193
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
            if la_ == 1:
                self.state = 6196
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)




    def multi_table_insert(self):

        localctx = PlSqlParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
            if la_ == 1:
                self.state = 6199
                self.match(PlSqlParser.ALL)
                self.state = 6201 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6200
                    self.multi_table_element()
                    self.state = 6203 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 6205
                self.conditional_insert_clause()
                pass


            self.state = 6208
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)




    def multi_table_element(self):

        localctx = PlSqlParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6210
            self.insert_into_clause()
            self.state = 6212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.VALUES:
                self.state = 6211
                self.values_clause()


            self.state = 6215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 6214
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)




    def conditional_insert_clause(self):

        localctx = PlSqlParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ALL or _la==PlSqlParser.FIRST:
                self.state = 6217
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALL or _la==PlSqlParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6221 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6220
                self.conditional_insert_when_part()
                self.state = 6223 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 6226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 6225
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)




    def conditional_insert_when_part(self):

        localctx = PlSqlParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6228
            self.match(PlSqlParser.WHEN)
            self.state = 6229
            self.condition()
            self.state = 6230
            self.match(PlSqlParser.THEN)
            self.state = 6232 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6231
                self.multi_table_element()
                self.state = 6234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)




    def conditional_insert_else_part(self):

        localctx = PlSqlParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6236
            self.match(PlSqlParser.ELSE)
            self.state = 6238 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6237
                self.multi_table_element()
                self.state = 6240 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)




    def insert_into_clause(self):

        localctx = PlSqlParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_insert_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6242
            self.match(PlSqlParser.INTO)
            self.state = 6243
            self.general_table_ref()
            self.state = 6245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,906,self._ctx)
            if la_ == 1:
                self.state = 6244
                self.paren_column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = PlSqlParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6247
            self.match(PlSqlParser.VALUES)
            self.state = 6248
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 6249
                self.expressions()


            self.state = 6252
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(PlSqlParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)




    def merge_statement(self):

        localctx = PlSqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6254
            self.match(PlSqlParser.MERGE)
            self.state = 6255
            self.match(PlSqlParser.INTO)
            self.state = 6256
            self.tableview_name()
            self.state = 6258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (PlSqlParser.CHAR_STRING - 724)) | (1 << (PlSqlParser.DELIMITED_ID - 724)) | (1 << (PlSqlParser.INTRODUCER - 724)) | (1 << (PlSqlParser.REGULAR_ID - 724)))) != 0):
                self.state = 6257
                self.table_alias()


            self.state = 6260
            self.match(PlSqlParser.USING)
            self.state = 6261
            self.selected_tableview()
            self.state = 6262
            self.match(PlSqlParser.ON)
            self.state = 6263
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6264
            self.condition()
            self.state = 6265
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 6274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
            if la_ == 1:
                self.state = 6266
                self.merge_update_clause()
                self.state = 6268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WHEN:
                    self.state = 6267
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 6270
                self.merge_insert_clause()
                self.state = 6272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WHEN:
                    self.state = 6271
                    self.merge_update_clause()




            self.state = 6277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
            if la_ == 1:
                self.state = 6276
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Merge_elementContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)




    def merge_update_clause(self):

        localctx = PlSqlParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6279
            self.match(PlSqlParser.WHEN)
            self.state = 6280
            self.match(PlSqlParser.MATCHED)
            self.state = 6281
            self.match(PlSqlParser.THEN)
            self.state = 6282
            self.match(PlSqlParser.UPDATE)
            self.state = 6283
            self.match(PlSqlParser.SET)
            self.state = 6284
            self.merge_element()
            self.state = 6289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,913,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6285
                    self.match(PlSqlParser.COMMA)
                    self.state = 6286
                    self.merge_element() 
                self.state = 6291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,913,self._ctx)

            self.state = 6293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 6292
                self.where_clause()


            self.state = 6296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,915,self._ctx)
            if la_ == 1:
                self.state = 6295
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)




    def merge_element(self):

        localctx = PlSqlParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6298
            self.column_name()
            self.state = 6299
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 6300
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)




    def merge_update_delete_part(self):

        localctx = PlSqlParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6302
            self.match(PlSqlParser.DELETE)
            self.state = 6303
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)




    def merge_insert_clause(self):

        localctx = PlSqlParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6305
            self.match(PlSqlParser.WHEN)
            self.state = 6306
            self.match(PlSqlParser.NOT)
            self.state = 6307
            self.match(PlSqlParser.MATCHED)
            self.state = 6308
            self.match(PlSqlParser.THEN)
            self.state = 6309
            self.match(PlSqlParser.INSERT)
            self.state = 6311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 6310
                self.paren_column_list()


            self.state = 6313
            self.match(PlSqlParser.VALUES)
            self.state = 6314
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 6315
                self.expressions()


            self.state = 6318
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 6320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 6319
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)




    def selected_tableview(self):

        localctx = PlSqlParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 6322
                self.tableview_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 6323
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6324
                self.select_statement()
                self.state = 6325
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (PlSqlParser.CHAR_STRING - 724)) | (1 << (PlSqlParser.DELIMITED_ID - 724)) | (1 << (PlSqlParser.INTRODUCER - 724)) | (1 << (PlSqlParser.REGULAR_ID - 724)))) != 0):
                self.state = 6329
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(PlSqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(PlSqlParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(PlSqlParser.MODE, 0)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(PlSqlParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)




    def lock_table_statement(self):

        localctx = PlSqlParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6332
            self.match(PlSqlParser.LOCK)
            self.state = 6333
            self.match(PlSqlParser.TABLE)
            self.state = 6334
            self.lock_table_element()
            self.state = 6339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 6335
                self.match(PlSqlParser.COMMA)
                self.state = 6336
                self.lock_table_element()
                self.state = 6341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6342
            self.match(PlSqlParser.IN)
            self.state = 6343
            self.lock_mode()
            self.state = 6344
            self.match(PlSqlParser.MODE)
            self.state = 6346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
            if la_ == 1:
                self.state = 6345
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)




    def wait_nowait_part(self):

        localctx = PlSqlParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_wait_nowait_part)
        try:
            self.state = 6351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6348
                self.match(PlSqlParser.WAIT)
                self.state = 6349
                self.expression()
                pass
            elif token in [PlSqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6350
                self.match(PlSqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)




    def lock_table_element(self):

        localctx = PlSqlParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6353
            self.tableview_name()
            self.state = 6355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION or _la==PlSqlParser.SUBPARTITION:
                self.state = 6354
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def SHARE(self):
            return self.getToken(PlSqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(PlSqlParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)




    def lock_mode(self):

        localctx = PlSqlParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 6369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6357
                self.match(PlSqlParser.ROW)
                self.state = 6358
                self.match(PlSqlParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6359
                self.match(PlSqlParser.ROW)
                self.state = 6360
                self.match(PlSqlParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6361
                self.match(PlSqlParser.SHARE)
                self.state = 6363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.UPDATE:
                    self.state = 6362
                    self.match(PlSqlParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6365
                self.match(PlSqlParser.SHARE)
                self.state = 6366
                self.match(PlSqlParser.ROW)
                self.state = 6367
                self.match(PlSqlParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6368
                self.match(PlSqlParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)




    def general_table_ref(self):

        localctx = PlSqlParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
            if la_ == 1:
                self.state = 6371
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 6372
                self.match(PlSqlParser.ONLY)
                self.state = 6373
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6374
                self.dml_table_expression_clause()
                self.state = 6375
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


            self.state = 6380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
            if la_ == 1:
                self.state = 6379
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)




    def static_returning_clause(self):

        localctx = PlSqlParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6382
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RETURNING or _la==PlSqlParser.RETURN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6383
            self.expressions()
            self.state = 6384
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)




    def error_logging_clause(self):

        localctx = PlSqlParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_error_logging_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6386
            self.match(PlSqlParser.LOG)
            self.state = 6387
            self.match(PlSqlParser.ERRORS)
            self.state = 6389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,929,self._ctx)
            if la_ == 1:
                self.state = 6388
                self.error_logging_into_part()


            self.state = 6392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
            if la_ == 1:
                self.state = 6391
                self.expression()


            self.state = 6395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
            if la_ == 1:
                self.state = 6394
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)




    def error_logging_into_part(self):

        localctx = PlSqlParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6397
            self.match(PlSqlParser.INTO)
            self.state = 6398
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(PlSqlParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)




    def error_logging_reject_part(self):

        localctx = PlSqlParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6400
            self.match(PlSqlParser.REJECT)
            self.state = 6401
            self.match(PlSqlParser.LIMIT)
            self.state = 6404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
            if la_ == 1:
                self.state = 6402
                self.match(PlSqlParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 6403
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Table_collection_expressionContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)




    def dml_table_expression_clause(self):

        localctx = PlSqlParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 6418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLE, PlSqlParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6406
                self.table_collection_expression()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6407
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6408
                self.select_statement()
                self.state = 6410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WITH:
                    self.state = 6409
                    self.subquery_restriction_clause()


                self.state = 6412
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6414
                self.tableview_name()
                self.state = 6416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
                if la_ == 1:
                    self.state = 6415
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def THE(self):
            return self.getToken(PlSqlParser.THE, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)




    def table_collection_expression(self):

        localctx = PlSqlParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6420
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.TABLE or _la==PlSqlParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
            if la_ == 1:
                self.state = 6421
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6422
                self.subquery()
                self.state = 6423
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6425
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6426
                self.expression()
                self.state = 6427
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 6431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,936,self._ctx)
                if la_ == 1:
                    self.state = 6428
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 6429
                    self.match(PlSqlParser.PLUS_SIGN)
                    self.state = 6430
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(PlSqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(PlSqlParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)




    def subquery_restriction_clause(self):

        localctx = PlSqlParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_subquery_restriction_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6435
            self.match(PlSqlParser.WITH)
            self.state = 6444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.READ]:
                self.state = 6436
                self.match(PlSqlParser.READ)
                self.state = 6437
                self.match(PlSqlParser.ONLY)
                pass
            elif token in [PlSqlParser.CHECK]:
                self.state = 6438
                self.match(PlSqlParser.CHECK)
                self.state = 6439
                self.match(PlSqlParser.OPTION)
                self.state = 6442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 6440
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 6441
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(PlSqlParser.SAMPLE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def BLOCK(self):
            return self.getToken(PlSqlParser.BLOCK, 0)

        def seed_part(self):
            return self.getTypedRuleContext(PlSqlParser.Seed_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = PlSqlParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6446
            self.match(PlSqlParser.SAMPLE)
            self.state = 6448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BLOCK:
                self.state = 6447
                self.match(PlSqlParser.BLOCK)


            self.state = 6450
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6451
            self.expression()
            self.state = 6454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 6452
                self.match(PlSqlParser.COMMA)
                self.state = 6453
                self.expression()


            self.state = 6456
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 6458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
            if la_ == 1:
                self.state = 6457
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(PlSqlParser.SEED, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)




    def seed_part(self):

        localctx = PlSqlParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6460
            self.match(PlSqlParser.SEED)
            self.state = 6461
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6462
            self.expression()
            self.state = 6463
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = PlSqlParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6465
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = PlSqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6467
            self.expression()
            self.state = 6472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,943,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6468
                    self.match(PlSqlParser.COMMA)
                    self.state = 6469
                    self.expression() 
                self.state = 6474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,943,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_expressionContext,0)


        def logical_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Logical_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PlSqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_expression)
        try:
            self.state = 6477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6475
                self.cursor_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6476
                self.logical_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)




    def cursor_expression(self):

        localctx = PlSqlParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6479
            self.match(PlSqlParser.CURSOR)
            self.state = 6480
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6481
            self.subquery()
            self.state = 6482
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiset_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Multiset_expressionContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IS)
            else:
                return self.getToken(PlSqlParser.IS, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULL)
            else:
                return self.getToken(PlSqlParser.NULL, i)

        def NAN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NAN)
            else:
                return self.getToken(PlSqlParser.NAN, i)

        def PRESENT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PRESENT)
            else:
                return self.getToken(PlSqlParser.PRESENT, i)

        def INFINITE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INFINITE)
            else:
                return self.getToken(PlSqlParser.INFINITE, i)

        def A_LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.A_LETTER)
            else:
                return self.getToken(PlSqlParser.A_LETTER, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SET)
            else:
                return self.getToken(PlSqlParser.SET, i)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EMPTY)
            else:
                return self.getToken(PlSqlParser.EMPTY, i)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OF)
            else:
                return self.getToken(PlSqlParser.OF, i)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOT)
            else:
                return self.getToken(PlSqlParser.NOT, i)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.TYPE)
            else:
                return self.getToken(PlSqlParser.TYPE, i)

        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ONLY)
            else:
                return self.getToken(PlSqlParser.ONLY, i)

        def logical_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Logical_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Logical_expressionContext,i)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_logical_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_expression" ):
                listener.enterLogical_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_expression" ):
                listener.exitLogical_expression(self)



    def logical_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.Logical_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 832
        self.enterRecursionRule(localctx, 832, self.RULE_logical_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 6485
                self.multiset_expression()
                self.state = 6519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,950,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6486
                        self.match(PlSqlParser.IS)
                        self.state = 6488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.NOT:
                            self.state = 6487
                            self.match(PlSqlParser.NOT)


                        self.state = 6515
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.NULL]:
                            self.state = 6490
                            self.match(PlSqlParser.NULL)
                            pass
                        elif token in [PlSqlParser.NAN]:
                            self.state = 6491
                            self.match(PlSqlParser.NAN)
                            pass
                        elif token in [PlSqlParser.PRESENT]:
                            self.state = 6492
                            self.match(PlSqlParser.PRESENT)
                            pass
                        elif token in [PlSqlParser.INFINITE]:
                            self.state = 6493
                            self.match(PlSqlParser.INFINITE)
                            pass
                        elif token in [PlSqlParser.A_LETTER]:
                            self.state = 6494
                            self.match(PlSqlParser.A_LETTER)
                            self.state = 6495
                            self.match(PlSqlParser.SET)
                            pass
                        elif token in [PlSqlParser.EMPTY]:
                            self.state = 6496
                            self.match(PlSqlParser.EMPTY)
                            pass
                        elif token in [PlSqlParser.OF]:
                            self.state = 6497
                            self.match(PlSqlParser.OF)
                            self.state = 6499
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==PlSqlParser.TYPE:
                                self.state = 6498
                                self.match(PlSqlParser.TYPE)


                            self.state = 6501
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 6503
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
                            if la_ == 1:
                                self.state = 6502
                                self.match(PlSqlParser.ONLY)


                            self.state = 6505
                            self.type_spec()
                            self.state = 6510
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==PlSqlParser.COMMA:
                                self.state = 6506
                                self.match(PlSqlParser.COMMA)
                                self.state = 6507
                                self.type_spec()
                                self.state = 6512
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 6513
                            self.match(PlSqlParser.RIGHT_PAREN)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 6521
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,950,self._ctx)

                pass
            elif token in [PlSqlParser.NOT]:
                self.state = 6522
                self.match(PlSqlParser.NOT)
                self.state = 6523
                self.logical_expression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 6534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,953,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6532
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
                    if la_ == 1:
                        localctx = PlSqlParser.Logical_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expression)
                        self.state = 6526
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6527
                        self.match(PlSqlParser.AND)
                        self.state = 6528
                        self.logical_expression(3)
                        pass

                    elif la_ == 2:
                        localctx = PlSqlParser.Logical_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expression)
                        self.state = 6529
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6530
                        self.match(PlSqlParser.OR)
                        self.state = 6531
                        self.logical_expression(2)
                        pass

             
                self.state = 6536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,953,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Multiset_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.multiset_type = None # Token

        def relational_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Relational_expressionContext,0)


        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(PlSqlParser.SUBMULTISET, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_multiset_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_expression" ):
                listener.enterMultiset_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_expression" ):
                listener.exitMultiset_expression(self)




    def multiset_expression(self):

        localctx = PlSqlParser.Multiset_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_multiset_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6537
            self.relational_expression(0)
            self.state = 6543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.state = 6538
                localctx.multiset_type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.SUBMULTISET):
                    localctx.multiset_type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OF:
                    self.state = 6539
                    self.match(PlSqlParser.OF)


                self.state = 6542
                self.concatenation(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Compound_expressionContext,0)


        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Relational_expressionContext,i)


        def relational_operator(self):
            return self.getTypedRuleContext(PlSqlParser.Relational_operatorContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)



    def relational_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.Relational_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 836
        self.enterRecursionRule(localctx, 836, self.RULE_relational_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6546
            self.compound_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 6554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,956,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlSqlParser.Relational_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_expression)
                    self.state = 6548
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 6549
                    self.relational_operator()
                    self.state = 6550
                    self.relational_expression(3) 
                self.state = 6556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,956,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Compound_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.like_type = None # Token

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def in_elements(self):
            return self.getTypedRuleContext(PlSqlParser.In_elementsContext,0)


        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def between_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Between_elementsContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def LIKE(self):
            return self.getToken(PlSqlParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(PlSqlParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(PlSqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(PlSqlParser.LIKE4, 0)

        def ESCAPE(self):
            return self.getToken(PlSqlParser.ESCAPE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_compound_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_expression" ):
                listener.enterCompound_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_expression" ):
                listener.exitCompound_expression(self)




    def compound_expression(self):

        localctx = PlSqlParser.Compound_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_compound_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6557
            self.concatenation(0)
            self.state = 6573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,960,self._ctx)
            if la_ == 1:
                self.state = 6559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NOT:
                    self.state = 6558
                    self.match(PlSqlParser.NOT)


                self.state = 6571
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.IN]:
                    self.state = 6561
                    self.match(PlSqlParser.IN)
                    self.state = 6562
                    self.in_elements()
                    pass
                elif token in [PlSqlParser.BETWEEN]:
                    self.state = 6563
                    self.match(PlSqlParser.BETWEEN)
                    self.state = 6564
                    self.between_elements()
                    pass
                elif token in [PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIKE]:
                    self.state = 6565
                    localctx.like_type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 292)) & ~0x3f) == 0 and ((1 << (_la - 292)) & ((1 << (PlSqlParser.LIKE2 - 292)) | (1 << (PlSqlParser.LIKE4 - 292)) | (1 << (PlSqlParser.LIKEC - 292)) | (1 << (PlSqlParser.LIKE - 292)))) != 0)):
                        localctx.like_type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6566
                    self.concatenation(0)
                    self.state = 6569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,958,self._ctx)
                    if la_ == 1:
                        self.state = 6567
                        self.match(PlSqlParser.ESCAPE)
                        self.state = 6568
                        self.concatenation(0)


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(PlSqlParser.NOT_EQUAL_OP, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)




    def relational_operator(self):

        localctx = PlSqlParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.state = 6589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6575
                self.match(PlSqlParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NOT_EQUAL_OP]:
                    self.state = 6576
                    self.match(PlSqlParser.NOT_EQUAL_OP)
                    pass
                elif token in [PlSqlParser.LESS_THAN_OP]:
                    self.state = 6577
                    self.match(PlSqlParser.LESS_THAN_OP)
                    self.state = 6578
                    self.match(PlSqlParser.GREATER_THAN_OP)
                    pass
                elif token in [PlSqlParser.EXCLAMATION_OPERATOR_PART]:
                    self.state = 6579
                    self.match(PlSqlParser.EXCLAMATION_OPERATOR_PART)
                    self.state = 6580
                    self.match(PlSqlParser.EQUALS_OP)
                    pass
                elif token in [PlSqlParser.CARRET_OPERATOR_PART]:
                    self.state = 6581
                    self.match(PlSqlParser.CARRET_OPERATOR_PART)
                    self.state = 6582
                    self.match(PlSqlParser.EQUALS_OP)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6585
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.GREATER_THAN_OP or _la==PlSqlParser.LESS_THAN_OP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.EQUALS_OP:
                    self.state = 6586
                    self.match(PlSqlParser.EQUALS_OP)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def constant(self):
            return self.getTypedRuleContext(PlSqlParser.ConstantContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_elements" ):
                listener.enterIn_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_elements" ):
                listener.exitIn_elements(self)




    def in_elements(self):

        localctx = PlSqlParser.In_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_in_elements)
        self._la = 0 # Token type
        try:
            self.state = 6609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6591
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6592
                self.subquery()
                self.state = 6593
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6595
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6596
                self.concatenation(0)
                self.state = 6601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 6597
                    self.match(PlSqlParser.COMMA)
                    self.state = 6598
                    self.concatenation(0)
                    self.state = 6603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6604
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6606
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6607
                self.bind_variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6608
                self.general_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)




    def between_elements(self):

        localctx = PlSqlParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6611
            self.concatenation(0)
            self.state = 6612
            self.match(PlSqlParser.AND)
            self.state = 6613
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def model_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expressionContext,0)


        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def interval_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Interval_expressionContext,0)


        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def ASTERISK(self):
            return self.getToken(PlSqlParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(PlSqlParser.SOLIDUS, 0)

        def PLUS_SIGN(self):
            return self.getToken(PlSqlParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(PlSqlParser.MINUS_SIGN, 0)

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BAR)
            else:
                return self.getToken(PlSqlParser.BAR, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)



    def concatenation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.ConcatenationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 846
        self.enterRecursionRule(localctx, 846, self.RULE_concatenation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6616
            self.model_expression()
            self.state = 6625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.state = 6617
                self.match(PlSqlParser.AT)
                self.state = 6622
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.LOCAL]:
                    self.state = 6618
                    self.match(PlSqlParser.LOCAL)
                    pass
                elif token in [PlSqlParser.TIME]:
                    self.state = 6619
                    self.match(PlSqlParser.TIME)
                    self.state = 6620
                    self.match(PlSqlParser.ZONE)
                    self.state = 6621
                    self.concatenation(0)
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 6624
                self.interval_expression()


            self._ctx.stop = self._input.LT(-1)
            self.state = 6639
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,969,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6637
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
                    if la_ == 1:
                        localctx = PlSqlParser.ConcatenationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_concatenation)
                        self.state = 6627
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6628
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.ASTERISK or _la==PlSqlParser.SOLIDUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6629
                        self.concatenation(4)
                        pass

                    elif la_ == 2:
                        localctx = PlSqlParser.ConcatenationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_concatenation)
                        self.state = 6630
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6631
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.PLUS_SIGN or _la==PlSqlParser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6632
                        self.concatenation(3)
                        pass

                    elif la_ == 3:
                        localctx = PlSqlParser.ConcatenationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_concatenation)
                        self.state = 6633
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6634
                        self.match(PlSqlParser.BAR)
                        self.state = 6635
                        self.match(PlSqlParser.BAR)
                        self.state = 6636
                        self.concatenation(2)
                        pass

             
                self.state = 6641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,969,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)




    def interval_expression(self):

        localctx = PlSqlParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 6666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6642
                self.match(PlSqlParser.DAY)
                self.state = 6647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 6643
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 6644
                    self.concatenation(0)
                    self.state = 6645
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 6649
                self.match(PlSqlParser.TO)
                self.state = 6650
                self.match(PlSqlParser.SECOND)
                self.state = 6655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,971,self._ctx)
                if la_ == 1:
                    self.state = 6651
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 6652
                    self.concatenation(0)
                    self.state = 6653
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass
            elif token in [PlSqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6657
                self.match(PlSqlParser.YEAR)
                self.state = 6662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 6658
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 6659
                    self.concatenation(0)
                    self.state = 6660
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 6664
                self.match(PlSqlParser.TO)
                self.state = 6665
                self.match(PlSqlParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Unary_expressionContext,0)


        def model_expression_element(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expression_elementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)




    def model_expression(self):

        localctx = PlSqlParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6668
            self.unary_expression()
            self.state = 6673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.state = 6669
                self.match(PlSqlParser.LEFT_BRACKET)
                self.state = 6670
                self.model_expression_element()
                self.state = 6671
                self.match(PlSqlParser.RIGHT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ANY)
            else:
                return self.getToken(PlSqlParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(PlSqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)




    def model_expression_element(self):

        localctx = PlSqlParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 6698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 6675
                    self.match(PlSqlParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 6676
                    self.expression()
                    pass


                self.state = 6686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 6679
                    self.match(PlSqlParser.COMMA)
                    self.state = 6682
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
                    if la_ == 1:
                        self.state = 6680
                        self.match(PlSqlParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 6681
                        self.expression()
                        pass


                    self.state = 6688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6689
                self.single_column_for_loop()
                self.state = 6694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 6690
                    self.match(PlSqlParser.COMMA)
                    self.state = 6691
                    self.single_column_for_loop()
                    self.state = 6696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6697
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromExpr = None # ExpressionContext
            self.toExpr = None # ExpressionContext
            self.action_type = None # Token
            self.action_expr = None # ExpressionContext

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(PlSqlParser.DECREMENT, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def LIKE(self):
            return self.getToken(PlSqlParser.LIKE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)




    def single_column_for_loop(self):

        localctx = PlSqlParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6700
            self.match(PlSqlParser.FOR)
            self.state = 6701
            self.column_name()
            self.state = 6719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.IN]:
                self.state = 6702
                self.match(PlSqlParser.IN)
                self.state = 6703
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 6704
                    self.expressions()


                self.state = 6707
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.FROM, PlSqlParser.LIKE]:
                self.state = 6710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LIKE:
                    self.state = 6708
                    self.match(PlSqlParser.LIKE)
                    self.state = 6709
                    self.expression()


                self.state = 6712
                self.match(PlSqlParser.FROM)
                self.state = 6713
                localctx.fromExpr = self.expression()
                self.state = 6714
                self.match(PlSqlParser.TO)
                self.state = 6715
                localctx.toExpr = self.expression()
                self.state = 6716
                localctx.action_type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DECREMENT or _la==PlSqlParser.INCREMENT):
                    localctx.action_type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6717
                localctx.action_expr = self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def paren_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Paren_column_listContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)




    def multi_column_for_loop(self):

        localctx = PlSqlParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6721
            self.match(PlSqlParser.FOR)
            self.state = 6722
            self.paren_column_list()
            self.state = 6723
            self.match(PlSqlParser.IN)
            self.state = 6724
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 6731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,984,self._ctx)
            if la_ == 1:
                self.state = 6725
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 6726
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 6727
                    self.expressions()


                self.state = 6730
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


            self.state = 6733
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Unary_expressionContext,0)


        def PRIOR(self):
            return self.getToken(PlSqlParser.PRIOR, 0)

        def CONNECT_BY_ROOT(self):
            return self.getToken(PlSqlParser.CONNECT_BY_ROOT, 0)

        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Case_statementContext,0)


        def quantified_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Quantified_expressionContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(PlSqlParser.Standard_functionContext,0)


        def atom(self):
            return self.getTypedRuleContext(PlSqlParser.AtomContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = PlSqlParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_unary_expression)
        self._la = 0 # Token type
        try:
            self.state = 6751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6735
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.PLUS_SIGN or _la==PlSqlParser.MINUS_SIGN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6736
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6737
                self.match(PlSqlParser.PRIOR)
                self.state = 6738
                self.unary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6739
                self.match(PlSqlParser.CONNECT_BY_ROOT)
                self.state = 6740
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6741
                self.match(PlSqlParser.NEW)
                self.state = 6742
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6743
                self.match(PlSqlParser.DISTINCT)
                self.state = 6744
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6745
                self.match(PlSqlParser.ALL)
                self.state = 6746
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6747
                self.case_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6748
                self.quantified_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6749
                self.standard_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6750
                self.atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)




    def case_statement(self):

        localctx = PlSqlParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_case_statement)
        try:
            self.state = 6755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,986,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6753
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6754
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CASE)
            else:
                return self.getToken(PlSqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)




    def simple_case_statement(self):

        localctx = PlSqlParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 6757
                self.label_name()


            self.state = 6760
            localctx.ck1 = self.match(PlSqlParser.CASE)
            self.state = 6761
            self.expression()
            self.state = 6763 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6762
                self.simple_case_when_part()
                self.state = 6765 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 6768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 6767
                self.case_else_part()


            self.state = 6770
            self.match(PlSqlParser.END)
            self.state = 6772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,990,self._ctx)
            if la_ == 1:
                self.state = 6771
                self.match(PlSqlParser.CASE)


            self.state = 6775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
            if la_ == 1:
                self.state = 6774
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)




    def simple_case_when_part(self):

        localctx = PlSqlParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6777
            self.match(PlSqlParser.WHEN)
            self.state = 6778
            self.expression()
            self.state = 6779
            self.match(PlSqlParser.THEN)
            self.state = 6782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
            if la_ == 1:
                self.state = 6780
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6781
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CASE)
            else:
                return self.getToken(PlSqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)




    def searched_case_statement(self):

        localctx = PlSqlParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.DELIMITED_ID or _la==PlSqlParser.REGULAR_ID:
                self.state = 6784
                self.label_name()


            self.state = 6787
            localctx.ck1 = self.match(PlSqlParser.CASE)
            self.state = 6789 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6788
                self.searched_case_when_part()
                self.state = 6791 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 6794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 6793
                self.case_else_part()


            self.state = 6796
            self.match(PlSqlParser.END)
            self.state = 6798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,996,self._ctx)
            if la_ == 1:
                self.state = 6797
                self.match(PlSqlParser.CASE)


            self.state = 6801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.state = 6800
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)




    def searched_case_when_part(self):

        localctx = PlSqlParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6803
            self.match(PlSqlParser.WHEN)
            self.state = 6804
            self.expression()
            self.state = 6805
            self.match(PlSqlParser.THEN)
            self.state = 6808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,998,self._ctx)
            if la_ == 1:
                self.state = 6806
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6807
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)




    def case_else_part(self):

        localctx = PlSqlParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6810
            self.match(PlSqlParser.ELSE)
            self.state = 6813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,999,self._ctx)
            if la_ == 1:
                self.state = 6811
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 6812
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(PlSqlParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(PlSqlParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(PlSqlParser.ConstantContext,0)


        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Subquery_operation_partContext,i)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PlSqlParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_atom)
        try:
            self.state = 6834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1001,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6815
                self.table_element()
                self.state = 6816
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6818
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6819
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6820
                self.general_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6821
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6822
                self.subquery()
                self.state = 6823
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 6827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1000,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6824
                        self.subquery_operation_part() 
                    self.state = 6829
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1000,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6830
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6831
                self.expressions()
                self.state = 6832
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(PlSqlParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(PlSqlParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(PlSqlParser.ANY, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)




    def quantified_expression(self):

        localctx = PlSqlParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6836
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.ANY or _la==PlSqlParser.EXISTS or _la==PlSqlParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.state = 6837
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6838
                self.subquery()
                self.state = 6839
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 6841
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6842
                self.expression()
                self.state = 6843
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTR(self):
            return self.getToken(PlSqlParser.SUBSTR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def TO_CHAR(self):
            return self.getToken(PlSqlParser.TO_CHAR, 0)

        def table_element(self):
            return self.getTypedRuleContext(PlSqlParser.Table_elementContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(PlSqlParser.Standard_functionContext,0)


        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,i)


        def DECODE(self):
            return self.getToken(PlSqlParser.DECODE, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def CHR(self):
            return self.getToken(PlSqlParser.CHR, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def NCHAR_CS(self):
            return self.getToken(PlSqlParser.NCHAR_CS, 0)

        def NVL(self):
            return self.getToken(PlSqlParser.NVL, 0)

        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)

        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def LEADING(self):
            return self.getToken(PlSqlParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(PlSqlParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(PlSqlParser.BOTH, 0)

        def TO_DATE(self):
            return self.getToken(PlSqlParser.TO_DATE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = PlSqlParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 6917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6847
                self.match(PlSqlParser.SUBSTR)
                self.state = 6848
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6849
                self.expression()
                self.state = 6850
                self.match(PlSqlParser.COMMA)
                self.state = 6851
                self.expression()
                self.state = 6854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6852
                    self.match(PlSqlParser.COMMA)
                    self.state = 6853
                    self.expression()


                self.state = 6856
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.TO_CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6858
                self.match(PlSqlParser.TO_CHAR)
                self.state = 6859
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
                if la_ == 1:
                    self.state = 6860
                    self.table_element()
                    pass

                elif la_ == 2:
                    self.state = 6861
                    self.standard_function()
                    pass

                elif la_ == 3:
                    self.state = 6862
                    self.expression()
                    pass


                self.state = 6867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
                if la_ == 1:
                    self.state = 6865
                    self.match(PlSqlParser.COMMA)
                    self.state = 6866
                    self.quoted_string()


                self.state = 6871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6869
                    self.match(PlSqlParser.COMMA)
                    self.state = 6870
                    self.quoted_string()


                self.state = 6873
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.DECODE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6875
                self.match(PlSqlParser.DECODE)
                self.state = 6876
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6877
                self.expressions()
                self.state = 6878
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.CHR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6880
                self.match(PlSqlParser.CHR)
                self.state = 6881
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6882
                self.concatenation(0)
                self.state = 6883
                self.match(PlSqlParser.USING)
                self.state = 6884
                self.match(PlSqlParser.NCHAR_CS)
                self.state = 6885
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.NVL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6887
                self.match(PlSqlParser.NVL)
                self.state = 6888
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6889
                self.expression()
                self.state = 6890
                self.match(PlSqlParser.COMMA)
                self.state = 6891
                self.expression()
                self.state = 6892
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.TRIM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6894
                self.match(PlSqlParser.TRIM)
                self.state = 6895
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 6897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING:
                        self.state = 6896
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 6900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NATIONAL_CHAR_STRING_LIT or _la==PlSqlParser.CHAR_STRING:
                        self.state = 6899
                        self.quoted_string()


                    self.state = 6902
                    self.match(PlSqlParser.FROM)


                self.state = 6905
                self.concatenation(0)
                self.state = 6906
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.TO_DATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6908
                self.match(PlSqlParser.TO_DATE)
                self.state = 6909
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6910
                self.expression()
                self.state = 6913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6911
                    self.match(PlSqlParser.COMMA)
                    self.state = 6912
                    self.quoted_string()


                self.state = 6915
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_function(self):
            return self.getTypedRuleContext(PlSqlParser.String_functionContext,0)


        def numeric_function_wrapper(self):
            return self.getTypedRuleContext(PlSqlParser.Numeric_function_wrapperContext,0)


        def other_function(self):
            return self.getTypedRuleContext(PlSqlParser.Other_functionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_standard_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_function" ):
                listener.enterStandard_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_function" ):
                listener.exitStandard_function(self)




    def standard_function(self):

        localctx = PlSqlParser.Standard_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_standard_function)
        try:
            self.state = 6922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1012,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6919
                self.string_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6920
                self.numeric_function_wrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6921
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_function_wrapperContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_function(self):
            return self.getTypedRuleContext(PlSqlParser.Numeric_functionContext,0)


        def single_column_for_loop(self):
            return self.getTypedRuleContext(PlSqlParser.Single_column_for_loopContext,0)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(PlSqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric_function_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function_wrapper" ):
                listener.enterNumeric_function_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function_wrapper" ):
                listener.exitNumeric_function_wrapper(self)




    def numeric_function_wrapper(self):

        localctx = PlSqlParser.Numeric_function_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_numeric_function_wrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6924
            self.numeric_function()
            self.state = 6927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1013,self._ctx)
            if la_ == 1:
                self.state = 6925
                self.single_column_for_loop()

            elif la_ == 2:
                self.state = 6926
                self.multi_column_for_loop()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def ROUND(self):
            return self.getToken(PlSqlParser.ROUND, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def LEAST(self):
            return self.getToken(PlSqlParser.LEAST, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def GREATEST(self):
            return self.getToken(PlSqlParser.GREATEST, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function" ):
                listener.enterNumeric_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function" ):
                listener.exitNumeric_function(self)




    def numeric_function(self):

        localctx = PlSqlParser.Numeric_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_numeric_function)
        self._la = 0 # Token type
        try:
            self.state = 6987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6929
                self.match(PlSqlParser.SUM)
                self.state = 6930
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
                if la_ == 1:
                    self.state = 6931
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6934
                self.expression()
                self.state = 6935
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6937
                self.match(PlSqlParser.COUNT)
                self.state = 6938
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6946
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ASTERISK]:
                    self.state = 6939
                    self.match(PlSqlParser.ASTERISK)
                    pass
                elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNIQUE, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.RIGHT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 6944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNIQUE - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                        self.state = 6941
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1015,self._ctx)
                        if la_ == 1:
                            self.state = 6940
                            _la = self._input.LA(1)
                            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 6943
                        self.concatenation(0)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6948
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 6950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
                if la_ == 1:
                    self.state = 6949
                    self.over_clause()


                pass
            elif token in [PlSqlParser.ROUND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6952
                self.match(PlSqlParser.ROUND)
                self.state = 6953
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6954
                self.expression()
                self.state = 6957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 6955
                    self.match(PlSqlParser.COMMA)
                    self.state = 6956
                    self.match(PlSqlParser.UNSIGNED_INTEGER)


                self.state = 6959
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.AVG]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6961
                self.match(PlSqlParser.AVG)
                self.state = 6962
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1020,self._ctx)
                if la_ == 1:
                    self.state = 6963
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6966
                self.expression()
                self.state = 6967
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.MAX]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6969
                self.match(PlSqlParser.MAX)
                self.state = 6970
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
                if la_ == 1:
                    self.state = 6971
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6974
                self.expression()
                self.state = 6975
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.LEAST]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6977
                self.match(PlSqlParser.LEAST)
                self.state = 6978
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6979
                self.expressions()
                self.state = 6980
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.GREATEST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6982
                self.match(PlSqlParser.GREATEST)
                self.state = 6983
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 6984
                self.expressions()
                self.state = 6985
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def function_argument_modeling(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argument_modelingContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)


        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def CAST(self):
            return self.getToken(PlSqlParser.CAST, 0)

        def XMLCAST(self):
            return self.getToken(PlSqlParser.XMLCAST, 0)

        def MULTISET(self):
            return self.getToken(PlSqlParser.MULTISET, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def COALESCE(self):
            return self.getToken(PlSqlParser.COALESCE, 0)

        def table_element(self):
            return self.getTypedRuleContext(PlSqlParser.Table_elementContext,0)


        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def collect_order_by_part(self):
            return self.getTypedRuleContext(PlSqlParser.Collect_order_by_partContext,0)


        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Within_or_over_clause_keywordContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Within_or_over_partContext,i)


        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def PERCENT_ISOPEN(self):
            return self.getToken(PlSqlParser.PERCENT_ISOPEN, 0)

        def PERCENT_FOUND(self):
            return self.getToken(PlSqlParser.PERCENT_FOUND, 0)

        def PERCENT_NOTFOUND(self):
            return self.getToken(PlSqlParser.PERCENT_NOTFOUND, 0)

        def PERCENT_ROWCOUNT(self):
            return self.getToken(PlSqlParser.PERCENT_ROWCOUNT, 0)

        def DECOMPOSE(self):
            return self.getToken(PlSqlParser.DECOMPOSE, 0)

        def CANONICAL(self):
            return self.getToken(PlSqlParser.CANONICAL, 0)

        def COMPATIBILITY(self):
            return self.getToken(PlSqlParser.COMPATIBILITY, 0)

        def EXTRACT(self):
            return self.getToken(PlSqlParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def FIRST_VALUE(self):
            return self.getToken(PlSqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(PlSqlParser.LAST_VALUE, 0)

        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(PlSqlParser.Respect_or_ignore_nullsContext,0)


        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Standard_prediction_function_keywordContext,0)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def cost_matrix_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Cost_matrix_clauseContext,0)


        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def CHAR_CS(self):
            return self.getToken(PlSqlParser.CHAR_CS, 0)

        def NCHAR_CS(self):
            return self.getToken(PlSqlParser.NCHAR_CS, 0)

        def TREAT(self):
            return self.getToken(PlSqlParser.TREAT, 0)

        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)

        def LEADING(self):
            return self.getToken(PlSqlParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(PlSqlParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(PlSqlParser.BOTH, 0)

        def XMLAGG(self):
            return self.getToken(PlSqlParser.XMLAGG, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def general_element_part(self):
            return self.getTypedRuleContext(PlSqlParser.General_element_partContext,0)


        def XMLCOLATTVAL(self):
            return self.getToken(PlSqlParser.XMLCOLATTVAL, 0)

        def XMLFOREST(self):
            return self.getToken(PlSqlParser.XMLFOREST, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_multiuse_expression_elementContext,i)


        def XMLELEMENT(self):
            return self.getToken(PlSqlParser.XMLELEMENT, 0)

        def xml_attributes_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_attributes_clauseContext,0)


        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def XMLEXISTS(self):
            return self.getToken(PlSqlParser.XMLEXISTS, 0)

        def xml_passing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_passing_clauseContext,0)


        def XMLPARSE(self):
            return self.getToken(PlSqlParser.XMLPARSE, 0)

        def DOCUMENT(self):
            return self.getToken(PlSqlParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(PlSqlParser.CONTENT, 0)

        def WELLFORMED(self):
            return self.getToken(PlSqlParser.WELLFORMED, 0)

        def XMLPI(self):
            return self.getToken(PlSqlParser.XMLPI, 0)

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def XMLQUERY(self):
            return self.getToken(PlSqlParser.XMLQUERY, 0)

        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def EMPTY(self):
            return self.getToken(PlSqlParser.EMPTY, 0)

        def XMLROOT(self):
            return self.getToken(PlSqlParser.XMLROOT, 0)

        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlroot_param_version_partContext,0)


        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlroot_param_standalone_partContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(PlSqlParser.XMLSERIALIZE, 0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_enconding_partContext,0)


        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_version_partContext,0)


        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_ident_partContext,0)


        def DEFAULTS(self):
            return self.getToken(PlSqlParser.DEFAULTS, 0)

        def HIDE(self):
            return self.getToken(PlSqlParser.HIDE, 0)

        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)

        def XMLTABLE(self):
            return self.getToken(PlSqlParser.XMLTABLE, 0)

        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_namespaces_clauseContext,0)


        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_table_columnContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = PlSqlParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 7304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6989
                self.over_clause_keyword()
                self.state = 6990
                self.function_argument_analytic()
                self.state = 6992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1023,self._ctx)
                if la_ == 1:
                    self.state = 6991
                    self.over_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6994
                self.regular_id()
                self.state = 6995
                self.function_argument_modeling()
                self.state = 6997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1024,self._ctx)
                if la_ == 1:
                    self.state = 6996
                    self.using_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6999
                self.match(PlSqlParser.COUNT)
                self.state = 7000
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7006
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ASTERISK]:
                    self.state = 7001
                    self.match(PlSqlParser.ASTERISK)
                    pass
                elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNIQUE, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 7003
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
                    if la_ == 1:
                        self.state = 7002
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7005
                    self.concatenation(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7008
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1027,self._ctx)
                if la_ == 1:
                    self.state = 7009
                    self.over_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7012
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CAST or _la==PlSqlParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7013
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1028,self._ctx)
                if la_ == 1:
                    self.state = 7014
                    self.match(PlSqlParser.MULTISET)
                    self.state = 7015
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 7016
                    self.subquery()
                    self.state = 7017
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 7019
                    self.concatenation(0)
                    pass


                self.state = 7022
                self.match(PlSqlParser.AS)
                self.state = 7023
                self.type_spec()
                self.state = 7024
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7026
                self.match(PlSqlParser.COALESCE)
                self.state = 7027
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7028
                self.table_element()
                self.state = 7034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7029
                    self.match(PlSqlParser.COMMA)
                    self.state = 7032
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 7030
                        self.numeric()
                        pass
                    elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                        self.state = 7031
                        self.quoted_string()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 7036
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7038
                self.match(PlSqlParser.COLLECT)
                self.state = 7039
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1031,self._ctx)
                if la_ == 1:
                    self.state = 7040
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7043
                self.concatenation(0)
                self.state = 7045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ORDER:
                    self.state = 7044
                    self.collect_order_by_part()


                self.state = 7047
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7049
                self.within_or_over_clause_keyword()
                self.state = 7050
                self.function_argument()
                self.state = 7052 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 7051
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 7054 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1033,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7056
                self.cursor_name()
                self.state = 7057
                _la = self._input.LA(1)
                if not(((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & ((1 << (PlSqlParser.PERCENT_FOUND - 425)) | (1 << (PlSqlParser.PERCENT_ISOPEN - 425)) | (1 << (PlSqlParser.PERCENT_NOTFOUND - 425)) | (1 << (PlSqlParser.PERCENT_ROWCOUNT - 425)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7059
                self.match(PlSqlParser.DECOMPOSE)
                self.state = 7060
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7061
                self.concatenation(0)
                self.state = 7063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CANONICAL or _la==PlSqlParser.COMPATIBILITY:
                    self.state = 7062
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.CANONICAL or _la==PlSqlParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7065
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7067
                self.match(PlSqlParser.EXTRACT)
                self.state = 7068
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7069
                self.regular_id()
                self.state = 7070
                self.match(PlSqlParser.FROM)
                self.state = 7071
                self.concatenation(0)
                self.state = 7072
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7074
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FIRST_VALUE or _la==PlSqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7075
                self.function_argument_analytic()
                self.state = 7077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT:
                    self.state = 7076
                    self.respect_or_ignore_nulls()


                self.state = 7079
                self.over_clause()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7081
                self.standard_prediction_function_keyword()
                self.state = 7082
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7083
                self.expressions()
                self.state = 7085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COST:
                    self.state = 7084
                    self.cost_matrix_clause()


                self.state = 7088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 7087
                    self.using_clause()


                self.state = 7090
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7092
                self.match(PlSqlParser.TRANSLATE)
                self.state = 7093
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7094
                self.expression()
                self.state = 7097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 7095
                    self.match(PlSqlParser.USING)
                    self.state = 7096
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.CHAR_CS or _la==PlSqlParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 7099
                    self.match(PlSqlParser.COMMA)
                    self.state = 7100
                    self.expression()
                    self.state = 7105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7106
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7108
                self.match(PlSqlParser.TREAT)
                self.state = 7109
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7110
                self.expression()
                self.state = 7111
                self.match(PlSqlParser.AS)
                self.state = 7113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
                if la_ == 1:
                    self.state = 7112
                    self.match(PlSqlParser.REF)


                self.state = 7115
                self.type_spec()
                self.state = 7116
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7118
                self.match(PlSqlParser.TRIM)
                self.state = 7119
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
                if la_ == 1:
                    self.state = 7121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING:
                        self.state = 7120
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NATIONAL_CHAR_STRING_LIT or _la==PlSqlParser.CHAR_STRING:
                        self.state = 7123
                        self.quoted_string()


                    self.state = 7126
                    self.match(PlSqlParser.FROM)


                self.state = 7129
                self.concatenation(0)
                self.state = 7130
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7132
                self.match(PlSqlParser.XMLAGG)
                self.state = 7133
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7134
                self.expression()
                self.state = 7136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ORDER:
                    self.state = 7135
                    self.order_by_clause()


                self.state = 7138
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1045,self._ctx)
                if la_ == 1:
                    self.state = 7139
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7140
                    self.general_element_part()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7143
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.XMLCOLATTVAL or _la==PlSqlParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7144
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7149 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7145
                        self.match(PlSqlParser.COMMA)


                    self.state = 7148
                    self.xml_multiuse_expression_element()
                    self.state = 7151 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                        break

                self.state = 7153
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
                if la_ == 1:
                    self.state = 7154
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7155
                    self.general_element_part()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7158
                self.match(PlSqlParser.XMLELEMENT)
                self.state = 7159
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1049,self._ctx)
                if la_ == 1:
                    self.state = 7160
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ENTITYESCAPING or _la==PlSqlParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                if la_ == 1:
                    self.state = 7163
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.EVALNAME or _la==PlSqlParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7166
                self.expression()
                self.state = 7169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                if la_ == 1:
                    self.state = 7167
                    self.match(PlSqlParser.COMMA)
                    self.state = 7168
                    self.xml_attributes_clause()


                self.state = 7178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 7171
                    self.match(PlSqlParser.COMMA)
                    self.state = 7172
                    self.expression()
                    self.state = 7174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (PlSqlParser.CHAR_STRING - 724)) | (1 << (PlSqlParser.DELIMITED_ID - 724)) | (1 << (PlSqlParser.INTRODUCER - 724)) | (1 << (PlSqlParser.REGULAR_ID - 724)))) != 0):
                        self.state = 7173
                        self.column_alias()


                    self.state = 7180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7181
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
                if la_ == 1:
                    self.state = 7182
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7183
                    self.general_element_part()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7186
                self.match(PlSqlParser.XMLEXISTS)
                self.state = 7187
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7188
                self.expression()
                self.state = 7190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 7189
                    self.xml_passing_clause()


                self.state = 7192
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7194
                self.match(PlSqlParser.XMLPARSE)
                self.state = 7195
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7196
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CONTENT or _la==PlSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7197
                self.concatenation(0)
                self.state = 7199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WELLFORMED:
                    self.state = 7198
                    self.match(PlSqlParser.WELLFORMED)


                self.state = 7201
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                if la_ == 1:
                    self.state = 7202
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7203
                    self.general_element_part()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7206
                self.match(PlSqlParser.XMLPI)
                self.state = 7207
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7212
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NAME]:
                    self.state = 7208
                    self.match(PlSqlParser.NAME)
                    self.state = 7209
                    self.identifier()
                    pass
                elif token in [PlSqlParser.EVALNAME]:
                    self.state = 7210
                    self.match(PlSqlParser.EVALNAME)
                    self.state = 7211
                    self.concatenation(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7214
                    self.match(PlSqlParser.COMMA)
                    self.state = 7215
                    self.concatenation(0)


                self.state = 7218
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
                if la_ == 1:
                    self.state = 7219
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7220
                    self.general_element_part()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7223
                self.match(PlSqlParser.XMLQUERY)
                self.state = 7224
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7225
                self.concatenation(0)
                self.state = 7227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 7226
                    self.xml_passing_clause()


                self.state = 7229
                self.match(PlSqlParser.RETURNING)
                self.state = 7230
                self.match(PlSqlParser.CONTENT)
                self.state = 7234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NULL:
                    self.state = 7231
                    self.match(PlSqlParser.NULL)
                    self.state = 7232
                    self.match(PlSqlParser.ON)
                    self.state = 7233
                    self.match(PlSqlParser.EMPTY)


                self.state = 7236
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1063,self._ctx)
                if la_ == 1:
                    self.state = 7237
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7238
                    self.general_element_part()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7241
                self.match(PlSqlParser.XMLROOT)
                self.state = 7242
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7243
                self.concatenation(0)
                self.state = 7246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
                if la_ == 1:
                    self.state = 7244
                    self.match(PlSqlParser.COMMA)
                    self.state = 7245
                    self.xmlroot_param_version_part()


                self.state = 7250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7248
                    self.match(PlSqlParser.COMMA)
                    self.state = 7249
                    self.xmlroot_param_standalone_part()


                self.state = 7252
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1066,self._ctx)
                if la_ == 1:
                    self.state = 7253
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7254
                    self.general_element_part()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7257
                self.match(PlSqlParser.XMLSERIALIZE)
                self.state = 7258
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7259
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CONTENT or _la==PlSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7260
                self.concatenation(0)
                self.state = 7263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AS:
                    self.state = 7261
                    self.match(PlSqlParser.AS)
                    self.state = 7262
                    self.type_spec()


                self.state = 7266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ENCODING:
                    self.state = 7265
                    self.xmlserialize_param_enconding_part()


                self.state = 7269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VERSION:
                    self.state = 7268
                    self.xmlserialize_param_version_part()


                self.state = 7272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INDENT or _la==PlSqlParser.NO:
                    self.state = 7271
                    self.xmlserialize_param_ident_part()


                self.state = 7276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.HIDE or _la==PlSqlParser.SHOW:
                    self.state = 7274
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.HIDE or _la==PlSqlParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7275
                    self.match(PlSqlParser.DEFAULTS)


                self.state = 7278
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
                if la_ == 1:
                    self.state = 7279
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7280
                    self.general_element_part()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7283
                self.match(PlSqlParser.XMLTABLE)
                self.state = 7284
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
                if la_ == 1:
                    self.state = 7285
                    self.xml_namespaces_clause()


                self.state = 7288
                self.concatenation(0)
                self.state = 7290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 7289
                    self.xml_passing_clause()


                self.state = 7297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COLUMNS:
                    self.state = 7292
                    self.match(PlSqlParser.COLUMNS)
                    self.state = 7293
                    self.xml_table_column()

                    self.state = 7294
                    self.match(PlSqlParser.COMMA)
                    self.state = 7295
                    self.xml_table_column()


                self.state = 7299
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
                if la_ == 1:
                    self.state = 7300
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7301
                    self.general_element_part()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(PlSqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(PlSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(PlSqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(PlSqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(PlSqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(PlSqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(PlSqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(PlSqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(PlSqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(PlSqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(PlSqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(PlSqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(PlSqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)




    def over_clause_keyword(self):

        localctx = PlSqlParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7306
            _la = self._input.LA(1)
            if not(((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (PlSqlParser.AVG - 692)) | (1 << (PlSqlParser.CORR - 692)) | (1 << (PlSqlParser.COVAR_ - 692)) | (1 << (PlSqlParser.LAG - 692)) | (1 << (PlSqlParser.LEAD - 692)) | (1 << (PlSqlParser.MAX - 692)) | (1 << (PlSqlParser.MEDIAN - 692)) | (1 << (PlSqlParser.MIN - 692)) | (1 << (PlSqlParser.NTILE - 692)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 692)) | (1 << (PlSqlParser.REGR_ - 692)) | (1 << (PlSqlParser.ROW_NUMBER - 692)) | (1 << (PlSqlParser.SUM - 692)) | (1 << (PlSqlParser.STDDEV - 692)) | (1 << (PlSqlParser.VAR_ - 692)) | (1 << (PlSqlParser.VARIANCE - 692)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(PlSqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(PlSqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(PlSqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(PlSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(PlSqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(PlSqlParser.RANK, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)




    def within_or_over_clause_keyword(self):

        localctx = PlSqlParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7308
            _la = self._input.LA(1)
            if not(((((_la - 685)) & ~0x3f) == 0 and ((1 << (_la - 685)) & ((1 << (PlSqlParser.CUME_DIST - 685)) | (1 << (PlSqlParser.DENSE_RANK - 685)) | (1 << (PlSqlParser.LISTAGG - 685)) | (1 << (PlSqlParser.PERCENT_RANK - 685)) | (1 << (PlSqlParser.PERCENTILE_CONT - 685)) | (1 << (PlSqlParser.PERCENTILE_DISC - 685)) | (1 << (PlSqlParser.RANK - 685)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(PlSqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(PlSqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(PlSqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(PlSqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(PlSqlParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)




    def standard_prediction_function_keyword(self):

        localctx = PlSqlParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7310
            _la = self._input.LA(1)
            if not(((((_la - 679)) & ~0x3f) == 0 and ((1 << (_la - 679)) & ((1 << (PlSqlParser.PREDICTION - 679)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 679)) | (1 << (PlSqlParser.PREDICTION_COST - 679)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 679)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 679)) | (1 << (PlSqlParser.PREDICTION_SET - 679)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(PlSqlParser.OVER, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = PlSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7312
            self.match(PlSqlParser.OVER)
            self.state = 7313
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 7314
                self.query_partition_clause()


            self.state = 7321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 7317
                self.order_by_clause()
                self.state = 7319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RANGE or _la==PlSqlParser.ROWS:
                    self.state = 7318
                    self.windowing_clause()




            self.state = 7323
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(PlSqlParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)




    def windowing_clause(self):

        localctx = PlSqlParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7325
            self.windowing_type()
            self.state = 7332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BETWEEN]:
                self.state = 7326
                self.match(PlSqlParser.BETWEEN)
                self.state = 7327
                self.windowing_elements()
                self.state = 7328
                self.match(PlSqlParser.AND)
                self.state = 7329
                self.windowing_elements()
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 7331
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)




    def windowing_type(self):

        localctx = PlSqlParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7334
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RANGE or _la==PlSqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(PlSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(PlSqlParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(PlSqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(PlSqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)




    def windowing_elements(self):

        localctx = PlSqlParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 7343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7336
                self.match(PlSqlParser.UNBOUNDED)
                self.state = 7337
                self.match(PlSqlParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7338
                self.match(PlSqlParser.CURRENT)
                self.state = 7339
                self.match(PlSqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7340
                self.concatenation(0)
                self.state = 7341
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FOLLOWING or _la==PlSqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Using_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)




    def using_clause(self):

        localctx = PlSqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7345
            self.match(PlSqlParser.USING)
            self.state = 7355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ASTERISK]:
                self.state = 7346
                self.match(PlSqlParser.ASTERISK)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.IN, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.COMMA, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 7351 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 7348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.COMMA:
                            self.state = 7347
                            self.match(PlSqlParser.COMMA)


                        self.state = 7350
                        self.using_element()

                    else:
                        raise NoViableAltException(self)
                    self.state = 7353 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1084,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Select_list_elementsContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)




    def using_element(self):

        localctx = PlSqlParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1087,self._ctx)
            if la_ == 1:
                self.state = 7357
                self.match(PlSqlParser.IN)
                self.state = 7359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
                if la_ == 1:
                    self.state = 7358
                    self.match(PlSqlParser.OUT)



            elif la_ == 2:
                self.state = 7361
                self.match(PlSqlParser.OUT)


            self.state = 7364
            self.select_list_elements()
            self.state = 7366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1088,self._ctx)
            if la_ == 1:
                self.state = 7365
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)




    def collect_order_by_part(self):

        localctx = PlSqlParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7368
            self.match(PlSqlParser.ORDER)
            self.state = 7369
            self.match(PlSqlParser.BY)
            self.state = 7370
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(PlSqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)




    def within_or_over_part(self):

        localctx = PlSqlParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_within_or_over_part)
        try:
            self.state = 7379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7372
                self.match(PlSqlParser.WITHIN)
                self.state = 7373
                self.match(PlSqlParser.GROUP)
                self.state = 7374
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7375
                self.order_by_clause()
                self.state = 7376
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7378
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(PlSqlParser.COST, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cost_class_nameContext,i)


        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)




    def cost_matrix_clause(self):

        localctx = PlSqlParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7381
            self.match(PlSqlParser.COST)
            self.state = 7403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MODEL]:
                self.state = 7382
                self.match(PlSqlParser.MODEL)
                self.state = 7384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AUTO:
                    self.state = 7383
                    self.match(PlSqlParser.AUTO)


                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 7386
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7387
                        self.match(PlSqlParser.COMMA)


                    self.state = 7390
                    self.cost_class_name()
                    self.state = 7393 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.INTRODUCER - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                self.state = 7395
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 7396
                self.match(PlSqlParser.VALUES)
                self.state = 7397
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 7399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                    self.state = 7398
                    self.expressions()


                self.state = 7401
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PlSqlParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)




    def xml_passing_clause(self):

        localctx = PlSqlParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7405
            self.match(PlSqlParser.PASSING)
            self.state = 7408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BY:
                self.state = 7406
                self.match(PlSqlParser.BY)
                self.state = 7407
                self.match(PlSqlParser.VALUE)


            self.state = 7410
            self.expression()
            self.state = 7412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (PlSqlParser.CHAR_STRING - 724)) | (1 << (PlSqlParser.DELIMITED_ID - 724)) | (1 << (PlSqlParser.INTRODUCER - 724)) | (1 << (PlSqlParser.REGULAR_ID - 724)))) != 0):
                self.state = 7411
                self.column_alias()


            self.state = 7414
            self.match(PlSqlParser.COMMA)
            self.state = 7415
            self.expression()
            self.state = 7417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.state = 7416
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(PlSqlParser.XMLATTRIBUTES, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_multiuse_expression_elementContext,i)


        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(PlSqlParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(PlSqlParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)




    def xml_attributes_clause(self):

        localctx = PlSqlParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7419
            self.match(PlSqlParser.XMLATTRIBUTES)
            self.state = 7420
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
            if la_ == 1:
                self.state = 7421
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ENTITYESCAPING or _la==PlSqlParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
            if la_ == 1:
                self.state = 7424
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOSCHEMACHECK or _la==PlSqlParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7431 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7427
                    self.match(PlSqlParser.COMMA)


                self.state = 7430
                self.xml_multiuse_expression_element()
                self.state = 7433 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                    break

            self.state = 7435
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(PlSqlParser.XMLNAMESPACES, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)




    def xml_namespaces_clause(self):

        localctx = PlSqlParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7437
            self.match(PlSqlParser.XMLNAMESPACES)
            self.state = 7438
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1102,self._ctx)
            if la_ == 1:
                self.state = 7439
                self.concatenation(0)
                self.state = 7440
                self.column_alias()


            self.state = 7450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 7444
                self.match(PlSqlParser.COMMA)
                self.state = 7445
                self.concatenation(0)
                self.state = 7446
                self.column_alias()
                self.state = 7452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT:
                self.state = 7453
                self.xml_general_default_part()


            self.state = 7456
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(PlSqlParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(PlSqlParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)




    def xml_table_column(self):

        localctx = PlSqlParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7458
            self.xml_column_name()
            self.state = 7469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.FOR]:
                self.state = 7459
                self.match(PlSqlParser.FOR)
                self.state = 7460
                self.match(PlSqlParser.ORDINALITY)
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 7461
                self.type_spec()
                self.state = 7464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PATH:
                    self.state = 7462
                    self.match(PlSqlParser.PATH)
                    self.state = 7463
                    self.concatenation(0)


                self.state = 7467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DEFAULT:
                    self.state = 7466
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)




    def xml_general_default_part(self):

        localctx = PlSqlParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7471
            self.match(PlSqlParser.DEFAULT)
            self.state = 7472
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)




    def xml_multiuse_expression_element(self):

        localctx = PlSqlParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7474
            self.expression()
            self.state = 7481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 7475
                self.match(PlSqlParser.AS)
                self.state = 7479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1108,self._ctx)
                if la_ == 1:
                    self.state = 7476
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 7477
                    self.match(PlSqlParser.EVALNAME)
                    self.state = 7478
                    self.concatenation(0)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)




    def xmlroot_param_version_part(self):

        localctx = PlSqlParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7483
            self.match(PlSqlParser.VERSION)
            self.state = 7487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
            if la_ == 1:
                self.state = 7484
                self.match(PlSqlParser.NO)
                self.state = 7485
                self.match(PlSqlParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 7486
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(PlSqlParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(PlSqlParser.YES, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)




    def xmlroot_param_standalone_part(self):

        localctx = PlSqlParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7489
            self.match(PlSqlParser.STANDALONE)
            self.state = 7495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.YES]:
                self.state = 7490
                self.match(PlSqlParser.YES)
                pass
            elif token in [PlSqlParser.NO]:
                self.state = 7491
                self.match(PlSqlParser.NO)
                self.state = 7493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VALUE:
                    self.state = 7492
                    self.match(PlSqlParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(PlSqlParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)




    def xmlserialize_param_enconding_part(self):

        localctx = PlSqlParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7497
            self.match(PlSqlParser.ENCODING)
            self.state = 7498
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)




    def xmlserialize_param_version_part(self):

        localctx = PlSqlParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7500
            self.match(PlSqlParser.VERSION)
            self.state = 7501
            self.concatenation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def INDENT(self):
            return self.getToken(PlSqlParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)




    def xmlserialize_param_ident_part(self):

        localctx = PlSqlParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 7511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7503
                self.match(PlSqlParser.NO)
                self.state = 7504
                self.match(PlSqlParser.INDENT)
                pass
            elif token in [PlSqlParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7505
                self.match(PlSqlParser.INDENT)
                self.state = 7509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.SIZE:
                    self.state = 7506
                    self.match(PlSqlParser.SIZE)
                    self.state = 7507
                    self.match(PlSqlParser.EQUALS_OP)
                    self.state = 7508
                    self.concatenation(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def PROMPT(self):
            return self.getToken(PlSqlParser.PROMPT, 0)

        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)

        def ERR(self):
            return self.getToken(PlSqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def START_CMD(self):
            return self.getToken(PlSqlParser.START_CMD, 0)

        def whenever_command(self):
            return self.getTypedRuleContext(PlSqlParser.Whenever_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_commandContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)




    def sql_plus_command(self):

        localctx = PlSqlParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_sql_plus_command)
        self._la = 0 # Token type
        try:
            self.state = 7521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SOLIDUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7513
                self.match(PlSqlParser.SOLIDUS)
                pass
            elif token in [PlSqlParser.EXIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7514
                self.match(PlSqlParser.EXIT)
                pass
            elif token in [PlSqlParser.PROMPT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7515
                self.match(PlSqlParser.PROMPT)
                pass
            elif token in [PlSqlParser.SHOW]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7516
                self.match(PlSqlParser.SHOW)
                self.state = 7517
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ERR or _la==PlSqlParser.ERRORS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.START_CMD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7518
                self.match(PlSqlParser.START_CMD)
                pass
            elif token in [PlSqlParser.WHENEVER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7519
                self.whenever_command()
                pass
            elif token in [PlSqlParser.SET]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7520
                self.set_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(PlSqlParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(PlSqlParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(PlSqlParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(PlSqlParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(PlSqlParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(PlSqlParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)




    def whenever_command(self):

        localctx = PlSqlParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7523
            self.match(PlSqlParser.WHENEVER)
            self.state = 7524
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.OSERROR or _la==PlSqlParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.EXIT]:
                self.state = 7525
                self.match(PlSqlParser.EXIT)
                self.state = 7526
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FAILURE or _la==PlSqlParser.SUCCESS or _la==PlSqlParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7527
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.COMMIT or _la==PlSqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.CONTINUE]:
                self.state = 7528
                self.match(PlSqlParser.CONTINUE)
                self.state = 7529
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.COMMIT or _la==PlSqlParser.NONE or _la==PlSqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)




    def set_command(self):

        localctx = PlSqlParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7532
            self.match(PlSqlParser.SET)
            self.state = 7533
            self.regular_id()
            self.state = 7539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
            if la_ == 1:
                self.state = 7534
                self.match(PlSqlParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 7535
                self.match(PlSqlParser.ON)
                pass

            elif la_ == 3:
                self.state = 7536
                self.match(PlSqlParser.OFF)
                pass

            elif la_ == 4:
                self.state = 7537
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 7538
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(PlSqlParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def expressions(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)




    def partition_extension_clause(self):

        localctx = PlSqlParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7541
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.PARTITION or _la==PlSqlParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 7542
                self.match(PlSqlParser.FOR)


            self.state = 7545
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 7546
                self.expressions()


            self.state = 7549
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = PlSqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 7559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AS:
                    self.state = 7551
                    self.match(PlSqlParser.AS)


                self.state = 7556
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 7554
                    self.identifier()
                    pass
                elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 7555
                    self.quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7558
                self.match(PlSqlParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = PlSqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_table_alias)
        try:
            self.state = 7563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7561
                self.identifier()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7562
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PlSqlParser.WHERE, 0)

        def CURRENT(self):
            return self.getToken(PlSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PlSqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7565
            self.match(PlSqlParser.WHERE)
            self.state = 7570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CURRENT]:
                self.state = 7566
                self.match(PlSqlParser.CURRENT)
                self.state = 7567
                self.match(PlSqlParser.OF)
                self.state = 7568
                self.cursor_name()
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COALESCE, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.DECODE, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.NVL, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROUND, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TO_CHAR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.LEAST, PlSqlParser.GREATEST, PlSqlParser.TO_DATE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.state = 7569
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = PlSqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_into_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BULK:
                self.state = 7572
                self.match(PlSqlParser.BULK)
                self.state = 7573
                self.match(PlSqlParser.COLLECT)


            self.state = 7576
            self.match(PlSqlParser.INTO)
            self.state = 7581 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7577
                        self.match(PlSqlParser.COMMA)


                    self.state = 7580
                    self.variable_name()

                else:
                    raise NoViableAltException(self)
                self.state = 7583 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)




    def xml_column_name(self):

        localctx = PlSqlParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_xml_column_name)
        try:
            self.state = 7587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7585
                self.identifier()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7586
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)




    def cost_class_name(self):

        localctx = PlSqlParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7589
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = PlSqlParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7591
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = PlSqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7593
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)




    def rollback_segment_name(self):

        localctx = PlSqlParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7595
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)




    def table_var_name(self):

        localctx = PlSqlParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7597
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PlSqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7599
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)




    def routine_name(self):

        localctx = PlSqlParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7601
            self.identifier()
            self.state = 7606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7602
                self.match(PlSqlParser.PERIOD)
                self.state = 7603
                self.id_expression()
                self.state = 7608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AT_SIGN:
                self.state = 7609
                self.match(PlSqlParser.AT_SIGN)
                self.state = 7610
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)




    def package_name(self):

        localctx = PlSqlParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7613
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)




    def implementation_type_name(self):

        localctx = PlSqlParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7615
            self.identifier()
            self.state = 7618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7616
                self.match(PlSqlParser.PERIOD)
                self.state = 7617
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = PlSqlParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7620
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)




    def reference_model_name(self):

        localctx = PlSqlParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7622
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)




    def main_model_name(self):

        localctx = PlSqlParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7624
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Container_tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_container_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_tableview_name" ):
                listener.enterContainer_tableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_tableview_name" ):
                listener.exitContainer_tableview_name(self)




    def container_tableview_name(self):

        localctx = PlSqlParser.Container_tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_container_tableview_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7626
            self.identifier()
            self.state = 7629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7627
                self.match(PlSqlParser.PERIOD)
                self.state = 7628
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)




    def aggregate_function_name(self):

        localctx = PlSqlParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7631
            self.identifier()
            self.state = 7636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7632
                self.match(PlSqlParser.PERIOD)
                self.state = 7633
                self.id_expression()
                self.state = 7638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)




    def query_name(self):

        localctx = PlSqlParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7639
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grantee_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def identified_by(self):
            return self.getTypedRuleContext(PlSqlParser.Identified_byContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grantee_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee_name" ):
                listener.enterGrantee_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee_name" ):
                listener.exitGrantee_name(self)




    def grantee_name(self):

        localctx = PlSqlParser.Grantee_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_grantee_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7641
            self.id_expression()
            self.state = 7643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.IDENTIFIED:
                self.state = 7642
                self.identified_by()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Role_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def CONNECT(self):
            return self.getToken(PlSqlParser.CONNECT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = PlSqlParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_role_name)
        try:
            self.state = 7647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7645
                self.id_expression()
                pass
            elif token in [PlSqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7646
                self.match(PlSqlParser.CONNECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)




    def constraint_name(self):

        localctx = PlSqlParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7649
            self.identifier()
            self.state = 7654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7650
                self.match(PlSqlParser.PERIOD)
                self.state = 7651
                self.id_expression()
                self.state = 7656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AT_SIGN:
                self.state = 7657
                self.match(PlSqlParser.AT_SIGN)
                self.state = 7658
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = PlSqlParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7661
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = PlSqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7663
            self.id_expression()
            self.state = 7668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7664
                self.match(PlSqlParser.PERIOD)
                self.state = 7665
                self.id_expression()
                self.state = 7670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)




    def sequence_name(self):

        localctx = PlSqlParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7671
            self.id_expression()
            self.state = 7676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7672
                self.match(PlSqlParser.PERIOD)
                self.state = 7673
                self.id_expression()
                self.state = 7678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)




    def exception_name(self):

        localctx = PlSqlParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7679
            self.identifier()
            self.state = 7684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7680
                self.match(PlSqlParser.PERIOD)
                self.state = 7681
                self.id_expression()
                self.state = 7686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = PlSqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7687
            self.identifier()
            self.state = 7690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7688
                self.match(PlSqlParser.PERIOD)
                self.state = 7689
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = PlSqlParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7692
            self.identifier()
            self.state = 7695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7693
                self.match(PlSqlParser.PERIOD)
                self.state = 7694
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = PlSqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7697
            self.identifier()
            self.state = 7700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7698
                self.match(PlSqlParser.PERIOD)
                self.state = 7699
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(PlSqlParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(PlSqlParser.Char_set_nameContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = PlSqlParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_variable_name)
        self._la = 0 # Token type
        try:
            self.state = 7712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INTRODUCER:
                    self.state = 7702
                    self.match(PlSqlParser.INTRODUCER)
                    self.state = 7703
                    self.char_set_name()


                self.state = 7706
                self.id_expression()
                self.state = 7709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PERIOD:
                    self.state = 7707
                    self.match(PlSqlParser.PERIOD)
                    self.state = 7708
                    self.id_expression()


                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7711
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PlSqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_index_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7714
            self.identifier()
            self.state = 7717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7715
                self.match(PlSqlParser.PERIOD)
                self.state = 7716
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = PlSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_cursor_name)
        try:
            self.state = 7721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7719
                self.general_element()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7720
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)




    def record_name(self):

        localctx = PlSqlParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_record_name)
        try:
            self.state = 7725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7723
                self.identifier()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7724
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)




    def collection_name(self):

        localctx = PlSqlParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7727
            self.identifier()
            self.state = 7730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 7728
                self.match(PlSqlParser.PERIOD)
                self.state = 7729
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)




    def link_name(self):

        localctx = PlSqlParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7732
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PlSqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_column_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7734
            self.identifier()
            self.state = 7739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7735
                self.match(PlSqlParser.PERIOD)
                self.state = 7736
                self.id_expression()
                self.state = 7741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)




    def tableview_name(self):

        localctx = PlSqlParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7742
            self.identifier()
            self.state = 7745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1152,self._ctx)
            if la_ == 1:
                self.state = 7743
                self.match(PlSqlParser.PERIOD)
                self.state = 7744
                self.id_expression()


            self.state = 7750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1153,self._ctx)
            if la_ == 1:
                self.state = 7747
                self.match(PlSqlParser.AT_SIGN)
                self.state = 7748
                self.link_name()

            elif la_ == 2:
                self.state = 7749
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_set_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_char_set_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_set_name" ):
                listener.enterChar_set_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_set_name" ):
                listener.exitChar_set_name(self)




    def char_set_name(self):

        localctx = PlSqlParser.Char_set_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_char_set_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7752
            self.id_expression()
            self.state = 7757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 7753
                self.match(PlSqlParser.PERIOD)
                self.state = 7754
                self.id_expression()
                self.state = 7759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Synonym_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_synonym_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynonym_name" ):
                listener.enterSynonym_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynonym_name" ):
                listener.exitSynonym_name(self)




    def synonym_name(self):

        localctx = PlSqlParser.Synonym_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_synonym_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7760
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_object_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_schema_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_object_name" ):
                listener.enterSchema_object_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_object_name" ):
                listener.exitSchema_object_name(self)




    def schema_object_name(self):

        localctx = PlSqlParser.Schema_object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_schema_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7762
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dir_object_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dir_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDir_object_name" ):
                listener.enterDir_object_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDir_object_name" ):
                listener.exitDir_object_name(self)




    def dir_object_name(self):

        localctx = PlSqlParser.Dir_object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_dir_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7764
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_object_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_user_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_object_name" ):
                listener.enterUser_object_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_object_name" ):
                listener.exitUser_object_name(self)




    def user_object_name(self):

        localctx = PlSqlParser.User_object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_user_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7766
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_object_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def USER(self):
            return self.getToken(PlSqlParser.USER, 0)

        def user_object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.User_object_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.User_object_nameContext,i)


        def DIRECTORY(self):
            return self.getToken(PlSqlParser.DIRECTORY, 0)

        def dir_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Dir_object_nameContext,0)


        def EDITION(self):
            return self.getToken(PlSqlParser.EDITION, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_object_nameContext,0)


        def MINING(self):
            return self.getToken(PlSqlParser.MINING, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def SOURCE(self):
            return self.getToken(PlSqlParser.SOURCE, 0)

        def RESOURCE(self):
            return self.getToken(PlSqlParser.RESOURCE, 0)

        def SQL(self):
            return self.getToken(PlSqlParser.SQL, 0)

        def TRANSLATION(self):
            return self.getToken(PlSqlParser.TRANSLATION, 0)

        def PROFILE(self):
            return self.getToken(PlSqlParser.PROFILE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_grant_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_object_name" ):
                listener.enterGrant_object_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_object_name" ):
                listener.exitGrant_object_name(self)




    def grant_object_name(self):

        localctx = PlSqlParser.Grant_object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_grant_object_name)
        self._la = 0 # Token type
        try:
            self.state = 7792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7768
                self.tableview_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7769
                self.match(PlSqlParser.USER)
                self.state = 7774 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7770
                        self.match(PlSqlParser.COMMA)


                    self.state = 7773
                    self.user_object_name()
                    self.state = 7776 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or ((((_la - 725)) & ~0x3f) == 0 and ((1 << (_la - 725)) & ((1 << (PlSqlParser.DELIMITED_ID - 725)) | (1 << (PlSqlParser.COMMA - 725)) | (1 << (PlSqlParser.REGULAR_ID - 725)))) != 0)):
                        break

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7778
                self.match(PlSqlParser.DIRECTORY)
                self.state = 7779
                self.dir_object_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7780
                self.match(PlSqlParser.EDITION)
                self.state = 7781
                self.schema_object_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7782
                self.match(PlSqlParser.MINING)
                self.state = 7783
                self.match(PlSqlParser.MODEL)
                self.state = 7784
                self.schema_object_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7785
                self.match(PlSqlParser.JAVA)
                self.state = 7786
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.RESOURCE or _la==PlSqlParser.SOURCE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7787
                self.schema_object_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7788
                self.match(PlSqlParser.SQL)
                self.state = 7789
                self.match(PlSqlParser.TRANSLATION)
                self.state = 7790
                self.match(PlSqlParser.PROFILE)
                self.state = 7791
                self.schema_object_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PlSqlParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7798 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7794
                        self.match(PlSqlParser.COMMA)


                    self.state = 7797
                    self.column_name()

                else:
                    raise NoViableAltException(self)
                self.state = 7800 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Paren_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(PlSqlParser.LEFT_PAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Column_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(PlSqlParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_paren_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParen_column_list" ):
                listener.enterParen_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParen_column_list" ):
                listener.exitParen_column_list(self)




    def paren_column_list(self):

        localctx = PlSqlParser.Paren_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_paren_column_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7802
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7803
            self.column_list()
            self.state = 7804
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)




    def keep_clause(self):

        localctx = PlSqlParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7806
            self.match(PlSqlParser.KEEP)
            self.state = 7807
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7808
            self.match(PlSqlParser.DENSE_RANK)
            self.state = 7809
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FIRST or _la==PlSqlParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7810
            self.order_by_clause()
            self.state = 7811
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 7813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1160,self._ctx)
            if la_ == 1:
                self.state = 7812
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)




    def function_argument(self):

        localctx = PlSqlParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7815
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 7817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7816
                    self.match(PlSqlParser.COMMA)


                self.state = 7819
                self.argument()
                self.state = 7824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7825
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 7827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1163,self._ctx)
            if la_ == 1:
                self.state = 7826
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)




    def function_argument_analytic(self):

        localctx = PlSqlParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7829
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0):
                self.state = 7831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7830
                    self.match(PlSqlParser.COMMA)


                self.state = 7833
                self.argument()
                self.state = 7835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1165,self._ctx)
                if la_ == 1:
                    self.state = 7834
                    self.respect_or_ignore_nulls()


                self.state = 7841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7842
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 7844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1167,self._ctx)
            if la_ == 1:
                self.state = 7843
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULL)
            else:
                return self.getToken(PlSqlParser.NULL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)




    def function_argument_modeling(self):

        localctx = PlSqlParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7846
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7847
            self.column_name()
            self.state = 7860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 7848
                self.match(PlSqlParser.COMMA)
                self.state = 7851
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                    self.state = 7849
                    self.numeric()
                    pass
                elif token in [PlSqlParser.NULL]:
                    self.state = 7850
                    self.match(PlSqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 7853
                    self.match(PlSqlParser.COMMA)
                    self.state = 7856
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 7854
                        self.numeric()
                        pass
                    elif token in [PlSqlParser.NULL]:
                        self.state = 7855
                        self.match(PlSqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 7862
            self.match(PlSqlParser.USING)
            self.state = 7879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1175,self._ctx)
            if la_ == 1:
                self.state = 7863
                self.tableview_name()
                self.state = 7864
                self.match(PlSqlParser.PERIOD)
                self.state = 7865
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 7867
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.state = 7875 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 7868
                        self.match(PlSqlParser.COMMA)


                    self.state = 7871
                    self.expression()
                    self.state = 7873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1173,self._ctx)
                    if la_ == 1:
                        self.state = 7872
                        self.column_alias()


                    self.state = 7877 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CASE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COALESCE - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DISTINCT - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FALSE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NOT - 325)) | (1 << (PlSqlParser.NULL - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUE - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.DECODE - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.NVL - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROUND - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TO_CHAR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)) | (1 << (PlSqlParser.LEAST - 656)) | (1 << (PlSqlParser.GREATEST - 656)) | (1 << (PlSqlParser.TO_DATE - 656)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 656)))) != 0) or ((((_la - 722)) & ~0x3f) == 0 and ((1 << (_la - 722)) & ((1 << (PlSqlParser.UNSIGNED_INTEGER - 722)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 722)) | (1 << (PlSqlParser.CHAR_STRING - 722)) | (1 << (PlSqlParser.DELIMITED_ID - 722)) | (1 << (PlSqlParser.LEFT_PAREN - 722)) | (1 << (PlSqlParser.PLUS_SIGN - 722)) | (1 << (PlSqlParser.MINUS_SIGN - 722)) | (1 << (PlSqlParser.COMMA - 722)) | (1 << (PlSqlParser.BINDVAR - 722)) | (1 << (PlSqlParser.COLON - 722)) | (1 << (PlSqlParser.INTRODUCER - 722)) | (1 << (PlSqlParser.REGULAR_ID - 722)))) != 0)):
                        break

                pass


            self.state = 7881
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 7883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1176,self._ctx)
            if la_ == 1:
                self.state = 7882
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(PlSqlParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)




    def respect_or_ignore_nulls(self):

        localctx = PlSqlParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7885
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7886
            self.match(PlSqlParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PlSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = PlSqlParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1177,self._ctx)
            if la_ == 1:
                self.state = 7888
                self.identifier()
                self.state = 7889
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 7890
                self.match(PlSqlParser.GREATER_THAN_OP)


            self.state = 7894
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(PlSqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(PlSqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)




    def type_spec(self):

        localctx = PlSqlParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 7904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7896
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1178,self._ctx)
                if la_ == 1:
                    self.state = 7897
                    self.match(PlSqlParser.REF)


                self.state = 7900
                self.type_name()
                self.state = 7902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PERCENT_ROWTYPE or _la==PlSqlParser.PERCENT_TYPE:
                    self.state = 7901
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.PERCENT_ROWTYPE or _la==PlSqlParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(PlSqlParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(PlSqlParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def CHARACTER(self):
            return self.getToken(PlSqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(PlSqlParser.Char_set_nameContext,0)


        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)




    def datatype(self):

        localctx = PlSqlParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 7937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BOOLEAN, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CLOB, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.FLOAT, PlSqlParser.HOUR, PlSqlParser.INTEGER, PlSqlParser.INT, PlSqlParser.LONG, PlSqlParser.MINUTE, PlSqlParser.MLSLABEL, PlSqlParser.MONTH, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.RAW, PlSqlParser.REAL, PlSqlParser.ROWID, PlSqlParser.SECOND, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SMALLINT, PlSqlParser.STRING, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.UROWID, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.YEAR, PlSqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7906
                self.native_datatype_element()
                self.state = 7908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1181,self._ctx)
                if la_ == 1:
                    self.state = 7907
                    self.precision_part()


                self.state = 7919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1183,self._ctx)
                if la_ == 1:
                    self.state = 7910
                    self.match(PlSqlParser.WITH)
                    self.state = 7912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.LOCAL:
                        self.state = 7911
                        self.match(PlSqlParser.LOCAL)


                    self.state = 7914
                    self.match(PlSqlParser.TIME)
                    self.state = 7915
                    self.match(PlSqlParser.ZONE)

                elif la_ == 2:
                    self.state = 7916
                    self.match(PlSqlParser.CHARACTER)
                    self.state = 7917
                    self.match(PlSqlParser.SET)
                    self.state = 7918
                    self.char_set_name()


                pass
            elif token in [PlSqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7921
                self.match(PlSqlParser.INTERVAL)
                self.state = 7922
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DAY or _la==PlSqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 7923
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 7924
                    self.expression()
                    self.state = 7925
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 7929
                self.match(PlSqlParser.TO)
                self.state = 7930
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.MONTH or _la==PlSqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1185,self._ctx)
                if la_ == 1:
                    self.state = 7931
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 7932
                    self.expression()
                    self.state = 7933
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.NumericContext,i)


        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(PlSqlParser.BYTE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)




    def precision_part(self):

        localctx = PlSqlParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7939
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 7940
            self.numeric()
            self.state = 7943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 7941
                self.match(PlSqlParser.COMMA)
                self.state = 7942
                self.numeric()


            self.state = 7946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BYTE or _la==PlSqlParser.CHAR:
                self.state = 7945
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BYTE or _la==PlSqlParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7948
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(PlSqlParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(PlSqlParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(PlSqlParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(PlSqlParser.BINARY_DOUBLE, 0)

        def NATURALN(self):
            return self.getToken(PlSqlParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(PlSqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(PlSqlParser.POSITIVEN, 0)

        def SIGNTYPE(self):
            return self.getToken(PlSqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(PlSqlParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(PlSqlParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(PlSqlParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(PlSqlParser.INTEGER, 0)

        def INT(self):
            return self.getToken(PlSqlParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(PlSqlParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(PlSqlParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(PlSqlParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(PlSqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(PlSqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(PlSqlParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(PlSqlParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PlSqlParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(PlSqlParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(PlSqlParser.LONG, 0)

        def RAW(self):
            return self.getToken(PlSqlParser.RAW, 0)

        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(PlSqlParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(PlSqlParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(PlSqlParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(PlSqlParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(PlSqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(PlSqlParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(PlSqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(PlSqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(PlSqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(PlSqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(PlSqlParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(PlSqlParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(PlSqlParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(PlSqlParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(PlSqlParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(PlSqlParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(PlSqlParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)




    def native_datatype_element(self):

        localctx = PlSqlParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_native_datatype_element)
        try:
            self.state = 8010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7950
                self.match(PlSqlParser.BINARY_INTEGER)
                pass
            elif token in [PlSqlParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7951
                self.match(PlSqlParser.PLS_INTEGER)
                pass
            elif token in [PlSqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7952
                self.match(PlSqlParser.NATURAL)
                pass
            elif token in [PlSqlParser.BINARY_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7953
                self.match(PlSqlParser.BINARY_FLOAT)
                pass
            elif token in [PlSqlParser.BINARY_DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7954
                self.match(PlSqlParser.BINARY_DOUBLE)
                pass
            elif token in [PlSqlParser.NATURALN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7955
                self.match(PlSqlParser.NATURALN)
                pass
            elif token in [PlSqlParser.POSITIVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7956
                self.match(PlSqlParser.POSITIVE)
                pass
            elif token in [PlSqlParser.POSITIVEN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7957
                self.match(PlSqlParser.POSITIVEN)
                pass
            elif token in [PlSqlParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7958
                self.match(PlSqlParser.SIGNTYPE)
                pass
            elif token in [PlSqlParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7959
                self.match(PlSqlParser.SIMPLE_INTEGER)
                pass
            elif token in [PlSqlParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7960
                self.match(PlSqlParser.NVARCHAR2)
                pass
            elif token in [PlSqlParser.DEC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 7961
                self.match(PlSqlParser.DEC)
                pass
            elif token in [PlSqlParser.INTEGER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 7962
                self.match(PlSqlParser.INTEGER)
                pass
            elif token in [PlSqlParser.INT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 7963
                self.match(PlSqlParser.INT)
                pass
            elif token in [PlSqlParser.NUMERIC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 7964
                self.match(PlSqlParser.NUMERIC)
                pass
            elif token in [PlSqlParser.SMALLINT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 7965
                self.match(PlSqlParser.SMALLINT)
                pass
            elif token in [PlSqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 7966
                self.match(PlSqlParser.NUMBER)
                pass
            elif token in [PlSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 7967
                self.match(PlSqlParser.DECIMAL)
                pass
            elif token in [PlSqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 7968
                self.match(PlSqlParser.DOUBLE)
                self.state = 7970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1189,self._ctx)
                if la_ == 1:
                    self.state = 7969
                    self.match(PlSqlParser.PRECISION)


                pass
            elif token in [PlSqlParser.FLOAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 7972
                self.match(PlSqlParser.FLOAT)
                pass
            elif token in [PlSqlParser.REAL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 7973
                self.match(PlSqlParser.REAL)
                pass
            elif token in [PlSqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 22)
                self.state = 7974
                self.match(PlSqlParser.NCHAR)
                pass
            elif token in [PlSqlParser.LONG]:
                self.enterOuterAlt(localctx, 23)
                self.state = 7975
                self.match(PlSqlParser.LONG)
                self.state = 7977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1190,self._ctx)
                if la_ == 1:
                    self.state = 7976
                    self.match(PlSqlParser.RAW)


                pass
            elif token in [PlSqlParser.CHAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 7979
                self.match(PlSqlParser.CHAR)
                pass
            elif token in [PlSqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 7980
                self.match(PlSqlParser.CHARACTER)
                pass
            elif token in [PlSqlParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 26)
                self.state = 7981
                self.match(PlSqlParser.VARCHAR2)
                pass
            elif token in [PlSqlParser.VARCHAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 7982
                self.match(PlSqlParser.VARCHAR)
                pass
            elif token in [PlSqlParser.STRING]:
                self.enterOuterAlt(localctx, 28)
                self.state = 7983
                self.match(PlSqlParser.STRING)
                pass
            elif token in [PlSqlParser.RAW]:
                self.enterOuterAlt(localctx, 29)
                self.state = 7984
                self.match(PlSqlParser.RAW)
                pass
            elif token in [PlSqlParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 7985
                self.match(PlSqlParser.BOOLEAN)
                pass
            elif token in [PlSqlParser.DATE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 7986
                self.match(PlSqlParser.DATE)
                pass
            elif token in [PlSqlParser.ROWID]:
                self.enterOuterAlt(localctx, 32)
                self.state = 7987
                self.match(PlSqlParser.ROWID)
                pass
            elif token in [PlSqlParser.UROWID]:
                self.enterOuterAlt(localctx, 33)
                self.state = 7988
                self.match(PlSqlParser.UROWID)
                pass
            elif token in [PlSqlParser.YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 7989
                self.match(PlSqlParser.YEAR)
                pass
            elif token in [PlSqlParser.MONTH]:
                self.enterOuterAlt(localctx, 35)
                self.state = 7990
                self.match(PlSqlParser.MONTH)
                pass
            elif token in [PlSqlParser.DAY]:
                self.enterOuterAlt(localctx, 36)
                self.state = 7991
                self.match(PlSqlParser.DAY)
                pass
            elif token in [PlSqlParser.HOUR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 7992
                self.match(PlSqlParser.HOUR)
                pass
            elif token in [PlSqlParser.MINUTE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 7993
                self.match(PlSqlParser.MINUTE)
                pass
            elif token in [PlSqlParser.SECOND]:
                self.enterOuterAlt(localctx, 39)
                self.state = 7994
                self.match(PlSqlParser.SECOND)
                pass
            elif token in [PlSqlParser.TIMEZONE_HOUR]:
                self.enterOuterAlt(localctx, 40)
                self.state = 7995
                self.match(PlSqlParser.TIMEZONE_HOUR)
                pass
            elif token in [PlSqlParser.TIMEZONE_MINUTE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 7996
                self.match(PlSqlParser.TIMEZONE_MINUTE)
                pass
            elif token in [PlSqlParser.TIMEZONE_REGION]:
                self.enterOuterAlt(localctx, 42)
                self.state = 7997
                self.match(PlSqlParser.TIMEZONE_REGION)
                pass
            elif token in [PlSqlParser.TIMEZONE_ABBR]:
                self.enterOuterAlt(localctx, 43)
                self.state = 7998
                self.match(PlSqlParser.TIMEZONE_ABBR)
                pass
            elif token in [PlSqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 7999
                self.match(PlSqlParser.TIMESTAMP)
                pass
            elif token in [PlSqlParser.TIMESTAMP_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 45)
                self.state = 8000
                self.match(PlSqlParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 46)
                self.state = 8001
                self.match(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 8002
                self.match(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 48)
                self.state = 8003
                self.match(PlSqlParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.DSINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 8004
                self.match(PlSqlParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.BFILE]:
                self.enterOuterAlt(localctx, 50)
                self.state = 8005
                self.match(PlSqlParser.BFILE)
                pass
            elif token in [PlSqlParser.BLOB]:
                self.enterOuterAlt(localctx, 51)
                self.state = 8006
                self.match(PlSqlParser.BLOB)
                pass
            elif token in [PlSqlParser.CLOB]:
                self.enterOuterAlt(localctx, 52)
                self.state = 8007
                self.match(PlSqlParser.CLOB)
                pass
            elif token in [PlSqlParser.NCLOB]:
                self.enterOuterAlt(localctx, 53)
                self.state = 8008
                self.match(PlSqlParser.NCLOB)
                pass
            elif token in [PlSqlParser.MLSLABEL]:
                self.enterOuterAlt(localctx, 54)
                self.state = 8009
                self.match(PlSqlParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BINDVAR)
            else:
                return self.getToken(PlSqlParser.BINDVAR, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.General_element_partContext,i)


        def INDICATOR(self):
            return self.getToken(PlSqlParser.INDICATOR, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)




    def bind_variable(self):

        localctx = PlSqlParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BINDVAR]:
                self.state = 8012
                self.match(PlSqlParser.BINDVAR)
                pass
            elif token in [PlSqlParser.COLON]:
                self.state = 8013
                self.match(PlSqlParser.COLON)
                self.state = 8014
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
            if la_ == 1:
                self.state = 8018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INDICATOR:
                    self.state = 8017
                    self.match(PlSqlParser.INDICATOR)


                self.state = 8023
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.BINDVAR]:
                    self.state = 8020
                    self.match(PlSqlParser.BINDVAR)
                    pass
                elif token in [PlSqlParser.COLON]:
                    self.state = 8021
                    self.match(PlSqlParser.COLON)
                    self.state = 8022
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 8031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8027
                    self.match(PlSqlParser.PERIOD)
                    self.state = 8028
                    self.general_element_part() 
                self.state = 8033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.General_element_partContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_general_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element" ):
                listener.enterGeneral_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element" ):
                listener.exitGeneral_element(self)




    def general_element(self):

        localctx = PlSqlParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_general_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8034
            self.general_element_part()
            self.state = 8039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8035
                    self.match(PlSqlParser.PERIOD)
                    self.state = 8036
                    self.general_element_part() 
                self.state = 8041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1197,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_element_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(PlSqlParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(PlSqlParser.Char_set_nameContext,0)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_general_element_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element_part" ):
                listener.enterGeneral_element_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element_part" ):
                listener.exitGeneral_element_part(self)




    def general_element_part(self):

        localctx = PlSqlParser.General_element_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_general_element_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTRODUCER:
                self.state = 8042
                self.match(PlSqlParser.INTRODUCER)
                self.state = 8043
                self.char_set_name()


            self.state = 8046
            self.id_expression()
            self.state = 8051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8047
                    self.match(PlSqlParser.PERIOD)
                    self.state = 8048
                    self.id_expression() 
                self.state = 8053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1199,self._ctx)

            self.state = 8056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1200,self._ctx)
            if la_ == 1:
                self.state = 8054
                self.match(PlSqlParser.AT_SIGN)
                self.state = 8055
                self.link_name()


            self.state = 8059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1201,self._ctx)
            if la_ == 1:
                self.state = 8058
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(PlSqlParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(PlSqlParser.Char_set_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)




    def table_element(self):

        localctx = PlSqlParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTRODUCER:
                self.state = 8061
                self.match(PlSqlParser.INTRODUCER)
                self.state = 8062
                self.char_set_name()


            self.state = 8065
            self.id_expression()
            self.state = 8070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 8066
                self.match(PlSqlParser.PERIOD)
                self.state = 8067
                self.id_expression()
                self.state = 8072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_privilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(PlSqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def FLASHBACK(self):
            return self.getToken(PlSqlParser.FLASHBACK, 0)

        def ARCHIVE(self):
            return self.getToken(PlSqlParser.ARCHIVE, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def INHERIT(self):
            return self.getToken(PlSqlParser.INHERIT, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def VIEW(self):
            return self.getToken(PlSqlParser.VIEW, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def REFRESH(self):
            return self.getToken(PlSqlParser.REFRESH, 0)

        def QUERY(self):
            return self.getToken(PlSqlParser.QUERY, 0)

        def REWRITE(self):
            return self.getToken(PlSqlParser.REWRITE, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def REFERENCES(self):
            return self.getToken(PlSqlParser.REFERENCES, 0)

        def SELECT(self):
            return self.getToken(PlSqlParser.SELECT, 0)

        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)

        def SQL(self):
            return self.getToken(PlSqlParser.SQL, 0)

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_object_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_privilege" ):
                listener.enterObject_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_privilege" ):
                listener.exitObject_privilege(self)




    def object_privilege(self):

        localctx = PlSqlParser.Object_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_object_privilege)
        self._la = 0 # Token type
        try:
            self.state = 8105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8073
                self.match(PlSqlParser.ALL)
                self.state = 8075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PRIVILEGES:
                    self.state = 8074
                    self.match(PlSqlParser.PRIVILEGES)


                pass
            elif token in [PlSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8077
                self.match(PlSqlParser.ALTER)
                pass
            elif token in [PlSqlParser.DEBUG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8078
                self.match(PlSqlParser.DEBUG)
                pass
            elif token in [PlSqlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8079
                self.match(PlSqlParser.DELETE)
                pass
            elif token in [PlSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8080
                self.match(PlSqlParser.EXECUTE)
                pass
            elif token in [PlSqlParser.FLASHBACK]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8081
                self.match(PlSqlParser.FLASHBACK)
                self.state = 8082
                self.match(PlSqlParser.ARCHIVE)
                pass
            elif token in [PlSqlParser.INDEX]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8083
                self.match(PlSqlParser.INDEX)
                pass
            elif token in [PlSqlParser.INHERIT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8084
                self.match(PlSqlParser.INHERIT)
                self.state = 8085
                self.match(PlSqlParser.PRIVILEGES)
                pass
            elif token in [PlSqlParser.INSERT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8086
                self.match(PlSqlParser.INSERT)
                pass
            elif token in [PlSqlParser.KEEP]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8087
                self.match(PlSqlParser.KEEP)
                self.state = 8088
                self.match(PlSqlParser.SEQUENCE)
                pass
            elif token in [PlSqlParser.MERGE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8089
                self.match(PlSqlParser.MERGE)
                self.state = 8090
                self.match(PlSqlParser.VIEW)
                pass
            elif token in [PlSqlParser.ON]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8091
                self.match(PlSqlParser.ON)
                self.state = 8092
                self.match(PlSqlParser.COMMIT)
                self.state = 8093
                self.match(PlSqlParser.REFRESH)
                pass
            elif token in [PlSqlParser.QUERY]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8094
                self.match(PlSqlParser.QUERY)
                self.state = 8095
                self.match(PlSqlParser.REWRITE)
                pass
            elif token in [PlSqlParser.READ]:
                self.enterOuterAlt(localctx, 14)
                self.state = 8096
                self.match(PlSqlParser.READ)
                pass
            elif token in [PlSqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 8097
                self.match(PlSqlParser.REFERENCES)
                pass
            elif token in [PlSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 8098
                self.match(PlSqlParser.SELECT)
                pass
            elif token in [PlSqlParser.TRANSLATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 8099
                self.match(PlSqlParser.TRANSLATE)
                self.state = 8100
                self.match(PlSqlParser.SQL)
                pass
            elif token in [PlSqlParser.UNDER]:
                self.enterOuterAlt(localctx, 18)
                self.state = 8101
                self.match(PlSqlParser.UNDER)
                pass
            elif token in [PlSqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 8102
                self.match(PlSqlParser.UPDATE)
                pass
            elif token in [PlSqlParser.USE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 8103
                self.match(PlSqlParser.USE)
                pass
            elif token in [PlSqlParser.WRITE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 8104
                self.match(PlSqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class System_privilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(PlSqlParser.PRIVILEGES, 0)

        def ADVISOR(self):
            return self.getToken(PlSqlParser.ADVISOR, 0)

        def ADMINISTER(self):
            return self.getToken(PlSqlParser.ADMINISTER, 0)

        def SQL(self):
            return self.getToken(PlSqlParser.SQL, 0)

        def TUNING(self):
            return self.getToken(PlSqlParser.TUNING, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def ANY(self):
            return self.getToken(PlSqlParser.ANY, 0)

        def PROFILE(self):
            return self.getToken(PlSqlParser.PROFILE, 0)

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def MANAGEMENT(self):
            return self.getToken(PlSqlParser.MANAGEMENT, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def CLUSTER(self):
            return self.getToken(PlSqlParser.CLUSTER, 0)

        def CONTEXT(self):
            return self.getToken(PlSqlParser.CONTEXT, 0)

        def EXEMPT(self):
            return self.getToken(PlSqlParser.EXEMPT, 0)

        def REDACTION(self):
            return self.getToken(PlSqlParser.REDACTION, 0)

        def POLICY(self):
            return self.getToken(PlSqlParser.POLICY, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def LINK(self):
            return self.getToken(PlSqlParser.LINK, 0)

        def PUBLIC(self):
            return self.getToken(PlSqlParser.PUBLIC, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def CONNECT(self):
            return self.getToken(PlSqlParser.CONNECT, 0)

        def SESSION(self):
            return self.getToken(PlSqlParser.SESSION, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def ANALYZE(self):
            return self.getToken(PlSqlParser.ANALYZE, 0)

        def DICTIONARY(self):
            return self.getToken(PlSqlParser.DICTIONARY, 0)

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def DIRECTORY(self):
            return self.getToken(PlSqlParser.DIRECTORY, 0)

        def EDITION(self):
            return self.getToken(PlSqlParser.EDITION, 0)

        def FLASHBACK(self):
            return self.getToken(PlSqlParser.FLASHBACK, 0)

        def ARCHIVE(self):
            return self.getToken(PlSqlParser.ARCHIVE, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def INDEXTYPE(self):
            return self.getToken(PlSqlParser.INDEXTYPE, 0)

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def JOB(self):
            return self.getToken(PlSqlParser.JOB, 0)

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def CLASS(self):
            return self.getToken(PlSqlParser.CLASS, 0)

        def PROGRAM(self):
            return self.getToken(PlSqlParser.PROGRAM, 0)

        def MANAGE(self):
            return self.getToken(PlSqlParser.MANAGE, 0)

        def SCHEDULER(self):
            return self.getToken(PlSqlParser.SCHEDULER, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def LIBRARY(self):
            return self.getToken(PlSqlParser.LIBRARY, 0)

        def LOGMINING(self):
            return self.getToken(PlSqlParser.LOGMINING, 0)

        def MATERIALIZED(self):
            return self.getToken(PlSqlParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PlSqlParser.VIEW, 0)

        def QUERY(self):
            return self.getToken(PlSqlParser.QUERY, 0)

        def REWRITE(self):
            return self.getToken(PlSqlParser.REWRITE, 0)

        def GLOBAL(self):
            return self.getToken(PlSqlParser.GLOBAL, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def REFRESH(self):
            return self.getToken(PlSqlParser.REFRESH, 0)

        def MINING(self):
            return self.getToken(PlSqlParser.MINING, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def SELECT(self):
            return self.getToken(PlSqlParser.SELECT, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def CUBE(self):
            return self.getToken(PlSqlParser.CUBE, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def MEASURE(self):
            return self.getToken(PlSqlParser.MEASURE, 0)

        def FOLDER(self):
            return self.getToken(PlSqlParser.FOLDER, 0)

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def BUILD(self):
            return self.getToken(PlSqlParser.BUILD, 0)

        def PROCESS(self):
            return self.getToken(PlSqlParser.PROCESS, 0)

        def OPERATOR(self):
            return self.getToken(PlSqlParser.OPERATOR, 0)

        def OUTLINE(self):
            return self.getToken(PlSqlParser.OUTLINE, 0)

        def PLUGGABLE(self):
            return self.getToken(PlSqlParser.PLUGGABLE, 0)

        def CONTAINER(self):
            return self.getToken(PlSqlParser.CONTAINER, 0)

        def ROLE(self):
            return self.getToken(PlSqlParser.ROLE, 0)

        def GRANT(self):
            return self.getToken(PlSqlParser.GRANT, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def RESTRICTED(self):
            return self.getToken(PlSqlParser.RESTRICTED, 0)

        def RESOURCE(self):
            return self.getToken(PlSqlParser.RESOURCE, 0)

        def COST(self):
            return self.getToken(PlSqlParser.COST, 0)

        def TRANSLATION(self):
            return self.getToken(PlSqlParser.TRANSLATION, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)

        def SYNONYM(self):
            return self.getToken(PlSqlParser.SYNONYM, 0)

        def BACKUP(self):
            return self.getToken(PlSqlParser.BACKUP, 0)

        def LOCK(self):
            return self.getToken(PlSqlParser.LOCK, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def TABLESPACE(self):
            return self.getToken(PlSqlParser.TABLESPACE, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def USER(self):
            return self.getToken(PlSqlParser.USER, 0)

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def AUDIT(self):
            return self.getToken(PlSqlParser.AUDIT, 0)

        def BECOME(self):
            return self.getToken(PlSqlParser.BECOME, 0)

        def CHANGE(self):
            return self.getToken(PlSqlParser.CHANGE, 0)

        def NOTIFICATION(self):
            return self.getToken(PlSqlParser.NOTIFICATION, 0)

        def ACCESS(self):
            return self.getToken(PlSqlParser.ACCESS, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def TRANSACTION(self):
            return self.getToken(PlSqlParser.TRANSACTION, 0)

        def PRIVILEGE(self):
            return self.getToken(PlSqlParser.PRIVILEGE, 0)

        def INHERIT(self):
            return self.getToken(PlSqlParser.INHERIT, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def SYSGUID(self):
            return self.getToken(PlSqlParser.SYSGUID, 0)

        def PURGE(self):
            return self.getToken(PlSqlParser.PURGE, 0)

        def DBA_RECYCLEBIN(self):
            return self.getToken(PlSqlParser.DBA_RECYCLEBIN, 0)

        def RESUMABLE(self):
            return self.getToken(PlSqlParser.RESUMABLE, 0)

        def SYSBACKUP(self):
            return self.getToken(PlSqlParser.SYSBACKUP, 0)

        def SYSDBA(self):
            return self.getToken(PlSqlParser.SYSDBA, 0)

        def SYSDG(self):
            return self.getToken(PlSqlParser.SYSDG, 0)

        def SYSKM(self):
            return self.getToken(PlSqlParser.SYSKM, 0)

        def SYSOPER(self):
            return self.getToken(PlSqlParser.SYSOPER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_system_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_privilege" ):
                listener.enterSystem_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_privilege" ):
                listener.exitSystem_privilege(self)




    def system_privilege(self):

        localctx = PlSqlParser.System_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_system_privilege)
        self._la = 0 # Token type
        try:
            self.state = 8433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8107
                self.match(PlSqlParser.ALL)
                self.state = 8108
                self.match(PlSqlParser.PRIVILEGES)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8109
                self.match(PlSqlParser.ADVISOR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8110
                self.match(PlSqlParser.ADMINISTER)
                self.state = 8112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8111
                    self.match(PlSqlParser.ANY)


                self.state = 8114
                self.match(PlSqlParser.SQL)
                self.state = 8115
                self.match(PlSqlParser.TUNING)
                self.state = 8116
                self.match(PlSqlParser.SET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8117
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8118
                self.match(PlSqlParser.ANY)
                self.state = 8119
                self.match(PlSqlParser.SQL)
                self.state = 8120
                self.match(PlSqlParser.PROFILE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8121
                self.match(PlSqlParser.ADMINISTER)
                self.state = 8122
                self.match(PlSqlParser.SQL)
                self.state = 8123
                self.match(PlSqlParser.MANAGEMENT)
                self.state = 8124
                self.match(PlSqlParser.OBJECT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8125
                self.match(PlSqlParser.CREATE)
                self.state = 8127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8126
                    self.match(PlSqlParser.ANY)


                self.state = 8129
                self.match(PlSqlParser.CLUSTER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8130
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8131
                self.match(PlSqlParser.ANY)
                self.state = 8132
                self.match(PlSqlParser.CLUSTER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8133
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8134
                self.match(PlSqlParser.ANY)
                self.state = 8135
                self.match(PlSqlParser.CONTEXT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8136
                self.match(PlSqlParser.EXEMPT)
                self.state = 8137
                self.match(PlSqlParser.REDACTION)
                self.state = 8138
                self.match(PlSqlParser.POLICY)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8139
                self.match(PlSqlParser.ALTER)
                self.state = 8140
                self.match(PlSqlParser.DATABASE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8141
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PUBLIC:
                    self.state = 8142
                    self.match(PlSqlParser.PUBLIC)


                self.state = 8145
                self.match(PlSqlParser.DATABASE)
                self.state = 8146
                self.match(PlSqlParser.LINK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8147
                self.match(PlSqlParser.DROP)
                self.state = 8148
                self.match(PlSqlParser.PUBLIC)
                self.state = 8149
                self.match(PlSqlParser.DATABASE)
                self.state = 8150
                self.match(PlSqlParser.LINK)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8151
                self.match(PlSqlParser.DEBUG)
                self.state = 8152
                self.match(PlSqlParser.CONNECT)
                self.state = 8153
                self.match(PlSqlParser.SESSION)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 8154
                self.match(PlSqlParser.DEBUG)
                self.state = 8155
                self.match(PlSqlParser.ANY)
                self.state = 8156
                self.match(PlSqlParser.PROCEDURE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 8157
                self.match(PlSqlParser.ANALYZE)
                self.state = 8158
                self.match(PlSqlParser.ANY)
                self.state = 8159
                self.match(PlSqlParser.DICTIONARY)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 8160
                self.match(PlSqlParser.CREATE)
                self.state = 8162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8161
                    self.match(PlSqlParser.ANY)


                self.state = 8164
                self.match(PlSqlParser.DIMENSION)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 8165
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8166
                self.match(PlSqlParser.ANY)
                self.state = 8167
                self.match(PlSqlParser.DIMENSION)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 8168
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8169
                self.match(PlSqlParser.ANY)
                self.state = 8170
                self.match(PlSqlParser.DIRECTORY)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 8171
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8172
                self.match(PlSqlParser.ANY)
                self.state = 8173
                self.match(PlSqlParser.EDITION)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 8174
                self.match(PlSqlParser.FLASHBACK)
                self.state = 8179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ARCHIVE]:
                    self.state = 8175
                    self.match(PlSqlParser.ARCHIVE)
                    self.state = 8176
                    self.match(PlSqlParser.ADMINISTER)
                    pass
                elif token in [PlSqlParser.ANY]:
                    self.state = 8177
                    self.match(PlSqlParser.ANY)
                    self.state = 8178
                    self.match(PlSqlParser.TABLE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 8181
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8182
                self.match(PlSqlParser.ANY)
                self.state = 8183
                self.match(PlSqlParser.INDEX)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 8184
                self.match(PlSqlParser.CREATE)
                self.state = 8186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8185
                    self.match(PlSqlParser.ANY)


                self.state = 8188
                self.match(PlSqlParser.INDEXTYPE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 8189
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.EXECUTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8190
                self.match(PlSqlParser.ANY)
                self.state = 8191
                self.match(PlSqlParser.INDEXTYPE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 8192
                self.match(PlSqlParser.CREATE)
                self.state = 8194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY or _la==PlSqlParser.EXTERNAL:
                    self.state = 8193
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ANY or _la==PlSqlParser.EXTERNAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 8196
                self.match(PlSqlParser.JOB)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 8197
                self.match(PlSqlParser.EXECUTE)
                self.state = 8198
                self.match(PlSqlParser.ANY)
                self.state = 8199
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CLASS or _la==PlSqlParser.PROGRAM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 8200
                self.match(PlSqlParser.MANAGE)
                self.state = 8201
                self.match(PlSqlParser.SCHEDULER)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 8202
                self.match(PlSqlParser.ADMINISTER)
                self.state = 8203
                self.match(PlSqlParser.KEY)
                self.state = 8204
                self.match(PlSqlParser.MANAGEMENT)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 8205
                self.match(PlSqlParser.CREATE)
                self.state = 8207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8206
                    self.match(PlSqlParser.ANY)


                self.state = 8209
                self.match(PlSqlParser.LIBRARY)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 8210
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.EXECUTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8211
                self.match(PlSqlParser.ANY)
                self.state = 8212
                self.match(PlSqlParser.LIBRARY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 8213
                self.match(PlSqlParser.LOGMINING)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 8214
                self.match(PlSqlParser.CREATE)
                self.state = 8216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8215
                    self.match(PlSqlParser.ANY)


                self.state = 8218
                self.match(PlSqlParser.MATERIALIZED)
                self.state = 8219
                self.match(PlSqlParser.VIEW)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 8220
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8221
                self.match(PlSqlParser.ANY)
                self.state = 8222
                self.match(PlSqlParser.MATERIALIZED)
                self.state = 8223
                self.match(PlSqlParser.VIEW)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 8225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.GLOBAL:
                    self.state = 8224
                    self.match(PlSqlParser.GLOBAL)


                self.state = 8227
                self.match(PlSqlParser.QUERY)
                self.state = 8228
                self.match(PlSqlParser.REWRITE)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 8229
                self.match(PlSqlParser.ON)
                self.state = 8230
                self.match(PlSqlParser.COMMIT)
                self.state = 8231
                self.match(PlSqlParser.REFRESH)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 8232
                self.match(PlSqlParser.CREATE)
                self.state = 8234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8233
                    self.match(PlSqlParser.ANY)


                self.state = 8236
                self.match(PlSqlParser.MINING)
                self.state = 8237
                self.match(PlSqlParser.MODEL)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 8238
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.COMMENT or _la==PlSqlParser.DROP or _la==PlSqlParser.SELECT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8239
                self.match(PlSqlParser.ANY)
                self.state = 8240
                self.match(PlSqlParser.MINING)
                self.state = 8241
                self.match(PlSqlParser.MODEL)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 8242
                self.match(PlSqlParser.CREATE)
                self.state = 8244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8243
                    self.match(PlSqlParser.ANY)


                self.state = 8246
                self.match(PlSqlParser.CUBE)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 8247
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.SELECT or _la==PlSqlParser.UPDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8248
                self.match(PlSqlParser.ANY)
                self.state = 8249
                self.match(PlSqlParser.CUBE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 8250
                self.match(PlSqlParser.CREATE)
                self.state = 8252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8251
                    self.match(PlSqlParser.ANY)


                self.state = 8254
                self.match(PlSqlParser.MEASURE)
                self.state = 8255
                self.match(PlSqlParser.FOLDER)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 8256
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.DROP or _la==PlSqlParser.INSERT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8257
                self.match(PlSqlParser.ANY)
                self.state = 8258
                self.match(PlSqlParser.MEASURE)
                self.state = 8259
                self.match(PlSqlParser.FOLDER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 8260
                self.match(PlSqlParser.CREATE)
                self.state = 8262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8261
                    self.match(PlSqlParser.ANY)


                self.state = 8264
                self.match(PlSqlParser.CUBE)
                self.state = 8265
                self.match(PlSqlParser.DIMENSION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 8266
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DELETE or _la==PlSqlParser.DROP or _la==PlSqlParser.INSERT or _la==PlSqlParser.SELECT or _la==PlSqlParser.UPDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8267
                self.match(PlSqlParser.ANY)
                self.state = 8268
                self.match(PlSqlParser.CUBE)
                self.state = 8269
                self.match(PlSqlParser.DIMENSION)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 8270
                self.match(PlSqlParser.CREATE)
                self.state = 8272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8271
                    self.match(PlSqlParser.ANY)


                self.state = 8274
                self.match(PlSqlParser.CUBE)
                self.state = 8275
                self.match(PlSqlParser.BUILD)
                self.state = 8276
                self.match(PlSqlParser.PROCESS)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 8277
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DROP or _la==PlSqlParser.UPDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8278
                self.match(PlSqlParser.ANY)
                self.state = 8279
                self.match(PlSqlParser.CUBE)
                self.state = 8280
                self.match(PlSqlParser.BUILD)
                self.state = 8281
                self.match(PlSqlParser.PROCESS)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 8282
                self.match(PlSqlParser.CREATE)
                self.state = 8284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8283
                    self.match(PlSqlParser.ANY)


                self.state = 8286
                self.match(PlSqlParser.OPERATOR)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 8287
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.EXECUTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8288
                self.match(PlSqlParser.ANY)
                self.state = 8289
                self.match(PlSqlParser.OPERATOR)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 8290
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8291
                self.match(PlSqlParser.ANY)
                self.state = 8292
                self.match(PlSqlParser.OUTLINE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 8293
                self.match(PlSqlParser.CREATE)
                self.state = 8294
                self.match(PlSqlParser.PLUGGABLE)
                self.state = 8295
                self.match(PlSqlParser.DATABASE)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 8296
                self.match(PlSqlParser.SET)
                self.state = 8297
                self.match(PlSqlParser.CONTAINER)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 8298
                self.match(PlSqlParser.CREATE)
                self.state = 8300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8299
                    self.match(PlSqlParser.ANY)


                self.state = 8302
                self.match(PlSqlParser.PROCEDURE)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 8303
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.EXECUTE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8304
                self.match(PlSqlParser.ANY)
                self.state = 8305
                self.match(PlSqlParser.PROCEDURE)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 8306
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8307
                self.match(PlSqlParser.PROFILE)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 8308
                self.match(PlSqlParser.CREATE)
                self.state = 8309
                self.match(PlSqlParser.ROLE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 8310
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.GRANT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8311
                self.match(PlSqlParser.ANY)
                self.state = 8312
                self.match(PlSqlParser.ROLE)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 8313
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8314
                self.match(PlSqlParser.ROLLBACK)
                self.state = 8315
                self.match(PlSqlParser.SEGMENT)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 8316
                self.match(PlSqlParser.CREATE)
                self.state = 8318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8317
                    self.match(PlSqlParser.ANY)


                self.state = 8320
                self.match(PlSqlParser.SEQUENCE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 8321
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.SELECT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8322
                self.match(PlSqlParser.ANY)
                self.state = 8323
                self.match(PlSqlParser.SEQUENCE)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 8324
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.RESTRICTED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8325
                self.match(PlSqlParser.SESSION)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 8326
                self.match(PlSqlParser.ALTER)
                self.state = 8327
                self.match(PlSqlParser.RESOURCE)
                self.state = 8328
                self.match(PlSqlParser.COST)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 8329
                self.match(PlSqlParser.CREATE)
                self.state = 8331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8330
                    self.match(PlSqlParser.ANY)


                self.state = 8333
                self.match(PlSqlParser.SQL)
                self.state = 8334
                self.match(PlSqlParser.TRANSLATION)
                self.state = 8335
                self.match(PlSqlParser.PROFILE)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 8336
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.USE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8337
                self.match(PlSqlParser.ANY)
                self.state = 8338
                self.match(PlSqlParser.SQL)
                self.state = 8339
                self.match(PlSqlParser.TRANSLATION)
                self.state = 8340
                self.match(PlSqlParser.PROFILE)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 8341
                self.match(PlSqlParser.TRANSLATE)
                self.state = 8342
                self.match(PlSqlParser.ANY)
                self.state = 8343
                self.match(PlSqlParser.SQL)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 8344
                self.match(PlSqlParser.CREATE)
                self.state = 8346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8345
                    self.match(PlSqlParser.ANY)


                self.state = 8348
                self.match(PlSqlParser.SYNONYM)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 8349
                self.match(PlSqlParser.DROP)
                self.state = 8350
                self.match(PlSqlParser.ANY)
                self.state = 8351
                self.match(PlSqlParser.SYNONYM)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 8352
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8353
                self.match(PlSqlParser.PUBLIC)
                self.state = 8354
                self.match(PlSqlParser.SYNONYM)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 8355
                self.match(PlSqlParser.CREATE)
                self.state = 8357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8356
                    self.match(PlSqlParser.ANY)


                self.state = 8359
                self.match(PlSqlParser.TABLE)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 8360
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.BACKUP or _la==PlSqlParser.COMMENT or _la==PlSqlParser.DELETE or _la==PlSqlParser.DROP or _la==PlSqlParser.INSERT or _la==PlSqlParser.LOCK or _la==PlSqlParser.READ or _la==PlSqlParser.SELECT or _la==PlSqlParser.UPDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8361
                self.match(PlSqlParser.ANY)
                self.state = 8362
                self.match(PlSqlParser.TABLE)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 8363
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP or _la==PlSqlParser.MANAGE or _la==PlSqlParser.UNLIMITED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8364
                self.match(PlSqlParser.TABLESPACE)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 8365
                self.match(PlSqlParser.CREATE)
                self.state = 8367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8366
                    self.match(PlSqlParser.ANY)


                self.state = 8369
                self.match(PlSqlParser.TRIGGER)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 8370
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8371
                self.match(PlSqlParser.ANY)
                self.state = 8372
                self.match(PlSqlParser.TRIGGER)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 8373
                self.match(PlSqlParser.ADMINISTER)
                self.state = 8374
                self.match(PlSqlParser.DATABASE)
                self.state = 8375
                self.match(PlSqlParser.TRIGGER)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 8376
                self.match(PlSqlParser.CREATE)
                self.state = 8378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8377
                    self.match(PlSqlParser.ANY)


                self.state = 8380
                self.match(PlSqlParser.TYPE)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 8381
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.DROP or _la==PlSqlParser.EXECUTE or _la==PlSqlParser.UNDER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8382
                self.match(PlSqlParser.ANY)
                self.state = 8383
                self.match(PlSqlParser.TYPE)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 8384
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALTER or _la==PlSqlParser.CREATE or _la==PlSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8385
                self.match(PlSqlParser.USER)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 8386
                self.match(PlSqlParser.CREATE)
                self.state = 8388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8387
                    self.match(PlSqlParser.ANY)


                self.state = 8390
                self.match(PlSqlParser.VIEW)
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 8391
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DROP or _la==PlSqlParser.MERGE or _la==PlSqlParser.UNDER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8392
                self.match(PlSqlParser.ANY)
                self.state = 8393
                self.match(PlSqlParser.VIEW)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 8394
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ANALYZE or _la==PlSqlParser.AUDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8395
                self.match(PlSqlParser.ANY)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 8396
                self.match(PlSqlParser.BECOME)
                self.state = 8397
                self.match(PlSqlParser.USER)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 8398
                self.match(PlSqlParser.CHANGE)
                self.state = 8399
                self.match(PlSqlParser.NOTIFICATION)
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 8400
                self.match(PlSqlParser.EXEMPT)
                self.state = 8401
                self.match(PlSqlParser.ACCESS)
                self.state = 8402
                self.match(PlSqlParser.POLICY)
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 8403
                self.match(PlSqlParser.FORCE)
                self.state = 8405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ANY:
                    self.state = 8404
                    self.match(PlSqlParser.ANY)


                self.state = 8407
                self.match(PlSqlParser.TRANSACTION)
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 8408
                self.match(PlSqlParser.GRANT)
                self.state = 8409
                self.match(PlSqlParser.ANY)
                self.state = 8411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OBJECT:
                    self.state = 8410
                    self.match(PlSqlParser.OBJECT)


                self.state = 8413
                self.match(PlSqlParser.PRIVILEGE)
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 8414
                self.match(PlSqlParser.INHERIT)
                self.state = 8415
                self.match(PlSqlParser.ANY)
                self.state = 8416
                self.match(PlSqlParser.PRIVILEGES)
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 8417
                self.match(PlSqlParser.KEEP)
                self.state = 8418
                self.match(PlSqlParser.DATE)
                self.state = 8419
                self.match(PlSqlParser.TIME)
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 8420
                self.match(PlSqlParser.KEEP)
                self.state = 8421
                self.match(PlSqlParser.SYSGUID)
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 8422
                self.match(PlSqlParser.PURGE)
                self.state = 8423
                self.match(PlSqlParser.DBA_RECYCLEBIN)
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 8424
                self.match(PlSqlParser.RESUMABLE)
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 8425
                self.match(PlSqlParser.SELECT)
                self.state = 8426
                self.match(PlSqlParser.ANY)
                self.state = 8427
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DICTIONARY or _la==PlSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 8428
                self.match(PlSqlParser.SYSBACKUP)
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 8429
                self.match(PlSqlParser.SYSDBA)
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 8430
                self.match(PlSqlParser.SYSDG)
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 8431
                self.match(PlSqlParser.SYSKM)
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 8432
                self.match(PlSqlParser.SYSOPER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DAY)
            else:
                return self.getToken(PlSqlParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.HOUR)
            else:
                return self.getToken(PlSqlParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MINUTE)
            else:
                return self.getToken(PlSqlParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SECOND)
            else:
                return self.getToken(PlSqlParser.SECOND, i)

        def general_element_part(self):
            return self.getTypedRuleContext(PlSqlParser.General_element_partContext,0)


        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(PlSqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PlSqlParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(PlSqlParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(PlSqlParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = PlSqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 8497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8435
                self.match(PlSqlParser.TIMESTAMP)
                self.state = 8438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 8436
                    self.quoted_string()
                    pass
                elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                    self.state = 8437
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1234,self._ctx)
                if la_ == 1:
                    self.state = 8440
                    self.match(PlSqlParser.AT)
                    self.state = 8441
                    self.match(PlSqlParser.TIME)
                    self.state = 8442
                    self.match(PlSqlParser.ZONE)
                    self.state = 8443
                    self.quoted_string()


                pass
            elif token in [PlSqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8446
                self.match(PlSqlParser.INTERVAL)
                self.state = 8450
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 8447
                    self.quoted_string()
                    pass
                elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                    self.state = 8448
                    self.bind_variable()
                    pass
                elif token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.DELIMITED_ID, PlSqlParser.INTRODUCER, PlSqlParser.REGULAR_ID]:
                    self.state = 8449
                    self.general_element_part()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8452
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DAY or _la==PlSqlParser.HOUR or _la==PlSqlParser.MINUTE or _la==PlSqlParser.MONTH or _la==PlSqlParser.SECOND or _la==PlSqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1239,self._ctx)
                if la_ == 1:
                    self.state = 8453
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 8456
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER]:
                        self.state = 8454
                        self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                        self.state = 8455
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 8458
                        self.match(PlSqlParser.COMMA)
                        self.state = 8461
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.UNSIGNED_INTEGER]:
                            self.state = 8459
                            self.match(PlSqlParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                            self.state = 8460
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 8465
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 8483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1243,self._ctx)
                if la_ == 1:
                    self.state = 8468
                    self.match(PlSqlParser.TO)
                    self.state = 8481
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.DAY]:
                        self.state = 8469
                        self.match(PlSqlParser.DAY)
                        pass
                    elif token in [PlSqlParser.HOUR]:
                        self.state = 8470
                        self.match(PlSqlParser.HOUR)
                        pass
                    elif token in [PlSqlParser.MINUTE]:
                        self.state = 8471
                        self.match(PlSqlParser.MINUTE)
                        pass
                    elif token in [PlSqlParser.SECOND]:
                        self.state = 8472
                        self.match(PlSqlParser.SECOND)
                        self.state = 8479
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1241,self._ctx)
                        if la_ == 1:
                            self.state = 8473
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 8476
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [PlSqlParser.UNSIGNED_INTEGER]:
                                self.state = 8474
                                self.match(PlSqlParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                                self.state = 8475
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 8478
                            self.match(PlSqlParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8485
                self.numeric()
                pass
            elif token in [PlSqlParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8486
                self.match(PlSqlParser.DATE)
                self.state = 8487
                self.quoted_string()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8488
                self.quoted_string()
                pass
            elif token in [PlSqlParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8489
                self.match(PlSqlParser.NULL)
                pass
            elif token in [PlSqlParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8490
                self.match(PlSqlParser.TRUE)
                pass
            elif token in [PlSqlParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8491
                self.match(PlSqlParser.FALSE)
                pass
            elif token in [PlSqlParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8492
                self.match(PlSqlParser.DBTIMEZONE)
                pass
            elif token in [PlSqlParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8493
                self.match(PlSqlParser.SESSIONTIMEZONE)
                pass
            elif token in [PlSqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8494
                self.match(PlSqlParser.MINVALUE)
                pass
            elif token in [PlSqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8495
                self.match(PlSqlParser.MAXVALUE)
                pass
            elif token in [PlSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8496
                self.match(PlSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = PlSqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8499
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.UNSIGNED_INTEGER or _la==PlSqlParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(PlSqlParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)




    def numeric_negative(self):

        localctx = PlSqlParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8501
            self.match(PlSqlParser.MINUS_SIGN)
            self.state = 8502
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)




    def quoted_string(self):

        localctx = PlSqlParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8504
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.NATIONAL_CHAR_STRING_LIT or _la==PlSqlParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def INTRODUCER(self):
            return self.getToken(PlSqlParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(PlSqlParser.Char_set_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PlSqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTRODUCER:
                self.state = 8506
                self.match(PlSqlParser.INTRODUCER)
                self.state = 8507
                self.char_set_name()


            self.state = 8510
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(PlSqlParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)




    def id_expression(self):

        localctx = PlSqlParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_id_expression)
        try:
            self.state = 8514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.A_LETTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHARACTER, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHR, PlSqlParser.C_LETTER, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPLETE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.CORRUPT_XID, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATABASE, PlSqlParser.DATA, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.ID, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INT, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.KEY, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LINK, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINIMUM, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR_CS, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NEXT, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NO, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.OPERATOR, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUTER, PlSqlParser.OUT, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVEN, PlSqlParser.POSITIVE, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.PROGRAM, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REF, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT_CACHE, PlSqlParser.RESULT, PlSqlParser.RETURNING, PlSqlParser.RETURN, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROWID, PlSqlParser.ROW, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVEPOINT, PlSqlParser.SAVE, PlSqlParser.SCHEMACHECK, PlSqlParser.SCHEMA, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.SQL, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT_ID, PlSqlParser.STATEMENT, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STORE, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.SYSDATE, PlSqlParser.TEMPORARY, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIME, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USERS, PlSqlParser.USER, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR2, PlSqlParser.VARCHAR, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSIONS, PlSqlParser.VERSION, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.XMLTYPE, PlSqlParser.XML, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.COVAR_, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.REGR_, PlSqlParser.ROW_NUMBER, PlSqlParser.SUBSTR, PlSqlParser.TRIM, PlSqlParser.SUM, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.VARIANCE, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8512
                self.regular_id()
                pass
            elif token in [PlSqlParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8513
                self.match(PlSqlParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)




    def outer_join_sign(self):

        localctx = PlSqlParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8516
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 8517
            self.match(PlSqlParser.PLUS_SIGN)
            self.state = 8518
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(PlSqlParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(PlSqlParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(PlSqlParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(PlSqlParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(PlSqlParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(PlSqlParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(PlSqlParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(PlSqlParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(PlSqlParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(PlSqlParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(PlSqlParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(PlSqlParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(PlSqlParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(PlSqlParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(PlSqlParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(PlSqlParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(PlSqlParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(PlSqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(PlSqlParser.BOTH, 0)

        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def BYTE(self):
            return self.getToken(PlSqlParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(PlSqlParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(PlSqlParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(PlSqlParser.CAST, 0)

        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(PlSqlParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(PlSqlParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(PlSqlParser.CHR, 0)

        def CLOB(self):
            return self.getToken(PlSqlParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(PlSqlParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PlSqlParser.CLUSTER, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PlSqlParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(PlSqlParser.COMPATIBILITY, 0)

        def COMPLETE(self):
            return self.getToken(PlSqlParser.COMPLETE, 0)

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def CONSTANT(self):
            return self.getToken(PlSqlParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PlSqlParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(PlSqlParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(PlSqlParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(PlSqlParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(PlSqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(PlSqlParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(PlSqlParser.COST, 0)

        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(PlSqlParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(PlSqlParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(PlSqlParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(PlSqlParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(PlSqlParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(PlSqlParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(PlSqlParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(PlSqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(PlSqlParser.DECIMAL, 0)

        def DECOMPOSE(self):
            return self.getToken(PlSqlParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(PlSqlParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(PlSqlParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PlSqlParser.DEFINER, 0)

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def DETERMINISTIC(self):
            return self.getToken(PlSqlParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(PlSqlParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(PlSqlParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(PlSqlParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(PlSqlParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(PlSqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(PlSqlParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(PlSqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(PlSqlParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(PlSqlParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(PlSqlParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def EXISTS(self):
            return self.getToken(PlSqlParser.EXISTS, 0)

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(PlSqlParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(PlSqlParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(PlSqlParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(PlSqlParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(PlSqlParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(PlSqlParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(PlSqlParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def FULL(self):
            return self.getToken(PlSqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(PlSqlParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(PlSqlParser.HASH, 0)

        def HIDE(self):
            return self.getToken(PlSqlParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(PlSqlParser.HOUR, 0)

        def ID(self):
            return self.getToken(PlSqlParser.ID, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(PlSqlParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PlSqlParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(PlSqlParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(PlSqlParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(PlSqlParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(PlSqlParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(PlSqlParser.INLINE, 0)

        def INNER(self):
            return self.getToken(PlSqlParser.INNER, 0)

        def INOUT(self):
            return self.getToken(PlSqlParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(PlSqlParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(PlSqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(PlSqlParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(PlSqlParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(PlSqlParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(PlSqlParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(PlSqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def KEY(self):
            return self.getToken(PlSqlParser.KEY, 0)

        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(PlSqlParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(PlSqlParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(PlSqlParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(PlSqlParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(PlSqlParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(PlSqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(PlSqlParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(PlSqlParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def LINK(self):
            return self.getToken(PlSqlParser.LINK, 0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(PlSqlParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(PlSqlParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(PlSqlParser.LOGON, 0)

        def LONG(self):
            return self.getToken(PlSqlParser.LONG, 0)

        def LOOP(self):
            return self.getToken(PlSqlParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(PlSqlParser.MAIN, 0)

        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(PlSqlParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def MINIMUM(self):
            return self.getToken(PlSqlParser.MINIMUM, 0)

        def MINUTE(self):
            return self.getToken(PlSqlParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(PlSqlParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(PlSqlParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def NAN(self):
            return self.getToken(PlSqlParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(PlSqlParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(PlSqlParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(PlSqlParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(PlSqlParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(PlSqlParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def NEXT(self):
            return self.getToken(PlSqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(PlSqlParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(PlSqlParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(PlSqlParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(PlSqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(PlSqlParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(PlSqlParser.NVARCHAR2, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def OID(self):
            return self.getToken(PlSqlParser.OID, 0)

        def OLD(self):
            return self.getToken(PlSqlParser.OLD, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(PlSqlParser.OPERATOR, 0)

        def ORADATA(self):
            return self.getToken(PlSqlParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(PlSqlParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(PlSqlParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(PlSqlParser.OUTER, 0)

        def OVER(self):
            return self.getToken(PlSqlParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(PlSqlParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(PlSqlParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(PlSqlParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(PlSqlParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PlSqlParser.PASSING, 0)

        def PATH(self):
            return self.getToken(PlSqlParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(PlSqlParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(PlSqlParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(PlSqlParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(PlSqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(PlSqlParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(PlSqlParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(PlSqlParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(PlSqlParser.PRESENT, 0)

        def PRIOR(self):
            return self.getToken(PlSqlParser.PRIOR, 0)

        def PROGRAM(self):
            return self.getToken(PlSqlParser.PROGRAM, 0)

        def RAISE(self):
            return self.getToken(PlSqlParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def RAW(self):
            return self.getToken(PlSqlParser.RAW, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def REAL(self):
            return self.getToken(PlSqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(PlSqlParser.RECORD, 0)

        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(PlSqlParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(PlSqlParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(PlSqlParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(PlSqlParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(PlSqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PlSqlParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PlSqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def RULES(self):
            return self.getToken(PlSqlParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(PlSqlParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(PlSqlParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(PlSqlParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(PlSqlParser.SCN, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def SEED(self):
            return self.getToken(PlSqlParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(PlSqlParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(PlSqlParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(PlSqlParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(PlSqlParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(PlSqlParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(PlSqlParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def SETS(self):
            return self.getToken(PlSqlParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(PlSqlParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(PlSqlParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(PlSqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(PlSqlParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(PlSqlParser.SINGLE, 0)

        def SKIP_(self):
            return self.getToken(PlSqlParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(PlSqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(PlSqlParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(PlSqlParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def SQL(self):
            return self.getToken(PlSqlParser.SQL, 0)

        def SQLDATA(self):
            return self.getToken(PlSqlParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(PlSqlParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(PlSqlParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(PlSqlParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(PlSqlParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(PlSqlParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(PlSqlParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(PlSqlParser.STRING, 0)

        def STORE(self):
            return self.getToken(PlSqlParser.STORE, 0)

        def SUBSTR(self):
            return self.getToken(PlSqlParser.SUBSTR, 0)

        def SUBMULTISET(self):
            return self.getToken(PlSqlParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(PlSqlParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def SUBTYPE(self):
            return self.getToken(PlSqlParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(PlSqlParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(PlSqlParser.SUSPEND, 0)

        def SYSDATE(self):
            return self.getToken(PlSqlParser.SYSDATE, 0)

        def TEMPORARY(self):
            return self.getToken(PlSqlParser.TEMPORARY, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(PlSqlParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(PlSqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(PlSqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(PlSqlParser.TIMEZONE_REGION, 0)

        def TRAILING(self):
            return self.getToken(PlSqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(PlSqlParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(PlSqlParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PlSqlParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(PlSqlParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(PlSqlParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(PlSqlParser.UROWID, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def USER(self):
            return self.getToken(PlSqlParser.USER, 0)

        def USERS(self):
            return self.getToken(PlSqlParser.USERS, 0)

        def VALIDATE(self):
            return self.getToken(PlSqlParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(PlSqlParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(PlSqlParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(PlSqlParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(PlSqlParser.VARYING, 0)

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(PlSqlParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(PlSqlParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(PlSqlParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(PlSqlParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(PlSqlParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(PlSqlParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def XML(self):
            return self.getToken(PlSqlParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(PlSqlParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PlSqlParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(PlSqlParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(PlSqlParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(PlSqlParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PlSqlParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PlSqlParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PlSqlParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PlSqlParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PlSqlParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(PlSqlParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(PlSqlParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PlSqlParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PlSqlParser.XMLTABLE, 0)

        def XMLTYPE(self):
            return self.getToken(PlSqlParser.XMLTYPE, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def YES(self):
            return self.getToken(PlSqlParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(PlSqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(PlSqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(PlSqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(PlSqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(PlSqlParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(PlSqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(PlSqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(PlSqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(PlSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(PlSqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(PlSqlParser.RANK, 0)

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(PlSqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(PlSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(PlSqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(PlSqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(PlSqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(PlSqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(PlSqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(PlSqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(PlSqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(PlSqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(PlSqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(PlSqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(PlSqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)




    def regular_id(self):

        localctx = PlSqlParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8520
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.CALL - 64)) | (1 << (PlSqlParser.CANONICAL - 64)) | (1 << (PlSqlParser.CASCADE - 64)) | (1 << (PlSqlParser.CAST - 64)) | (1 << (PlSqlParser.CHARACTER - 64)) | (1 << (PlSqlParser.CHAR - 64)) | (1 << (PlSqlParser.CHAR_CS - 64)) | (1 << (PlSqlParser.CHR - 64)) | (1 << (PlSqlParser.C_LETTER - 64)) | (1 << (PlSqlParser.CLOB - 64)) | (1 << (PlSqlParser.CLOSE - 64)) | (1 << (PlSqlParser.CLUSTER - 64)) | (1 << (PlSqlParser.COLLECT - 64)) | (1 << (PlSqlParser.COLUMNS - 64)) | (1 << (PlSqlParser.COMMENT - 64)) | (1 << (PlSqlParser.COMMIT - 64)) | (1 << (PlSqlParser.COMMITTED - 64)) | (1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPLETE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 129)) | (1 << (PlSqlParser.DBTIMEZONE - 129)) | (1 << (PlSqlParser.DDL - 129)) | (1 << (PlSqlParser.DEBUG - 129)) | (1 << (PlSqlParser.DEC - 129)) | (1 << (PlSqlParser.DECIMAL - 129)) | (1 << (PlSqlParser.DECOMPOSE - 129)) | (1 << (PlSqlParser.DECREMENT - 129)) | (1 << (PlSqlParser.DEFAULTS - 129)) | (1 << (PlSqlParser.DEFERRED - 129)) | (1 << (PlSqlParser.DEFINER - 129)) | (1 << (PlSqlParser.DELETE - 129)) | (1 << (PlSqlParser.DETERMINISTIC - 129)) | (1 << (PlSqlParser.DIMENSION - 129)) | (1 << (PlSqlParser.DISABLE - 129)) | (1 << (PlSqlParser.DISASSOCIATE - 129)) | (1 << (PlSqlParser.DOCUMENT - 129)) | (1 << (PlSqlParser.DOUBLE - 129)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 129)) | (1 << (PlSqlParser.EACH - 129)) | (1 << (PlSqlParser.ELEMENT - 129)) | (1 << (PlSqlParser.EMPTY - 129)) | (1 << (PlSqlParser.ENABLE - 129)) | (1 << (PlSqlParser.ENCODING - 129)) | (1 << (PlSqlParser.ENTITYESCAPING - 129)) | (1 << (PlSqlParser.ERR - 129)) | (1 << (PlSqlParser.ERRORS - 129)) | (1 << (PlSqlParser.ESCAPE - 129)) | (1 << (PlSqlParser.EVALNAME - 129)) | (1 << (PlSqlParser.EXCEPTION - 129)) | (1 << (PlSqlParser.EXCEPTION_INIT - 129)) | (1 << (PlSqlParser.EXCEPTIONS - 129)) | (1 << (PlSqlParser.EXCLUDE - 129)) | (1 << (PlSqlParser.EXECUTE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (PlSqlParser.EXISTS - 193)) | (1 << (PlSqlParser.EXIT - 193)) | (1 << (PlSqlParser.EXPLAIN - 193)) | (1 << (PlSqlParser.EXTERNAL - 193)) | (1 << (PlSqlParser.EXTRACT - 193)) | (1 << (PlSqlParser.FAILURE - 193)) | (1 << (PlSqlParser.FINAL - 193)) | (1 << (PlSqlParser.FIRST - 193)) | (1 << (PlSqlParser.FIRST_VALUE - 193)) | (1 << (PlSqlParser.FLOAT - 193)) | (1 << (PlSqlParser.FOLLOWING - 193)) | (1 << (PlSqlParser.FOLLOWS - 193)) | (1 << (PlSqlParser.FORALL - 193)) | (1 << (PlSqlParser.FORCE - 193)) | (1 << (PlSqlParser.FULL - 193)) | (1 << (PlSqlParser.FUNCTION - 193)) | (1 << (PlSqlParser.GROUPING - 193)) | (1 << (PlSqlParser.HASH - 193)) | (1 << (PlSqlParser.HIDE - 193)) | (1 << (PlSqlParser.HOUR - 193)) | (1 << (PlSqlParser.ID - 193)) | (1 << (PlSqlParser.IGNORE - 193)) | (1 << (PlSqlParser.IMMEDIATE - 193)) | (1 << (PlSqlParser.INCLUDE - 193)) | (1 << (PlSqlParser.INCLUDING - 193)) | (1 << (PlSqlParser.INCREMENT - 193)) | (1 << (PlSqlParser.INDENT - 193)) | (1 << (PlSqlParser.INDEXED - 193)) | (1 << (PlSqlParser.INDICATOR - 193)) | (1 << (PlSqlParser.INDICES - 193)) | (1 << (PlSqlParser.INFINITE - 193)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (PlSqlParser.INLINE - 261)) | (1 << (PlSqlParser.INNER - 261)) | (1 << (PlSqlParser.INOUT - 261)) | (1 << (PlSqlParser.INSTANTIABLE - 261)) | (1 << (PlSqlParser.INSTEAD - 261)) | (1 << (PlSqlParser.INTEGER - 261)) | (1 << (PlSqlParser.INTERVAL - 261)) | (1 << (PlSqlParser.INT - 261)) | (1 << (PlSqlParser.INVALIDATE - 261)) | (1 << (PlSqlParser.ISOLATION - 261)) | (1 << (PlSqlParser.ITERATE - 261)) | (1 << (PlSqlParser.JAVA - 261)) | (1 << (PlSqlParser.JOIN - 261)) | (1 << (PlSqlParser.KEEP - 261)) | (1 << (PlSqlParser.KEY - 261)) | (1 << (PlSqlParser.LANGUAGE - 261)) | (1 << (PlSqlParser.LAST - 261)) | (1 << (PlSqlParser.LAST_VALUE - 261)) | (1 << (PlSqlParser.LEADING - 261)) | (1 << (PlSqlParser.LEFT - 261)) | (1 << (PlSqlParser.LEVEL - 261)) | (1 << (PlSqlParser.LIBRARY - 261)) | (1 << (PlSqlParser.LIKE2 - 261)) | (1 << (PlSqlParser.LIKE4 - 261)) | (1 << (PlSqlParser.LIKEC - 261)) | (1 << (PlSqlParser.LIMIT - 261)) | (1 << (PlSqlParser.LINK - 261)) | (1 << (PlSqlParser.LOCAL - 261)) | (1 << (PlSqlParser.LOCKED - 261)) | (1 << (PlSqlParser.LOG - 261)) | (1 << (PlSqlParser.LOGOFF - 261)) | (1 << (PlSqlParser.LOGON - 261)) | (1 << (PlSqlParser.LONG - 261)) | (1 << (PlSqlParser.LOOP - 261)) | (1 << (PlSqlParser.MAIN - 261)) | (1 << (PlSqlParser.MAP - 261)) | (1 << (PlSqlParser.MATCHED - 261)) | (1 << (PlSqlParser.MAXVALUE - 261)))) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (PlSqlParser.MEASURES - 325)) | (1 << (PlSqlParser.MEMBER - 325)) | (1 << (PlSqlParser.MERGE - 325)) | (1 << (PlSqlParser.MINIMUM - 325)) | (1 << (PlSqlParser.MINUTE - 325)) | (1 << (PlSqlParser.MINVALUE - 325)) | (1 << (PlSqlParser.MLSLABEL - 325)) | (1 << (PlSqlParser.MODEL - 325)) | (1 << (PlSqlParser.MODIFY - 325)) | (1 << (PlSqlParser.MONTH - 325)) | (1 << (PlSqlParser.MULTISET - 325)) | (1 << (PlSqlParser.NAME - 325)) | (1 << (PlSqlParser.NAN - 325)) | (1 << (PlSqlParser.NATURAL - 325)) | (1 << (PlSqlParser.NATURALN - 325)) | (1 << (PlSqlParser.NAV - 325)) | (1 << (PlSqlParser.NCHAR_CS - 325)) | (1 << (PlSqlParser.NCHAR - 325)) | (1 << (PlSqlParser.NCLOB - 325)) | (1 << (PlSqlParser.NESTED - 325)) | (1 << (PlSqlParser.NEW - 325)) | (1 << (PlSqlParser.NEXT - 325)) | (1 << (PlSqlParser.NOAUDIT - 325)) | (1 << (PlSqlParser.NOCOPY - 325)) | (1 << (PlSqlParser.NOCYCLE - 325)) | (1 << (PlSqlParser.NOENTITYESCAPING - 325)) | (1 << (PlSqlParser.NONE - 325)) | (1 << (PlSqlParser.NO - 325)) | (1 << (PlSqlParser.NOSCHEMACHECK - 325)) | (1 << (PlSqlParser.NULLS - 325)) | (1 << (PlSqlParser.NUMBER - 325)) | (1 << (PlSqlParser.NUMERIC - 325)) | (1 << (PlSqlParser.NVARCHAR2 - 325)) | (1 << (PlSqlParser.OBJECT - 325)) | (1 << (PlSqlParser.OFF - 325)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (PlSqlParser.OID - 390)) | (1 << (PlSqlParser.OLD - 390)) | (1 << (PlSqlParser.ONLY - 390)) | (1 << (PlSqlParser.OPEN - 390)) | (1 << (PlSqlParser.OPERATOR - 390)) | (1 << (PlSqlParser.ORADATA - 390)) | (1 << (PlSqlParser.ORDINALITY - 390)) | (1 << (PlSqlParser.OSERROR - 390)) | (1 << (PlSqlParser.OUTER - 390)) | (1 << (PlSqlParser.OUT - 390)) | (1 << (PlSqlParser.OVER - 390)) | (1 << (PlSqlParser.OVERRIDING - 390)) | (1 << (PlSqlParser.PACKAGE - 390)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 390)) | (1 << (PlSqlParser.PARAMETERS - 390)) | (1 << (PlSqlParser.PARENT - 390)) | (1 << (PlSqlParser.PARTITION - 390)) | (1 << (PlSqlParser.PASSING - 390)) | (1 << (PlSqlParser.PATH - 390)) | (1 << (PlSqlParser.PIPELINED - 390)) | (1 << (PlSqlParser.PLAN - 390)) | (1 << (PlSqlParser.PLS_INTEGER - 390)) | (1 << (PlSqlParser.POSITIVEN - 390)) | (1 << (PlSqlParser.POSITIVE - 390)) | (1 << (PlSqlParser.PRAGMA - 390)) | (1 << (PlSqlParser.PRECEDING - 390)) | (1 << (PlSqlParser.PRECISION - 390)) | (1 << (PlSqlParser.PRESENT - 390)) | (1 << (PlSqlParser.PRIOR - 390)) | (1 << (PlSqlParser.PROGRAM - 390)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.RAISE - 458)) | (1 << (PlSqlParser.RANGE - 458)) | (1 << (PlSqlParser.RAW - 458)) | (1 << (PlSqlParser.READ - 458)) | (1 << (PlSqlParser.REAL - 458)) | (1 << (PlSqlParser.RECORD - 458)) | (1 << (PlSqlParser.REFERENCE - 458)) | (1 << (PlSqlParser.REFERENCING - 458)) | (1 << (PlSqlParser.REF - 458)) | (1 << (PlSqlParser.REJECT - 458)) | (1 << (PlSqlParser.RELIES_ON - 458)) | (1 << (PlSqlParser.RENAME - 458)) | (1 << (PlSqlParser.REPLACE - 458)) | (1 << (PlSqlParser.RESPECT - 458)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 458)) | (1 << (PlSqlParser.RESULT_CACHE - 458)) | (1 << (PlSqlParser.RESULT - 458)) | (1 << (PlSqlParser.RETURNING - 458)) | (1 << (PlSqlParser.RETURN - 458)) | (1 << (PlSqlParser.REUSE - 458)) | (1 << (PlSqlParser.REVERSE - 458)) | (1 << (PlSqlParser.RIGHT - 458)) | (1 << (PlSqlParser.ROLLBACK - 458)) | (1 << (PlSqlParser.ROLLUP - 458)) | (1 << (PlSqlParser.ROWID - 458)) | (1 << (PlSqlParser.ROW - 458)) | (1 << (PlSqlParser.ROWS - 458)) | (1 << (PlSqlParser.RULES - 458)) | (1 << (PlSqlParser.SAMPLE - 458)) | (1 << (PlSqlParser.SAVEPOINT - 458)) | (1 << (PlSqlParser.SAVE - 458)) | (1 << (PlSqlParser.SCHEMACHECK - 458)) | (1 << (PlSqlParser.SCHEMA - 458)) | (1 << (PlSqlParser.SCN - 458)) | (1 << (PlSqlParser.SECOND - 458)) | (1 << (PlSqlParser.SEED - 458)) | (1 << (PlSqlParser.SEGMENT - 458)))) != 0) or ((((_la - 523)) & ~0x3f) == 0 and ((1 << (_la - 523)) & ((1 << (PlSqlParser.SELF - 523)) | (1 << (PlSqlParser.SEQUENTIAL - 523)) | (1 << (PlSqlParser.SERIALIZABLE - 523)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 523)) | (1 << (PlSqlParser.SERVERERROR - 523)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 523)) | (1 << (PlSqlParser.SET - 523)) | (1 << (PlSqlParser.SETS - 523)) | (1 << (PlSqlParser.SETTINGS - 523)) | (1 << (PlSqlParser.SHOW - 523)) | (1 << (PlSqlParser.SHUTDOWN - 523)) | (1 << (PlSqlParser.SIBLINGS - 523)) | (1 << (PlSqlParser.SIGNTYPE - 523)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 523)) | (1 << (PlSqlParser.SINGLE - 523)) | (1 << (PlSqlParser.SKIP_ - 523)) | (1 << (PlSqlParser.SMALLINT - 523)) | (1 << (PlSqlParser.SNAPSHOT - 523)) | (1 << (PlSqlParser.SOME - 523)) | (1 << (PlSqlParser.SPECIFICATION - 523)) | (1 << (PlSqlParser.SQLDATA - 523)) | (1 << (PlSqlParser.SQLERROR - 523)) | (1 << (PlSqlParser.SQL - 523)) | (1 << (PlSqlParser.STANDALONE - 523)) | (1 << (PlSqlParser.STARTUP - 523)) | (1 << (PlSqlParser.STATEMENT_ID - 523)) | (1 << (PlSqlParser.STATEMENT - 523)) | (1 << (PlSqlParser.STATIC - 523)) | (1 << (PlSqlParser.STATISTICS - 523)) | (1 << (PlSqlParser.STORE - 523)) | (1 << (PlSqlParser.STRING - 523)) | (1 << (PlSqlParser.SUBMULTISET - 523)) | (1 << (PlSqlParser.SUBPARTITION - 523)) | (1 << (PlSqlParser.SUBSTITUTABLE - 523)) | (1 << (PlSqlParser.SUBTYPE - 523)) | (1 << (PlSqlParser.SUCCESS - 523)) | (1 << (PlSqlParser.SUSPEND - 523)) | (1 << (PlSqlParser.SYSDATE - 523)) | (1 << (PlSqlParser.TEMPORARY - 523)))) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP - 591)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 591)) | (1 << (PlSqlParser.TIME - 591)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 591)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 591)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 591)) | (1 << (PlSqlParser.TIMEZONE_REGION - 591)) | (1 << (PlSqlParser.TRAILING - 591)) | (1 << (PlSqlParser.TRANSACTION - 591)) | (1 << (PlSqlParser.TRANSLATE - 591)) | (1 << (PlSqlParser.TREAT - 591)) | (1 << (PlSqlParser.TRIGGER - 591)) | (1 << (PlSqlParser.TRUNCATE - 591)) | (1 << (PlSqlParser.TYPE - 591)) | (1 << (PlSqlParser.UNBOUNDED - 591)) | (1 << (PlSqlParser.UNDER - 591)) | (1 << (PlSqlParser.UNLIMITED - 591)) | (1 << (PlSqlParser.UNTIL - 591)) | (1 << (PlSqlParser.UPDATED - 591)) | (1 << (PlSqlParser.UPSERT - 591)) | (1 << (PlSqlParser.UROWID - 591)) | (1 << (PlSqlParser.USERS - 591)) | (1 << (PlSqlParser.USER - 591)) | (1 << (PlSqlParser.USE - 591)) | (1 << (PlSqlParser.VALIDATE - 591)) | (1 << (PlSqlParser.VALUE - 591)) | (1 << (PlSqlParser.VARCHAR2 - 591)) | (1 << (PlSqlParser.VARCHAR - 591)) | (1 << (PlSqlParser.VARIABLE - 591)) | (1 << (PlSqlParser.VARRAY - 591)) | (1 << (PlSqlParser.VARYING - 591)) | (1 << (PlSqlParser.VERSIONS - 591)) | (1 << (PlSqlParser.VERSION - 591)) | (1 << (PlSqlParser.WAIT - 591)) | (1 << (PlSqlParser.WARNING - 591)) | (1 << (PlSqlParser.WELLFORMED - 591)) | (1 << (PlSqlParser.WHENEVER - 591)) | (1 << (PlSqlParser.WHILE - 591)) | (1 << (PlSqlParser.WITHIN - 591)))) != 0) or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (PlSqlParser.WORK - 656)) | (1 << (PlSqlParser.WRITE - 656)) | (1 << (PlSqlParser.XMLAGG - 656)) | (1 << (PlSqlParser.XMLATTRIBUTES - 656)) | (1 << (PlSqlParser.XMLCAST - 656)) | (1 << (PlSqlParser.XMLCOLATTVAL - 656)) | (1 << (PlSqlParser.XMLELEMENT - 656)) | (1 << (PlSqlParser.XMLEXISTS - 656)) | (1 << (PlSqlParser.XMLFOREST - 656)) | (1 << (PlSqlParser.XMLNAMESPACES - 656)) | (1 << (PlSqlParser.XMLPARSE - 656)) | (1 << (PlSqlParser.XMLPI - 656)) | (1 << (PlSqlParser.XMLQUERY - 656)) | (1 << (PlSqlParser.XMLROOT - 656)) | (1 << (PlSqlParser.XMLSERIALIZE - 656)) | (1 << (PlSqlParser.XMLTABLE - 656)) | (1 << (PlSqlParser.XMLTYPE - 656)) | (1 << (PlSqlParser.XML - 656)) | (1 << (PlSqlParser.YEAR - 656)) | (1 << (PlSqlParser.YES - 656)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 656)) | (1 << (PlSqlParser.ZONE - 656)) | (1 << (PlSqlParser.PREDICTION - 656)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 656)) | (1 << (PlSqlParser.PREDICTION_COST - 656)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 656)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 656)) | (1 << (PlSqlParser.PREDICTION_SET - 656)) | (1 << (PlSqlParser.CUME_DIST - 656)) | (1 << (PlSqlParser.DENSE_RANK - 656)) | (1 << (PlSqlParser.LISTAGG - 656)) | (1 << (PlSqlParser.PERCENT_RANK - 656)) | (1 << (PlSqlParser.PERCENTILE_CONT - 656)) | (1 << (PlSqlParser.PERCENTILE_DISC - 656)) | (1 << (PlSqlParser.RANK - 656)) | (1 << (PlSqlParser.AVG - 656)) | (1 << (PlSqlParser.CORR - 656)) | (1 << (PlSqlParser.COVAR_ - 656)) | (1 << (PlSqlParser.LAG - 656)) | (1 << (PlSqlParser.LEAD - 656)) | (1 << (PlSqlParser.MAX - 656)) | (1 << (PlSqlParser.MEDIAN - 656)) | (1 << (PlSqlParser.MIN - 656)) | (1 << (PlSqlParser.NTILE - 656)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 656)) | (1 << (PlSqlParser.REGR_ - 656)) | (1 << (PlSqlParser.ROW_NUMBER - 656)) | (1 << (PlSqlParser.SUBSTR - 656)) | (1 << (PlSqlParser.TRIM - 656)) | (1 << (PlSqlParser.SUM - 656)) | (1 << (PlSqlParser.STDDEV - 656)) | (1 << (PlSqlParser.VAR_ - 656)) | (1 << (PlSqlParser.VARIANCE - 656)))) != 0) or _la==PlSqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHR(self):
            return self.getToken(PlSqlParser.CHR, 0)

        def DECODE(self):
            return self.getToken(PlSqlParser.DECODE, 0)

        def SUBSTR(self):
            return self.getToken(PlSqlParser.SUBSTR, 0)

        def TO_CHAR(self):
            return self.getToken(PlSqlParser.TO_CHAR, 0)

        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_string_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function_name" ):
                listener.enterString_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function_name" ):
                listener.exitString_function_name(self)




    def string_function_name(self):

        localctx = PlSqlParser.String_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_string_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8522
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CHR or ((((_la - 695)) & ~0x3f) == 0 and ((1 << (_la - 695)) & ((1 << (PlSqlParser.DECODE - 695)) | (1 << (PlSqlParser.SUBSTR - 695)) | (1 << (PlSqlParser.TO_CHAR - 695)) | (1 << (PlSqlParser.TRIM - 695)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def NVL(self):
            return self.getToken(PlSqlParser.NVL, 0)

        def ROUND(self):
            return self.getToken(PlSqlParser.ROUND, 0)

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function_name" ):
                listener.enterNumeric_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function_name" ):
                listener.exitNumeric_function_name(self)




    def numeric_function_name(self):

        localctx = PlSqlParser.Numeric_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_numeric_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8524
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.COUNT or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (PlSqlParser.AVG - 692)) | (1 << (PlSqlParser.NVL - 692)) | (1 << (PlSqlParser.ROUND - 692)) | (1 << (PlSqlParser.SUM - 692)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[416] = self.logical_expression_sempred
        self._predicates[418] = self.relational_expression_sempred
        self._predicates[423] = self.concatenation_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logical_expression_sempred(self, localctx:Logical_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relational_expression_sempred(self, localctx:Relational_expressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def concatenation_sempred(self, localctx:ConcatenationContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




